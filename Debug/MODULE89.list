
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c14  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b40  08011eb0  08011eb0  00021eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080139f0  080139f0  000239f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080139f8  080139f8  000239f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080139fc  080139fc  000239fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08013a00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  08013a78  00030078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  08013ad8  000300d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001064  24000138  08013b38  00030138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400119c  08013b38  0003119c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039e9a  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005596  00000000  00000000  0006a000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d28  00000000  00000000  0006f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b70  00000000  00000000  000712c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d5c1  00000000  00000000  00072e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002770a  00000000  00000000  000b03f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185231  00000000  00000000  000d7afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025cd2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082d4  00000000  00000000  0025cd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000138 	.word	0x24000138
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08011e94 	.word	0x08011e94

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400013c 	.word	0x2400013c
 80002d4:	08011e94 	.word	0x08011e94

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <updateChess>:
#include "QEI.h"
#include <math.h>

static chess_state chesss[NUM_CHESS];

void updateChess(int32_t row, int32_t column){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	chess_state * chess = &chesss[0];
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <updateChess+0x7c>)
 80005dc:	60fb      	str	r3, [r7, #12]
	chess->x_chess = find_x(row);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f836 	bl	8000650 <find_x>
 80005e4:	eeb0 7b40 	vmov.f64	d7, d0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	ed83 7b02 	vstr	d7, [r3, #8]
	chess->y_chess = find_y(column);
 80005ee:	6838      	ldr	r0, [r7, #0]
 80005f0:	f000 f86e 	bl	80006d0 <find_y>
 80005f4:	eeb0 7b40 	vmov.f64	d7, d0
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	ed83 7b04 	vstr	d7, [r3, #16]
	chess->r = find_radius(chess->x_chess, chess->y_chess);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	ed93 7b02 	vldr	d7, [r3, #8]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	ed93 6b04 	vldr	d6, [r3, #16]
 800060a:	eeb0 1b46 	vmov.f64	d1, d6
 800060e:	eeb0 0b47 	vmov.f64	d0, d7
 8000612:	f000 f89d 	bl	8000750 <find_radius>
 8000616:	eeb0 7b40 	vmov.f64	d7, d0
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	chess->degree_chess = find_degree(chess->x_chess, chess->y_chess);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	ed93 7b02 	vldr	d7, [r3, #8]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	ed93 6b04 	vldr	d6, [r3, #16]
 800062c:	eeb0 1b46 	vmov.f64	d1, d6
 8000630:	eeb0 0b47 	vmov.f64	d0, d7
 8000634:	f000 f8b4 	bl	80007a0 <find_degree>
 8000638:	eeb0 7b40 	vmov.f64	d7, d0
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	ed83 7b00 	vstr	d7, [r3]
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	24000158 	.word	0x24000158

08000650 <find_x>:

double find_x(int32_t row){
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if(row <= 4){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b04      	cmp	r3, #4
 800065c:	dc15      	bgt.n	800068a <find_x+0x3a>
		return (-((5 - row)*L)/8.00) + (s/2.00);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f1c3 0305 	rsb	r3, r3, #5
 8000664:	ee07 3a90 	vmov	s15, r3
 8000668:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800066c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80006c8 <find_x+0x78>
 8000670:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000674:	eeb1 6b47 	vneg.f64	d6, d7
 8000678:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 800067c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000680:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000684:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000688:	e015      	b.n	80006b6 <find_x+0x66>
	}
	else if(row >= 5){
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b04      	cmp	r3, #4
 800068e:	dd12      	ble.n	80006b6 <find_x+0x66>
		return (((row - 4)*L)/8.00) - (s/2.00);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3b04      	subs	r3, #4
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800069c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80006c8 <find_x+0x78>
 80006a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006a4:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80006a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ac:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 80006b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80006b4:	e7ff      	b.n	80006b6 <find_x+0x66>
	}
}
 80006b6:	eeb0 0b47 	vmov.f64	d0, d7
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	f3af 8000 	nop.w
 80006c8:	00000000 	.word	0x00000000
 80006cc:	40790000 	.word	0x40790000

080006d0 <find_y>:

double find_y(int32_t column){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if(column <= 4){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b04      	cmp	r3, #4
 80006dc:	dc15      	bgt.n	800070a <find_y+0x3a>
		return (-((5 - column)*L)/8.00) + (s/2.00);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f1c3 0305 	rsb	r3, r3, #5
 80006e4:	ee07 3a90 	vmov	s15, r3
 80006e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006ec:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000748 <find_y+0x78>
 80006f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006f4:	eeb1 6b47 	vneg.f64	d6, d7
 80006f8:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80006fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000700:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000704:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000708:	e015      	b.n	8000736 <find_y+0x66>
	}
	else if(column >= 5){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b04      	cmp	r3, #4
 800070e:	dd12      	ble.n	8000736 <find_y+0x66>
		return (((column - 4)*L)/8.00) - (s/2.00);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b04      	subs	r3, #4
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000748 <find_y+0x78>
 8000720:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000724:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8000728:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800072c:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000730:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000734:	e7ff      	b.n	8000736 <find_y+0x66>
	}
}
 8000736:	eeb0 0b47 	vmov.f64	d0, d7
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	f3af 8000 	nop.w
 8000748:	00000000 	.word	0x00000000
 800074c:	40790000 	.word	0x40790000

08000750 <find_radius>:

double find_radius(double x, double y){
 8000750:	b580      	push	{r7, lr}
 8000752:	ed2d 8b02 	vpush	{d8}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	ed87 0b02 	vstr	d0, [r7, #8]
 800075e:	ed87 1b00 	vstr	d1, [r7]
	return sqrt(pow(x, 2) + pow(y, 2));
 8000762:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000766:	ed97 0b02 	vldr	d0, [r7, #8]
 800076a:	f010 f83d 	bl	80107e8 <pow>
 800076e:	eeb0 8b40 	vmov.f64	d8, d0
 8000772:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000776:	ed97 0b00 	vldr	d0, [r7]
 800077a:	f010 f835 	bl	80107e8 <pow>
 800077e:	eeb0 7b40 	vmov.f64	d7, d0
 8000782:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000786:	eeb0 0b47 	vmov.f64	d0, d7
 800078a:	f010 fb85 	bl	8010e98 <sqrt>
 800078e:	eeb0 7b40 	vmov.f64	d7, d0
}
 8000792:	eeb0 0b47 	vmov.f64	d0, d7
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	ecbd 8b02 	vpop	{d8}
 800079e:	bd80      	pop	{r7, pc}

080007a0 <find_degree>:

//ref 0 degree
double find_degree(double x, double y){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80007aa:	ed87 1b00 	vstr	d1, [r7]
	double d = atan2(y, x) * (180.00/M_PI);
 80007ae:	ed97 1b02 	vldr	d1, [r7, #8]
 80007b2:	ed97 0b00 	vldr	d0, [r7]
 80007b6:	f010 fb6b 	bl	8010e90 <atan2>
 80007ba:	eeb0 7b40 	vmov.f64	d7, d0
 80007be:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000830 <find_degree+0x90>
 80007c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007c6:	ed87 7b04 	vstr	d7, [r7, #16]
	if(x < 0 && y < 0){return 360.00 + d;}
 80007ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80007ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d6:	d50d      	bpl.n	80007f4 <find_degree+0x54>
 80007d8:	ed97 7b00 	vldr	d7, [r7]
 80007dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e4:	d506      	bpl.n	80007f4 <find_degree+0x54>
 80007e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80007ea:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000838 <find_degree+0x98>
 80007ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007f2:	e016      	b.n	8000822 <find_degree+0x82>
	else if(x >= 0 && y < 0){return 360.00 + d;}
 80007f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80007f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000800:	db0d      	blt.n	800081e <find_degree+0x7e>
 8000802:	ed97 7b00 	vldr	d7, [r7]
 8000806:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080e:	d506      	bpl.n	800081e <find_degree+0x7e>
 8000810:	ed97 7b04 	vldr	d7, [r7, #16]
 8000814:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000838 <find_degree+0x98>
 8000818:	ee37 7b06 	vadd.f64	d7, d7, d6
 800081c:	e001      	b.n	8000822 <find_degree+0x82>
	else{return d;}
 800081e:	ed97 7b04 	vldr	d7, [r7, #16]
//    double d = atan(y/x)*(180.00/M_PI);
//    if(x >= 0 && y >= 0){return d;}
//    else if(x < 0 && y >= 0){return 180.00 + d;}
//    else if(x < 0 && y < 0){return 180.00 + d;}
//    else if(x >= 0 && y < 0){return 360.00 + d;}
}
 8000822:	eeb0 0b47 	vmov.f64	d0, d7
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	f3af 8000 	nop.w
 8000830:	1a63c1f8 	.word	0x1a63c1f8
 8000834:	404ca5dc 	.word	0x404ca5dc
 8000838:	00000000 	.word	0x00000000
 800083c:	40768000 	.word	0x40768000

08000840 <get_degree_chess>:

double get_degree_chess(){ //ref
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
	chess_state * chess = &chesss[0];
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <get_degree_chess+0x24>)
 8000848:	607b      	str	r3, [r7, #4]
	return chess->degree_chess;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000850:	ec43 2b17 	vmov	d7, r2, r3
}
 8000854:	eeb0 0b47 	vmov.f64	d0, d7
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	24000158 	.word	0x24000158

08000868 <get_radius_circle>:

double get_radius_circle(){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
	chess_state * chess = &chesss[0];
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <get_radius_circle+0x24>)
 8000870:	607b      	str	r3, [r7, #4]
	return chess->r;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000878:	ec43 2b17 	vmov	d7, r2, r3
}
 800087c:	eeb0 0b47 	vmov.f64	d0, d7
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	24000158 	.word	0x24000158

08000890 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 8000890:	b480      	push	{r7}
 8000892:	b08b      	sub	sp, #44	; 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	61f8      	str	r0, [r7, #28]
 8000898:	ed87 0a06 	vstr	s0, [r7, #24]
 800089c:	edc7 0a05 	vstr	s1, [r7, #20]
 80008a0:	ed87 1a04 	vstr	s2, [r7, #16]
 80008a4:	edc7 1a03 	vstr	s3, [r7, #12]
 80008a8:	ed87 2a02 	vstr	s4, [r7, #8]
 80008ac:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	222c      	movs	r2, #44	; 0x2c
 80008b4:	fb02 f303 	mul.w	r3, r2, r3
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <setupPID+0x64>)
 80008ba:	4413      	add	r3, r2
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	69fa      	ldr	r2, [r7, #28]
 80008c2:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	611a      	str	r2, [r3, #16]
}
 80008e8:	bf00      	nop
 80008ea:	372c      	adds	r7, #44	; 0x2c
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	240001c8 	.word	0x240001c8

080008f8 <calculator>:


float calculator(int num, int input, float setpoint){
 80008f8:	b480      	push	{r7}
 80008fa:	b08b      	sub	sp, #44	; 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	222c      	movs	r2, #44	; 0x2c
 800090a:	fb02 f303 	mul.w	r3, r2, r3
 800090e:	4a50      	ldr	r2, [pc, #320]	; (8000a50 <calculator+0x158>)
 8000910:	4413      	add	r3, r2
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	ee07 3a90 	vmov	s15, r3
 800091a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800091e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 800092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800093c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	edd3 7a01 	vldr	s15, [r3, #4]
 800094c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	ed93 7a03 	vldr	s14, [r3, #12]
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800096c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000970:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800097a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000a54 <calculator+0x15c>
 800097e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	dd02      	ble.n	800098e <calculator+0x96>
		pid->integral = 4095;
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <calculator+0x160>)
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000994:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000a5c <calculator+0x164>
 8000998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800099c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a0:	d502      	bpl.n	80009a8 <calculator+0xb0>
		pid->integral = -4095;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	4a2e      	ldr	r2, [pc, #184]	; (8000a60 <calculator+0x168>)
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80009b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80009be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009c2:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80009cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80009d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d4:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 80009d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80009dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80009e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80009e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	ed93 7a07 	vldr	s14, [r3, #28]
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80009fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a06:	dd04      	ble.n	8000a12 <calculator+0x11a>
		pid->output = pid->Vmax;}
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	61da      	str	r2, [r3, #28]
 8000a10:	e00e      	b.n	8000a30 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	ed93 7a07 	vldr	s14, [r3, #28]
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a26:	d503      	bpl.n	8000a30 <calculator+0x138>
		pid->output = pid->Vmin;}
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	621a      	str	r2, [r3, #32]

	return pid->output;
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	ee07 3a90 	vmov	s15, r3
}
 8000a40:	eeb0 0a67 	vmov.f32	s0, s15
 8000a44:	372c      	adds	r7, #44	; 0x2c
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	240001c8 	.word	0x240001c8
 8000a54:	457ff000 	.word	0x457ff000
 8000a58:	457ff000 	.word	0x457ff000
 8000a5c:	c57ff000 	.word	0xc57ff000
 8000a60:	c57ff000 	.word	0xc57ff000

08000a64 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare use for encoder field

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	4802      	ldr	r0, [pc, #8]	; (8000a78 <enable_Encoder_OE+0x14>)
 8000a70:	f008 fab2 	bl	8008fd8 <HAL_GPIO_WritePin>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	58020400 	.word	0x58020400

08000a7c <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <Encoder_Start+0x4c>)
 8000a94:	4413      	add	r3, r2
 8000a96:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	68b8      	ldr	r0, [r7, #8]
 8000a9c:	f00c fa3c 	bl	800cf18 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 8000ab2:	f7ff ffd7 	bl	8000a64 <enable_Encoder_OE>
	Set_Encoder_Zero(num, OFFSET);
 8000ab6:	f247 5130 	movw	r1, #30000	; 0x7530
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f000 f822 	bl	8000b04 <Set_Encoder_Zero>
}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	240002a4 	.word	0x240002a4

08000acc <Get_Value_Encoder>:

uint32_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <Get_Value_Encoder+0x34>)
 8000ae0:	4413      	add	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	240002a4 	.word	0x240002a4

08000b04 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num, int value){
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	encoder_state * encoder = &encoders[num];
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <Set_Encoder_Zero+0x30>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, value);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	240002a4 	.word	0x240002a4

08000b38 <Stepper_Setup>:
#include "TASKSPACE.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2258      	movs	r2, #88	; 0x58
 8000b4a:	fb02 f303 	mul.w	r3, r2, r3
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <Stepper_Setup+0x54>)
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	8c3a      	ldrh	r2, [r7, #32]
 8000b70:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	return SERR_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	371c      	adds	r7, #28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	240002e0 	.word	0x240002e0

08000b90 <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d02d      	beq.n	8000bfc <Stepper_SetStepTimer+0x6c>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d028      	beq.n	8000bfc <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <Stepper_SetStepTimer+0x78>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc2:	d30b      	bcc.n	8000bdc <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <Stepper_SetStepTimer+0x7c>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	0bdb      	lsrs	r3, r3, #15
 8000bce:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	0852      	lsrs	r2, r2, #1
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	24000f04 	.word	0x24000f04
 8000c0c:	80008001 	.word	0x80008001

08000c10 <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2258      	movs	r2, #88	; 0x58
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <Stepper_DefaultState+0x60>)
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2201      	movs	r2, #1
 8000c32:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <Stepper_DefaultState+0x64>)
 8000c38:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	699a      	ldr	r2, [r3, #24]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f247 5230 	movw	r2, #30000	; 0x7530
 8000c48:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff ffa0 	bl	8000b90 <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	f00b ff12 	bl	800ca84 <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 8000c60:	f000 f9a2 	bl	8000fa8 <enable_Stepper_OE>

	return SERR_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	240002e0 	.word	0x240002e0
 8000c74:	00061a80 	.word	0x00061a80

08000c78 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, float_t value){
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2258      	movs	r2, #88	; 0x58
 8000c88:	fb02 f303 	mul.w	r3, r2, r3
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <Stepper_SetMinPosition+0x30>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	621a      	str	r2, [r3, #32]
	return SERR_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	240002e0 	.word	0x240002e0

08000cac <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, float_t value){
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2258      	movs	r2, #88	; 0x58
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <Stepper_SetMaxPosition+0x30>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	240002e0 	.word	0x240002e0

08000ce0 <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2258      	movs	r2, #88	; 0x58
 8000cf0:	fb02 f303 	mul.w	r3, r2, r3
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <Stepper_SetMinSpeed+0x30>)
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000cfa:	887a      	ldrh	r2, [r7, #2]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	619a      	str	r2, [r3, #24]
	return SERR_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	240002e0 	.word	0x240002e0

08000d14 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2258      	movs	r2, #88	; 0x58
 8000d24:	fb02 f303 	mul.w	r3, r2, r3
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <Stepper_SetMaxSpeed+0x30>)
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	61da      	str	r2, [r3, #28]
	return SERR_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	240002e0 	.word	0x240002e0

08000d48 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, float_t value){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	ed87 0a00 	vstr	s0, [r7]
	//value is mm or degree unit
	stepper_state * stepper = &steppers[num];
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2258      	movs	r2, #88	; 0x58
 8000d58:	fb02 f303 	mul.w	r3, r2, r3
 8000d5c:	4a34      	ldr	r2, [pc, #208]	; (8000e30 <Stepper_SetTraget+0xe8>)
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b80      	cmp	r3, #128	; 0x80
 8000d6c:	d05b      	beq.n	8000e26 <Stepper_SetTraget+0xde>
		if(value<stepper->minPosition){
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d74:	ed97 7a00 	vldr	s14, [r7]
 8000d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d80:	d517      	bpl.n	8000db2 <Stepper_SetTraget+0x6a>
			stepper->targetPosition_real = stepper->minPosition;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6a1a      	ldr	r2, [r3, #32]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->minPosition)*100.00) + OFFSET;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d90:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000e34 <Stepper_SetTraget+0xec>
 8000d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d98:	eeb0 0a67 	vmov.f32	s0, s15
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 fa97 	bl	80012d0 <joint_to_encoder>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f247 5330 	movw	r3, #30000	; 0x7530
 8000da8:	4413      	add	r3, r2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000dae:	2304      	movs	r3, #4
 8000db0:	e03a      	b.n	8000e28 <Stepper_SetTraget+0xe0>
		}
		else if (value>stepper->maxPosition) {
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000db8:	ed97 7a00 	vldr	s14, [r7]
 8000dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	dd17      	ble.n	8000df6 <Stepper_SetTraget+0xae>
			stepper->targetPosition_real = stepper->maxPosition;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->maxPosition)*100.00) + OFFSET;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000dd4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000e34 <Stepper_SetTraget+0xec>
 8000dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 fa75 	bl	80012d0 <joint_to_encoder>
 8000de6:	4602      	mov	r2, r0
 8000de8:	f247 5330 	movw	r3, #30000	; 0x7530
 8000dec:	4413      	add	r3, r2
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000df2:	2304      	movs	r3, #4
 8000df4:	e018      	b.n	8000e28 <Stepper_SetTraget+0xe0>
		}
		else {
			stepper->targetPosition_real = value; //input mm or degree unit
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, value*100.00) + OFFSET; //convert to encoder count
 8000dfc:	edd7 7a00 	vldr	s15, [r7]
 8000e00:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000e34 <Stepper_SetTraget+0xec>
 8000e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e08:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fa5f 	bl	80012d0 <joint_to_encoder>
 8000e12:	4602      	mov	r2, r0
 8000e14:	f247 5330 	movw	r3, #30000	; 0x7530
 8000e18:	4413      	add	r3, r2
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	6353      	str	r3, [r2, #52]	; 0x34
			stepper->status = SS_STARTING;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2204      	movs	r2, #4
 8000e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
	}
	return SERR_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	240002e0 	.word	0x240002e0
 8000e34:	42c80000 	.word	0x42c80000

08000e38 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2258      	movs	r2, #88	; 0x58
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <Stepper_SetSpeed+0x54>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	da04      	bge.n	8000e64 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	699a      	ldr	r2, [r3, #24]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e62:	e00c      	b.n	8000e7e <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dd04      	ble.n	8000e78 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	69da      	ldr	r2, [r3, #28]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e76:	e002      	b.n	8000e7e <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000e7e:	bf00      	nop
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	240002e0 	.word	0x240002e0

08000e90 <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681c      	ldr	r4, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe13 	bl	8000acc <Get_Value_Encoder>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff fd1b 	bl	80008f8 <calculator>
 8000ec2:	eef0 7a40 	vmov.f32	s15, s0
 8000ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eca:	ee17 3a90 	vmov	r3, s15
 8000ece:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	bfb8      	it	lt
 8000eda:	425b      	neglt	r3, r3
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f7ff ffaa 	bl	8000e38 <Stepper_SetSpeed>
	if(input>0){
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dd2c      	ble.n	8000f44 <Stepper_Direction+0xb4>
		if(stepper->number == 1){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d109      	bne.n	8000f06 <Stepper_Direction+0x76>
			stepper->status = SS_RUNNING_BACKWARD;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	8a1b      	ldrh	r3, [r3, #16]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 2){
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d10b      	bne.n	8000f26 <Stepper_Direction+0x96>
			stepper->status = SS_RUNNING_FORWARD;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2202      	movs	r2, #2
 8000f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	8a1b      	ldrh	r3, [r3, #16]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	0412      	lsls	r2, r2, #16
 8000f24:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 3){
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d138      	bne.n	8000fa0 <Stepper_Direction+0x110>
			stepper->status = SS_RUNNING_FORWARD;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2202      	movs	r2, #2
 8000f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	8a1b      	ldrh	r3, [r3, #16]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
			stepper->status = SS_RUNNING_BACKWARD;
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
		}
	}
}
 8000f42:	e02d      	b.n	8000fa0 <Stepper_Direction+0x110>
		if(stepper->number == 1){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d10b      	bne.n	8000f64 <Stepper_Direction+0xd4>
			stepper->status = SS_RUNNING_FORWARD;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	8a1b      	ldrh	r3, [r3, #16]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0412      	lsls	r2, r2, #16
 8000f62:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d109      	bne.n	8000f80 <Stepper_Direction+0xf0>
			stepper->status = SS_RUNNING_BACKWARD;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	8a1b      	ldrh	r3, [r3, #16]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d10b      	bne.n	8000fa0 <Stepper_Direction+0x110>
			stepper->status = SS_RUNNING_BACKWARD;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8a1b      	ldrh	r3, [r3, #16]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0412      	lsls	r2, r2, #16
 8000f9e:	619a      	str	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd90      	pop	{r4, r7, pc}

08000fa8 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb2:	4802      	ldr	r0, [pc, #8]	; (8000fbc <enable_Stepper_OE+0x14>)
 8000fb4:	f008 f810 	bl	8008fd8 <HAL_GPIO_WritePin>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	58020400 	.word	0x58020400

08000fc0 <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2258      	movs	r2, #88	; 0x58
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	4a17      	ldr	r2, [pc, #92]	; (8001030 <Stepper_runStep+0x70>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
	Stepper_currentPosition(num);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f8cc 	bl	8001174 <Stepper_currentPosition>
	Stepper_currentPosition_real(num);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f8e3 	bl	80011a8 <Stepper_currentPosition_real>
	if(stepper->status != SS_STOPPED){
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b80      	cmp	r3, #128	; 0x80
 8000fec:	d014      	beq.n	8001018 <Stepper_runStep+0x58>
//		enable_Stepper_OE();
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f00b fd43 	bl	800ca84 <HAL_TIM_PWM_Start>
		if(stepper->home_status){
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001004:	b25b      	sxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00e      	beq.n	8001028 <Stepper_runStep+0x68>
			Stepper_Direction(stepper);
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff ff40 	bl	8000e90 <Stepper_Direction>
			Stepper_SetStepTimer(stepper);
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f7ff fdbd 	bl	8000b90 <Stepper_SetStepTimer>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8001016:	e007      	b.n	8001028 <Stepper_runStep+0x68>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f00b fe3c 	bl	800cca0 <HAL_TIM_PWM_Stop>
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	240002e0 	.word	0x240002e0

08001034 <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2258      	movs	r2, #88	; 0x58
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <Stepper_StartStop+0x40>)
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d104      	bne.n	800105e <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2204      	movs	r2, #4
 8001058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 800105c:	e003      	b.n	8001066 <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	240002e0 	.word	0x240002e0

08001078 <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2258      	movs	r2, #88	; 0x58
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <Stepper_updateHome+0x50>)
 800108c:	4413      	add	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 0){
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001096:	b25b      	sxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d110      	bne.n	80010be <Stepper_updateHome+0x46>
		Set_Encoder_Zero(num, OFFSET);
 800109c:	f247 5130 	movw	r1, #30000	; 0x7530
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fd2f 	bl	8000b04 <Set_Encoder_Zero>
		stepper->home_status = value;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Stepper_DefaultState(num);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff fdad 	bl	8000c10 <Stepper_DefaultState>
		stepper -> status = SS_STARTING;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2204      	movs	r2, #4
 80010ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	240002e0 	.word	0x240002e0

080010cc <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper-> home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2258      	movs	r2, #88	; 0x58
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	4a23      	ldr	r2, [pc, #140]	; (8001170 <Stepper_SetHome+0xa4>)
 80010e2:	4413      	add	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]
	if(on){
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d03b      	beq.n	8001164 <Stepper_SetHome+0x98>
		if(num == 3){
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d11d      	bne.n	800112e <Stepper_SetHome+0x62>
			stepper-> home_status = 0;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	8a1b      	ldrh	r3, [r3, #16]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	0412      	lsls	r2, r2, #16
 8001108:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2219      	movs	r2, #25
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
		}
	}
}
 800112c:	e01a      	b.n	8001164 <Stepper_SetHome+0x98>
			stepper-> home_status = 0;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	8a1b      	ldrh	r3, [r3, #16]
 800113a:	b29a      	uxth	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2219      	movs	r2, #25
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	240002e0 	.word	0x240002e0

08001174 <Stepper_currentPosition>:

int32_t Stepper_currentPosition(int num){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	//update current real encoder of robot
	stepper_state * stepper = &steppers[num];
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2258      	movs	r2, #88	; 0x58
 8001180:	fb02 f303 	mul.w	r3, r2, r3
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <Stepper_currentPosition+0x30>)
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition = Get_Value_Encoder(num);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fc9e 	bl	8000acc <Get_Value_Encoder>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	639a      	str	r2, [r3, #56]	; 0x38
	return stepper->currentPosition;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	240002e0 	.word	0x240002e0

080011a8 <Stepper_currentPosition_real>:

float_t Stepper_currentPosition_real(int num){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	//update current real position of robot
	stepper_state * stepper = &steppers[num];
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2258      	movs	r2, #88	; 0x58
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <Stepper_currentPosition_real+0x50>)
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
//	stepper->currentPosition_real = encoder_to_joint(num, abs(Stepper_currentPosition(num)-OFFSET))/100.00;
	stepper->currentPosition_real = encoder_to_joint(num, Stepper_currentPosition(num)-OFFSET)/100.00;
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffd8 	bl	8001174 <Stepper_currentPosition>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <Stepper_currentPosition_real+0x54>)
 80011c8:	4413      	add	r3, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f81b 	bl	8001208 <encoder_to_joint>
 80011d2:	eeb0 7a40 	vmov.f32	s14, s0
 80011d6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001200 <Stepper_currentPosition_real+0x58>
 80011da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	return stepper->currentPosition_real;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	ee07 3a90 	vmov	s15, r3
}
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	240002e0 	.word	0x240002e0
 80011fc:	ffff8ad0 	.word	0xffff8ad0
 8001200:	42c80000 	.word	0x42c80000
 8001204:	00000000 	.word	0x00000000

08001208 <encoder_to_joint>:
	stepper_state * stepper = &steppers[num];
	return stepper->targetPosition_real;
}

// convert encoder to degree and scalar
float_t encoder_to_joint(int num, int32_t value){
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	//convert to mm or degree
	float_t ans;
	if(num == 1){
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d111      	bne.n	800123c <encoder_to_joint+0x34>
		ans = value*ENCODER1_TO_ANGLE;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001222:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80012a8 <encoder_to_joint+0xa0>
 8001226:	ee27 6b06 	vmul.f64	d6, d7, d6
 800122a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80012b0 <encoder_to_joint+0xa8>
 800122e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001232:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001236:	edc7 7a03 	vstr	s15, [r7, #12]
 800123a:	e028      	b.n	800128e <encoder_to_joint+0x86>
	}
	else if(num == 2){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d111      	bne.n	8001266 <encoder_to_joint+0x5e>
		ans = value*ENCODER2_TO_ANGLE;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800124c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80012a8 <encoder_to_joint+0xa0>
 8001250:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001254:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80012b8 <encoder_to_joint+0xb0>
 8001258:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800125c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001260:	edc7 7a03 	vstr	s15, [r7, #12]
 8001264:	e013      	b.n	800128e <encoder_to_joint+0x86>
	}
	else if(num == 3){
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d110      	bne.n	800128e <encoder_to_joint+0x86>
		ans = value*ENCODER3_TO_SCALAR;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001276:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80012c0 <encoder_to_joint+0xb8>
 800127a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800127e:	ed9f 5b12 	vldr	d5, [pc, #72]	; 80012c8 <encoder_to_joint+0xc0>
 8001282:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001286:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800128a:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ans;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	ee07 3a90 	vmov	s15, r3
}
 8001294:	eeb0 0a67 	vmov.f32	s0, s15
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	f3af 8000 	nop.w
 80012a8:	00000000 	.word	0x00000000
 80012ac:	40e19400 	.word	0x40e19400
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40bf8700 	.word	0x40bf8700
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40ce0480 	.word	0x40ce0480
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40c4cd00 	.word	0x40c4cd00
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40d21880 	.word	0x40d21880

080012d0 <joint_to_encoder>:

// convert degree and scalar to encoder
int32_t joint_to_encoder(int num, float_t value){
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	ed87 0a00 	vstr	s0, [r7]
	//convert to encoder count
	int32_t ans;
	if(num == 1){
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d111      	bne.n	8001306 <joint_to_encoder+0x36>
		ans = value*ANGLE_TO_ENCODER1;
 80012e2:	edd7 7a00 	vldr	s15, [r7]
 80012e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ea:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001368 <joint_to_encoder+0x98>
 80012ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012f2:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8001370 <joint_to_encoder+0xa0>
 80012f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012fa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012fe:	ee17 3a90 	vmov	r3, s15
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e028      	b.n	8001358 <joint_to_encoder+0x88>
	}
	else if(num == 2){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d111      	bne.n	8001330 <joint_to_encoder+0x60>
		ans = value*ANGLE_TO_ENCODER2;
 800130c:	edd7 7a00 	vldr	s15, [r7]
 8001310:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001314:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001378 <joint_to_encoder+0xa8>
 8001318:	ee27 6b06 	vmul.f64	d6, d7, d6
 800131c:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001370 <joint_to_encoder+0xa0>
 8001320:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001324:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001328:	ee17 3a90 	vmov	r3, s15
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	e013      	b.n	8001358 <joint_to_encoder+0x88>
	}
	else if(num == 3){
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d110      	bne.n	8001358 <joint_to_encoder+0x88>
		ans = value*SCALAR_TO_ENCODER3;
 8001336:	edd7 7a00 	vldr	s15, [r7]
 800133a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800133e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001380 <joint_to_encoder+0xb0>
 8001342:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001346:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001388 <joint_to_encoder+0xb8>
 800134a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800134e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001352:	ee17 3a90 	vmov	r3, s15
 8001356:	60fb      	str	r3, [r7, #12]
	}
	return ans;
 8001358:	68fb      	ldr	r3, [r7, #12]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	00000000 	.word	0x00000000
 800136c:	40bf8700 	.word	0x40bf8700
 8001370:	00000000 	.word	0x00000000
 8001374:	40e19400 	.word	0x40e19400
 8001378:	00000000 	.word	0x00000000
 800137c:	40ce0480 	.word	0x40ce0480
 8001380:	00000000 	.word	0x00000000
 8001384:	40d21880 	.word	0x40d21880
 8001388:	00000000 	.word	0x00000000
 800138c:	40c4cd00 	.word	0x40c4cd00

08001390 <Serial_Setup>:
#include "TASKSPACE.h"
#include "TRAJECTORY.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2258      	movs	r2, #88	; 0x58
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <Serial_Setup+0x3c>)
 80013a4:	4413      	add	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6858      	ldr	r0, [r3, #4]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3335      	adds	r3, #53	; 0x35
 80013bc:	220e      	movs	r2, #14
 80013be:	4619      	mov	r1, r3
 80013c0:	f00c ffd0 	bl	800e364 <HAL_UART_Receive_DMA>
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	240005a4 	.word	0x240005a4

080013d0 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	e00b      	b.n	80013fa <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	3326      	adds	r3, #38	; 0x26
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	4413      	add	r3, r2
 80013f2:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001400:	3304      	adds	r3, #4
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	429a      	cmp	r2, r3
 8001406:	ddec      	ble.n	80013e2 <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 8001408:	89fb      	ldrh	r3, [r7, #14]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	b2db      	uxtb	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	b2db      	uxtb	r3, r3
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <Servo_gripperChess>:
//
//	}
//	return
//}

void Servo_gripperChess(int num, uint16_t value){
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2258      	movs	r2, #88	; 0x58
 8001464:	fb02 f303 	mul.w	r3, r2, r3
 8001468:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <Servo_gripperChess+0x6c>)
 800146a:	4413      	add	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2202      	movs	r2, #2
 8001472:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2202      	movs	r2, #2
 800147a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2214      	movs	r2, #20
 8001482:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffc7 	bl	800141c <SHIFT_TO_LSB>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffcb 	bl	8001436 <SHIFT_TO_MSB>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f87a 	bl	80015a4 <iWrite>
	sendIPacket(serial);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f8c6 	bl	8001642 <sendIPacket>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	240005a4 	.word	0x240005a4

080014c4 <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2258      	movs	r2, #88	; 0x58
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	4a15      	ldr	r2, [pc, #84]	; (8001530 <Servo_tragetPos+0x6c>)
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2202      	movs	r2, #2
 80014e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2202      	movs	r2, #2
 80014ea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2220      	movs	r2, #32
 80014f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff8f 	bl	800141c <SHIFT_TO_LSB>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 8001508:	887b      	ldrh	r3, [r7, #2]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff93 	bl	8001436 <SHIFT_TO_MSB>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f842 	bl	80015a4 <iWrite>
	sendIPacket(serial);
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f88e 	bl	8001642 <sendIPacket>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	240005a4 	.word	0x240005a4

08001534 <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2258      	movs	r2, #88	; 0x58
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <Servo_StartStop+0x6c>)
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2202      	movs	r2, #2
 8001552:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2202      	movs	r2, #2
 800155a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2211      	movs	r2, #17
 8001562:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff57 	bl	800141c <SHIFT_TO_LSB>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff5b 	bl	8001436 <SHIFT_TO_MSB>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 f80a 	bl	80015a4 <iWrite>
	sendIPacket(serial);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f856 	bl	8001642 <sendIPacket>
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	240005a4 	.word	0x240005a4

080015a4 <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	22ff      	movs	r2, #255	; 0xff
 80015b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	22fd      	movs	r2, #253	; 0xfd
 80015b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80015c2:	3303      	adds	r3, #3
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 80015e4:	2305      	movs	r3, #5
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e00e      	b.n	8001608 <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3b05      	subs	r3, #5
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	3326      	adds	r3, #38	; 0x26
 80015fe:	460a      	mov	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800160e:	3304      	adds	r3, #4
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	429a      	cmp	r2, r3
 8001614:	dde9      	ble.n	80015ea <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff feda 	bl	80013d0 <Cal_sum>
 800161c:	4603      	mov	r3, r0
 800161e:	4619      	mov	r1, r3
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	3326      	adds	r3, #38	; 0x26
 8001628:	460a      	mov	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	3301      	adds	r3, #1
 8001632:	b2da      	uxtb	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <sendIPacket>:

void sendIPacket(serial_state * serial){
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6858      	ldr	r0, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800165a:	b29a      	uxth	r2, r3
 800165c:	230a      	movs	r3, #10
 800165e:	f00c fdeb 	bl	800e238 <HAL_UART_Transmit>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2258      	movs	r2, #88	; 0x58
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <data_in+0x2c>)
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	240005a4 	.word	0x240005a4

0800169c <selectPacket>:

void selectPacket(int num){
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2258      	movs	r2, #88	; 0x58
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	4abc      	ldr	r2, [pc, #752]	; (80019a0 <selectPacket+0x304>)
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 8266 	beq.w	8001b8a <selectPacket+0x4ee>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c4:	2bff      	cmp	r3, #255	; 0xff
 80016c6:	f040 8257 	bne.w	8001b78 <selectPacket+0x4dc>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80016d0:	2bfd      	cmp	r3, #253	; 0xfd
 80016d2:	f040 8251 	bne.w	8001b78 <selectPacket+0x4dc>
			switch (serial->rPacket[3]) {
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016dc:	2b03      	cmp	r3, #3
 80016de:	f000 824d 	beq.w	8001b7c <selectPacket+0x4e0>
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	f300 824c 	bgt.w	8001b80 <selectPacket+0x4e4>
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d002      	beq.n	80016f2 <selectPacket+0x56>
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d009      	beq.n	8001704 <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 80016f0:	e246      	b.n	8001b80 <selectPacket+0x4e4>
				switch (serial->rPacket[4]) {
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016f8:	2b15      	cmp	r3, #21
 80016fa:	d001      	beq.n	8001700 <selectPacket+0x64>
 80016fc:	2b16      	cmp	r3, #22
					break;
 80016fe:	e000      	b.n	8001702 <selectPacket+0x66>
					break;
 8001700:	bf00      	nop
				break;
 8001702:	e23e      	b.n	8001b82 <selectPacket+0x4e6>
					switch (serial->rPacket[4]) {
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800170a:	3b02      	subs	r3, #2
 800170c:	2b15      	cmp	r3, #21
 800170e:	f200 8231 	bhi.w	8001b74 <selectPacket+0x4d8>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <selectPacket+0x7c>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001b75 	.word	0x08001b75
 800171c:	08001771 	.word	0x08001771
 8001720:	080017d9 	.word	0x080017d9
 8001724:	08001841 	.word	0x08001841
 8001728:	080018a3 	.word	0x080018a3
 800172c:	08001b75 	.word	0x08001b75
 8001730:	08001b75 	.word	0x08001b75
 8001734:	08001b75 	.word	0x08001b75
 8001738:	08001b75 	.word	0x08001b75
 800173c:	08001b75 	.word	0x08001b75
 8001740:	08001b75 	.word	0x08001b75
 8001744:	08001b75 	.word	0x08001b75
 8001748:	08001b75 	.word	0x08001b75
 800174c:	08001b75 	.word	0x08001b75
 8001750:	08001905 	.word	0x08001905
 8001754:	08001955 	.word	0x08001955
 8001758:	080019a9 	.word	0x080019a9
 800175c:	08001a67 	.word	0x08001a67
 8001760:	08001b53 	.word	0x08001b53
 8001764:	08001b75 	.word	0x08001b75
 8001768:	08001b75 	.word	0x08001b75
 800176c:	08001add 	.word	0x08001add
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800177e:	4413      	add	r3, r2
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001788:	eeb0 0a67 	vmov.f32	s0, s15
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff fa73 	bl	8000c78 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80017a0:	4413      	add	r3, r2
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	2002      	movs	r0, #2
 80017b0:	f7ff fa62 	bl	8000c78 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80017c2:	4413      	add	r3, r2
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017cc:	eeb0 0a67 	vmov.f32	s0, s15
 80017d0:	2003      	movs	r0, #3
 80017d2:	f7ff fa51 	bl	8000c78 <Stepper_SetMinPosition>
						break;
 80017d6:	e1ce      	b.n	8001b76 <selectPacket+0x4da>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80017e6:	4413      	add	r3, r2
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff fa59 	bl	8000cac <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001808:	4413      	add	r3, r2
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001812:	eeb0 0a67 	vmov.f32	s0, s15
 8001816:	2002      	movs	r0, #2
 8001818:	f7ff fa48 	bl	8000cac <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800182a:	4413      	add	r3, r2
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001834:	eeb0 0a67 	vmov.f32	s0, s15
 8001838:	2003      	movs	r0, #3
 800183a:	f7ff fa37 	bl	8000cac <Stepper_SetMaxPosition>
						break;
 800183e:	e19a      	b.n	8001b76 <selectPacket+0x4da>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001846:	b29b      	uxth	r3, r3
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001852:	b29b      	uxth	r3, r3
 8001854:	4413      	add	r3, r2
 8001856:	b29b      	uxth	r3, r3
 8001858:	4619      	mov	r1, r3
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff fa40 	bl	8000ce0 <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001866:	b29b      	uxth	r3, r3
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b29a      	uxth	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001872:	b29b      	uxth	r3, r3
 8001874:	4413      	add	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	4619      	mov	r1, r3
 800187a:	2002      	movs	r0, #2
 800187c:	f7ff fa30 	bl	8000ce0 <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001886:	b29b      	uxth	r3, r3
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001892:	b29b      	uxth	r3, r3
 8001894:	4413      	add	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	4619      	mov	r1, r3
 800189a:	2003      	movs	r0, #3
 800189c:	f7ff fa20 	bl	8000ce0 <Stepper_SetMinSpeed>
						break;
 80018a0:	e169      	b.n	8001b76 <selectPacket+0x4da>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fa29 	bl	8000d14 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	2002      	movs	r0, #2
 80018de:	f7ff fa19 	bl	8000d14 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4619      	mov	r1, r3
 80018fc:	2003      	movs	r0, #3
 80018fe:	f7ff fa09 	bl	8000d14 <Stepper_SetMaxSpeed>
						break;
 8001902:	e138      	b.n	8001b76 <selectPacket+0x4da>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001912:	4413      	add	r3, r2
 8001914:	461a      	mov	r2, r3
 8001916:	2100      	movs	r1, #0
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff fbd7 	bl	80010cc <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800192c:	4413      	add	r3, r2
 800192e:	461a      	mov	r2, r3
 8001930:	2100      	movs	r1, #0
 8001932:	2002      	movs	r0, #2
 8001934:	f7ff fbca 	bl	80010cc <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001946:	4413      	add	r3, r2
 8001948:	461a      	mov	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	2003      	movs	r0, #3
 800194e:	f7ff fbbd 	bl	80010cc <Stepper_SetHome>
						break;
 8001952:	e110      	b.n	8001b76 <selectPacket+0x4da>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800195a:	4619      	mov	r1, r3
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fb69 	bl	8001034 <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001968:	4619      	mov	r1, r3
 800196a:	2002      	movs	r0, #2
 800196c:	f7ff fb62 	bl	8001034 <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001976:	4619      	mov	r1, r3
 8001978:	2003      	movs	r0, #3
 800197a:	f7ff fb5b 	bl	8001034 <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001984:	b29b      	uxth	r3, r3
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001990:	b29b      	uxth	r3, r3
 8001992:	4413      	add	r3, r2
 8001994:	b29b      	uxth	r3, r3
 8001996:	4619      	mov	r1, r3
 8001998:	2002      	movs	r0, #2
 800199a:	f7ff fdcb 	bl	8001534 <Servo_StartStop>
						break;
 800199e:	e0ea      	b.n	8001b76 <selectPacket+0x4da>
 80019a0:	240005a4 	.word	0x240005a4
 80019a4:	42c80000 	.word	0x42c80000
						Stepper_SetTraget(1, ((float_t)(int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]))/100.00);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ca:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 80019a4 <selectPacket+0x308>
 80019ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019d2:	eeb0 0a47 	vmov.f32	s0, s14
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff f9b6 	bl	8000d48 <Stepper_SetTraget>
						Stepper_SetTraget(2, ((float_t)(int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]))/100.00);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fe:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 80019a4 <selectPacket+0x308>
 8001a02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a06:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f7ff f99c 	bl	8000d48 <Stepper_SetTraget>
						Stepper_SetTraget(3, ((float_t)(int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]))/100.00);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a32:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 80019a4 <selectPacket+0x308>
 8001a36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3e:	2003      	movs	r0, #3
 8001a40:	f7ff f982 	bl	8000d48 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f7ff fd30 	bl	80014c4 <Servo_tragetPos>
						break;
 8001a64:	e087      	b.n	8001b76 <selectPacket+0x4da>
						updateJoint((int16_t)((serial->rPacket[12]<<8) + serial->rPacket[11]), (int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]), (int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]), (int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]));
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	461c      	mov	r4, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	f000 f89f 	bl	8001c18 <updateJoint>
						break;
 8001ada:	e04c      	b.n	8001b76 <selectPacket+0x4da>
						update_circle((int16_t)((serial->rPacket[12]<<8) + serial->rPacket[11]), (int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]), (int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]), (int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]));
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4619      	mov	r1, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	461c      	mov	r4, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	f000 f968 	bl	8001e20 <update_circle>
						break;
 8001b50:	e011      	b.n	8001b76 <selectPacket+0x4da>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f7ff fc71 	bl	8001454 <Servo_gripperChess>
						break;
 8001b72:	e000      	b.n	8001b76 <selectPacket+0x4da>
						break;
 8001b74:	bf00      	nop
					break;
 8001b76:	e004      	b.n	8001b82 <selectPacket+0x4e6>
			}
		}
 8001b78:	bf00      	nop
 8001b7a:	e002      	b.n	8001b82 <selectPacket+0x4e6>
						break;
 8001b7c:	bf00      	nop
 8001b7e:	e000      	b.n	8001b82 <selectPacket+0x4e6>
						break;
 8001b80:	bf00      	nop
		serial->state = 0;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	0000      	movs	r0, r0
	...

08001b98 <to_degree>:

void updateXYZ(int32_t x, int32_t y, int32_t z){
//	taskspace_state * taskspace = &taskspaces[0];
}

double to_degree(double value){
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	ed87 0b00 	vstr	d0, [r7]
	return value * 180.0 / M_PI;
 8001ba2:	ed97 7b00 	vldr	d7, [r7]
 8001ba6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001bc8 <to_degree+0x30>
 8001baa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bae:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001bd0 <to_degree+0x38>
 8001bb2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001bb6:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001bba:	eeb0 0b47 	vmov.f64	d0, d7
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40668000 	.word	0x40668000
 8001bd0:	54442d18 	.word	0x54442d18
 8001bd4:	400921fb 	.word	0x400921fb

08001bd8 <to_radian>:

double to_radian(double value){
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	ed87 0b00 	vstr	d0, [r7]
	return value * M_PI / 180.0;
 8001be2:	ed97 7b00 	vldr	d7, [r7]
 8001be6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001c08 <to_radian+0x30>
 8001bea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bee:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001c10 <to_radian+0x38>
 8001bf2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001bf6:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001bfa:	eeb0 0b47 	vmov.f64	d0, d7
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	54442d18 	.word	0x54442d18
 8001c0c:	400921fb 	.word	0x400921fb
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40668000 	.word	0x40668000

08001c18 <updateJoint>:

void updateJoint(int32_t roll, int32_t x, int32_t y, int32_t z){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b096      	sub	sp, #88	; 0x58
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
	taskspace_state * taskspace = &taskspaces[0];
 8001c26:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <updateJoint+0x200>)
 8001c28:	657b      	str	r3, [r7, #84]	; 0x54

//	receive real position convert degree to radian and use scalar
	taskspace->qi1 = to_radian((double)Stepper_currentPosition_real(1));
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff fabc 	bl	80011a8 <Stepper_currentPosition_real>
 8001c30:	eef0 7a40 	vmov.f32	s15, s0
 8001c34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c38:	eeb0 0b47 	vmov.f64	d0, d7
 8001c3c:	f7ff ffcc 	bl	8001bd8 <to_radian>
 8001c40:	eeb0 7b40 	vmov.f64	d7, d0
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	ed83 7b08 	vstr	d7, [r3, #32]
	taskspace->qi2 = to_radian((double)Stepper_currentPosition_real(2));
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f7ff faac 	bl	80011a8 <Stepper_currentPosition_real>
 8001c50:	eef0 7a40 	vmov.f32	s15, s0
 8001c54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c58:	eeb0 0b47 	vmov.f64	d0, d7
 8001c5c:	f7ff ffbc 	bl	8001bd8 <to_radian>
 8001c60:	eeb0 7b40 	vmov.f64	d7, d0
 8001c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c66:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	taskspace->qi3 = (double)Stepper_currentPosition_real(3);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f7ff fa9c 	bl	80011a8 <Stepper_currentPosition_real>
 8001c70:	eef0 7a40 	vmov.f32	s15, s0
 8001c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	taskspace->qi4 = to_radian((double)0.0);
 8001c7e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8001e08 <updateJoint+0x1f0>
 8001c82:	f7ff ffa9 	bl	8001bd8 <to_radian>
 8001c86:	eeb0 7b40 	vmov.f64	d7, d0
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	double qi_all[4] = {taskspace->qi1, taskspace->qi2, taskspace->qi3, taskspace->qi4};
 8001c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c96:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ca0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001caa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001cb4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

//	cartesian
	// keep data
	taskspace->d1 = (double)(roll/100.00); //divider 100 to scale down
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001cc2:	ed9f 5b53 	vldr	d5, [pc, #332]	; 8001e10 <updateJoint+0x1f8>
 8001cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ccc:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	taskspace->d2 = (double)(x/100.00);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001cda:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8001e10 <updateJoint+0x1f8>
 8001cde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce4:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	taskspace->d3 = (double)(y/100.00);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001cf2:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001e10 <updateJoint+0x1f8>
 8001cf6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	taskspace->d4 = (double)(z/100.00);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d0a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001e10 <updateJoint+0x1f8>
 8001d0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d14:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	double delta[4] = {taskspace->d1, taskspace->d2, taskspace->d3, taskspace->d4};
 8001d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001d1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d24:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001d28:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001d32:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d38:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001d3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	// convert xyz roll to q
	cartesianJog(qi_all, delta);
 8001d40:	f107 0210 	add.w	r2, r7, #16
 8001d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f8b8 	bl	8001ec0 <cartesianJog>

	// get q from cartesian
	taskspace->q1 = get_cartesian_q1();
 8001d50:	f000 f9e0 	bl	8002114 <get_cartesian_q1>
 8001d54:	eeb0 7b40 	vmov.f64	d7, d0
 8001d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5a:	ed83 7b00 	vstr	d7, [r3]
	taskspace->q2 = get_cartesian_q2();
 8001d5e:	f000 f9ed 	bl	800213c <get_cartesian_q2>
 8001d62:	eeb0 7b40 	vmov.f64	d7, d0
 8001d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d68:	ed83 7b02 	vstr	d7, [r3, #8]
	taskspace->q3 = get_cartesian_q3();
 8001d6c:	f000 f9fa 	bl	8002164 <get_cartesian_q3>
 8001d70:	eeb0 7b40 	vmov.f64	d7, d0
 8001d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d76:	ed83 7b04 	vstr	d7, [r3, #16]
	taskspace->q4 = get_cartesian_q4();
 8001d7a:	f000 fa07 	bl	800218c <get_cartesian_q4>
 8001d7e:	eeb0 7b40 	vmov.f64	d7, d0
 8001d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d84:	ed83 7b06 	vstr	d7, [r3, #24]
	// check q from cartesian by FK
//	double q[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
//	forwardKinematic(q);

	// set q to run stepper
	Stepper_SetTraget(1, to_degree(taskspace->q1));
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	ed93 7b00 	vldr	d7, [r3]
 8001d8e:	eeb0 0b47 	vmov.f64	d0, d7
 8001d92:	f7ff ff01 	bl	8001b98 <to_degree>
 8001d96:	eeb0 7b40 	vmov.f64	d7, d0
 8001d9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7fe ffd0 	bl	8000d48 <Stepper_SetTraget>
	Stepper_SetTraget(2, to_degree(taskspace->q2));
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	ed93 7b02 	vldr	d7, [r3, #8]
 8001dae:	eeb0 0b47 	vmov.f64	d0, d7
 8001db2:	f7ff fef1 	bl	8001b98 <to_degree>
 8001db6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7fe ffc0 	bl	8000d48 <Stepper_SetTraget>
	Stepper_SetTraget(3, taskspace->q3);
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dca:	ed93 7b04 	vldr	d7, [r3, #16]
 8001dce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f7fe ffb6 	bl	8000d48 <Stepper_SetTraget>
	Servo_tragetPos(2, to_degree(taskspace->q4));
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dde:	ed93 7b06 	vldr	d7, [r3, #24]
 8001de2:	eeb0 0b47 	vmov.f64	d0, d7
 8001de6:	f7ff fed7 	bl	8001b98 <to_degree>
 8001dea:	eeb0 7b40 	vmov.f64	d7, d0
 8001dee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001df2:	ee17 3a90 	vmov	r3, s15
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f7ff fb62 	bl	80014c4 <Servo_tragetPos>
//	taskspace->q3 = (double)Stepper_targetPosition_real(3);
//	taskspace->q4 = to_radian((double)0.0);
//	double qq[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
//	forwardKinematic(qq);

}
 8001e00:	bf00      	nop
 8001e02:	3758      	adds	r7, #88	; 0x58
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
	...
 8001e14:	40590000 	.word	0x40590000
 8001e18:	24000498 	.word	0x24000498
 8001e1c:	00000000 	.word	0x00000000

08001e20 <update_circle>:
  /*      acc = 2*c2 + 6*c3*T + 12*c4*(T^2) + 20*c5*(T^3); */
  *b_vmax = (((((60.0 * qf - 60.0 * qi) - c4_tmp) - 14.0 * Tk * qdi) + c_c3_tmp)
             - b_c3_tmp) / 32.0 * Tk;
}

void update_circle(int32_t row, int32_t column, int32_t w, int32_t t){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
	trajectory_state * trajectory = &trajectorys[0];
 8001e2e:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <update_circle+0x98>)
 8001e30:	617b      	str	r3, [r7, #20]

	updateChess(row, column);
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7fe fbcb 	bl	80005d0 <updateChess>

	trajectory->x_circle = 200.00;
 8001e3a:	6979      	ldr	r1, [r7, #20]
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <update_circle+0x9c>)
 8001e42:	e9c1 2300 	strd	r2, r3, [r1]
	trajectory->y_circle = 200.00;
 8001e46:	6979      	ldr	r1, [r7, #20]
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <update_circle+0x9c>)
 8001e4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	trajectory->r_circle = get_radius_circle();
 8001e52:	f7fe fd09 	bl	8000868 <get_radius_circle>
 8001e56:	eeb0 7b40 	vmov.f64	d7, d0
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	ed83 7b08 	vstr	d7, [r3, #32]
	trajectory->w_circle = w/100.00;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e6a:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001ea8 <update_circle+0x88>
 8001e6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	trajectory->t_circle = t/10000.00;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e82:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8001eb0 <update_circle+0x90>
 8001e86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	trajectory->d_circle = get_degree_chess();
 8001e90:	f7fe fcd6 	bl	8000840 <get_degree_chess>
 8001e94:	eeb0 7b40 	vmov.f64	d7, d0
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40590000 	.word	0x40590000
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40c38800 	.word	0x40c38800
 8001eb8:	24000508 	.word	0x24000508
 8001ebc:	40690000 	.word	0x40690000

08001ec0 <cartesianJog>:
 */

static cartesian_state cartesians[NUM_CARTESIAN];

void cartesianJog(const double qi[4], const double deltak[4])
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	ed2d 8b04 	vpush	{d8-d9}
 8001ec6:	b08e      	sub	sp, #56	; 0x38
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	cartesian_state * cartesian = &cartesians[0];
 8001ece:	4b90      	ldr	r3, [pc, #576]	; (8002110 <cartesianJog+0x250>)
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
	double b_qf_tmp;
	double c_qf_tmp;
	double d_qf_tmp;
	double qf_tmp;
	double qf_tmp_tmp;
	qf_tmp = sin(qi[1]);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3308      	adds	r3, #8
 8001ed6:	ed93 7b00 	vldr	d7, [r3]
 8001eda:	eeb0 0b47 	vmov.f64	d0, d7
 8001ede:	f00e ff8f 	bl	8010e00 <sin>
 8001ee2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	qf_tmp_tmp = qi[0] + qi[1];
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	ed93 6b00 	vldr	d6, [r3]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3308      	adds	r3, #8
 8001ef0:	ed93 7b00 	vldr	d7, [r3]
 8001ef4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ef8:	ed87 7b08 	vstr	d7, [r7, #32]
	b_qf_tmp = cos(qf_tmp_tmp);
 8001efc:	ed97 0b08 	vldr	d0, [r7, #32]
 8001f00:	f00e ff36 	bl	8010d70 <cos>
 8001f04:	ed87 0b06 	vstr	d0, [r7, #24]
	qf_tmp_tmp = sin(qf_tmp_tmp);
 8001f08:	ed97 0b08 	vldr	d0, [r7, #32]
 8001f0c:	f00e ff78 	bl	8010e00 <sin>
 8001f10:	ed87 0b08 	vstr	d0, [r7, #32]
	c_qf_tmp = cos(qi[0]);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	ed93 7b00 	vldr	d7, [r3]
 8001f1a:	eeb0 0b47 	vmov.f64	d0, d7
 8001f1e:	f00e ff27 	bl	8010d70 <cos>
 8001f22:	ed87 0b04 	vstr	d0, [r7, #16]
	d_qf_tmp = sin(qi[0]);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	ed93 7b00 	vldr	d7, [r3]
 8001f2c:	eeb0 0b47 	vmov.f64	d0, d7
 8001f30:	f00e ff66 	bl	8010e00 <sin>
 8001f34:	ed87 0b02 	vstr	d0, [r7, #8]

	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] *
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	3308      	adds	r3, #8
 8001f3c:	ed93 6b00 	vldr	d6, [r3]
 8001f40:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f44:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	3310      	adds	r3, #16
 8001f4c:	ed93 5b00 	vldr	d5, [r3]
 8001f50:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001f58:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	ed93 7b00 	vldr	d7, [r3]
 8001f62:	ed9f 5b61 	vldr	d5, [pc, #388]	; 80020e8 <cartesianJog+0x228>
 8001f66:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001f6a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f6e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001f72:	ee36 5b07 	vadd.f64	d5, d6, d7
	           qf_tmp) / (248.0 * qf_tmp);
 8001f76:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f7a:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80020e8 <cartesianJog+0x228>
 8001f7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f82:	ee85 7b06 	vdiv.f64	d7, d5, d6
	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] *
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	ed83 7b00 	vstr	d7, [r3]
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	ed93 6b00 	vldr	d6, [r3]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	3308      	adds	r3, #8
 8001f98:	ed93 7b00 	vldr	d7, [r3]
 8001f9c:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80020f0 <cartesianJog+0x230>
 8001fa0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001fa4:	ed97 7b06 	vldr	d7, [r7, #24]
 8001fa8:	ed9f 4b53 	vldr	d4, [pc, #332]	; 80020f8 <cartesianJog+0x238>
 8001fac:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001fb0:	ed9f 3b53 	vldr	d3, [pc, #332]	; 8002100 <cartesianJog+0x240>
 8001fb4:	ee87 4b03 	vdiv.f64	d4, d7, d3
            248.0 * c_qf_tmp) / (7.038012412301149E+15 * qf_tmp)) -
 8001fb8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fbc:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80020e8 <cartesianJog+0x228>
 8001fc0:	ee27 7b03 	vmul.f64	d7, d7, d3
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 8001fc4:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001fc8:	ee25 4b07 	vmul.f64	d4, d5, d7
            248.0 * c_qf_tmp) / (7.038012412301149E+15 * qf_tmp)) -
 8001fcc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001fd0:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8002108 <cartesianJog+0x248>
 8001fd4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001fd8:	ee84 7b05 	vdiv.f64	d7, d4, d5
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 8001fdc:	ee36 8b47 	vsub.f64	d8, d6, d7
    6.8719476736E+10 * deltak[2] * (41297.0 * qf_tmp_tmp / 100.0 + 248.0 *
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3310      	adds	r3, #16
 8001fe4:	ed93 7b00 	vldr	d7, [r3]
 8001fe8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80020f0 <cartesianJog+0x230>
 8001fec:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ff0:	ed97 7b08 	vldr	d7, [r7, #32]
 8001ff4:	ed9f 5b40 	vldr	d5, [pc, #256]	; 80020f8 <cartesianJog+0x238>
 8001ff8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ffc:	ed9f 4b40 	vldr	d4, [pc, #256]	; 8002100 <cartesianJog+0x240>
 8002000:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8002004:	ed97 7b02 	vldr	d7, [r7, #8]
 8002008:	ed9f 4b37 	vldr	d4, [pc, #220]	; 80020e8 <cartesianJog+0x228>
 800200c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8002010:	ee35 7b07 	vadd.f64	d7, d5, d7
 8002014:	ee26 9b07 	vmul.f64	d9, d6, d7
    d_qf_tmp) / (7.038012412301149E+15 * sin(qi[1]));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3308      	adds	r3, #8
 800201c:	ed93 7b00 	vldr	d7, [r3]
 8002020:	eeb0 0b47 	vmov.f64	d0, d7
 8002024:	f00e feec 	bl	8010e00 <sin>
 8002028:	eeb0 7b40 	vmov.f64	d7, d0
 800202c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002108 <cartesianJog+0x248>
 8002030:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002034:	ee89 7b06 	vdiv.f64	d7, d9, d6
            248.0 * c_qf_tmp) / (7.038012412301149E+15 * qf_tmp)) -
 8002038:	ee38 7b47 	vsub.f64	d7, d8, d7
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	ed83 7b02 	vstr	d7, [r3, #8]
	cartesian->q3 = qi[2] - deltak[3];
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3310      	adds	r3, #16
 8002046:	ed93 6b00 	vldr	d6, [r3]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3318      	adds	r3, #24
 800204e:	ed93 7b00 	vldr	d7, [r3]
 8002052:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002058:	ed83 7b04 	vstr	d7, [r3, #16]
	cartesian->q4 = (((100.0 * deltak[1] * c_qf_tmp + 41297.0 * deltak[0] * qf_tmp) +
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	3308      	adds	r3, #8
 8002060:	ed93 7b00 	vldr	d7, [r3]
 8002064:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8002100 <cartesianJog+0x240>
 8002068:	ee27 6b06 	vmul.f64	d6, d7, d6
 800206c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002070:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	ed93 7b00 	vldr	d7, [r3]
 800207a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80020f8 <cartesianJog+0x238>
 800207e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002082:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002086:	ee25 7b07 	vmul.f64	d7, d5, d7
 800208a:	ee36 6b07 	vadd.f64	d6, d6, d7
            100.0 * deltak[2] * d_qf_tmp) + 41297.0 * qi[3] * qf_tmp) / (41297.0
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	3310      	adds	r3, #16
 8002092:	ed93 7b00 	vldr	d7, [r3]
 8002096:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8002100 <cartesianJog+0x240>
 800209a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800209e:	ed97 7b02 	vldr	d7, [r7, #8]
 80020a2:	ee25 7b07 	vmul.f64	d7, d5, d7
	cartesian->q4 = (((100.0 * deltak[1] * c_qf_tmp + 41297.0 * deltak[0] * qf_tmp) +
 80020a6:	ee36 6b07 	vadd.f64	d6, d6, d7
            100.0 * deltak[2] * d_qf_tmp) + 41297.0 * qi[3] * qf_tmp) / (41297.0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3318      	adds	r3, #24
 80020ae:	ed93 7b00 	vldr	d7, [r3]
 80020b2:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80020f8 <cartesianJog+0x238>
 80020b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80020ba:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80020be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80020c2:	ee36 5b07 	vadd.f64	d5, d6, d7
    * qf_tmp);
 80020c6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80020ca:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80020f8 <cartesianJog+0x238>
 80020ce:	ee27 6b06 	vmul.f64	d6, d7, d6
            100.0 * deltak[2] * d_qf_tmp) + 41297.0 * qi[3] * qf_tmp) / (41297.0
 80020d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
	cartesian->q4 = (((100.0 * deltak[1] * c_qf_tmp + 41297.0 * deltak[0] * qf_tmp) +
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	3738      	adds	r7, #56	; 0x38
 80020e0:	46bd      	mov	sp, r7
 80020e2:	ecbd 8b04 	vpop	{d8-d9}
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	00000000 	.word	0x00000000
 80020ec:	406f0000 	.word	0x406f0000
 80020f0:	00000000 	.word	0x00000000
 80020f4:	42300000 	.word	0x42300000
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40e42a20 	.word	0x40e42a20
 8002100:	00000000 	.word	0x00000000
 8002104:	40590000 	.word	0x40590000
 8002108:	f5c28f5d 	.word	0xf5c28f5d
 800210c:	43390108 	.word	0x43390108
 8002110:	24000558 	.word	0x24000558

08002114 <get_cartesian_q1>:

double get_cartesian_q1(){
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <get_cartesian_q1+0x24>)
 800211c:	607b      	str	r3, [r7, #4]
	return cartesian->q1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	ec43 2b17 	vmov	d7, r2, r3
}
 8002128:	eeb0 0b47 	vmov.f64	d0, d7
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	24000558 	.word	0x24000558

0800213c <get_cartesian_q2>:

double get_cartesian_q2(){
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <get_cartesian_q2+0x24>)
 8002144:	607b      	str	r3, [r7, #4]
	return cartesian->q2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800214c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002150:	eeb0 0b47 	vmov.f64	d0, d7
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	24000558 	.word	0x24000558

08002164 <get_cartesian_q3>:

double get_cartesian_q3(){
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <get_cartesian_q3+0x24>)
 800216c:	607b      	str	r3, [r7, #4]
	return cartesian->q3;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002174:	ec43 2b17 	vmov	d7, r2, r3
}
 8002178:	eeb0 0b47 	vmov.f64	d0, d7
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	24000558 	.word	0x24000558

0800218c <get_cartesian_q4>:

double get_cartesian_q4(){
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <get_cartesian_q4+0x24>)
 8002194:	607b      	str	r3, [r7, #4]
	return cartesian->q4;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800219c:	ec43 2b17 	vmov	d7, r2, r3
}
 80021a0:	eeb0 0b47 	vmov.f64	d0, d7
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	24000558 	.word	0x24000558
 80021b4:	00000000 	.word	0x00000000

080021b8 <forwardKinematic>:
#include <math.h>

static fk_state fks[NUM_FK];

void forwardKinematic(const double q[4])
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	ed2d 8b02 	vpush	{d8}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[0];
 80021c4:	4b52      	ldr	r3, [pc, #328]	; (8002310 <forwardKinematic+0x158>)
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
	double Rota_idx_1;
	double Rota_tmp;
	double Rota_tmp_tmp_tmp;
	double eulShaped_idx_2;
	Rota_tmp_tmp_tmp = q[0] + q[1];
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	ed93 6b00 	vldr	d6, [r3]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3308      	adds	r3, #8
 80021d2:	ed93 7b00 	vldr	d7, [r3]
 80021d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021da:	ed87 7b06 	vstr	d7, [r7, #24]
	Rota_idx_1 = Rota_tmp_tmp_tmp + q[3];
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3318      	adds	r3, #24
 80021e2:	ed93 7b00 	vldr	d7, [r3]
 80021e6:	ed97 6b06 	vldr	d6, [r7, #24]
 80021ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021ee:	ed87 7b04 	vstr	d7, [r7, #16]
	Rota_tmp = cos(Rota_idx_1);
 80021f2:	ed97 0b04 	vldr	d0, [r7, #16]
 80021f6:	f00e fdbb 	bl	8010d70 <cos>
 80021fa:	ed87 0b02 	vstr	d0, [r7, #8]
	Rota_idx_1 = sin(Rota_idx_1);
 80021fe:	ed97 0b04 	vldr	d0, [r7, #16]
 8002202:	f00e fdfd 	bl	8010e00 <sin>
 8002206:	ed87 0b04 	vstr	d0, [r7, #16]
	eulShaped_idx_2 = atan2(Rota_idx_1, Rota_tmp);
 800220a:	ed97 1b02 	vldr	d1, [r7, #8]
 800220e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002212:	f00e fe3d 	bl	8010e90 <atan2>
 8002216:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	if (sqrt(Rota_tmp * Rota_tmp + Rota_idx_1 * Rota_idx_1) <
 800221a:	ed97 7b02 	vldr	d7, [r7, #8]
 800221e:	ee27 6b07 	vmul.f64	d6, d7, d7
 8002222:	ed97 7b04 	vldr	d7, [r7, #16]
 8002226:	ee27 7b07 	vmul.f64	d7, d7, d7
 800222a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800222e:	eeb0 0b47 	vmov.f64	d0, d7
 8002232:	f00e fe31 	bl	8010e98 <sqrt>
 8002236:	eeb0 7b40 	vmov.f64	d7, d0
 800223a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80022f0 <forwardKinematic+0x138>
 800223e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	d505      	bpl.n	8002254 <forwardKinematic+0x9c>
			2.2204460492503131E-15) {
		eulShaped_idx_2 = 0.0;
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	fk->roll = eulShaped_idx_2; //radian
 8002254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800225a:	e9c1 2300 	strd	r2, r3, [r1]
	fk->X = 412.97 * cos(Rota_tmp_tmp_tmp) + 248.0 * cos(q[0]); //mm
 800225e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002262:	f00e fd85 	bl	8010d70 <cos>
 8002266:	eeb0 7b40 	vmov.f64	d7, d0
 800226a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80022f8 <forwardKinematic+0x140>
 800226e:	ee27 8b06 	vmul.f64	d8, d7, d6
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	ed93 7b00 	vldr	d7, [r3]
 8002278:	eeb0 0b47 	vmov.f64	d0, d7
 800227c:	f00e fd78 	bl	8010d70 <cos>
 8002280:	eeb0 7b40 	vmov.f64	d7, d0
 8002284:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002300 <forwardKinematic+0x148>
 8002288:	ee27 7b06 	vmul.f64	d7, d7, d6
 800228c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	ed83 7b02 	vstr	d7, [r3, #8]
	fk->Y = 412.97 * sin(Rota_tmp_tmp_tmp) + 248.0 * sin(q[0]); //mm
 8002296:	ed97 0b06 	vldr	d0, [r7, #24]
 800229a:	f00e fdb1 	bl	8010e00 <sin>
 800229e:	eeb0 7b40 	vmov.f64	d7, d0
 80022a2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80022f8 <forwardKinematic+0x140>
 80022a6:	ee27 8b06 	vmul.f64	d8, d7, d6
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	ed93 7b00 	vldr	d7, [r3]
 80022b0:	eeb0 0b47 	vmov.f64	d0, d7
 80022b4:	f00e fda4 	bl	8010e00 <sin>
 80022b8:	eeb0 7b40 	vmov.f64	d7, d0
 80022bc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002300 <forwardKinematic+0x148>
 80022c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022c4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	ed83 7b04 	vstr	d7, [r3, #16]
	fk->Z = 217.04 - q[2]; //mm
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3310      	adds	r3, #16
 80022d2:	ed93 7b00 	vldr	d7, [r3]
 80022d6:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002308 <forwardKinematic+0x150>
 80022da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	3730      	adds	r7, #48	; 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	ecbd 8b02 	vpop	{d8}
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	00000000 	.word	0x00000000
 80022f4:	3ce40000 	.word	0x3ce40000
 80022f8:	1eb851ec 	.word	0x1eb851ec
 80022fc:	4079cf85 	.word	0x4079cf85
 8002300:	00000000 	.word	0x00000000
 8002304:	406f0000 	.word	0x406f0000
 8002308:	ae147ae1 	.word	0xae147ae1
 800230c:	406b2147 	.word	0x406b2147
 8002310:	24000578 	.word	0x24000578
 8002314:	00000000 	.word	0x00000000

08002318 <update_FK_real>:

void update_FK_real(){
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
	double qi_all[4] = {to_radian((double)Stepper_currentPosition_real(1)), to_radian((double)Stepper_currentPosition_real(2)), (double)Stepper_currentPosition_real(3), to_radian((double)0.0)};
 800231e:	2001      	movs	r0, #1
 8002320:	f7fe ff42 	bl	80011a8 <Stepper_currentPosition_real>
 8002324:	eef0 7a40 	vmov.f32	s15, s0
 8002328:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800232c:	eeb0 0b47 	vmov.f64	d0, d7
 8002330:	f7ff fc52 	bl	8001bd8 <to_radian>
 8002334:	ee07 0a90 	vmov	s15, r0
 8002338:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800233c:	ed87 7b00 	vstr	d7, [r7]
 8002340:	2002      	movs	r0, #2
 8002342:	f7fe ff31 	bl	80011a8 <Stepper_currentPosition_real>
 8002346:	eef0 7a40 	vmov.f32	s15, s0
 800234a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800234e:	eeb0 0b47 	vmov.f64	d0, d7
 8002352:	f7ff fc41 	bl	8001bd8 <to_radian>
 8002356:	ee07 0a90 	vmov	s15, r0
 800235a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800235e:	ed87 7b02 	vstr	d7, [r7, #8]
 8002362:	2003      	movs	r0, #3
 8002364:	f7fe ff20 	bl	80011a8 <Stepper_currentPosition_real>
 8002368:	eef0 7a40 	vmov.f32	s15, s0
 800236c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002370:	ed87 7b04 	vstr	d7, [r7, #16]
 8002374:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8002398 <update_FK_real+0x80>
 8002378:	f7ff fc2e 	bl	8001bd8 <to_radian>
 800237c:	ee07 0a90 	vmov	s15, r0
 8002380:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002384:	ed87 7b06 	vstr	d7, [r7, #24]
	forwardKinematic(qi_all);
 8002388:	463b      	mov	r3, r7
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff14 	bl	80021b8 <forwardKinematic>
}
 8002390:	bf00      	nop
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
	...

080023a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a6:	f002 f895 	bl	80044d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023aa:	f000 f94b 	bl	8002644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ae:	f000 ff3b 	bl	8003228 <MX_GPIO_Init>
  MX_BDMA_Init();
 80023b2:	f000 fef1 	bl	8003198 <MX_BDMA_Init>
  MX_DMA_Init();
 80023b6:	f000 ff0f 	bl	80031d8 <MX_DMA_Init>
  MX_ETH_Init();
 80023ba:	f000 fa2f 	bl	800281c <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80023be:	f000 feb9 	bl	8003134 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80023c2:	f000 fb27 	bl	8002a14 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023c6:	f000 fb79 	bl	8002abc <MX_TIM3_Init>
  MX_TIM4_Init();
 80023ca:	f000 fbcd 	bl	8002b68 <MX_TIM4_Init>
  MX_TIM1_Init();
 80023ce:	f000 fac7 	bl	8002960 <MX_TIM1_Init>
  MX_SPI3_Init();
 80023d2:	f000 fa6f 	bl	80028b4 <MX_SPI3_Init>
  MX_ADC3_Init();
 80023d6:	f000 f9bb 	bl	8002750 <MX_ADC3_Init>
  MX_TIM5_Init();
 80023da:	f000 fc1b 	bl	8002c14 <MX_TIM5_Init>
  MX_UART7_Init();
 80023de:	f000 fe5b 	bl	8003098 <MX_UART7_Init>
  MX_TIM12_Init();
 80023e2:	f000 fc65 	bl	8002cb0 <MX_TIM12_Init>
  MX_TIM13_Init();
 80023e6:	f000 fcc7 	bl	8002d78 <MX_TIM13_Init>
  MX_TIM16_Init();
 80023ea:	f000 fd13 	bl	8002e14 <MX_TIM16_Init>
  MX_TIM17_Init();
 80023ee:	f000 fd8b 	bl	8002f08 <MX_TIM17_Init>
  MX_UART5_Init();
 80023f2:	f000 fe03 	bl	8002ffc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 80023f6:	f007 ff11 	bl	800a21c <HAL_RCC_GetHCLKFreq>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4a74      	ldr	r2, [pc, #464]	; (80025d0 <main+0x230>)
 80023fe:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8002400:	f007 ff0c 	bl	800a21c <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <main+0x234>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4a72      	ldr	r2, [pc, #456]	; (80025d8 <main+0x238>)
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	4a71      	ldr	r2, [pc, #452]	; (80025dc <main+0x23c>)
 8002416:	6013      	str	r3, [r2, #0]
  //htim17 stepper 2
  //htim13 stepper 3
  //htim12 stepper 4

  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 8002418:	2300      	movs	r3, #0
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2320      	movs	r3, #32
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <main+0x240>)
 8002422:	2200      	movs	r2, #0
 8002424:	496f      	ldr	r1, [pc, #444]	; (80025e4 <main+0x244>)
 8002426:	2001      	movs	r0, #1
 8002428:	f7fe fb86 	bl	8000b38 <Stepper_Setup>
  Stepper_SetMinPosition(1, -360.00);
 800242c:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 80025e8 <main+0x248>
 8002430:	2001      	movs	r0, #1
 8002432:	f7fe fc21 	bl	8000c78 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 360.00);
 8002436:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80025ec <main+0x24c>
 800243a:	2001      	movs	r0, #1
 800243c:	f7fe fc36 	bl	8000cac <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 8002440:	2300      	movs	r3, #0
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	2310      	movs	r3, #16
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	4b65      	ldr	r3, [pc, #404]	; (80025e0 <main+0x240>)
 800244a:	2200      	movs	r2, #0
 800244c:	4968      	ldr	r1, [pc, #416]	; (80025f0 <main+0x250>)
 800244e:	2002      	movs	r0, #2
 8002450:	f7fe fb72 	bl	8000b38 <Stepper_Setup>
  Stepper_SetMinPosition(2, -360.00);
 8002454:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80025e8 <main+0x248>
 8002458:	2002      	movs	r0, #2
 800245a:	f7fe fc0d 	bl	8000c78 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 360.00);
 800245e:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80025ec <main+0x24c>
 8002462:	2002      	movs	r0, #2
 8002464:	f7fe fc22 	bl	8000cac <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 8002468:	2301      	movs	r3, #1
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4b60      	ldr	r3, [pc, #384]	; (80025f4 <main+0x254>)
 8002474:	2200      	movs	r2, #0
 8002476:	4960      	ldr	r1, [pc, #384]	; (80025f8 <main+0x258>)
 8002478:	2003      	movs	r0, #3
 800247a:	f7fe fb5d 	bl	8000b38 <Stepper_Setup>
  Stepper_SetMinPosition(3, -106.00);
 800247e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80025fc <main+0x25c>
 8002482:	2003      	movs	r0, #3
 8002484:	f7fe fbf8 	bl	8000c78 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 106.00);
 8002488:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8002600 <main+0x260>
 800248c:	2003      	movs	r0, #3
 800248e:	f7fe fc0d 	bl	8000cac <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 8002492:	2301      	movs	r3, #1
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <main+0x240>)
 800249e:	2204      	movs	r2, #4
 80024a0:	4958      	ldr	r1, [pc, #352]	; (8002604 <main+0x264>)
 80024a2:	2004      	movs	r0, #4
 80024a4:	f7fe fb48 	bl	8000b38 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 80024a8:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8002608 <main+0x268>
 80024ac:	2004      	movs	r0, #4
 80024ae:	f7fe fbe3 	bl	8000c78 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 150.00);
 80024b2:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800260c <main+0x26c>
 80024b6:	2004      	movs	r0, #4
 80024b8:	f7fe fbf8 	bl	8000cac <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fba7 	bl	8000c10 <Stepper_DefaultState>
  Stepper_DefaultState(2);
 80024c2:	2002      	movs	r0, #2
 80024c4:	f7fe fba4 	bl	8000c10 <Stepper_DefaultState>
  Stepper_DefaultState(3);
 80024c8:	2003      	movs	r0, #3
 80024ca:	f7fe fba1 	bl	8000c10 <Stepper_DefaultState>
  Stepper_DefaultState(4);
 80024ce:	2004      	movs	r0, #4
 80024d0:	f7fe fb9e 	bl	8000c10 <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 80024d4:	483f      	ldr	r0, [pc, #252]	; (80025d4 <main+0x234>)
 80024d6:	f00a f9fb 	bl	800c8d0 <HAL_TIM_Base_Start_IT>

  //PID STEPPER Setup
  setupPID(1, 0.001, -50, 50, 0.5, 0, 0);
 80024da:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8002608 <main+0x268>
 80024de:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8002608 <main+0x268>
 80024e2:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80024e6:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 8002610 <main+0x270>
 80024ea:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8002614 <main+0x274>
 80024ee:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8002618 <main+0x278>
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7fe f9cc 	bl	8000890 <setupPID>
  setupPID(2, 0.001, -50, 50, 0.5, 0, 0);
 80024f8:	eddf 2a43 	vldr	s5, [pc, #268]	; 8002608 <main+0x268>
 80024fc:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8002608 <main+0x268>
 8002500:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002504:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8002610 <main+0x270>
 8002508:	eddf 0a42 	vldr	s1, [pc, #264]	; 8002614 <main+0x274>
 800250c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8002618 <main+0x278>
 8002510:	2002      	movs	r0, #2
 8002512:	f7fe f9bd 	bl	8000890 <setupPID>
  setupPID(3, 0.05, -800, 800, 1.0, 0, 0);
 8002516:	eddf 2a3c 	vldr	s5, [pc, #240]	; 8002608 <main+0x268>
 800251a:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8002608 <main+0x268>
 800251e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002522:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 800261c <main+0x27c>
 8002526:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8002620 <main+0x280>
 800252a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8002624 <main+0x284>
 800252e:	2003      	movs	r0, #3
 8002530:	f7fe f9ae 	bl	8000890 <setupPID>

  //PID Field Setup
  setupPID(4, 0.05, -20, 20, 1.0, 0, 0);
 8002534:	eddf 2a34 	vldr	s5, [pc, #208]	; 8002608 <main+0x268>
 8002538:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8002608 <main+0x268>
 800253c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002540:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8002544:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8002548:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8002624 <main+0x284>
 800254c:	2004      	movs	r0, #4
 800254e:	f7fe f99f 	bl	8000890 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 8002552:	223c      	movs	r2, #60	; 0x3c
 8002554:	4934      	ldr	r1, [pc, #208]	; (8002628 <main+0x288>)
 8002556:	2001      	movs	r0, #1
 8002558:	f7fe fa90 	bl	8000a7c <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 800255c:	223c      	movs	r2, #60	; 0x3c
 800255e:	4933      	ldr	r1, [pc, #204]	; (800262c <main+0x28c>)
 8002560:	2002      	movs	r0, #2
 8002562:	f7fe fa8b 	bl	8000a7c <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 8002566:	223c      	movs	r2, #60	; 0x3c
 8002568:	4931      	ldr	r1, [pc, #196]	; (8002630 <main+0x290>)
 800256a:	2003      	movs	r0, #3
 800256c:	f7fe fa86 	bl	8000a7c <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 8002570:	223c      	movs	r2, #60	; 0x3c
 8002572:	4930      	ldr	r1, [pc, #192]	; (8002634 <main+0x294>)
 8002574:	2004      	movs	r0, #4
 8002576:	f7fe fa81 	bl	8000a7c <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 800257a:	492f      	ldr	r1, [pc, #188]	; (8002638 <main+0x298>)
 800257c:	2001      	movs	r0, #1
 800257e:	f7fe ff07 	bl	8001390 <Serial_Setup>
  Serial_Setup(2, &huart7);
 8002582:	492e      	ldr	r1, [pc, #184]	; (800263c <main+0x29c>)
 8002584:	2002      	movs	r0, #2
 8002586:	f7fe ff03 	bl	8001390 <Serial_Setup>

  Stepper_updateHome(1, 1);
 800258a:	2101      	movs	r1, #1
 800258c:	2001      	movs	r0, #1
 800258e:	f7fe fd73 	bl	8001078 <Stepper_updateHome>
  Stepper_updateHome(2, 1);
 8002592:	2101      	movs	r1, #1
 8002594:	2002      	movs	r0, #2
 8002596:	f7fe fd6f 	bl	8001078 <Stepper_updateHome>
  Stepper_updateHome(3, 1);
 800259a:	2101      	movs	r1, #1
 800259c:	2003      	movs	r0, #3
 800259e:	f7fe fd6b 	bl	8001078 <Stepper_updateHome>
//	  a = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
//	  Stepper_runStep(1);
//	  Stepper_runStep(2);
//	  Stepper_runStep(3);
//	  Stepper_runStep(4);
	  if(state){
 80025a2:	4b27      	ldr	r3, [pc, #156]	; (8002640 <main+0x2a0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <main+0x226>
		  update_FK_real();
 80025aa:	f7ff feb5 	bl	8002318 <update_FK_real>
//		  updateJoint(0,0,0,0);
		  Stepper_runStep(1);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7fe fd06 	bl	8000fc0 <Stepper_runStep>
		  Stepper_runStep(2);
 80025b4:	2002      	movs	r0, #2
 80025b6:	f7fe fd03 	bl	8000fc0 <Stepper_runStep>
		  Stepper_runStep(3);
 80025ba:	2003      	movs	r0, #3
 80025bc:	f7fe fd00 	bl	8000fc0 <Stepper_runStep>
//		  Stepper_runStep(4);
		  state = 0;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <main+0x2a0>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
	  }
	  selectPacket(1);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7ff f868 	bl	800169c <selectPacket>
	  if(state){
 80025cc:	e7e9      	b.n	80025a2 <main+0x202>
 80025ce:	bf00      	nop
 80025d0:	24000f04 	.word	0x24000f04
 80025d4:	24000c54 	.word	0x24000c54
 80025d8:	000f4240 	.word	0x000f4240
 80025dc:	24000eb4 	.word	0x24000eb4
 80025e0:	58021400 	.word	0x58021400
 80025e4:	240010d4 	.word	0x240010d4
 80025e8:	c3b40000 	.word	0xc3b40000
 80025ec:	43b40000 	.word	0x43b40000
 80025f0:	24000b90 	.word	0x24000b90
 80025f4:	58021000 	.word	0x58021000
 80025f8:	24000e68 	.word	0x24000e68
 80025fc:	c2d40000 	.word	0xc2d40000
 8002600:	42d40000 	.word	0x42d40000
 8002604:	24000fcc 	.word	0x24000fcc
 8002608:	00000000 	.word	0x00000000
 800260c:	43160000 	.word	0x43160000
 8002610:	42480000 	.word	0x42480000
 8002614:	c2480000 	.word	0xc2480000
 8002618:	3a83126f 	.word	0x3a83126f
 800261c:	44480000 	.word	0x44480000
 8002620:	c4480000 	.word	0xc4480000
 8002624:	3d4ccccd 	.word	0x3d4ccccd
 8002628:	24000eb8 	.word	0x24000eb8
 800262c:	24000ca0 	.word	0x24000ca0
 8002630:	2400073c 	.word	0x2400073c
 8002634:	24000f08 	.word	0x24000f08
 8002638:	24000d74 	.word	0x24000d74
 800263c:	240006ac 	.word	0x240006ac
 8002640:	24000598 	.word	0x24000598

08002644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b09c      	sub	sp, #112	; 0x70
 8002648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264e:	224c      	movs	r2, #76	; 0x4c
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f00e f888 	bl	8010768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2220      	movs	r2, #32
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f00e f882 	bl	8010768 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002664:	2002      	movs	r0, #2
 8002666:	f006 fe33 	bl	80092d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4b35      	ldr	r3, [pc, #212]	; (8002744 <SystemClock_Config+0x100>)
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	4a34      	ldr	r2, [pc, #208]	; (8002744 <SystemClock_Config+0x100>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	62d3      	str	r3, [r2, #44]	; 0x2c
 800267a:	4b32      	ldr	r3, [pc, #200]	; (8002744 <SystemClock_Config+0x100>)
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <SystemClock_Config+0x104>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800268c:	4a2e      	ldr	r2, [pc, #184]	; (8002748 <SystemClock_Config+0x104>)
 800268e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <SystemClock_Config+0x104>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80026a0:	bf00      	nop
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <SystemClock_Config+0x104>)
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ae:	d1f8      	bne.n	80026a2 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80026b0:	4b26      	ldr	r3, [pc, #152]	; (800274c <SystemClock_Config+0x108>)
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	4a25      	ldr	r2, [pc, #148]	; (800274c <SystemClock_Config+0x108>)
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80026bc:	2322      	movs	r3, #34	; 0x22
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80026c0:	2301      	movs	r3, #1
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026c4:	2340      	movs	r3, #64	; 0x40
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80026c8:	2301      	movs	r3, #1
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026cc:	2302      	movs	r3, #2
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026d0:	2300      	movs	r3, #0
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026d4:	2304      	movs	r3, #4
 80026d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80026d8:	2319      	movs	r3, #25
 80026da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80026dc:	2302      	movs	r3, #2
 80026de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026e0:	2304      	movs	r3, #4
 80026e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026e4:	2302      	movs	r3, #2
 80026e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80026e8:	230c      	movs	r3, #12
 80026ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	4618      	mov	r0, r3
 80026fa:	f006 fe33 	bl	8009364 <HAL_RCC_OscConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002704:	f000 ff4e 	bl	80035a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002708:	233f      	movs	r3, #63	; 0x3f
 800270a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800270c:	2303      	movs	r3, #3
 800270e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002714:	2308      	movs	r3, #8
 8002716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800271c:	2340      	movs	r3, #64	; 0x40
 800271e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2102      	movs	r1, #2
 800272c:	4618      	mov	r0, r3
 800272e:	f007 fa45 	bl	8009bbc <HAL_RCC_ClockConfig>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002738:	f000 ff34 	bl	80035a4 <Error_Handler>
  }
}
 800273c:	bf00      	nop
 800273e:	3770      	adds	r7, #112	; 0x70
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	58000400 	.word	0x58000400
 8002748:	58024800 	.word	0x58024800
 800274c:	58024400 	.word	0x58024400

08002750 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
 8002764:	615a      	str	r2, [r3, #20]
 8002766:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8002768:	4b29      	ldr	r3, [pc, #164]	; (8002810 <MX_ADC3_Init+0xc0>)
 800276a:	4a2a      	ldr	r2, [pc, #168]	; (8002814 <MX_ADC3_Init+0xc4>)
 800276c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <MX_ADC3_Init+0xc0>)
 8002770:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002774:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <MX_ADC3_Init+0xc0>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <MX_ADC3_Init+0xc0>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002782:	4b23      	ldr	r3, [pc, #140]	; (8002810 <MX_ADC3_Init+0xc0>)
 8002784:	2204      	movs	r2, #4
 8002786:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <MX_ADC3_Init+0xc0>)
 800278a:	2200      	movs	r2, #0
 800278c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <MX_ADC3_Init+0xc0>)
 8002790:	2201      	movs	r2, #1
 8002792:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <MX_ADC3_Init+0xc0>)
 8002796:	2201      	movs	r2, #1
 8002798:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <MX_ADC3_Init+0xc0>)
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <MX_ADC3_Init+0xc0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <MX_ADC3_Init+0xc0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <MX_ADC3_Init+0xc0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <MX_ADC3_Init+0xc0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <MX_ADC3_Init+0xc0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <MX_ADC3_Init+0xc0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80027c6:	4812      	ldr	r0, [pc, #72]	; (8002810 <MX_ADC3_Init+0xc0>)
 80027c8:	f002 f8fc 	bl	80049c4 <HAL_ADC_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80027d2:	f000 fee7 	bl	80035a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <MX_ADC3_Init+0xc8>)
 80027d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027da:	2306      	movs	r3, #6
 80027dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80027e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80027e8:	2304      	movs	r3, #4
 80027ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	; (8002810 <MX_ADC3_Init+0xc0>)
 80027fa:	f002 fa83 	bl	8004d04 <HAL_ADC_ConfigChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8002804:	f000 fece 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	24000e04 	.word	0x24000e04
 8002814:	58026000 	.word	0x58026000
 8002818:	04300002 	.word	0x04300002

0800281c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <MX_ETH_Init+0x80>)
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <MX_ETH_Init+0x84>)
 8002824:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002826:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <MX_ETH_Init+0x88>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <MX_ETH_Init+0x88>)
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002832:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <MX_ETH_Init+0x88>)
 8002834:	22e1      	movs	r2, #225	; 0xe1
 8002836:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <MX_ETH_Init+0x88>)
 800283a:	2200      	movs	r2, #0
 800283c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <MX_ETH_Init+0x88>)
 8002840:	2200      	movs	r2, #0
 8002842:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <MX_ETH_Init+0x88>)
 8002846:	2200      	movs	r2, #0
 8002848:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <MX_ETH_Init+0x80>)
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <MX_ETH_Init+0x88>)
 800284e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <MX_ETH_Init+0x80>)
 8002852:	2201      	movs	r2, #1
 8002854:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <MX_ETH_Init+0x80>)
 8002858:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <MX_ETH_Init+0x8c>)
 800285a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <MX_ETH_Init+0x80>)
 800285e:	4a13      	ldr	r2, [pc, #76]	; (80028ac <MX_ETH_Init+0x90>)
 8002860:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_ETH_Init+0x80>)
 8002864:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002868:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800286a:	480c      	ldr	r0, [pc, #48]	; (800289c <MX_ETH_Init+0x80>)
 800286c:	f005 fdee 	bl	800844c <HAL_ETH_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002876:	f000 fe95 	bl	80035a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800287a:	2234      	movs	r2, #52	; 0x34
 800287c:	2100      	movs	r1, #0
 800287e:	480c      	ldr	r0, [pc, #48]	; (80028b0 <MX_ETH_Init+0x94>)
 8002880:	f00d ff72 	bl	8010768 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <MX_ETH_Init+0x94>)
 8002886:	2221      	movs	r2, #33	; 0x21
 8002888:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <MX_ETH_Init+0x94>)
 800288c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002890:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <MX_ETH_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	24001018 	.word	0x24001018
 80028a0:	40028000 	.word	0x40028000
 80028a4:	2400059c 	.word	0x2400059c
 80028a8:	240000d8 	.word	0x240000d8
 80028ac:	24000078 	.word	0x24000078
 80028b0:	240010a0 	.word	0x240010a0

080028b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028ba:	4a28      	ldr	r2, [pc, #160]	; (800295c <MX_SPI3_Init+0xa8>)
 80028bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80028c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028ce:	2203      	movs	r2, #3
 80028d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <MX_SPI3_Init+0xa4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_SPI3_Init+0xa4>)
 8002900:	2200      	movs	r2, #0
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <MX_SPI3_Init+0xa4>)
 8002906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800290a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <MX_SPI3_Init+0xa4>)
 800290e:	2200      	movs	r2, #0
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_SPI3_Init+0xa4>)
 8002914:	2200      	movs	r2, #0
 8002916:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <MX_SPI3_Init+0xa4>)
 800291a:	2200      	movs	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_SPI3_Init+0xa4>)
 8002920:	2200      	movs	r2, #0
 8002922:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_SPI3_Init+0xa4>)
 8002926:	2200      	movs	r2, #0
 8002928:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <MX_SPI3_Init+0xa4>)
 800292c:	2200      	movs	r2, #0
 800292e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_SPI3_Init+0xa4>)
 8002932:	2200      	movs	r2, #0
 8002934:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <MX_SPI3_Init+0xa4>)
 8002938:	2200      	movs	r2, #0
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_SPI3_Init+0xa4>)
 800293e:	2200      	movs	r2, #0
 8002940:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <MX_SPI3_Init+0xa4>)
 8002944:	f009 fe4c 	bl	800c5e0 <HAL_SPI_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800294e:	f000 fe29 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	24000cec 	.word	0x24000cec
 800295c:	40003c00 	.word	0x40003c00

08002960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f00d fefa 	bl	8010768 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002974:	463b      	mov	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <MX_TIM1_Init+0xac>)
 8002980:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <MX_TIM1_Init+0xb0>)
 8002982:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <MX_TIM1_Init+0xac>)
 8002986:	2200      	movs	r2, #0
 8002988:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <MX_TIM1_Init+0xac>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002990:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <MX_TIM1_Init+0xac>)
 8002992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002996:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002998:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <MX_TIM1_Init+0xac>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800299e:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <MX_TIM1_Init+0xac>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <MX_TIM1_Init+0xac>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029aa:	2303      	movs	r3, #3
 80029ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b2:	2301      	movs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c2:	2301      	movs	r3, #1
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	4619      	mov	r1, r3
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <MX_TIM1_Init+0xac>)
 80029d6:	f00a f9f9 	bl	800cdcc <HAL_TIM_Encoder_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80029e0:	f000 fde0 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e4:	2300      	movs	r3, #0
 80029e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029f0:	463b      	mov	r3, r7
 80029f2:	4619      	mov	r1, r3
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_TIM1_Init+0xac>)
 80029f6:	f00b faa5 	bl	800df44 <HAL_TIMEx_MasterConfigSynchronization>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002a00:	f000 fdd0 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a04:	bf00      	nop
 8002a06:	3730      	adds	r7, #48	; 0x30
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	24000eb8 	.word	0x24000eb8
 8002a10:	40010000 	.word	0x40010000

08002a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08c      	sub	sp, #48	; 0x30
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	2224      	movs	r2, #36	; 0x24
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f00d fea0 	bl	8010768 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a28:	463b      	mov	r3, r7
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <MX_TIM2_Init+0xa4>)
 8002a34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <MX_TIM2_Init+0xa4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <MX_TIM2_Init+0xa4>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <MX_TIM2_Init+0xa4>)
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <MX_TIM2_Init+0xa4>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <MX_TIM2_Init+0xa4>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a62:	2301      	movs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a72:	2301      	movs	r3, #1
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a7e:	f107 030c 	add.w	r3, r7, #12
 8002a82:	4619      	mov	r1, r3
 8002a84:	480c      	ldr	r0, [pc, #48]	; (8002ab8 <MX_TIM2_Init+0xa4>)
 8002a86:	f00a f9a1 	bl	800cdcc <HAL_TIM_Encoder_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002a90:	f000 fd88 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <MX_TIM2_Init+0xa4>)
 8002aa2:	f00b fa4f 	bl	800df44 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002aac:	f000 fd7a 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ab0:	bf00      	nop
 8002ab2:	3730      	adds	r7, #48	; 0x30
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	24000f08 	.word	0x24000f08

08002abc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	; 0x30
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f00d fe4c 	bl	8010768 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	463b      	mov	r3, r7
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <MX_TIM3_Init+0xa4>)
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <MX_TIM3_Init+0xa8>)
 8002ade:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ae0:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <MX_TIM3_Init+0xa4>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <MX_TIM3_Init+0xa4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <MX_TIM3_Init+0xa4>)
 8002aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <MX_TIM3_Init+0xa4>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afa:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <MX_TIM3_Init+0xa4>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b00:	2303      	movs	r3, #3
 8002b02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <MX_TIM3_Init+0xa4>)
 8002b2c:	f00a f94e 	bl	800cdcc <HAL_TIM_Encoder_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002b36:	f000 fd35 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b42:	463b      	mov	r3, r7
 8002b44:	4619      	mov	r1, r3
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <MX_TIM3_Init+0xa4>)
 8002b48:	f00b f9fc 	bl	800df44 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002b52:	f000 fd27 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	3730      	adds	r7, #48	; 0x30
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	24000ca0 	.word	0x24000ca0
 8002b64:	40000400 	.word	0x40000400

08002b68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f00d fdf6 	bl	8010768 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <MX_TIM4_Init+0xa4>)
 8002b88:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002b8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <MX_TIM4_Init+0xa4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <MX_TIM4_Init+0xa4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <MX_TIM4_Init+0xa4>)
 8002b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <MX_TIM4_Init+0xa4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <MX_TIM4_Init+0xa4>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bac:	2303      	movs	r3, #3
 8002bae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	480d      	ldr	r0, [pc, #52]	; (8002c0c <MX_TIM4_Init+0xa4>)
 8002bd8:	f00a f8f8 	bl	800cdcc <HAL_TIM_Encoder_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002be2:	f000 fcdf 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bee:	463b      	mov	r3, r7
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4806      	ldr	r0, [pc, #24]	; (8002c0c <MX_TIM4_Init+0xa4>)
 8002bf4:	f00b f9a6 	bl	800df44 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002bfe:	f000 fcd1 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	3730      	adds	r7, #48	; 0x30
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2400073c 	.word	0x2400073c
 8002c10:	40000800 	.word	0x40000800

08002c14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <MX_TIM5_Init+0x94>)
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <MX_TIM5_Init+0x98>)
 8002c36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <MX_TIM5_Init+0x94>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <MX_TIM5_Init+0x94>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <MX_TIM5_Init+0x94>)
 8002c46:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002c4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <MX_TIM5_Init+0x94>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <MX_TIM5_Init+0x94>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c58:	4813      	ldr	r0, [pc, #76]	; (8002ca8 <MX_TIM5_Init+0x94>)
 8002c5a:	f009 fde2 	bl	800c822 <HAL_TIM_Base_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002c64:	f000 fc9e 	bl	80035a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c6e:	f107 0310 	add.w	r3, r7, #16
 8002c72:	4619      	mov	r1, r3
 8002c74:	480c      	ldr	r0, [pc, #48]	; (8002ca8 <MX_TIM5_Init+0x94>)
 8002c76:	f00a fc11 	bl	800d49c <HAL_TIM_ConfigClockSource>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002c80:	f000 fc90 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_TIM5_Init+0x94>)
 8002c92:	f00b f957 	bl	800df44 <HAL_TIMEx_MasterConfigSynchronization>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002c9c:	f000 fc82 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	24000c54 	.word	0x24000c54
 8002cac:	40000c00 	.word	0x40000c00

08002cb0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb6:	f107 0320 	add.w	r3, r7, #32
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
 8002cd0:	611a      	str	r2, [r3, #16]
 8002cd2:	615a      	str	r2, [r3, #20]
 8002cd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002cd8:	4a26      	ldr	r2, [pc, #152]	; (8002d74 <MX_TIM12_Init+0xc4>)
 8002cda:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002cea:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002cee:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf0:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002cfc:	481c      	ldr	r0, [pc, #112]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002cfe:	f009 fd90 	bl	800c822 <HAL_TIM_Base_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002d08:	f000 fc4c 	bl	80035a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d10:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002d12:	f107 0320 	add.w	r3, r7, #32
 8002d16:	4619      	mov	r1, r3
 8002d18:	4815      	ldr	r0, [pc, #84]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002d1a:	f00a fbbf 	bl	800d49c <HAL_TIM_ConfigClockSource>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002d24:	f000 fc3e 	bl	80035a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002d28:	4811      	ldr	r0, [pc, #68]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002d2a:	f009 fe49 	bl	800c9c0 <HAL_TIM_PWM_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002d34:	f000 fc36 	bl	80035a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d38:	2360      	movs	r3, #96	; 0x60
 8002d3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002d3c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002d40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4807      	ldr	r0, [pc, #28]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002d52:	f00a fa8f 	bl	800d274 <HAL_TIM_PWM_ConfigChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002d5c:	f000 fc22 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002d60:	4803      	ldr	r0, [pc, #12]	; (8002d70 <MX_TIM12_Init+0xc0>)
 8002d62:	f001 f80d 	bl	8003d80 <HAL_TIM_MspPostInit>

}
 8002d66:	bf00      	nop
 8002d68:	3730      	adds	r7, #48	; 0x30
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	24000fcc 	.word	0x24000fcc
 8002d74:	40001800 	.word	0x40001800

08002d78 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
 8002d8c:	615a      	str	r2, [r3, #20]
 8002d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002d90:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002d92:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <MX_TIM13_Init+0x98>)
 8002d94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002da4:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002da8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002db6:	4815      	ldr	r0, [pc, #84]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002db8:	f009 fd33 	bl	800c822 <HAL_TIM_Base_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002dc2:	f000 fbef 	bl	80035a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002dc6:	4811      	ldr	r0, [pc, #68]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002dc8:	f009 fdfa 	bl	800c9c0 <HAL_TIM_PWM_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002dd2:	f000 fbe7 	bl	80035a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dd6:	2360      	movs	r3, #96	; 0x60
 8002dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002dda:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002dde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	2200      	movs	r2, #0
 8002dec:	4619      	mov	r1, r3
 8002dee:	4807      	ldr	r0, [pc, #28]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002df0:	f00a fa40 	bl	800d274 <HAL_TIM_PWM_ConfigChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002dfa:	f000 fbd3 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002dfe:	4803      	ldr	r0, [pc, #12]	; (8002e0c <MX_TIM13_Init+0x94>)
 8002e00:	f000 ffbe 	bl	8003d80 <HAL_TIM_MspPostInit>

}
 8002e04:	bf00      	nop
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	24000e68 	.word	0x24000e68
 8002e10:	40001c00 	.word	0x40001c00

08002e14 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b092      	sub	sp, #72	; 0x48
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	611a      	str	r2, [r3, #16]
 8002e2a:	615a      	str	r2, [r3, #20]
 8002e2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e2e:	463b      	mov	r3, r7
 8002e30:	222c      	movs	r2, #44	; 0x2c
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f00d fc97 	bl	8010768 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002e3a:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002e3c:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <MX_TIM16_Init+0xf0>)
 8002e3e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e46:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002e4e:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002e52:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e54:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e60:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002e66:	4826      	ldr	r0, [pc, #152]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002e68:	f009 fcdb 	bl	800c822 <HAL_TIM_Base_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002e72:	f000 fb97 	bl	80035a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002e76:	4822      	ldr	r0, [pc, #136]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002e78:	f009 fda2 	bl	800c9c0 <HAL_TIM_PWM_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002e82:	f000 fb8f 	bl	80035a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e86:	2360      	movs	r3, #96	; 0x60
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002e8a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e90:	2300      	movs	r3, #0
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e94:	2300      	movs	r3, #0
 8002e96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4814      	ldr	r0, [pc, #80]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002eae:	f00a f9e1 	bl	800d274 <HAL_TIM_PWM_ConfigChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002eb8:	f000 fb74 	bl	80035a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002ede:	463b      	mov	r3, r7
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4807      	ldr	r0, [pc, #28]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002ee4:	f00b f8bc 	bl	800e060 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002eee:	f000 fb59 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002ef2:	4803      	ldr	r0, [pc, #12]	; (8002f00 <MX_TIM16_Init+0xec>)
 8002ef4:	f000 ff44 	bl	8003d80 <HAL_TIM_MspPostInit>

}
 8002ef8:	bf00      	nop
 8002efa:	3748      	adds	r7, #72	; 0x48
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	240010d4 	.word	0x240010d4
 8002f04:	40014400 	.word	0x40014400

08002f08 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b092      	sub	sp, #72	; 0x48
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
 8002f1c:	611a      	str	r2, [r3, #16]
 8002f1e:	615a      	str	r2, [r3, #20]
 8002f20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f22:	463b      	mov	r3, r7
 8002f24:	222c      	movs	r2, #44	; 0x2c
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f00d fc1d 	bl	8010768 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002f2e:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002f30:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <MX_TIM17_Init+0xf0>)
 8002f32:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002f34:	4b2f      	ldr	r3, [pc, #188]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8002f40:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002f42:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002f46:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f48:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002f4e:	4b29      	ldr	r3, [pc, #164]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f54:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002f5a:	4826      	ldr	r0, [pc, #152]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002f5c:	f009 fc61 	bl	800c822 <HAL_TIM_Base_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002f66:	f000 fb1d 	bl	80035a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002f6a:	4822      	ldr	r0, [pc, #136]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002f6c:	f009 fd28 	bl	800c9c0 <HAL_TIM_PWM_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002f76:	f000 fb15 	bl	80035a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f7a:	2360      	movs	r3, #96	; 0x60
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002f7e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002f82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f84:	2300      	movs	r3, #0
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f94:	2300      	movs	r3, #0
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4814      	ldr	r0, [pc, #80]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002fa2:	f00a f967 	bl	800d274 <HAL_TIM_PWM_ConfigChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002fac:	f000 fafa 	bl	80035a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002fd2:	463b      	mov	r3, r7
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4807      	ldr	r0, [pc, #28]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002fd8:	f00b f842 	bl	800e060 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8002fe2:	f000 fadf 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002fe6:	4803      	ldr	r0, [pc, #12]	; (8002ff4 <MX_TIM17_Init+0xec>)
 8002fe8:	f000 feca 	bl	8003d80 <HAL_TIM_MspPostInit>

}
 8002fec:	bf00      	nop
 8002fee:	3748      	adds	r7, #72	; 0x48
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	24000b90 	.word	0x24000b90
 8002ff8:	40014800 	.word	0x40014800

08002ffc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <MX_UART5_Init+0x90>)
 8003002:	4a23      	ldr	r2, [pc, #140]	; (8003090 <MX_UART5_Init+0x94>)
 8003004:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <MX_UART5_Init+0x90>)
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <MX_UART5_Init+0x98>)
 800300a:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800300c:	4b1f      	ldr	r3, [pc, #124]	; (800308c <MX_UART5_Init+0x90>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <MX_UART5_Init+0x90>)
 8003014:	2200      	movs	r2, #0
 8003016:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003018:	4b1c      	ldr	r3, [pc, #112]	; (800308c <MX_UART5_Init+0x90>)
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <MX_UART5_Init+0x90>)
 8003020:	220c      	movs	r2, #12
 8003022:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <MX_UART5_Init+0x90>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <MX_UART5_Init+0x90>)
 800302c:	2200      	movs	r2, #0
 800302e:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <MX_UART5_Init+0x90>)
 8003032:	2200      	movs	r2, #0
 8003034:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <MX_UART5_Init+0x90>)
 8003038:	2200      	movs	r2, #0
 800303a:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <MX_UART5_Init+0x90>)
 800303e:	2200      	movs	r2, #0
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003042:	4812      	ldr	r0, [pc, #72]	; (800308c <MX_UART5_Init+0x90>)
 8003044:	f00b f8a8 	bl	800e198 <HAL_UART_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 800304e:	f000 faa9 	bl	80035a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003052:	2100      	movs	r1, #0
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <MX_UART5_Init+0x90>)
 8003056:	f00c ff8e 	bl	800ff76 <HAL_UARTEx_SetTxFifoThreshold>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_UART5_Init+0x68>
  {
    Error_Handler();
 8003060:	f000 faa0 	bl	80035a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003064:	2100      	movs	r1, #0
 8003066:	4809      	ldr	r0, [pc, #36]	; (800308c <MX_UART5_Init+0x90>)
 8003068:	f00c ffc3 	bl	800fff2 <HAL_UARTEx_SetRxFifoThreshold>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 8003072:	f000 fa97 	bl	80035a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <MX_UART5_Init+0x90>)
 8003078:	f00c ff44 	bl	800ff04 <HAL_UARTEx_DisableFifoMode>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 8003082:	f000 fa8f 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	24000d74 	.word	0x24000d74
 8003090:	40005000 	.word	0x40005000
 8003094:	000f4240 	.word	0x000f4240

08003098 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <MX_UART7_Init+0x90>)
 800309e:	4a23      	ldr	r2, [pc, #140]	; (800312c <MX_UART7_Init+0x94>)
 80030a0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 80030a2:	4b21      	ldr	r3, [pc, #132]	; (8003128 <MX_UART7_Init+0x90>)
 80030a4:	4a22      	ldr	r2, [pc, #136]	; (8003130 <MX_UART7_Init+0x98>)
 80030a6:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <MX_UART7_Init+0x90>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <MX_UART7_Init+0x90>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <MX_UART7_Init+0x90>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <MX_UART7_Init+0x90>)
 80030bc:	220c      	movs	r2, #12
 80030be:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <MX_UART7_Init+0x90>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <MX_UART7_Init+0x90>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030cc:	4b16      	ldr	r3, [pc, #88]	; (8003128 <MX_UART7_Init+0x90>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <MX_UART7_Init+0x90>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <MX_UART7_Init+0x90>)
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80030de:	4812      	ldr	r0, [pc, #72]	; (8003128 <MX_UART7_Init+0x90>)
 80030e0:	f00b f85a 	bl	800e198 <HAL_UART_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_UART7_Init+0x56>
  {
    Error_Handler();
 80030ea:	f000 fa5b 	bl	80035a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ee:	2100      	movs	r1, #0
 80030f0:	480d      	ldr	r0, [pc, #52]	; (8003128 <MX_UART7_Init+0x90>)
 80030f2:	f00c ff40 	bl	800ff76 <HAL_UARTEx_SetTxFifoThreshold>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 80030fc:	f000 fa52 	bl	80035a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003100:	2100      	movs	r1, #0
 8003102:	4809      	ldr	r0, [pc, #36]	; (8003128 <MX_UART7_Init+0x90>)
 8003104:	f00c ff75 	bl	800fff2 <HAL_UARTEx_SetRxFifoThreshold>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 800310e:	f000 fa49 	bl	80035a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <MX_UART7_Init+0x90>)
 8003114:	f00c fef6 	bl	800ff04 <HAL_UARTEx_DisableFifoMode>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 800311e:	f000 fa41 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	240006ac 	.word	0x240006ac
 800312c:	40007800 	.word	0x40007800
 8003130:	000f4240 	.word	0x000f4240

08003134 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800313a:	4a16      	ldr	r2, [pc, #88]	; (8003194 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800313c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003140:	2209      	movs	r2, #9
 8003142:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003146:	2202      	movs	r2, #2
 8003148:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003152:	2202      	movs	r2, #2
 8003154:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003158:	2201      	movs	r2, #1
 800315a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800315e:	2200      	movs	r2, #0
 8003160:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003164:	2200      	movs	r2, #0
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800316a:	2201      	movs	r2, #1
 800316c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003170:	2201      	movs	r2, #1
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800317a:	4805      	ldr	r0, [pc, #20]	; (8003190 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800317c:	f005 ff5f 	bl	800903e <HAL_PCD_Init>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8003186:	f000 fa0d 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	24000788 	.word	0x24000788
 8003194:	40080000 	.word	0x40080000

08003198 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <MX_BDMA_Init+0x3c>)
 80031a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a4:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <MX_BDMA_Init+0x3c>)
 80031a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <MX_BDMA_Init+0x3c>)
 80031b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	2081      	movs	r0, #129	; 0x81
 80031c2:	f002 fad4 	bl	800576e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80031c6:	2081      	movs	r0, #129	; 0x81
 80031c8:	f002 faeb 	bl	80057a2 <HAL_NVIC_EnableIRQ>

}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	58024400 	.word	0x58024400

080031d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <MX_DMA_Init+0x4c>)
 80031e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031e4:	4a0f      	ldr	r2, [pc, #60]	; (8003224 <MX_DMA_Init+0x4c>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <MX_DMA_Init+0x4c>)
 80031f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	200b      	movs	r0, #11
 8003202:	f002 fab4 	bl	800576e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003206:	200b      	movs	r0, #11
 8003208:	f002 facb 	bl	80057a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	2100      	movs	r1, #0
 8003210:	200c      	movs	r0, #12
 8003212:	f002 faac 	bl	800576e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003216:	200c      	movs	r0, #12
 8003218:	f002 fac3 	bl	80057a2 <HAL_NVIC_EnableIRQ>

}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	58024400 	.word	0x58024400

08003228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	; 0x38
 800322c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800323e:	4bab      	ldr	r3, [pc, #684]	; (80034ec <MX_GPIO_Init+0x2c4>)
 8003240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003244:	4aa9      	ldr	r2, [pc, #676]	; (80034ec <MX_GPIO_Init+0x2c4>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800324e:	4ba7      	ldr	r3, [pc, #668]	; (80034ec <MX_GPIO_Init+0x2c4>)
 8003250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800325c:	4ba3      	ldr	r3, [pc, #652]	; (80034ec <MX_GPIO_Init+0x2c4>)
 800325e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003262:	4aa2      	ldr	r2, [pc, #648]	; (80034ec <MX_GPIO_Init+0x2c4>)
 8003264:	f043 0320 	orr.w	r3, r3, #32
 8003268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800326c:	4b9f      	ldr	r3, [pc, #636]	; (80034ec <MX_GPIO_Init+0x2c4>)
 800326e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800327a:	4b9c      	ldr	r3, [pc, #624]	; (80034ec <MX_GPIO_Init+0x2c4>)
 800327c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003280:	4a9a      	ldr	r2, [pc, #616]	; (80034ec <MX_GPIO_Init+0x2c4>)
 8003282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800328a:	4b98      	ldr	r3, [pc, #608]	; (80034ec <MX_GPIO_Init+0x2c4>)
 800328c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003298:	4b94      	ldr	r3, [pc, #592]	; (80034ec <MX_GPIO_Init+0x2c4>)
 800329a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329e:	4a93      	ldr	r2, [pc, #588]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a8:	4b90      	ldr	r3, [pc, #576]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b6:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032bc:	4a8b      	ldr	r2, [pc, #556]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032c6:	4b89      	ldr	r3, [pc, #548]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032d4:	4b85      	ldr	r3, [pc, #532]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032da:	4a84      	ldr	r2, [pc, #528]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e4:	4b81      	ldr	r3, [pc, #516]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032f2:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f8:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <MX_GPIO_Init+0x2c4>)
 80032fa:	f043 0310 	orr.w	r3, r3, #16
 80032fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003302:	4b7a      	ldr	r3, [pc, #488]	; (80034ec <MX_GPIO_Init+0x2c4>)
 8003304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003310:	4b76      	ldr	r3, [pc, #472]	; (80034ec <MX_GPIO_Init+0x2c4>)
 8003312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003316:	4a75      	ldr	r2, [pc, #468]	; (80034ec <MX_GPIO_Init+0x2c4>)
 8003318:	f043 0308 	orr.w	r3, r3, #8
 800331c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003320:	4b72      	ldr	r3, [pc, #456]	; (80034ec <MX_GPIO_Init+0x2c4>)
 8003322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8003334:	486e      	ldr	r0, [pc, #440]	; (80034f0 <MX_GPIO_Init+0x2c8>)
 8003336:	f005 fe4f 	bl	8008fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 800333a:	2200      	movs	r2, #0
 800333c:	f644 4101 	movw	r1, #19457	; 0x4c01
 8003340:	486c      	ldr	r0, [pc, #432]	; (80034f4 <MX_GPIO_Init+0x2cc>)
 8003342:	f005 fe49 	bl	8008fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8003346:	2200      	movs	r2, #0
 8003348:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800334c:	486a      	ldr	r0, [pc, #424]	; (80034f8 <MX_GPIO_Init+0x2d0>)
 800334e:	f005 fe43 	bl	8008fd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003352:	2200      	movs	r2, #0
 8003354:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003358:	4868      	ldr	r0, [pc, #416]	; (80034fc <MX_GPIO_Init+0x2d4>)
 800335a:	f005 fe3d 	bl	8008fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800335e:	2200      	movs	r2, #0
 8003360:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003364:	4866      	ldr	r0, [pc, #408]	; (8003500 <MX_GPIO_Init+0x2d8>)
 8003366:	f005 fe37 	bl	8008fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800336a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003370:	2300      	movs	r3, #0
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800337c:	4619      	mov	r1, r3
 800337e:	4861      	ldr	r0, [pc, #388]	; (8003504 <MX_GPIO_Init+0x2dc>)
 8003380:	f005 fc7a 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|DIR4_Pin;
 8003384:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338a:	2301      	movs	r3, #1
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800338e:	2301      	movs	r3, #1
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003392:	2300      	movs	r3, #0
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339a:	4619      	mov	r1, r3
 800339c:	4854      	ldr	r0, [pc, #336]	; (80034f0 <MX_GPIO_Init+0x2c8>)
 800339e:	f005 fc6b 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b0:	2300      	movs	r3, #0
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b8:	4619      	mov	r1, r3
 80033ba:	484d      	ldr	r0, [pc, #308]	; (80034f0 <MX_GPIO_Init+0x2c8>)
 80033bc:	f005 fc5c 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 80033c0:	f644 4301 	movw	r3, #19457	; 0x4c01
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c6:	2301      	movs	r3, #1
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d6:	4619      	mov	r1, r3
 80033d8:	4846      	ldr	r0, [pc, #280]	; (80034f4 <MX_GPIO_Init+0x2cc>)
 80033da:	f005 fc4d 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80033de:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e4:	2301      	movs	r3, #1
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ec:	2300      	movs	r3, #0
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f4:	4619      	mov	r1, r3
 80033f6:	4840      	ldr	r0, [pc, #256]	; (80034f8 <MX_GPIO_Init+0x2d0>)
 80033f8:	f005 fc3e 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR3_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin;
 80033fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003402:	2301      	movs	r3, #1
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003406:	2301      	movs	r3, #1
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340a:	2300      	movs	r3, #0
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR3_GPIO_Port, &GPIO_InitStruct);
 800340e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003412:	4619      	mov	r1, r3
 8003414:	4839      	ldr	r0, [pc, #228]	; (80034fc <MX_GPIO_Init+0x2d4>)
 8003416:	f005 fc2f 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800341a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800342c:	2307      	movs	r3, #7
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003434:	4619      	mov	r1, r3
 8003436:	4832      	ldr	r0, [pc, #200]	; (8003500 <MX_GPIO_Init+0x2d8>)
 8003438:	f005 fc1e 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800343c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003442:	2301      	movs	r3, #1
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800344e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003452:	4619      	mov	r1, r3
 8003454:	482a      	ldr	r0, [pc, #168]	; (8003500 <MX_GPIO_Init+0x2d8>)
 8003456:	f005 fc0f 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800345a:	2304      	movs	r3, #4
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800345e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346c:	4619      	mov	r1, r3
 800346e:	4822      	ldr	r0, [pc, #136]	; (80034f8 <MX_GPIO_Init+0x2d0>)
 8003470:	f005 fc02 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003474:	2308      	movs	r3, #8
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003478:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003486:	4619      	mov	r1, r3
 8003488:	481d      	ldr	r0, [pc, #116]	; (8003500 <MX_GPIO_Init+0x2d8>)
 800348a:	f005 fbf5 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 800348e:	23f0      	movs	r3, #240	; 0xf0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003492:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800349c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a0:	4619      	mov	r1, r3
 80034a2:	4817      	ldr	r0, [pc, #92]	; (8003500 <MX_GPIO_Init+0x2d8>)
 80034a4:	f005 fbe8 	bl	8008c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80034a8:	2302      	movs	r3, #2
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ac:	2301      	movs	r3, #1
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80034b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034bc:	4619      	mov	r1, r3
 80034be:	480f      	ldr	r0, [pc, #60]	; (80034fc <MX_GPIO_Init+0x2d4>)
 80034c0:	f005 fbda 	bl	8008c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2100      	movs	r1, #0
 80034c8:	200a      	movs	r0, #10
 80034ca:	f002 f950 	bl	800576e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80034ce:	200a      	movs	r0, #10
 80034d0:	f002 f967 	bl	80057a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	2017      	movs	r0, #23
 80034da:	f002 f948 	bl	800576e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034de:	2017      	movs	r0, #23
 80034e0:	f002 f95f 	bl	80057a2 <HAL_NVIC_EnableIRQ>

}
 80034e4:	bf00      	nop
 80034e6:	3738      	adds	r7, #56	; 0x38
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	58024400 	.word	0x58024400
 80034f0:	58021400 	.word	0x58021400
 80034f4:	58020400 	.word	0x58020400
 80034f8:	58021800 	.word	0x58021800
 80034fc:	58021000 	.word	0x58021000
 8003500:	58020c00 	.word	0x58020c00
 8003504:	58020800 	.word	0x58020800

08003508 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_UART_RxCpltCallback+0x2c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d102      	bne.n	800351e <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 8003518:	2001      	movs	r0, #1
 800351a:	f7fe f8a7 	bl	800166c <data_in>
	}
	if(huart==&huart7){
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a05      	ldr	r2, [pc, #20]	; (8003538 <HAL_UART_RxCpltCallback+0x30>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d102      	bne.n	800352c <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 8003526:	2002      	movs	r0, #2
 8003528:	f7fe f8a0 	bl	800166c <data_in>
	}
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	24000d74 	.word	0x24000d74
 8003538:	240006ac 	.word	0x240006ac

0800353c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a06      	ldr	r2, [pc, #24]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d102      	bne.n	8003552 <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]
	}
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	24000c54 	.word	0x24000c54
 8003564:	24000598 	.word	0x24000598

08003568 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b10      	cmp	r3, #16
 8003576:	d103      	bne.n	8003580 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 1);
 8003578:	2101      	movs	r1, #1
 800357a:	2001      	movs	r0, #1
 800357c:	f7fd fd7c 	bl	8001078 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	2b20      	cmp	r3, #32
 8003584:	d103      	bne.n	800358e <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 1);
 8003586:	2101      	movs	r1, #1
 8003588:	2002      	movs	r0, #2
 800358a:	f7fd fd75 	bl	8001078 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d103      	bne.n	800359c <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 1);
 8003594:	2101      	movs	r1, #1
 8003596:	2003      	movs	r0, #3
 8003598:	f7fd fd6e 	bl	8001078 <Stepper_updateHome>
    }
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a8:	b672      	cpsid	i
}
 80035aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035ac:	e7fe      	b.n	80035ac <Error_Handler+0x8>
	...

080035b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_MspInit+0x30>)
 80035b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035bc:	4a08      	ldr	r2, [pc, #32]	; (80035e0 <HAL_MspInit+0x30>)
 80035be:	f043 0302 	orr.w	r3, r3, #2
 80035c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_MspInit+0x30>)
 80035c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	58024400 	.word	0x58024400

080035e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b0ba      	sub	sp, #232	; 0xe8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035fc:	f107 0318 	add.w	r3, r7, #24
 8003600:	22bc      	movs	r2, #188	; 0xbc
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f00d f8af 	bl	8010768 <memset>
  if(hadc->Instance==ADC3)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a50      	ldr	r2, [pc, #320]	; (8003750 <HAL_ADC_MspInit+0x16c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	f040 8099 	bne.w	8003748 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003616:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800361a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 800361c:	2304      	movs	r3, #4
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8003620:	230a      	movs	r3, #10
 8003622:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003624:	2302      	movs	r3, #2
 8003626:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003628:	2302      	movs	r3, #2
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 800362c:	2304      	movs	r3, #4
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003630:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003634:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800363a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8003640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003648:	f107 0318 	add.w	r3, r7, #24
 800364c:	4618      	mov	r0, r3
 800364e:	f006 fe41 	bl	800a2d4 <HAL_RCCEx_PeriphCLKConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8003658:	f7ff ffa4 	bl	80035a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800365c:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_ADC_MspInit+0x170>)
 800365e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003662:	4a3c      	ldr	r2, [pc, #240]	; (8003754 <HAL_ADC_MspInit+0x170>)
 8003664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800366c:	4b39      	ldr	r3, [pc, #228]	; (8003754 <HAL_ADC_MspInit+0x170>)
 800366e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800367a:	4b36      	ldr	r3, [pc, #216]	; (8003754 <HAL_ADC_MspInit+0x170>)
 800367c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003680:	4a34      	ldr	r2, [pc, #208]	; (8003754 <HAL_ADC_MspInit+0x170>)
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800368a:	4b32      	ldr	r3, [pc, #200]	; (8003754 <HAL_ADC_MspInit+0x170>)
 800368c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003698:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <HAL_ADC_MspInit+0x170>)
 800369a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369e:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_ADC_MspInit+0x170>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_ADC_MspInit+0x170>)
 80036aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036be:	2303      	movs	r3, #3
 80036c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4821      	ldr	r0, [pc, #132]	; (8003758 <HAL_ADC_MspInit+0x174>)
 80036d2:	f005 fad1 	bl	8008c78 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80036d6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80036da:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80036de:	f000 ffcf 	bl	8004680 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80036e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80036e6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80036ea:	f000 ffc9 	bl	8004680 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_ADC_MspInit+0x178>)
 80036f0:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <HAL_ADC_MspInit+0x17c>)
 80036f2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_ADC_MspInit+0x178>)
 80036f6:	2211      	movs	r2, #17
 80036f8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <HAL_ADC_MspInit+0x178>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003700:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_ADC_MspInit+0x178>)
 8003702:	2200      	movs	r2, #0
 8003704:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_ADC_MspInit+0x178>)
 8003708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800370c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_ADC_MspInit+0x178>)
 8003710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003714:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_ADC_MspInit+0x178>)
 8003718:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800371c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_ADC_MspInit+0x178>)
 8003720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003724:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_ADC_MspInit+0x178>)
 8003728:	2200      	movs	r2, #0
 800372a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800372c:	480b      	ldr	r0, [pc, #44]	; (800375c <HAL_ADC_MspInit+0x178>)
 800372e:	f002 f853 	bl	80057d8 <HAL_DMA_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 8003738:	f7ff ff34 	bl	80035a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a07      	ldr	r2, [pc, #28]	; (800375c <HAL_ADC_MspInit+0x178>)
 8003740:	64da      	str	r2, [r3, #76]	; 0x4c
 8003742:	4a06      	ldr	r2, [pc, #24]	; (800375c <HAL_ADC_MspInit+0x178>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003748:	bf00      	nop
 800374a:	37e8      	adds	r7, #232	; 0xe8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	58026000 	.word	0x58026000
 8003754:	58024400 	.word	0x58024400
 8003758:	58021400 	.word	0x58021400
 800375c:	24000bdc 	.word	0x24000bdc
 8003760:	58025408 	.word	0x58025408

08003764 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08e      	sub	sp, #56	; 0x38
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a59      	ldr	r2, [pc, #356]	; (80038e8 <HAL_ETH_MspInit+0x184>)
 8003782:	4293      	cmp	r3, r2
 8003784:	f040 80ab 	bne.w	80038de <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_ETH_MspInit+0x188>)
 800378a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800378e:	4a57      	ldr	r2, [pc, #348]	; (80038ec <HAL_ETH_MspInit+0x188>)
 8003790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003794:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003798:	4b54      	ldr	r3, [pc, #336]	; (80038ec <HAL_ETH_MspInit+0x188>)
 800379a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800379e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80037a6:	4b51      	ldr	r3, [pc, #324]	; (80038ec <HAL_ETH_MspInit+0x188>)
 80037a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037ac:	4a4f      	ldr	r2, [pc, #316]	; (80038ec <HAL_ETH_MspInit+0x188>)
 80037ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037b6:	4b4d      	ldr	r3, [pc, #308]	; (80038ec <HAL_ETH_MspInit+0x188>)
 80037b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80037c4:	4b49      	ldr	r3, [pc, #292]	; (80038ec <HAL_ETH_MspInit+0x188>)
 80037c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037ca:	4a48      	ldr	r2, [pc, #288]	; (80038ec <HAL_ETH_MspInit+0x188>)
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037d4:	4b45      	ldr	r3, [pc, #276]	; (80038ec <HAL_ETH_MspInit+0x188>)
 80037d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e2:	4b42      	ldr	r3, [pc, #264]	; (80038ec <HAL_ETH_MspInit+0x188>)
 80037e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e8:	4a40      	ldr	r2, [pc, #256]	; (80038ec <HAL_ETH_MspInit+0x188>)
 80037ea:	f043 0304 	orr.w	r3, r3, #4
 80037ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037f2:	4b3e      	ldr	r3, [pc, #248]	; (80038ec <HAL_ETH_MspInit+0x188>)
 80037f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003800:	4b3a      	ldr	r3, [pc, #232]	; (80038ec <HAL_ETH_MspInit+0x188>)
 8003802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003806:	4a39      	ldr	r2, [pc, #228]	; (80038ec <HAL_ETH_MspInit+0x188>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_ETH_MspInit+0x188>)
 8003812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <HAL_ETH_MspInit+0x188>)
 8003820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003824:	4a31      	ldr	r2, [pc, #196]	; (80038ec <HAL_ETH_MspInit+0x188>)
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_ETH_MspInit+0x188>)
 8003830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800383c:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_ETH_MspInit+0x188>)
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003842:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <HAL_ETH_MspInit+0x188>)
 8003844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800384c:	4b27      	ldr	r3, [pc, #156]	; (80038ec <HAL_ETH_MspInit+0x188>)
 800384e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800385a:	2332      	movs	r3, #50	; 0x32
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	2302      	movs	r3, #2
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003866:	2300      	movs	r3, #0
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800386a:	230b      	movs	r3, #11
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800386e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003872:	4619      	mov	r1, r3
 8003874:	481e      	ldr	r0, [pc, #120]	; (80038f0 <HAL_ETH_MspInit+0x18c>)
 8003876:	f005 f9ff 	bl	8008c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800387a:	2386      	movs	r3, #134	; 0x86
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	2300      	movs	r3, #0
 8003888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800388a:	230b      	movs	r3, #11
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003892:	4619      	mov	r1, r3
 8003894:	4817      	ldr	r0, [pc, #92]	; (80038f4 <HAL_ETH_MspInit+0x190>)
 8003896:	f005 f9ef 	bl	8008c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800389a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	2302      	movs	r3, #2
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a8:	2300      	movs	r3, #0
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038ac:	230b      	movs	r3, #11
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b4:	4619      	mov	r1, r3
 80038b6:	4810      	ldr	r0, [pc, #64]	; (80038f8 <HAL_ETH_MspInit+0x194>)
 80038b8:	f005 f9de 	bl	8008c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80038bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ca:	2300      	movs	r3, #0
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038ce:	230b      	movs	r3, #11
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d6:	4619      	mov	r1, r3
 80038d8:	4808      	ldr	r0, [pc, #32]	; (80038fc <HAL_ETH_MspInit+0x198>)
 80038da:	f005 f9cd 	bl	8008c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80038de:	bf00      	nop
 80038e0:	3738      	adds	r7, #56	; 0x38
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40028000 	.word	0x40028000
 80038ec:	58024400 	.word	0x58024400
 80038f0:	58020800 	.word	0x58020800
 80038f4:	58020000 	.word	0x58020000
 80038f8:	58020400 	.word	0x58020400
 80038fc:	58021800 	.word	0x58021800

08003900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b0ba      	sub	sp, #232	; 0xe8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003918:	f107 0318 	add.w	r3, r7, #24
 800391c:	22bc      	movs	r2, #188	; 0xbc
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f00c ff21 	bl	8010768 <memset>
  if(hspi->Instance==SPI3)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a37      	ldr	r2, [pc, #220]	; (8003a08 <HAL_SPI_MspInit+0x108>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d166      	bne.n	80039fe <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003934:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003936:	2300      	movs	r3, #0
 8003938:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800393a:	f107 0318 	add.w	r3, r7, #24
 800393e:	4618      	mov	r0, r3
 8003940:	f006 fcc8 	bl	800a2d4 <HAL_RCCEx_PeriphCLKConfig>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800394a:	f7ff fe2b 	bl	80035a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800394e:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <HAL_SPI_MspInit+0x10c>)
 8003950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003954:	4a2d      	ldr	r2, [pc, #180]	; (8003a0c <HAL_SPI_MspInit+0x10c>)
 8003956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800395e:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_SPI_MspInit+0x10c>)
 8003960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_SPI_MspInit+0x10c>)
 800396e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003972:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <HAL_SPI_MspInit+0x10c>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_SPI_MspInit+0x10c>)
 800397e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_SPI_MspInit+0x10c>)
 800398c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003990:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <HAL_SPI_MspInit+0x10c>)
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800399a:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <HAL_SPI_MspInit+0x10c>)
 800399c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039a8:	2310      	movs	r3, #16
 80039aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ae:	2302      	movs	r3, #2
 80039b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80039c0:	2306      	movs	r3, #6
 80039c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4810      	ldr	r0, [pc, #64]	; (8003a10 <HAL_SPI_MspInit+0x110>)
 80039ce:	f005 f953 	bl	8008c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80039d2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80039d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80039ec:	2306      	movs	r3, #6
 80039ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039f6:	4619      	mov	r1, r3
 80039f8:	4806      	ldr	r0, [pc, #24]	; (8003a14 <HAL_SPI_MspInit+0x114>)
 80039fa:	f005 f93d 	bl	8008c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80039fe:	bf00      	nop
 8003a00:	37e8      	adds	r7, #232	; 0xe8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40003c00 	.word	0x40003c00
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	58020000 	.word	0x58020000
 8003a14:	58020800 	.word	0x58020800

08003a18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b090      	sub	sp, #64	; 0x40
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a78      	ldr	r2, [pc, #480]	; (8003c18 <HAL_TIM_Encoder_MspInit+0x200>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d12f      	bne.n	8003a9a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a3a:	4b78      	ldr	r3, [pc, #480]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a40:	4a76      	ldr	r2, [pc, #472]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a4a:	4b74      	ldr	r3, [pc, #464]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a58:	4b70      	ldr	r3, [pc, #448]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a5e:	4a6f      	ldr	r2, [pc, #444]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003a60:	f043 0310 	orr.w	r3, r3, #16
 8003a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a68:	4b6c      	ldr	r3, [pc, #432]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 8003a76:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a84:	2300      	movs	r3, #0
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a90:	4619      	mov	r1, r3
 8003a92:	4863      	ldr	r0, [pc, #396]	; (8003c20 <HAL_TIM_Encoder_MspInit+0x208>)
 8003a94:	f005 f8f0 	bl	8008c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a98:	e0ba      	b.n	8003c10 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d14d      	bne.n	8003b40 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aa4:	4b5d      	ldr	r3, [pc, #372]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aaa:	4a5c      	ldr	r2, [pc, #368]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ab4:	4b59      	ldr	r3, [pc, #356]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	4b56      	ldr	r3, [pc, #344]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac8:	4a54      	ldr	r2, [pc, #336]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ad2:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae0:	4b4e      	ldr	r3, [pc, #312]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae6:	4a4d      	ldr	r2, [pc, #308]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003af0:	4b4a      	ldr	r3, [pc, #296]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8003afe:	2320      	movs	r3, #32
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 8003b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b16:	4619      	mov	r1, r3
 8003b18:	4842      	ldr	r0, [pc, #264]	; (8003c24 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003b1a:	f005 f8ad 	bl	8008c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8003b1e:	2308      	movs	r3, #8
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b22:	2302      	movs	r3, #2
 8003b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 8003b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b36:	4619      	mov	r1, r3
 8003b38:	483b      	ldr	r0, [pc, #236]	; (8003c28 <HAL_TIM_Encoder_MspInit+0x210>)
 8003b3a:	f005 f89d 	bl	8008c78 <HAL_GPIO_Init>
}
 8003b3e:	e067      	b.n	8003c10 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a39      	ldr	r2, [pc, #228]	; (8003c2c <HAL_TIM_Encoder_MspInit+0x214>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d12e      	bne.n	8003ba8 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b4a:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b50:	4a32      	ldr	r2, [pc, #200]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b68:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b6e:	4a2b      	ldr	r2, [pc, #172]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b78:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 8003b86:	2330      	movs	r3, #48	; 0x30
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b92:	2300      	movs	r3, #0
 8003b94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b96:	2302      	movs	r3, #2
 8003b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4821      	ldr	r0, [pc, #132]	; (8003c28 <HAL_TIM_Encoder_MspInit+0x210>)
 8003ba2:	f005 f869 	bl	8008c78 <HAL_GPIO_Init>
}
 8003ba6:	e033      	b.n	8003c10 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a20      	ldr	r2, [pc, #128]	; (8003c30 <HAL_TIM_Encoder_MspInit+0x218>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d12e      	bne.n	8003c10 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bb8:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bba:	f043 0304 	orr.w	r3, r3, #4
 8003bbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd0:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bd6:	4a11      	ldr	r2, [pc, #68]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bd8:	f043 0308 	orr.w	r3, r3, #8
 8003bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003be0:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <HAL_TIM_Encoder_MspInit+0x204>)
 8003be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 8003bee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c00:	2302      	movs	r3, #2
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c08:	4619      	mov	r1, r3
 8003c0a:	480a      	ldr	r0, [pc, #40]	; (8003c34 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003c0c:	f005 f834 	bl	8008c78 <HAL_GPIO_Init>
}
 8003c10:	bf00      	nop
 8003c12:	3740      	adds	r7, #64	; 0x40
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	58021000 	.word	0x58021000
 8003c24:	58020000 	.word	0x58020000
 8003c28:	58020400 	.word	0x58020400
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	58020c00 	.word	0x58020c00

08003c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a48      	ldr	r2, [pc, #288]	; (8003d68 <HAL_TIM_Base_MspInit+0x130>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d117      	bne.n	8003c7a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c4a:	4b48      	ldr	r3, [pc, #288]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c50:	4a46      	ldr	r2, [pc, #280]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003c52:	f043 0308 	orr.w	r3, r3, #8
 8003c56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c5a:	4b44      	ldr	r3, [pc, #272]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	2032      	movs	r0, #50	; 0x32
 8003c6e:	f001 fd7e 	bl	800576e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c72:	2032      	movs	r0, #50	; 0x32
 8003c74:	f001 fd95 	bl	80057a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003c78:	e072      	b.n	8003d60 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3c      	ldr	r2, [pc, #240]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d117      	bne.n	8003cb4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003c84:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c8a:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c94:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	202b      	movs	r0, #43	; 0x2b
 8003ca8:	f001 fd61 	bl	800576e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003cac:	202b      	movs	r0, #43	; 0x2b
 8003cae:	f001 fd78 	bl	80057a2 <HAL_NVIC_EnableIRQ>
}
 8003cb2:	e055      	b.n	8003d60 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a2e      	ldr	r2, [pc, #184]	; (8003d74 <HAL_TIM_Base_MspInit+0x13c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d117      	bne.n	8003cee <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cc4:	4a29      	ldr	r2, [pc, #164]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cce:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2100      	movs	r1, #0
 8003ce0:	202c      	movs	r0, #44	; 0x2c
 8003ce2:	f001 fd44 	bl	800576e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003ce6:	202c      	movs	r0, #44	; 0x2c
 8003ce8:	f001 fd5b 	bl	80057a2 <HAL_NVIC_EnableIRQ>
}
 8003cec:	e038      	b.n	8003d60 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <HAL_TIM_Base_MspInit+0x140>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d117      	bne.n	8003d28 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003cf8:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cfe:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2100      	movs	r1, #0
 8003d1a:	2075      	movs	r0, #117	; 0x75
 8003d1c:	f001 fd27 	bl	800576e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003d20:	2075      	movs	r0, #117	; 0x75
 8003d22:	f001 fd3e 	bl	80057a2 <HAL_NVIC_EnableIRQ>
}
 8003d26:	e01b      	b.n	8003d60 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <HAL_TIM_Base_MspInit+0x144>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d116      	bne.n	8003d60 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d38:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003d50:	2200      	movs	r2, #0
 8003d52:	2100      	movs	r1, #0
 8003d54:	2076      	movs	r0, #118	; 0x76
 8003d56:	f001 fd0a 	bl	800576e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003d5a:	2076      	movs	r0, #118	; 0x76
 8003d5c:	f001 fd21 	bl	80057a2 <HAL_NVIC_EnableIRQ>
}
 8003d60:	bf00      	nop
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40000c00 	.word	0x40000c00
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	40001800 	.word	0x40001800
 8003d74:	40001c00 	.word	0x40001c00
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800

08003d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08c      	sub	sp, #48	; 0x30
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d88:	f107 031c 	add.w	r3, r7, #28
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ecc <HAL_TIM_MspPostInit+0x14c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d120      	bne.n	8003de4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da2:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da8:	4a49      	ldr	r2, [pc, #292]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8003dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 8003dd6:	f107 031c 	add.w	r3, r7, #28
 8003dda:	4619      	mov	r1, r3
 8003ddc:	483d      	ldr	r0, [pc, #244]	; (8003ed4 <HAL_TIM_MspPostInit+0x154>)
 8003dde:	f004 ff4b 	bl	8008c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003de2:	e06f      	b.n	8003ec4 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3b      	ldr	r2, [pc, #236]	; (8003ed8 <HAL_TIM_MspPostInit+0x158>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d11f      	bne.n	8003e2e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dee:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003df4:	4a36      	ldr	r2, [pc, #216]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dfe:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8003e0c:	2340      	movs	r3, #64	; 0x40
 8003e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e10:	2302      	movs	r3, #2
 8003e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e14:	2301      	movs	r3, #1
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003e1c:	2309      	movs	r3, #9
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8003e20:	f107 031c 	add.w	r3, r7, #28
 8003e24:	4619      	mov	r1, r3
 8003e26:	482d      	ldr	r0, [pc, #180]	; (8003edc <HAL_TIM_MspPostInit+0x15c>)
 8003e28:	f004 ff26 	bl	8008c78 <HAL_GPIO_Init>
}
 8003e2c:	e04a      	b.n	8003ec4 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2b      	ldr	r2, [pc, #172]	; (8003ee0 <HAL_TIM_MspPostInit+0x160>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d120      	bne.n	8003e7a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e38:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e3e:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003e40:	f043 0302 	orr.w	r3, r3, #2
 8003e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 8003e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e60:	2301      	movs	r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e64:	2300      	movs	r3, #0
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 8003e6c:	f107 031c 	add.w	r3, r7, #28
 8003e70:	4619      	mov	r1, r3
 8003e72:	4818      	ldr	r0, [pc, #96]	; (8003ed4 <HAL_TIM_MspPostInit+0x154>)
 8003e74:	f004 ff00 	bl	8008c78 <HAL_GPIO_Init>
}
 8003e78:	e024      	b.n	8003ec4 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_TIM_MspPostInit+0x164>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d11f      	bne.n	8003ec4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e8a:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_TIM_MspPostInit+0x150>)
 8003e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8003ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eac:	2301      	movs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 8003eb8:	f107 031c 	add.w	r3, r7, #28
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <HAL_TIM_MspPostInit+0x154>)
 8003ec0:	f004 feda 	bl	8008c78 <HAL_GPIO_Init>
}
 8003ec4:	bf00      	nop
 8003ec6:	3730      	adds	r7, #48	; 0x30
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40001800 	.word	0x40001800
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	58020400 	.word	0x58020400
 8003ed8:	40001c00 	.word	0x40001c00
 8003edc:	58020000 	.word	0x58020000
 8003ee0:	40014400 	.word	0x40014400
 8003ee4:	40014800 	.word	0x40014800

08003ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0ba      	sub	sp, #232	; 0xe8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f00:	f107 0318 	add.w	r3, r7, #24
 8003f04:	22bc      	movs	r2, #188	; 0xbc
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f00c fc2d 	bl	8010768 <memset>
  if(huart->Instance==UART5)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a7f      	ldr	r2, [pc, #508]	; (8004110 <HAL_UART_MspInit+0x228>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	f040 80a8 	bne.w	800406a <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f24:	f107 0318 	add.w	r3, r7, #24
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f006 f9d3 	bl	800a2d4 <HAL_RCCEx_PeriphCLKConfig>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003f34:	f7ff fb36 	bl	80035a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f38:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_UART_MspInit+0x22c>)
 8003f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f3e:	4a75      	ldr	r2, [pc, #468]	; (8004114 <HAL_UART_MspInit+0x22c>)
 8003f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f48:	4b72      	ldr	r3, [pc, #456]	; (8004114 <HAL_UART_MspInit+0x22c>)
 8003f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f56:	4b6f      	ldr	r3, [pc, #444]	; (8004114 <HAL_UART_MspInit+0x22c>)
 8003f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f5c:	4a6d      	ldr	r2, [pc, #436]	; (8004114 <HAL_UART_MspInit+0x22c>)
 8003f5e:	f043 0302 	orr.w	r3, r3, #2
 8003f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f66:	4b6b      	ldr	r3, [pc, #428]	; (8004114 <HAL_UART_MspInit+0x22c>)
 8003f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003f74:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003f8e:	230e      	movs	r3, #14
 8003f90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	485f      	ldr	r0, [pc, #380]	; (8004118 <HAL_UART_MspInit+0x230>)
 8003f9c:	f004 fe6c 	bl	8008c78 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8003fa0:	4b5e      	ldr	r3, [pc, #376]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fa2:	4a5f      	ldr	r2, [pc, #380]	; (8004120 <HAL_UART_MspInit+0x238>)
 8003fa4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8003fa6:	4b5d      	ldr	r3, [pc, #372]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fa8:	2241      	movs	r2, #65	; 0x41
 8003faa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fac:	4b5b      	ldr	r3, [pc, #364]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb2:	4b5a      	ldr	r3, [pc, #360]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fb8:	4b58      	ldr	r3, [pc, #352]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fbe:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fc0:	4b56      	ldr	r3, [pc, #344]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fc6:	4b55      	ldr	r3, [pc, #340]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003fcc:	4b53      	ldr	r3, [pc, #332]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fd4:	4b51      	ldr	r3, [pc, #324]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fda:	4b50      	ldr	r3, [pc, #320]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003fe0:	484e      	ldr	r0, [pc, #312]	; (800411c <HAL_UART_MspInit+0x234>)
 8003fe2:	f001 fbf9 	bl	80057d8 <HAL_DMA_Init>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003fec:	f7ff fada 	bl	80035a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_UART_MspInit+0x234>)
 8003ff4:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ff6:	4a49      	ldr	r2, [pc, #292]	; (800411c <HAL_UART_MspInit+0x234>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 8003ffc:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_UART_MspInit+0x23c>)
 8003ffe:	4a4a      	ldr	r2, [pc, #296]	; (8004128 <HAL_UART_MspInit+0x240>)
 8004000:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8004002:	4b48      	ldr	r3, [pc, #288]	; (8004124 <HAL_UART_MspInit+0x23c>)
 8004004:	2242      	movs	r2, #66	; 0x42
 8004006:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004008:	4b46      	ldr	r3, [pc, #280]	; (8004124 <HAL_UART_MspInit+0x23c>)
 800400a:	2240      	movs	r2, #64	; 0x40
 800400c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800400e:	4b45      	ldr	r3, [pc, #276]	; (8004124 <HAL_UART_MspInit+0x23c>)
 8004010:	2200      	movs	r2, #0
 8004012:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004014:	4b43      	ldr	r3, [pc, #268]	; (8004124 <HAL_UART_MspInit+0x23c>)
 8004016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800401a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800401c:	4b41      	ldr	r3, [pc, #260]	; (8004124 <HAL_UART_MspInit+0x23c>)
 800401e:	2200      	movs	r2, #0
 8004020:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004022:	4b40      	ldr	r3, [pc, #256]	; (8004124 <HAL_UART_MspInit+0x23c>)
 8004024:	2200      	movs	r2, #0
 8004026:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8004028:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <HAL_UART_MspInit+0x23c>)
 800402a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800402e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004030:	4b3c      	ldr	r3, [pc, #240]	; (8004124 <HAL_UART_MspInit+0x23c>)
 8004032:	2200      	movs	r2, #0
 8004034:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004036:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <HAL_UART_MspInit+0x23c>)
 8004038:	2200      	movs	r2, #0
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800403c:	4839      	ldr	r0, [pc, #228]	; (8004124 <HAL_UART_MspInit+0x23c>)
 800403e:	f001 fbcb 	bl	80057d8 <HAL_DMA_Init>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004048:	f7ff faac 	bl	80035a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a35      	ldr	r2, [pc, #212]	; (8004124 <HAL_UART_MspInit+0x23c>)
 8004050:	679a      	str	r2, [r3, #120]	; 0x78
 8004052:	4a34      	ldr	r2, [pc, #208]	; (8004124 <HAL_UART_MspInit+0x23c>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004058:	2200      	movs	r2, #0
 800405a:	2100      	movs	r1, #0
 800405c:	2035      	movs	r0, #53	; 0x35
 800405e:	f001 fb86 	bl	800576e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004062:	2035      	movs	r0, #53	; 0x35
 8004064:	f001 fb9d 	bl	80057a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8004068:	e04e      	b.n	8004108 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2f      	ldr	r2, [pc, #188]	; (800412c <HAL_UART_MspInit+0x244>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d149      	bne.n	8004108 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004074:	2302      	movs	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800407e:	f107 0318 	add.w	r3, r7, #24
 8004082:	4618      	mov	r0, r3
 8004084:	f006 f926 	bl	800a2d4 <HAL_RCCEx_PeriphCLKConfig>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800408e:	f7ff fa89 	bl	80035a4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004092:	4b20      	ldr	r3, [pc, #128]	; (8004114 <HAL_UART_MspInit+0x22c>)
 8004094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004098:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <HAL_UART_MspInit+0x22c>)
 800409a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800409e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040a2:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <HAL_UART_MspInit+0x22c>)
 80040a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <HAL_UART_MspInit+0x22c>)
 80040b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040b6:	4a17      	ldr	r2, [pc, #92]	; (8004114 <HAL_UART_MspInit+0x22c>)
 80040b8:	f043 0320 	orr.w	r3, r3, #32
 80040bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040c0:	4b14      	ldr	r3, [pc, #80]	; (8004114 <HAL_UART_MspInit+0x22c>)
 80040c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 80040ce:	23c0      	movs	r3, #192	; 0xc0
 80040d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	2302      	movs	r3, #2
 80040d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80040e6:	2307      	movs	r3, #7
 80040e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040f0:	4619      	mov	r1, r3
 80040f2:	480f      	ldr	r0, [pc, #60]	; (8004130 <HAL_UART_MspInit+0x248>)
 80040f4:	f004 fdc0 	bl	8008c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	2100      	movs	r1, #0
 80040fc:	2052      	movs	r0, #82	; 0x52
 80040fe:	f001 fb36 	bl	800576e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004102:	2052      	movs	r0, #82	; 0x52
 8004104:	f001 fb4d 	bl	80057a2 <HAL_NVIC_EnableIRQ>
}
 8004108:	bf00      	nop
 800410a:	37e8      	adds	r7, #232	; 0xe8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40005000 	.word	0x40005000
 8004114:	58024400 	.word	0x58024400
 8004118:	58020400 	.word	0x58020400
 800411c:	24000f54 	.word	0x24000f54
 8004120:	40020028 	.word	0x40020028
 8004124:	24001120 	.word	0x24001120
 8004128:	40020010 	.word	0x40020010
 800412c:	40007800 	.word	0x40007800
 8004130:	58021400 	.word	0x58021400

08004134 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b0b8      	sub	sp, #224	; 0xe0
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	22bc      	movs	r2, #188	; 0xbc
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f00c fb07 	bl	8010768 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2f      	ldr	r2, [pc, #188]	; (800421c <HAL_PCD_MspInit+0xe8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d156      	bne.n	8004212 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004164:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004168:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800416a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800416e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004172:	f107 0310 	add.w	r3, r7, #16
 8004176:	4618      	mov	r0, r3
 8004178:	f006 f8ac 	bl	800a2d4 <HAL_RCCEx_PeriphCLKConfig>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8004182:	f7ff fa0f 	bl	80035a4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004186:	f005 f8dd 	bl	8009344 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	4b25      	ldr	r3, [pc, #148]	; (8004220 <HAL_PCD_MspInit+0xec>)
 800418c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <HAL_PCD_MspInit+0xec>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800419a:	4b21      	ldr	r3, [pc, #132]	; (8004220 <HAL_PCD_MspInit+0xec>)
 800419c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80041a8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80041ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b0:	2302      	movs	r3, #2
 80041b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80041c2:	230a      	movs	r3, #10
 80041c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041cc:	4619      	mov	r1, r3
 80041ce:	4815      	ldr	r0, [pc, #84]	; (8004224 <HAL_PCD_MspInit+0xf0>)
 80041d0:	f004 fd52 	bl	8008c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041ec:	4619      	mov	r1, r3
 80041ee:	480d      	ldr	r0, [pc, #52]	; (8004224 <HAL_PCD_MspInit+0xf0>)
 80041f0:	f004 fd42 	bl	8008c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <HAL_PCD_MspInit+0xec>)
 80041f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_PCD_MspInit+0xec>)
 80041fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004200:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_PCD_MspInit+0xec>)
 8004206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800420a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004212:	bf00      	nop
 8004214:	37e0      	adds	r7, #224	; 0xe0
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40080000 	.word	0x40080000
 8004220:	58024400 	.word	0x58024400
 8004224:	58020000 	.word	0x58020000

08004228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800422c:	e7fe      	b.n	800422c <NMI_Handler+0x4>

0800422e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004232:	e7fe      	b.n	8004232 <HardFault_Handler+0x4>

08004234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004238:	e7fe      	b.n	8004238 <MemManage_Handler+0x4>

0800423a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800423e:	e7fe      	b.n	800423e <BusFault_Handler+0x4>

08004240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004244:	e7fe      	b.n	8004244 <UsageFault_Handler+0x4>

08004246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004274:	f000 f9a0 	bl	80045b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}

0800427c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004280:	2010      	movs	r0, #16
 8004282:	f004 fec2 	bl	800900a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004290:	4802      	ldr	r0, [pc, #8]	; (800429c <DMA1_Stream0_IRQHandler+0x10>)
 8004292:	f002 fdc9 	bl	8006e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	24001120 	.word	0x24001120

080042a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80042a4:	4802      	ldr	r0, [pc, #8]	; (80042b0 <DMA1_Stream1_IRQHandler+0x10>)
 80042a6:	f002 fdbf 	bl	8006e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	24000f54 	.word	0x24000f54

080042b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80042b8:	2020      	movs	r0, #32
 80042ba:	f004 fea6 	bl	800900a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80042be:	2040      	movs	r0, #64	; 0x40
 80042c0:	f004 fea3 	bl	800900a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80042c4:	2080      	movs	r0, #128	; 0x80
 80042c6:	f004 fea0 	bl	800900a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80042d6:	f008 fead 	bl	800d034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	24000fcc 	.word	0x24000fcc

080042e4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80042ea:	f008 fea3 	bl	800d034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	24000e68 	.word	0x24000e68

080042f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <TIM5_IRQHandler+0x10>)
 80042fe:	f008 fe99 	bl	800d034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	24000c54 	.word	0x24000c54

0800430c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004310:	4802      	ldr	r0, [pc, #8]	; (800431c <UART5_IRQHandler+0x10>)
 8004312:	f00a f87d 	bl	800e410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	24000d74 	.word	0x24000d74

08004320 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004324:	4802      	ldr	r0, [pc, #8]	; (8004330 <UART7_IRQHandler+0x10>)
 8004326:	f00a f873 	bl	800e410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	240006ac 	.word	0x240006ac

08004334 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004338:	4802      	ldr	r0, [pc, #8]	; (8004344 <TIM16_IRQHandler+0x10>)
 800433a:	f008 fe7b 	bl	800d034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	240010d4 	.word	0x240010d4

08004348 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <TIM17_IRQHandler+0x10>)
 800434e:	f008 fe71 	bl	800d034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	24000b90 	.word	0x24000b90

0800435c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004360:	4802      	ldr	r0, [pc, #8]	; (800436c <BDMA_Channel0_IRQHandler+0x10>)
 8004362:	f002 fd61 	bl	8006e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	24000bdc 	.word	0x24000bdc

08004370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004374:	4b37      	ldr	r3, [pc, #220]	; (8004454 <SystemInit+0xe4>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	4a36      	ldr	r2, [pc, #216]	; (8004454 <SystemInit+0xe4>)
 800437c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004384:	4b34      	ldr	r3, [pc, #208]	; (8004458 <SystemInit+0xe8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	2b06      	cmp	r3, #6
 800438e:	d807      	bhi.n	80043a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004390:	4b31      	ldr	r3, [pc, #196]	; (8004458 <SystemInit+0xe8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f023 030f 	bic.w	r3, r3, #15
 8004398:	4a2f      	ldr	r2, [pc, #188]	; (8004458 <SystemInit+0xe8>)
 800439a:	f043 0307 	orr.w	r3, r3, #7
 800439e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80043a0:	4b2e      	ldr	r3, [pc, #184]	; (800445c <SystemInit+0xec>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a2d      	ldr	r2, [pc, #180]	; (800445c <SystemInit+0xec>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <SystemInit+0xec>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80043b2:	4b2a      	ldr	r3, [pc, #168]	; (800445c <SystemInit+0xec>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4929      	ldr	r1, [pc, #164]	; (800445c <SystemInit+0xec>)
 80043b8:	4b29      	ldr	r3, [pc, #164]	; (8004460 <SystemInit+0xf0>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043be:	4b26      	ldr	r3, [pc, #152]	; (8004458 <SystemInit+0xe8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <SystemInit+0xe8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 030f 	bic.w	r3, r3, #15
 80043d2:	4a21      	ldr	r2, [pc, #132]	; (8004458 <SystemInit+0xe8>)
 80043d4:	f043 0307 	orr.w	r3, r3, #7
 80043d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <SystemInit+0xec>)
 80043dc:	2200      	movs	r2, #0
 80043de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80043e0:	4b1e      	ldr	r3, [pc, #120]	; (800445c <SystemInit+0xec>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <SystemInit+0xec>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <SystemInit+0xec>)
 80043ee:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <SystemInit+0xf4>)
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <SystemInit+0xec>)
 80043f4:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <SystemInit+0xf8>)
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80043f8:	4b18      	ldr	r3, [pc, #96]	; (800445c <SystemInit+0xec>)
 80043fa:	4a1c      	ldr	r2, [pc, #112]	; (800446c <SystemInit+0xfc>)
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <SystemInit+0xec>)
 8004400:	2200      	movs	r2, #0
 8004402:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004404:	4b15      	ldr	r3, [pc, #84]	; (800445c <SystemInit+0xec>)
 8004406:	4a19      	ldr	r2, [pc, #100]	; (800446c <SystemInit+0xfc>)
 8004408:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800440a:	4b14      	ldr	r3, [pc, #80]	; (800445c <SystemInit+0xec>)
 800440c:	2200      	movs	r2, #0
 800440e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004410:	4b12      	ldr	r3, [pc, #72]	; (800445c <SystemInit+0xec>)
 8004412:	4a16      	ldr	r2, [pc, #88]	; (800446c <SystemInit+0xfc>)
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <SystemInit+0xec>)
 8004418:	2200      	movs	r2, #0
 800441a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <SystemInit+0xec>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0e      	ldr	r2, [pc, #56]	; (800445c <SystemInit+0xec>)
 8004422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004426:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <SystemInit+0xec>)
 800442a:	2200      	movs	r2, #0
 800442c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <SystemInit+0x100>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <SystemInit+0x104>)
 8004434:	4013      	ands	r3, r2
 8004436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443a:	d202      	bcs.n	8004442 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <SystemInit+0x108>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <SystemInit+0x10c>)
 8004444:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004448:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800444a:	bf00      	nop
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	e000ed00 	.word	0xe000ed00
 8004458:	52002000 	.word	0x52002000
 800445c:	58024400 	.word	0x58024400
 8004460:	eaf6ed7f 	.word	0xeaf6ed7f
 8004464:	02020200 	.word	0x02020200
 8004468:	01ff0000 	.word	0x01ff0000
 800446c:	01010280 	.word	0x01010280
 8004470:	5c001000 	.word	0x5c001000
 8004474:	ffff0000 	.word	0xffff0000
 8004478:	51008108 	.word	0x51008108
 800447c:	52004000 	.word	0x52004000

08004480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004484:	f7ff ff74 	bl	8004370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004488:	480c      	ldr	r0, [pc, #48]	; (80044bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800448a:	490d      	ldr	r1, [pc, #52]	; (80044c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800448c:	4a0d      	ldr	r2, [pc, #52]	; (80044c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800448e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004490:	e002      	b.n	8004498 <LoopCopyDataInit>

08004492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004496:	3304      	adds	r3, #4

08004498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800449a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800449c:	d3f9      	bcc.n	8004492 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044a0:	4c0a      	ldr	r4, [pc, #40]	; (80044cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80044a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044a4:	e001      	b.n	80044aa <LoopFillZerobss>

080044a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044a8:	3204      	adds	r2, #4

080044aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044ac:	d3fb      	bcc.n	80044a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044ae:	f00c f937 	bl	8010720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044b2:	f7fd ff75 	bl	80023a0 <main>
  bx  lr
 80044b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80044bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80044c0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80044c4:	08013a00 	.word	0x08013a00
  ldr r2, =_sbss
 80044c8:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80044cc:	2400119c 	.word	0x2400119c

080044d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044d0:	e7fe      	b.n	80044d0 <ADC3_IRQHandler>
	...

080044d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044da:	2003      	movs	r0, #3
 80044dc:	f001 f93c 	bl	8005758 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044e0:	f005 fd22 	bl	8009f28 <HAL_RCC_GetSysClockFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <HAL_Init+0x68>)
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	4913      	ldr	r1, [pc, #76]	; (8004540 <HAL_Init+0x6c>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
 80044fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_Init+0x68>)
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <HAL_Init+0x6c>)
 8004508:	5cd3      	ldrb	r3, [r2, r3]
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <HAL_Init+0x70>)
 8004516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004518:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <HAL_Init+0x74>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800451e:	2000      	movs	r0, #0
 8004520:	f000 f814 	bl	800454c <HAL_InitTick>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e002      	b.n	8004534 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800452e:	f7ff f83f 	bl	80035b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	58024400 	.word	0x58024400
 8004540:	08011eb0 	.word	0x08011eb0
 8004544:	24000004 	.word	0x24000004
 8004548:	24000000 	.word	0x24000000

0800454c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004554:	4b15      	ldr	r3, [pc, #84]	; (80045ac <HAL_InitTick+0x60>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e021      	b.n	80045a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <HAL_InitTick+0x64>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b11      	ldr	r3, [pc, #68]	; (80045ac <HAL_InitTick+0x60>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	4619      	mov	r1, r3
 800456a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800456e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004572:	fbb2 f3f3 	udiv	r3, r2, r3
 8004576:	4618      	mov	r0, r3
 8004578:	f001 f921 	bl	80057be <HAL_SYSTICK_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e00e      	b.n	80045a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b0f      	cmp	r3, #15
 800458a:	d80a      	bhi.n	80045a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800458c:	2200      	movs	r2, #0
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	f001 f8eb 	bl	800576e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004598:	4a06      	ldr	r2, [pc, #24]	; (80045b4 <HAL_InitTick+0x68>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	2400000c 	.word	0x2400000c
 80045b0:	24000000 	.word	0x24000000
 80045b4:	24000008 	.word	0x24000008

080045b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_IncTick+0x20>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_IncTick+0x24>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4413      	add	r3, r2
 80045c8:	4a04      	ldr	r2, [pc, #16]	; (80045dc <HAL_IncTick+0x24>)
 80045ca:	6013      	str	r3, [r2, #0]
}
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	2400000c 	.word	0x2400000c
 80045dc:	24001198 	.word	0x24001198

080045e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return uwTick;
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <HAL_GetTick+0x14>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	24001198 	.word	0x24001198

080045f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004600:	f7ff ffee 	bl	80045e0 <HAL_GetTick>
 8004604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d005      	beq.n	800461e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_Delay+0x44>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800461e:	bf00      	nop
 8004620:	f7ff ffde 	bl	80045e0 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	429a      	cmp	r2, r3
 800462e:	d8f7      	bhi.n	8004620 <HAL_Delay+0x28>
  {
  }
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	2400000c 	.word	0x2400000c

08004640 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_GetREVID+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0c1b      	lsrs	r3, r3, #16
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	5c001000 	.word	0x5c001000

08004658 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004668:	4904      	ldr	r1, [pc, #16]	; (800467c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	58000400 	.word	0x58000400

08004680 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	4904      	ldr	r1, [pc, #16]	; (80046a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	58000400 	.word	0x58000400

080046ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3360      	adds	r3, #96	; 0x60
 8004726:	461a      	mov	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	430b      	orrs	r3, r1
 8004742:	431a      	orrs	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	fa01 f303 	lsl.w	r3, r1, r3
 8004774:	431a      	orrs	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	611a      	str	r2, [r3, #16]
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004786:	b480      	push	{r7}
 8004788:	b087      	sub	sp, #28
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3360      	adds	r3, #96	; 0x60
 8004796:	461a      	mov	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	601a      	str	r2, [r3, #0]
  }
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3330      	adds	r3, #48	; 0x30
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	4413      	add	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	211f      	movs	r1, #31
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	401a      	ands	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0e9b      	lsrs	r3, r3, #26
 80047f4:	f003 011f 	and.w	r1, r3, #31
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004802:	431a      	orrs	r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3314      	adds	r3, #20
 8004824:	461a      	mov	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	0e5b      	lsrs	r3, r3, #25
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	4413      	add	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	0d1b      	lsrs	r3, r3, #20
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2107      	movs	r1, #7
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	401a      	ands	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	0d1b      	lsrs	r3, r3, #20
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	431a      	orrs	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004884:	43db      	mvns	r3, r3
 8004886:	401a      	ands	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f003 0318 	and.w	r3, r3, #24
 800488e:	4908      	ldr	r1, [pc, #32]	; (80048b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004890:	40d9      	lsrs	r1, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	400b      	ands	r3, r1
 8004896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800489a:	431a      	orrs	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80048a2:	bf00      	nop
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	000fffff 	.word	0x000fffff

080048b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6093      	str	r3, [r2, #8]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	5fffffc0 	.word	0x5fffffc0

080048d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ec:	d101      	bne.n	80048f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <LL_ADC_EnableInternalRegulator+0x24>)
 800490e:	4013      	ands	r3, r2
 8004910:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	6fffffc0 	.word	0x6fffffc0

08004928 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800493c:	d101      	bne.n	8004942 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <LL_ADC_IsEnabled+0x18>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <LL_ADC_IsEnabled+0x1a>
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d101      	bne.n	800498e <LL_ADC_REG_IsConversionOngoing+0x18>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d101      	bne.n	80049b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e18e      	b.n	8004cfc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fe fdf9 	bl	80035e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff ff67 	bl	80048d8 <LL_ADC_IsDeepPowerDownEnabled>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff ff4d 	bl	80048b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff ff82 	bl	8004928 <LL_ADC_IsInternalRegulatorEnabled>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d114      	bne.n	8004a54 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff ff66 	bl	8004900 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a34:	4b9a      	ldr	r3, [pc, #616]	; (8004ca0 <HAL_ADC_Init+0x2dc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	099b      	lsrs	r3, r3, #6
 8004a3a:	4a9a      	ldr	r2, [pc, #616]	; (8004ca4 <HAL_ADC_Init+0x2e0>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	3301      	adds	r3, #1
 8004a44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004a46:	e002      	b.n	8004a4e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f9      	bne.n	8004a48 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff65 	bl	8004928 <LL_ADC_IsInternalRegulatorEnabled>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10d      	bne.n	8004a80 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	f043 0210 	orr.w	r2, r3, #16
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f043 0201 	orr.w	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff ff76 	bl	8004976 <LL_ADC_REG_IsConversionOngoing>
 8004a8a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 8128 	bne.w	8004cea <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 8124 	bne.w	8004cea <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004aaa:	f043 0202 	orr.w	r2, r3, #2
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ff4a 	bl	8004950 <LL_ADC_IsEnabled>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d136      	bne.n	8004b30 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a78      	ldr	r2, [pc, #480]	; (8004ca8 <HAL_ADC_Init+0x2e4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_ADC_Init+0x112>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a76      	ldr	r2, [pc, #472]	; (8004cac <HAL_ADC_Init+0x2e8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10e      	bne.n	8004af4 <HAL_ADC_Init+0x130>
 8004ad6:	4874      	ldr	r0, [pc, #464]	; (8004ca8 <HAL_ADC_Init+0x2e4>)
 8004ad8:	f7ff ff3a 	bl	8004950 <LL_ADC_IsEnabled>
 8004adc:	4604      	mov	r4, r0
 8004ade:	4873      	ldr	r0, [pc, #460]	; (8004cac <HAL_ADC_Init+0x2e8>)
 8004ae0:	f7ff ff36 	bl	8004950 <LL_ADC_IsEnabled>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4323      	orrs	r3, r4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	e008      	b.n	8004b06 <HAL_ADC_Init+0x142>
 8004af4:	486e      	ldr	r0, [pc, #440]	; (8004cb0 <HAL_ADC_Init+0x2ec>)
 8004af6:	f7ff ff2b 	bl	8004950 <LL_ADC_IsEnabled>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d012      	beq.n	8004b30 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a66      	ldr	r2, [pc, #408]	; (8004ca8 <HAL_ADC_Init+0x2e4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_ADC_Init+0x15a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a64      	ldr	r2, [pc, #400]	; (8004cac <HAL_ADC_Init+0x2e8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_Init+0x15e>
 8004b1e:	4a65      	ldr	r2, [pc, #404]	; (8004cb4 <HAL_ADC_Init+0x2f0>)
 8004b20:	e000      	b.n	8004b24 <HAL_ADC_Init+0x160>
 8004b22:	4a65      	ldr	r2, [pc, #404]	; (8004cb8 <HAL_ADC_Init+0x2f4>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7ff fdbe 	bl	80046ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004b30:	f7ff fd86 	bl	8004640 <HAL_GetREVID>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d914      	bls.n	8004b68 <HAL_ADC_Init+0x1a4>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d110      	bne.n	8004b68 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	7d5b      	ldrb	r3, [r3, #21]
 8004b4a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b50:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004b56:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	7f1b      	ldrb	r3, [r3, #28]
 8004b5c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004b5e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b60:	f043 030c 	orr.w	r3, r3, #12
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e00d      	b.n	8004b84 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7d5b      	ldrb	r3, [r3, #21]
 8004b6c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b72:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004b78:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7f1b      	ldrb	r3, [r3, #28]
 8004b7e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	7f1b      	ldrb	r3, [r3, #28]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d106      	bne.n	8004b9a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	045b      	lsls	r3, r3, #17
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	4b3f      	ldr	r3, [pc, #252]	; (8004cbc <HAL_ADC_Init+0x2f8>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	69b9      	ldr	r1, [r7, #24]
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fed1 	bl	8004976 <LL_ADC_REG_IsConversionOngoing>
 8004bd4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fede 	bl	800499c <LL_ADC_INJ_IsConversionOngoing>
 8004be0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d14a      	bne.n	8004c7e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d147      	bne.n	8004c7e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	7d1b      	ldrb	r3, [r3, #20]
 8004bf2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	4b2f      	ldr	r3, [pc, #188]	; (8004cc0 <HAL_ADC_Init+0x2fc>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	69b9      	ldr	r1, [r7, #24]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d11b      	bne.n	8004c52 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <HAL_ADC_Init+0x300>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	0411      	lsls	r1, r2, #16
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c36:	4311      	orrs	r1, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c3c:	4311      	orrs	r1, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c42:	430a      	orrs	r2, r1
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	611a      	str	r2, [r3, #16]
 8004c50:	e007      	b.n	8004c62 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fb93 	bl	80053a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d120      	bne.n	8004cc8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	f023 010f 	bic.w	r1, r3, #15
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	1e5a      	subs	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c9e:	e01b      	b.n	8004cd8 <HAL_ADC_Init+0x314>
 8004ca0:	24000000 	.word	0x24000000
 8004ca4:	053e2d63 	.word	0x053e2d63
 8004ca8:	40022000 	.word	0x40022000
 8004cac:	40022100 	.word	0x40022100
 8004cb0:	58026000 	.word	0x58026000
 8004cb4:	40022300 	.word	0x40022300
 8004cb8:	58026300 	.word	0x58026300
 8004cbc:	fff0c003 	.word	0xfff0c003
 8004cc0:	ffffbffc 	.word	0xffffbffc
 8004cc4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 020f 	bic.w	r2, r2, #15
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	f023 0303 	bic.w	r3, r3, #3
 8004ce0:	f043 0201 	orr.w	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54
 8004ce8:	e007      	b.n	8004cfa <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	f043 0210 	orr.w	r2, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004cfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3724      	adds	r7, #36	; 0x24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd90      	pop	{r4, r7, pc}

08004d04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b0a1      	sub	sp, #132	; 0x84
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a9d      	ldr	r2, [pc, #628]	; (8004f94 <HAL_ADC_ConfigChannel+0x290>)
 8004d1e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x2a>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e321      	b.n	8005372 <HAL_ADC_ConfigChannel+0x66e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fe1b 	bl	8004976 <LL_ADC_REG_IsConversionOngoing>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 8306 	bne.w	8005354 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d108      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x62>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	0e9b      	lsrs	r3, r3, #26
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2201      	movs	r2, #1
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	e016      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x90>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d76:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	e003      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d84:	fab3 f383 	clz	r3, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	2201      	movs	r2, #1
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	69d1      	ldr	r1, [r2, #28]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f7ff fd04 	bl	80047bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fddc 	bl	8004976 <LL_ADC_REG_IsConversionOngoing>
 8004dbe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fde9 	bl	800499c <LL_ADC_INJ_IsConversionOngoing>
 8004dca:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 80b3 	bne.w	8004f3a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f040 80af 	bne.w	8004f3a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	461a      	mov	r2, r3
 8004dea:	f7ff fd13 	bl	8004814 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004dee:	4b6a      	ldr	r3, [pc, #424]	; (8004f98 <HAL_ADC_ConfigChannel+0x294>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dfa:	d10b      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x110>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	e01d      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x14c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x136>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	e00a      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x14c>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	089b      	lsrs	r3, r3, #2
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d027      	beq.n	8004eaa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6919      	ldr	r1, [r3, #16]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e68:	f7ff fc54 	bl	8004714 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6919      	ldr	r1, [r3, #16]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	7e5b      	ldrb	r3, [r3, #25]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d102      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x17e>
 8004e7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e80:	e000      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x180>
 8004e82:	2300      	movs	r3, #0
 8004e84:	461a      	mov	r2, r3
 8004e86:	f7ff fc7e 	bl	8004786 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6919      	ldr	r1, [r3, #16]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	7e1b      	ldrb	r3, [r3, #24]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d102      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x19c>
 8004e9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e9e:	e000      	b.n	8004ea2 <HAL_ADC_ConfigChannel+0x19e>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7ff fc56 	bl	8004754 <LL_ADC_SetDataRightShift>
 8004ea8:	e047      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	069b      	lsls	r3, r3, #26
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d107      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ecc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	069b      	lsls	r3, r3, #26
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d107      	bne.n	8004ef2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ef0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	069b      	lsls	r3, r3, #26
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d107      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f14:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	069b      	lsls	r3, r3, #26
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d107      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f38:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fd06 	bl	8004950 <LL_ADC_IsEnabled>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f040 820d 	bne.w	8005366 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f7ff fc87 	bl	800486c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <HAL_ADC_ConfigChannel+0x290>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	f040 8133 	bne.w	80051d0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d110      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x298>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	0e9b      	lsrs	r3, r3, #26
 8004f80:	3301      	adds	r3, #1
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	2b09      	cmp	r3, #9
 8004f88:	bf94      	ite	ls
 8004f8a:	2301      	movls	r3, #1
 8004f8c:	2300      	movhi	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e01e      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x2cc>
 8004f92:	bf00      	nop
 8004f94:	47ff0000 	.word	0x47ff0000
 8004f98:	5c001000 	.word	0x5c001000
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa4:	fa93 f3a3 	rbit	r3, r3
 8004fa8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	e003      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2b09      	cmp	r3, #9
 8004fc8:	bf94      	ite	ls
 8004fca:	2301      	movls	r3, #1
 8004fcc:	2300      	movhi	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d079      	beq.n	80050c8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d107      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x2ec>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	0e9b      	lsrs	r3, r3, #26
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	069b      	lsls	r3, r3, #26
 8004fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fee:	e015      	b.n	800501c <HAL_ADC_ConfigChannel+0x318>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff8:	fa93 f3a3 	rbit	r3, r3
 8004ffc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005000:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005008:	2320      	movs	r3, #32
 800500a:	e003      	b.n	8005014 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800500c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500e:	fab3 f383 	clz	r3, r3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	3301      	adds	r3, #1
 8005016:	069b      	lsls	r3, r3, #26
 8005018:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HAL_ADC_ConfigChannel+0x338>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	0e9b      	lsrs	r3, r3, #26
 800502e:	3301      	adds	r3, #1
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2101      	movs	r1, #1
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	e017      	b.n	800506c <HAL_ADC_ConfigChannel+0x368>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005044:	fa93 f3a3 	rbit	r3, r3
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800504a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800504e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005054:	2320      	movs	r3, #32
 8005056:	e003      	b.n	8005060 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505a:	fab3 f383 	clz	r3, r3
 800505e:	b2db      	uxtb	r3, r3
 8005060:	3301      	adds	r3, #1
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2101      	movs	r1, #1
 8005068:	fa01 f303 	lsl.w	r3, r1, r3
 800506c:	ea42 0103 	orr.w	r1, r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x38e>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	0e9b      	lsrs	r3, r3, #26
 8005082:	3301      	adds	r3, #1
 8005084:	f003 021f 	and.w	r2, r3, #31
 8005088:	4613      	mov	r3, r2
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	4413      	add	r3, r2
 800508e:	051b      	lsls	r3, r3, #20
 8005090:	e018      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x3c0>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80050aa:	2320      	movs	r3, #32
 80050ac:	e003      	b.n	80050b6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	fab3 f383 	clz	r3, r3
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	3301      	adds	r3, #1
 80050b8:	f003 021f 	and.w	r2, r3, #31
 80050bc:	4613      	mov	r3, r2
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	4413      	add	r3, r2
 80050c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050c4:	430b      	orrs	r3, r1
 80050c6:	e07e      	b.n	80051c6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x3e0>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	0e9b      	lsrs	r3, r3, #26
 80050da:	3301      	adds	r3, #1
 80050dc:	069b      	lsls	r3, r3, #26
 80050de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050e2:	e015      	b.n	8005110 <HAL_ADC_ConfigChannel+0x40c>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	fa93 f3a3 	rbit	r3, r3
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80050fc:	2320      	movs	r3, #32
 80050fe:	e003      	b.n	8005108 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	3301      	adds	r3, #1
 800510a:	069b      	lsls	r3, r3, #26
 800510c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x42c>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	0e9b      	lsrs	r3, r3, #26
 8005122:	3301      	adds	r3, #1
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	2101      	movs	r1, #1
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	e017      	b.n	8005160 <HAL_ADC_ConfigChannel+0x45c>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	fa93 f3a3 	rbit	r3, r3
 800513c:	61bb      	str	r3, [r7, #24]
  return result;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005148:	2320      	movs	r3, #32
 800514a:	e003      	b.n	8005154 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	3301      	adds	r3, #1
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	2101      	movs	r1, #1
 800515c:	fa01 f303 	lsl.w	r3, r1, r3
 8005160:	ea42 0103 	orr.w	r1, r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10d      	bne.n	800518c <HAL_ADC_ConfigChannel+0x488>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	0e9b      	lsrs	r3, r3, #26
 8005176:	3301      	adds	r3, #1
 8005178:	f003 021f 	and.w	r2, r3, #31
 800517c:	4613      	mov	r3, r2
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	4413      	add	r3, r2
 8005182:	3b1e      	subs	r3, #30
 8005184:	051b      	lsls	r3, r3, #20
 8005186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800518a:	e01b      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x4c0>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	fa93 f3a3 	rbit	r3, r3
 8005198:	60fb      	str	r3, [r7, #12]
  return result;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80051a4:	2320      	movs	r3, #32
 80051a6:	e003      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	3301      	adds	r3, #1
 80051b2:	f003 021f 	and.w	r2, r3, #31
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	3b1e      	subs	r3, #30
 80051be:	051b      	lsls	r3, r3, #20
 80051c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051c4:	430b      	orrs	r3, r1
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	6892      	ldr	r2, [r2, #8]
 80051ca:	4619      	mov	r1, r3
 80051cc:	f7ff fb22 	bl	8004814 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f280 80c6 	bge.w	8005366 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a67      	ldr	r2, [pc, #412]	; (800537c <HAL_ADC_ConfigChannel+0x678>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_ADC_ConfigChannel+0x4ea>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a65      	ldr	r2, [pc, #404]	; (8005380 <HAL_ADC_ConfigChannel+0x67c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d101      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x4ee>
 80051ee:	4b65      	ldr	r3, [pc, #404]	; (8005384 <HAL_ADC_ConfigChannel+0x680>)
 80051f0:	e000      	b.n	80051f4 <HAL_ADC_ConfigChannel+0x4f0>
 80051f2:	4b65      	ldr	r3, [pc, #404]	; (8005388 <HAL_ADC_ConfigChannel+0x684>)
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fa7f 	bl	80046f8 <LL_ADC_GetCommonPathInternalCh>
 80051fa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a5e      	ldr	r2, [pc, #376]	; (800537c <HAL_ADC_ConfigChannel+0x678>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_ADC_ConfigChannel+0x50c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a5d      	ldr	r2, [pc, #372]	; (8005380 <HAL_ADC_ConfigChannel+0x67c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d10e      	bne.n	800522e <HAL_ADC_ConfigChannel+0x52a>
 8005210:	485a      	ldr	r0, [pc, #360]	; (800537c <HAL_ADC_ConfigChannel+0x678>)
 8005212:	f7ff fb9d 	bl	8004950 <LL_ADC_IsEnabled>
 8005216:	4604      	mov	r4, r0
 8005218:	4859      	ldr	r0, [pc, #356]	; (8005380 <HAL_ADC_ConfigChannel+0x67c>)
 800521a:	f7ff fb99 	bl	8004950 <LL_ADC_IsEnabled>
 800521e:	4603      	mov	r3, r0
 8005220:	4323      	orrs	r3, r4
 8005222:	2b00      	cmp	r3, #0
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	e008      	b.n	8005240 <HAL_ADC_ConfigChannel+0x53c>
 800522e:	4857      	ldr	r0, [pc, #348]	; (800538c <HAL_ADC_ConfigChannel+0x688>)
 8005230:	f7ff fb8e 	bl	8004950 <LL_ADC_IsEnabled>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	bf0c      	ite	eq
 800523a:	2301      	moveq	r3, #1
 800523c:	2300      	movne	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d07d      	beq.n	8005340 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a51      	ldr	r2, [pc, #324]	; (8005390 <HAL_ADC_ConfigChannel+0x68c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d130      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x5ac>
 800524e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d12b      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a4b      	ldr	r2, [pc, #300]	; (800538c <HAL_ADC_ConfigChannel+0x688>)
 800525e:	4293      	cmp	r3, r2
 8005260:	f040 8081 	bne.w	8005366 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a44      	ldr	r2, [pc, #272]	; (800537c <HAL_ADC_ConfigChannel+0x678>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_ADC_ConfigChannel+0x574>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a43      	ldr	r2, [pc, #268]	; (8005380 <HAL_ADC_ConfigChannel+0x67c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <HAL_ADC_ConfigChannel+0x578>
 8005278:	4a42      	ldr	r2, [pc, #264]	; (8005384 <HAL_ADC_ConfigChannel+0x680>)
 800527a:	e000      	b.n	800527e <HAL_ADC_ConfigChannel+0x57a>
 800527c:	4a42      	ldr	r2, [pc, #264]	; (8005388 <HAL_ADC_ConfigChannel+0x684>)
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f7ff fa23 	bl	80046d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800528c:	4b41      	ldr	r3, [pc, #260]	; (8005394 <HAL_ADC_ConfigChannel+0x690>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	099b      	lsrs	r3, r3, #6
 8005292:	4a41      	ldr	r2, [pc, #260]	; (8005398 <HAL_ADC_ConfigChannel+0x694>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	099b      	lsrs	r3, r3, #6
 800529a:	3301      	adds	r3, #1
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80052a0:	e002      	b.n	80052a8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f9      	bne.n	80052a2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052ae:	e05a      	b.n	8005366 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a39      	ldr	r2, [pc, #228]	; (800539c <HAL_ADC_ConfigChannel+0x698>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d11e      	bne.n	80052f8 <HAL_ADC_ConfigChannel+0x5f4>
 80052ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d119      	bne.n	80052f8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a30      	ldr	r2, [pc, #192]	; (800538c <HAL_ADC_ConfigChannel+0x688>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d14b      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2a      	ldr	r2, [pc, #168]	; (800537c <HAL_ADC_ConfigChannel+0x678>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d004      	beq.n	80052e2 <HAL_ADC_ConfigChannel+0x5de>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a28      	ldr	r2, [pc, #160]	; (8005380 <HAL_ADC_ConfigChannel+0x67c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x5e2>
 80052e2:	4a28      	ldr	r2, [pc, #160]	; (8005384 <HAL_ADC_ConfigChannel+0x680>)
 80052e4:	e000      	b.n	80052e8 <HAL_ADC_ConfigChannel+0x5e4>
 80052e6:	4a28      	ldr	r2, [pc, #160]	; (8005388 <HAL_ADC_ConfigChannel+0x684>)
 80052e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f7ff f9ee 	bl	80046d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052f6:	e036      	b.n	8005366 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a28      	ldr	r2, [pc, #160]	; (80053a0 <HAL_ADC_ConfigChannel+0x69c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d131      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x662>
 8005302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d12c      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1e      	ldr	r2, [pc, #120]	; (800538c <HAL_ADC_ConfigChannel+0x688>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d127      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <HAL_ADC_ConfigChannel+0x678>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d004      	beq.n	800532a <HAL_ADC_ConfigChannel+0x626>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a16      	ldr	r2, [pc, #88]	; (8005380 <HAL_ADC_ConfigChannel+0x67c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d101      	bne.n	800532e <HAL_ADC_ConfigChannel+0x62a>
 800532a:	4a16      	ldr	r2, [pc, #88]	; (8005384 <HAL_ADC_ConfigChannel+0x680>)
 800532c:	e000      	b.n	8005330 <HAL_ADC_ConfigChannel+0x62c>
 800532e:	4a16      	ldr	r2, [pc, #88]	; (8005388 <HAL_ADC_ConfigChannel+0x684>)
 8005330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005332:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f7ff f9ca 	bl	80046d2 <LL_ADC_SetCommonPathInternalCh>
 800533e:	e012      	b.n	8005366 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005352:	e008      	b.n	8005366 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800536e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005372:	4618      	mov	r0, r3
 8005374:	3784      	adds	r7, #132	; 0x84
 8005376:	46bd      	mov	sp, r7
 8005378:	bd90      	pop	{r4, r7, pc}
 800537a:	bf00      	nop
 800537c:	40022000 	.word	0x40022000
 8005380:	40022100 	.word	0x40022100
 8005384:	40022300 	.word	0x40022300
 8005388:	58026300 	.word	0x58026300
 800538c:	58026000 	.word	0x58026000
 8005390:	cb840000 	.word	0xcb840000
 8005394:	24000000 	.word	0x24000000
 8005398:	053e2d63 	.word	0x053e2d63
 800539c:	c7520000 	.word	0xc7520000
 80053a0:	cfb80000 	.word	0xcfb80000

080053a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a79      	ldr	r2, [pc, #484]	; (8005598 <ADC_ConfigureBoostMode+0x1f4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <ADC_ConfigureBoostMode+0x1c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a78      	ldr	r2, [pc, #480]	; (800559c <ADC_ConfigureBoostMode+0x1f8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d109      	bne.n	80053d4 <ADC_ConfigureBoostMode+0x30>
 80053c0:	4b77      	ldr	r3, [pc, #476]	; (80055a0 <ADC_ConfigureBoostMode+0x1fc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e008      	b.n	80053e6 <ADC_ConfigureBoostMode+0x42>
 80053d4:	4b73      	ldr	r3, [pc, #460]	; (80055a4 <ADC_ConfigureBoostMode+0x200>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bf14      	ite	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	2300      	moveq	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01c      	beq.n	8005424 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80053ea:	f004 ff17 	bl	800a21c <HAL_RCC_GetHCLKFreq>
 80053ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053f8:	d010      	beq.n	800541c <ADC_ConfigureBoostMode+0x78>
 80053fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053fe:	d871      	bhi.n	80054e4 <ADC_ConfigureBoostMode+0x140>
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005404:	d002      	beq.n	800540c <ADC_ConfigureBoostMode+0x68>
 8005406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540a:	d16b      	bne.n	80054e4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	0c1b      	lsrs	r3, r3, #16
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	60fb      	str	r3, [r7, #12]
        break;
 800541a:	e066      	b.n	80054ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	089b      	lsrs	r3, r3, #2
 8005420:	60fb      	str	r3, [r7, #12]
        break;
 8005422:	e062      	b.n	80054ea <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005424:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005428:	f005 fe94 	bl	800b154 <HAL_RCCEx_GetPeriphCLKFreq>
 800542c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005436:	d051      	beq.n	80054dc <ADC_ConfigureBoostMode+0x138>
 8005438:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800543c:	d854      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x144>
 800543e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005442:	d047      	beq.n	80054d4 <ADC_ConfigureBoostMode+0x130>
 8005444:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005448:	d84e      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x144>
 800544a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800544e:	d03d      	beq.n	80054cc <ADC_ConfigureBoostMode+0x128>
 8005450:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005454:	d848      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x144>
 8005456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800545a:	d033      	beq.n	80054c4 <ADC_ConfigureBoostMode+0x120>
 800545c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005460:	d842      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x144>
 8005462:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005466:	d029      	beq.n	80054bc <ADC_ConfigureBoostMode+0x118>
 8005468:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800546c:	d83c      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x144>
 800546e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005472:	d01a      	beq.n	80054aa <ADC_ConfigureBoostMode+0x106>
 8005474:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005478:	d836      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x144>
 800547a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800547e:	d014      	beq.n	80054aa <ADC_ConfigureBoostMode+0x106>
 8005480:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005484:	d830      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x144>
 8005486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800548a:	d00e      	beq.n	80054aa <ADC_ConfigureBoostMode+0x106>
 800548c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005490:	d82a      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x144>
 8005492:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005496:	d008      	beq.n	80054aa <ADC_ConfigureBoostMode+0x106>
 8005498:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800549c:	d824      	bhi.n	80054e8 <ADC_ConfigureBoostMode+0x144>
 800549e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054a2:	d002      	beq.n	80054aa <ADC_ConfigureBoostMode+0x106>
 80054a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054a8:	d11e      	bne.n	80054e8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	0c9b      	lsrs	r3, r3, #18
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	60fb      	str	r3, [r7, #12]
        break;
 80054ba:	e016      	b.n	80054ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	091b      	lsrs	r3, r3, #4
 80054c0:	60fb      	str	r3, [r7, #12]
        break;
 80054c2:	e012      	b.n	80054ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	60fb      	str	r3, [r7, #12]
        break;
 80054ca:	e00e      	b.n	80054ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	099b      	lsrs	r3, r3, #6
 80054d0:	60fb      	str	r3, [r7, #12]
        break;
 80054d2:	e00a      	b.n	80054ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	09db      	lsrs	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]
        break;
 80054da:	e006      	b.n	80054ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	60fb      	str	r3, [r7, #12]
        break;
 80054e2:	e002      	b.n	80054ea <ADC_ConfigureBoostMode+0x146>
        break;
 80054e4:	bf00      	nop
 80054e6:	e000      	b.n	80054ea <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80054e8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80054ea:	f7ff f8a9 	bl	8004640 <HAL_GetREVID>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d815      	bhi.n	8005524 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <ADC_ConfigureBoostMode+0x204>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d908      	bls.n	8005512 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800550e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005510:	e03e      	b.n	8005590 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005520:	609a      	str	r2, [r3, #8]
}
 8005522:	e035      	b.n	8005590 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a1f      	ldr	r2, [pc, #124]	; (80055ac <ADC_ConfigureBoostMode+0x208>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d808      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005540:	609a      	str	r2, [r3, #8]
}
 8005542:	e025      	b.n	8005590 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <ADC_ConfigureBoostMode+0x20c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d80a      	bhi.n	8005562 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	e016      	b.n	8005590 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <ADC_ConfigureBoostMode+0x210>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d80a      	bhi.n	8005580 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557c:	609a      	str	r2, [r3, #8]
}
 800557e:	e007      	b.n	8005590 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40022000 	.word	0x40022000
 800559c:	40022100 	.word	0x40022100
 80055a0:	40022300 	.word	0x40022300
 80055a4:	58026300 	.word	0x58026300
 80055a8:	01312d00 	.word	0x01312d00
 80055ac:	005f5e10 	.word	0x005f5e10
 80055b0:	00bebc20 	.word	0x00bebc20
 80055b4:	017d7840 	.word	0x017d7840

080055b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055c8:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <__NVIC_SetPriorityGrouping+0x40>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055d4:	4013      	ands	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80055e0:	4b06      	ldr	r3, [pc, #24]	; (80055fc <__NVIC_SetPriorityGrouping+0x44>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055e6:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <__NVIC_SetPriorityGrouping+0x40>)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	60d3      	str	r3, [r2, #12]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	e000ed00 	.word	0xe000ed00
 80055fc:	05fa0000 	.word	0x05fa0000

08005600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <__NVIC_GetPriorityGrouping+0x18>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	0a1b      	lsrs	r3, r3, #8
 800560a:	f003 0307 	and.w	r3, r3, #7
}
 800560e:	4618      	mov	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800562a:	2b00      	cmp	r3, #0
 800562c:	db0b      	blt.n	8005646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	f003 021f 	and.w	r2, r3, #31
 8005634:	4907      	ldr	r1, [pc, #28]	; (8005654 <__NVIC_EnableIRQ+0x38>)
 8005636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	2001      	movs	r0, #1
 800563e:	fa00 f202 	lsl.w	r2, r0, r2
 8005642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	e000e100 	.word	0xe000e100

08005658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	6039      	str	r1, [r7, #0]
 8005662:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005668:	2b00      	cmp	r3, #0
 800566a:	db0a      	blt.n	8005682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	490c      	ldr	r1, [pc, #48]	; (80056a4 <__NVIC_SetPriority+0x4c>)
 8005672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005676:	0112      	lsls	r2, r2, #4
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	440b      	add	r3, r1
 800567c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005680:	e00a      	b.n	8005698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	b2da      	uxtb	r2, r3
 8005686:	4908      	ldr	r1, [pc, #32]	; (80056a8 <__NVIC_SetPriority+0x50>)
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	3b04      	subs	r3, #4
 8005690:	0112      	lsls	r2, r2, #4
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	440b      	add	r3, r1
 8005696:	761a      	strb	r2, [r3, #24]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	e000e100 	.word	0xe000e100
 80056a8:	e000ed00 	.word	0xe000ed00

080056ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b089      	sub	sp, #36	; 0x24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f1c3 0307 	rsb	r3, r3, #7
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	bf28      	it	cs
 80056ca:	2304      	movcs	r3, #4
 80056cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3304      	adds	r3, #4
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d902      	bls.n	80056dc <NVIC_EncodePriority+0x30>
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	3b03      	subs	r3, #3
 80056da:	e000      	b.n	80056de <NVIC_EncodePriority+0x32>
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43da      	mvns	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	401a      	ands	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056f4:	f04f 31ff 	mov.w	r1, #4294967295
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	fa01 f303 	lsl.w	r3, r1, r3
 80056fe:	43d9      	mvns	r1, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005704:	4313      	orrs	r3, r2
         );
}
 8005706:	4618      	mov	r0, r3
 8005708:	3724      	adds	r7, #36	; 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005724:	d301      	bcc.n	800572a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005726:	2301      	movs	r3, #1
 8005728:	e00f      	b.n	800574a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800572a:	4a0a      	ldr	r2, [pc, #40]	; (8005754 <SysTick_Config+0x40>)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3b01      	subs	r3, #1
 8005730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005732:	210f      	movs	r1, #15
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	f7ff ff8e 	bl	8005658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800573c:	4b05      	ldr	r3, [pc, #20]	; (8005754 <SysTick_Config+0x40>)
 800573e:	2200      	movs	r2, #0
 8005740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005742:	4b04      	ldr	r3, [pc, #16]	; (8005754 <SysTick_Config+0x40>)
 8005744:	2207      	movs	r2, #7
 8005746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	e000e010 	.word	0xe000e010

08005758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ff29 	bl	80055b8 <__NVIC_SetPriorityGrouping>
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b086      	sub	sp, #24
 8005772:	af00      	add	r7, sp, #0
 8005774:	4603      	mov	r3, r0
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800577c:	f7ff ff40 	bl	8005600 <__NVIC_GetPriorityGrouping>
 8005780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	6978      	ldr	r0, [r7, #20]
 8005788:	f7ff ff90 	bl	80056ac <NVIC_EncodePriority>
 800578c:	4602      	mov	r2, r0
 800578e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005792:	4611      	mov	r1, r2
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ff5f 	bl	8005658 <__NVIC_SetPriority>
}
 800579a:	bf00      	nop
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	4603      	mov	r3, r0
 80057aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff ff33 	bl	800561c <__NVIC_EnableIRQ>
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff ffa4 	bl	8005714 <SysTick_Config>
 80057cc:	4603      	mov	r3, r0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80057e0:	f7fe fefe 	bl	80045e0 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e316      	b.n	8005e1e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a66      	ldr	r2, [pc, #408]	; (8005990 <HAL_DMA_Init+0x1b8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d04a      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a65      	ldr	r2, [pc, #404]	; (8005994 <HAL_DMA_Init+0x1bc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d045      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a63      	ldr	r2, [pc, #396]	; (8005998 <HAL_DMA_Init+0x1c0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d040      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a62      	ldr	r2, [pc, #392]	; (800599c <HAL_DMA_Init+0x1c4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d03b      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a60      	ldr	r2, [pc, #384]	; (80059a0 <HAL_DMA_Init+0x1c8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d036      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a5f      	ldr	r2, [pc, #380]	; (80059a4 <HAL_DMA_Init+0x1cc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d031      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a5d      	ldr	r2, [pc, #372]	; (80059a8 <HAL_DMA_Init+0x1d0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d02c      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a5c      	ldr	r2, [pc, #368]	; (80059ac <HAL_DMA_Init+0x1d4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d027      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a5a      	ldr	r2, [pc, #360]	; (80059b0 <HAL_DMA_Init+0x1d8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d022      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a59      	ldr	r2, [pc, #356]	; (80059b4 <HAL_DMA_Init+0x1dc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d01d      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a57      	ldr	r2, [pc, #348]	; (80059b8 <HAL_DMA_Init+0x1e0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d018      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a56      	ldr	r2, [pc, #344]	; (80059bc <HAL_DMA_Init+0x1e4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d013      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a54      	ldr	r2, [pc, #336]	; (80059c0 <HAL_DMA_Init+0x1e8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00e      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a53      	ldr	r2, [pc, #332]	; (80059c4 <HAL_DMA_Init+0x1ec>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d009      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a51      	ldr	r2, [pc, #324]	; (80059c8 <HAL_DMA_Init+0x1f0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <HAL_DMA_Init+0xb8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a50      	ldr	r2, [pc, #320]	; (80059cc <HAL_DMA_Init+0x1f4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d101      	bne.n	8005894 <HAL_DMA_Init+0xbc>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_DMA_Init+0xbe>
 8005894:	2300      	movs	r3, #0
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 813b 	beq.w	8005b12 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a37      	ldr	r2, [pc, #220]	; (8005990 <HAL_DMA_Init+0x1b8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d04a      	beq.n	800594c <HAL_DMA_Init+0x174>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a36      	ldr	r2, [pc, #216]	; (8005994 <HAL_DMA_Init+0x1bc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d045      	beq.n	800594c <HAL_DMA_Init+0x174>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a34      	ldr	r2, [pc, #208]	; (8005998 <HAL_DMA_Init+0x1c0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d040      	beq.n	800594c <HAL_DMA_Init+0x174>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a33      	ldr	r2, [pc, #204]	; (800599c <HAL_DMA_Init+0x1c4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d03b      	beq.n	800594c <HAL_DMA_Init+0x174>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a31      	ldr	r2, [pc, #196]	; (80059a0 <HAL_DMA_Init+0x1c8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d036      	beq.n	800594c <HAL_DMA_Init+0x174>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a30      	ldr	r2, [pc, #192]	; (80059a4 <HAL_DMA_Init+0x1cc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d031      	beq.n	800594c <HAL_DMA_Init+0x174>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a2e      	ldr	r2, [pc, #184]	; (80059a8 <HAL_DMA_Init+0x1d0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d02c      	beq.n	800594c <HAL_DMA_Init+0x174>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2d      	ldr	r2, [pc, #180]	; (80059ac <HAL_DMA_Init+0x1d4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d027      	beq.n	800594c <HAL_DMA_Init+0x174>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2b      	ldr	r2, [pc, #172]	; (80059b0 <HAL_DMA_Init+0x1d8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d022      	beq.n	800594c <HAL_DMA_Init+0x174>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2a      	ldr	r2, [pc, #168]	; (80059b4 <HAL_DMA_Init+0x1dc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d01d      	beq.n	800594c <HAL_DMA_Init+0x174>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a28      	ldr	r2, [pc, #160]	; (80059b8 <HAL_DMA_Init+0x1e0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d018      	beq.n	800594c <HAL_DMA_Init+0x174>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a27      	ldr	r2, [pc, #156]	; (80059bc <HAL_DMA_Init+0x1e4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_DMA_Init+0x174>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <HAL_DMA_Init+0x1e8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00e      	beq.n	800594c <HAL_DMA_Init+0x174>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a24      	ldr	r2, [pc, #144]	; (80059c4 <HAL_DMA_Init+0x1ec>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d009      	beq.n	800594c <HAL_DMA_Init+0x174>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a22      	ldr	r2, [pc, #136]	; (80059c8 <HAL_DMA_Init+0x1f0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <HAL_DMA_Init+0x174>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a21      	ldr	r2, [pc, #132]	; (80059cc <HAL_DMA_Init+0x1f4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d108      	bne.n	800595e <HAL_DMA_Init+0x186>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	e007      	b.n	800596e <HAL_DMA_Init+0x196>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800596e:	e02f      	b.n	80059d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005970:	f7fe fe36 	bl	80045e0 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b05      	cmp	r3, #5
 800597c:	d928      	bls.n	80059d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2203      	movs	r2, #3
 8005988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e246      	b.n	8005e1e <HAL_DMA_Init+0x646>
 8005990:	40020010 	.word	0x40020010
 8005994:	40020028 	.word	0x40020028
 8005998:	40020040 	.word	0x40020040
 800599c:	40020058 	.word	0x40020058
 80059a0:	40020070 	.word	0x40020070
 80059a4:	40020088 	.word	0x40020088
 80059a8:	400200a0 	.word	0x400200a0
 80059ac:	400200b8 	.word	0x400200b8
 80059b0:	40020410 	.word	0x40020410
 80059b4:	40020428 	.word	0x40020428
 80059b8:	40020440 	.word	0x40020440
 80059bc:	40020458 	.word	0x40020458
 80059c0:	40020470 	.word	0x40020470
 80059c4:	40020488 	.word	0x40020488
 80059c8:	400204a0 	.word	0x400204a0
 80059cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1c8      	bne.n	8005970 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4b83      	ldr	r3, [pc, #524]	; (8005bf8 <HAL_DMA_Init+0x420>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80059f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d107      	bne.n	8005a34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005a34:	4b71      	ldr	r3, [pc, #452]	; (8005bfc <HAL_DMA_Init+0x424>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b71      	ldr	r3, [pc, #452]	; (8005c00 <HAL_DMA_Init+0x428>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a40:	d328      	bcc.n	8005a94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b28      	cmp	r3, #40	; 0x28
 8005a48:	d903      	bls.n	8005a52 <HAL_DMA_Init+0x27a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a50:	d917      	bls.n	8005a82 <HAL_DMA_Init+0x2aa>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b3e      	cmp	r3, #62	; 0x3e
 8005a58:	d903      	bls.n	8005a62 <HAL_DMA_Init+0x28a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b42      	cmp	r3, #66	; 0x42
 8005a60:	d90f      	bls.n	8005a82 <HAL_DMA_Init+0x2aa>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b46      	cmp	r3, #70	; 0x46
 8005a68:	d903      	bls.n	8005a72 <HAL_DMA_Init+0x29a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b48      	cmp	r3, #72	; 0x48
 8005a70:	d907      	bls.n	8005a82 <HAL_DMA_Init+0x2aa>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b4e      	cmp	r3, #78	; 0x4e
 8005a78:	d905      	bls.n	8005a86 <HAL_DMA_Init+0x2ae>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b52      	cmp	r3, #82	; 0x52
 8005a80:	d801      	bhi.n	8005a86 <HAL_DMA_Init+0x2ae>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <HAL_DMA_Init+0x2b0>
 8005a86:	2300      	movs	r3, #0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0307 	bic.w	r3, r3, #7
 8005aaa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d117      	bne.n	8005aee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00e      	beq.n	8005aee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f002 fb31 	bl	8008138 <DMA_CheckFifoParam>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2240      	movs	r2, #64	; 0x40
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e197      	b.n	8005e1e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f002 fa6c 	bl	8007fd4 <DMA_CalcBaseAndBitshift>
 8005afc:	4603      	mov	r3, r0
 8005afe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	223f      	movs	r2, #63	; 0x3f
 8005b0a:	409a      	lsls	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	e0cd      	b.n	8005cae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a3b      	ldr	r2, [pc, #236]	; (8005c04 <HAL_DMA_Init+0x42c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d022      	beq.n	8005b62 <HAL_DMA_Init+0x38a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a39      	ldr	r2, [pc, #228]	; (8005c08 <HAL_DMA_Init+0x430>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01d      	beq.n	8005b62 <HAL_DMA_Init+0x38a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a38      	ldr	r2, [pc, #224]	; (8005c0c <HAL_DMA_Init+0x434>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d018      	beq.n	8005b62 <HAL_DMA_Init+0x38a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a36      	ldr	r2, [pc, #216]	; (8005c10 <HAL_DMA_Init+0x438>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <HAL_DMA_Init+0x38a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a35      	ldr	r2, [pc, #212]	; (8005c14 <HAL_DMA_Init+0x43c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_DMA_Init+0x38a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a33      	ldr	r2, [pc, #204]	; (8005c18 <HAL_DMA_Init+0x440>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_DMA_Init+0x38a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a32      	ldr	r2, [pc, #200]	; (8005c1c <HAL_DMA_Init+0x444>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_DMA_Init+0x38a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a30      	ldr	r2, [pc, #192]	; (8005c20 <HAL_DMA_Init+0x448>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d101      	bne.n	8005b66 <HAL_DMA_Init+0x38e>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <HAL_DMA_Init+0x390>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8097 	beq.w	8005c9c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a24      	ldr	r2, [pc, #144]	; (8005c04 <HAL_DMA_Init+0x42c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d021      	beq.n	8005bbc <HAL_DMA_Init+0x3e4>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a22      	ldr	r2, [pc, #136]	; (8005c08 <HAL_DMA_Init+0x430>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01c      	beq.n	8005bbc <HAL_DMA_Init+0x3e4>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a21      	ldr	r2, [pc, #132]	; (8005c0c <HAL_DMA_Init+0x434>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d017      	beq.n	8005bbc <HAL_DMA_Init+0x3e4>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1f      	ldr	r2, [pc, #124]	; (8005c10 <HAL_DMA_Init+0x438>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d012      	beq.n	8005bbc <HAL_DMA_Init+0x3e4>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <HAL_DMA_Init+0x43c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00d      	beq.n	8005bbc <HAL_DMA_Init+0x3e4>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <HAL_DMA_Init+0x440>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d008      	beq.n	8005bbc <HAL_DMA_Init+0x3e4>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1b      	ldr	r2, [pc, #108]	; (8005c1c <HAL_DMA_Init+0x444>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <HAL_DMA_Init+0x3e4>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <HAL_DMA_Init+0x448>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <HAL_DMA_Init+0x44c>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	d020      	beq.n	8005c28 <HAL_DMA_Init+0x450>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b80      	cmp	r3, #128	; 0x80
 8005bec:	d102      	bne.n	8005bf4 <HAL_DMA_Init+0x41c>
 8005bee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bf2:	e01a      	b.n	8005c2a <HAL_DMA_Init+0x452>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e018      	b.n	8005c2a <HAL_DMA_Init+0x452>
 8005bf8:	fe10803f 	.word	0xfe10803f
 8005bfc:	5c001000 	.word	0x5c001000
 8005c00:	ffff0000 	.word	0xffff0000
 8005c04:	58025408 	.word	0x58025408
 8005c08:	5802541c 	.word	0x5802541c
 8005c0c:	58025430 	.word	0x58025430
 8005c10:	58025444 	.word	0x58025444
 8005c14:	58025458 	.word	0x58025458
 8005c18:	5802546c 	.word	0x5802546c
 8005c1c:	58025480 	.word	0x58025480
 8005c20:	58025494 	.word	0x58025494
 8005c24:	fffe000f 	.word	0xfffe000f
 8005c28:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68d2      	ldr	r2, [r2, #12]
 8005c2e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c58:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4b6e      	ldr	r3, [pc, #440]	; (8005e28 <HAL_DMA_Init+0x650>)
 8005c70:	4413      	add	r3, r2
 8005c72:	4a6e      	ldr	r2, [pc, #440]	; (8005e2c <HAL_DMA_Init+0x654>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	009a      	lsls	r2, r3, #2
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f002 f9a7 	bl	8007fd4 <DMA_CalcBaseAndBitshift>
 8005c86:	4603      	mov	r3, r0
 8005c88:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	2201      	movs	r2, #1
 8005c94:	409a      	lsls	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	e008      	b.n	8005cae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2240      	movs	r2, #64	; 0x40
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e0b7      	b.n	8005e1e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a5f      	ldr	r2, [pc, #380]	; (8005e30 <HAL_DMA_Init+0x658>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d072      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a5d      	ldr	r2, [pc, #372]	; (8005e34 <HAL_DMA_Init+0x65c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d06d      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a5c      	ldr	r2, [pc, #368]	; (8005e38 <HAL_DMA_Init+0x660>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d068      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a5a      	ldr	r2, [pc, #360]	; (8005e3c <HAL_DMA_Init+0x664>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d063      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a59      	ldr	r2, [pc, #356]	; (8005e40 <HAL_DMA_Init+0x668>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d05e      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a57      	ldr	r2, [pc, #348]	; (8005e44 <HAL_DMA_Init+0x66c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d059      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a56      	ldr	r2, [pc, #344]	; (8005e48 <HAL_DMA_Init+0x670>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d054      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a54      	ldr	r2, [pc, #336]	; (8005e4c <HAL_DMA_Init+0x674>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d04f      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a53      	ldr	r2, [pc, #332]	; (8005e50 <HAL_DMA_Init+0x678>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d04a      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a51      	ldr	r2, [pc, #324]	; (8005e54 <HAL_DMA_Init+0x67c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d045      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a50      	ldr	r2, [pc, #320]	; (8005e58 <HAL_DMA_Init+0x680>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d040      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a4e      	ldr	r2, [pc, #312]	; (8005e5c <HAL_DMA_Init+0x684>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d03b      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a4d      	ldr	r2, [pc, #308]	; (8005e60 <HAL_DMA_Init+0x688>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d036      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a4b      	ldr	r2, [pc, #300]	; (8005e64 <HAL_DMA_Init+0x68c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d031      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a4a      	ldr	r2, [pc, #296]	; (8005e68 <HAL_DMA_Init+0x690>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d02c      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a48      	ldr	r2, [pc, #288]	; (8005e6c <HAL_DMA_Init+0x694>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d027      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a47      	ldr	r2, [pc, #284]	; (8005e70 <HAL_DMA_Init+0x698>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d022      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a45      	ldr	r2, [pc, #276]	; (8005e74 <HAL_DMA_Init+0x69c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01d      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a44      	ldr	r2, [pc, #272]	; (8005e78 <HAL_DMA_Init+0x6a0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d018      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a42      	ldr	r2, [pc, #264]	; (8005e7c <HAL_DMA_Init+0x6a4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d013      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a41      	ldr	r2, [pc, #260]	; (8005e80 <HAL_DMA_Init+0x6a8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00e      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a3f      	ldr	r2, [pc, #252]	; (8005e84 <HAL_DMA_Init+0x6ac>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d009      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a3e      	ldr	r2, [pc, #248]	; (8005e88 <HAL_DMA_Init+0x6b0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <HAL_DMA_Init+0x5c6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a3c      	ldr	r2, [pc, #240]	; (8005e8c <HAL_DMA_Init+0x6b4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d101      	bne.n	8005da2 <HAL_DMA_Init+0x5ca>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e000      	b.n	8005da4 <HAL_DMA_Init+0x5cc>
 8005da2:	2300      	movs	r3, #0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d032      	beq.n	8005e0e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f002 fa41 	bl	8008230 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b80      	cmp	r3, #128	; 0x80
 8005db4:	d102      	bne.n	8005dbc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dd0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <HAL_DMA_Init+0x624>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d80c      	bhi.n	8005dfc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f002 fabe 	bl	8008364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	e008      	b.n	8005e0e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	a7fdabf8 	.word	0xa7fdabf8
 8005e2c:	cccccccd 	.word	0xcccccccd
 8005e30:	40020010 	.word	0x40020010
 8005e34:	40020028 	.word	0x40020028
 8005e38:	40020040 	.word	0x40020040
 8005e3c:	40020058 	.word	0x40020058
 8005e40:	40020070 	.word	0x40020070
 8005e44:	40020088 	.word	0x40020088
 8005e48:	400200a0 	.word	0x400200a0
 8005e4c:	400200b8 	.word	0x400200b8
 8005e50:	40020410 	.word	0x40020410
 8005e54:	40020428 	.word	0x40020428
 8005e58:	40020440 	.word	0x40020440
 8005e5c:	40020458 	.word	0x40020458
 8005e60:	40020470 	.word	0x40020470
 8005e64:	40020488 	.word	0x40020488
 8005e68:	400204a0 	.word	0x400204a0
 8005e6c:	400204b8 	.word	0x400204b8
 8005e70:	58025408 	.word	0x58025408
 8005e74:	5802541c 	.word	0x5802541c
 8005e78:	58025430 	.word	0x58025430
 8005e7c:	58025444 	.word	0x58025444
 8005e80:	58025458 	.word	0x58025458
 8005e84:	5802546c 	.word	0x5802546c
 8005e88:	58025480 	.word	0x58025480
 8005e8c:	58025494 	.word	0x58025494

08005e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e226      	b.n	80062fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_DMA_Start_IT+0x2a>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e21f      	b.n	80062fa <HAL_DMA_Start_IT+0x46a>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	f040 820a 	bne.w	80062e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a68      	ldr	r2, [pc, #416]	; (8006084 <HAL_DMA_Start_IT+0x1f4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d04a      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a66      	ldr	r2, [pc, #408]	; (8006088 <HAL_DMA_Start_IT+0x1f8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d045      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a65      	ldr	r2, [pc, #404]	; (800608c <HAL_DMA_Start_IT+0x1fc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d040      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a63      	ldr	r2, [pc, #396]	; (8006090 <HAL_DMA_Start_IT+0x200>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d03b      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a62      	ldr	r2, [pc, #392]	; (8006094 <HAL_DMA_Start_IT+0x204>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d036      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a60      	ldr	r2, [pc, #384]	; (8006098 <HAL_DMA_Start_IT+0x208>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d031      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a5f      	ldr	r2, [pc, #380]	; (800609c <HAL_DMA_Start_IT+0x20c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d02c      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a5d      	ldr	r2, [pc, #372]	; (80060a0 <HAL_DMA_Start_IT+0x210>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d027      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a5c      	ldr	r2, [pc, #368]	; (80060a4 <HAL_DMA_Start_IT+0x214>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d022      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a5a      	ldr	r2, [pc, #360]	; (80060a8 <HAL_DMA_Start_IT+0x218>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01d      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a59      	ldr	r2, [pc, #356]	; (80060ac <HAL_DMA_Start_IT+0x21c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d018      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a57      	ldr	r2, [pc, #348]	; (80060b0 <HAL_DMA_Start_IT+0x220>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a56      	ldr	r2, [pc, #344]	; (80060b4 <HAL_DMA_Start_IT+0x224>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00e      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a54      	ldr	r2, [pc, #336]	; (80060b8 <HAL_DMA_Start_IT+0x228>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d009      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a53      	ldr	r2, [pc, #332]	; (80060bc <HAL_DMA_Start_IT+0x22c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_DMA_Start_IT+0xee>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a51      	ldr	r2, [pc, #324]	; (80060c0 <HAL_DMA_Start_IT+0x230>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d108      	bne.n	8005f90 <HAL_DMA_Start_IT+0x100>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e007      	b.n	8005fa0 <HAL_DMA_Start_IT+0x110>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0201 	bic.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f001 fe68 	bl	8007c7c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a34      	ldr	r2, [pc, #208]	; (8006084 <HAL_DMA_Start_IT+0x1f4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d04a      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a33      	ldr	r2, [pc, #204]	; (8006088 <HAL_DMA_Start_IT+0x1f8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d045      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a31      	ldr	r2, [pc, #196]	; (800608c <HAL_DMA_Start_IT+0x1fc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d040      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a30      	ldr	r2, [pc, #192]	; (8006090 <HAL_DMA_Start_IT+0x200>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d03b      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2e      	ldr	r2, [pc, #184]	; (8006094 <HAL_DMA_Start_IT+0x204>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d036      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2d      	ldr	r2, [pc, #180]	; (8006098 <HAL_DMA_Start_IT+0x208>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d031      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2b      	ldr	r2, [pc, #172]	; (800609c <HAL_DMA_Start_IT+0x20c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d02c      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	; (80060a0 <HAL_DMA_Start_IT+0x210>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d027      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a28      	ldr	r2, [pc, #160]	; (80060a4 <HAL_DMA_Start_IT+0x214>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d022      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a27      	ldr	r2, [pc, #156]	; (80060a8 <HAL_DMA_Start_IT+0x218>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d01d      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a25      	ldr	r2, [pc, #148]	; (80060ac <HAL_DMA_Start_IT+0x21c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d018      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a24      	ldr	r2, [pc, #144]	; (80060b0 <HAL_DMA_Start_IT+0x220>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a22      	ldr	r2, [pc, #136]	; (80060b4 <HAL_DMA_Start_IT+0x224>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00e      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <HAL_DMA_Start_IT+0x228>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d009      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <HAL_DMA_Start_IT+0x22c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_DMA_Start_IT+0x1bc>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_DMA_Start_IT+0x230>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d101      	bne.n	8006050 <HAL_DMA_Start_IT+0x1c0>
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <HAL_DMA_Start_IT+0x1c2>
 8006050:	2300      	movs	r3, #0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d036      	beq.n	80060c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f023 021e 	bic.w	r2, r3, #30
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0216 	orr.w	r2, r2, #22
 8006068:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d03e      	beq.n	80060f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0208 	orr.w	r2, r2, #8
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e035      	b.n	80060f0 <HAL_DMA_Start_IT+0x260>
 8006084:	40020010 	.word	0x40020010
 8006088:	40020028 	.word	0x40020028
 800608c:	40020040 	.word	0x40020040
 8006090:	40020058 	.word	0x40020058
 8006094:	40020070 	.word	0x40020070
 8006098:	40020088 	.word	0x40020088
 800609c:	400200a0 	.word	0x400200a0
 80060a0:	400200b8 	.word	0x400200b8
 80060a4:	40020410 	.word	0x40020410
 80060a8:	40020428 	.word	0x40020428
 80060ac:	40020440 	.word	0x40020440
 80060b0:	40020458 	.word	0x40020458
 80060b4:	40020470 	.word	0x40020470
 80060b8:	40020488 	.word	0x40020488
 80060bc:	400204a0 	.word	0x400204a0
 80060c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f023 020e 	bic.w	r2, r3, #14
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 020a 	orr.w	r2, r2, #10
 80060d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d007      	beq.n	80060f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0204 	orr.w	r2, r2, #4
 80060ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a83      	ldr	r2, [pc, #524]	; (8006304 <HAL_DMA_Start_IT+0x474>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d072      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a82      	ldr	r2, [pc, #520]	; (8006308 <HAL_DMA_Start_IT+0x478>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d06d      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a80      	ldr	r2, [pc, #512]	; (800630c <HAL_DMA_Start_IT+0x47c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d068      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a7f      	ldr	r2, [pc, #508]	; (8006310 <HAL_DMA_Start_IT+0x480>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d063      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a7d      	ldr	r2, [pc, #500]	; (8006314 <HAL_DMA_Start_IT+0x484>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d05e      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a7c      	ldr	r2, [pc, #496]	; (8006318 <HAL_DMA_Start_IT+0x488>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d059      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a7a      	ldr	r2, [pc, #488]	; (800631c <HAL_DMA_Start_IT+0x48c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d054      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a79      	ldr	r2, [pc, #484]	; (8006320 <HAL_DMA_Start_IT+0x490>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d04f      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a77      	ldr	r2, [pc, #476]	; (8006324 <HAL_DMA_Start_IT+0x494>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d04a      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a76      	ldr	r2, [pc, #472]	; (8006328 <HAL_DMA_Start_IT+0x498>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d045      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a74      	ldr	r2, [pc, #464]	; (800632c <HAL_DMA_Start_IT+0x49c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d040      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a73      	ldr	r2, [pc, #460]	; (8006330 <HAL_DMA_Start_IT+0x4a0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d03b      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a71      	ldr	r2, [pc, #452]	; (8006334 <HAL_DMA_Start_IT+0x4a4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d036      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a70      	ldr	r2, [pc, #448]	; (8006338 <HAL_DMA_Start_IT+0x4a8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d031      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a6e      	ldr	r2, [pc, #440]	; (800633c <HAL_DMA_Start_IT+0x4ac>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d02c      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a6d      	ldr	r2, [pc, #436]	; (8006340 <HAL_DMA_Start_IT+0x4b0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d027      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a6b      	ldr	r2, [pc, #428]	; (8006344 <HAL_DMA_Start_IT+0x4b4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d022      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a6a      	ldr	r2, [pc, #424]	; (8006348 <HAL_DMA_Start_IT+0x4b8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d01d      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a68      	ldr	r2, [pc, #416]	; (800634c <HAL_DMA_Start_IT+0x4bc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a67      	ldr	r2, [pc, #412]	; (8006350 <HAL_DMA_Start_IT+0x4c0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a65      	ldr	r2, [pc, #404]	; (8006354 <HAL_DMA_Start_IT+0x4c4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a64      	ldr	r2, [pc, #400]	; (8006358 <HAL_DMA_Start_IT+0x4c8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a62      	ldr	r2, [pc, #392]	; (800635c <HAL_DMA_Start_IT+0x4cc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_DMA_Start_IT+0x350>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a61      	ldr	r2, [pc, #388]	; (8006360 <HAL_DMA_Start_IT+0x4d0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <HAL_DMA_Start_IT+0x354>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_DMA_Start_IT+0x356>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01a      	beq.n	8006220 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006206:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800621a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800621e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a37      	ldr	r2, [pc, #220]	; (8006304 <HAL_DMA_Start_IT+0x474>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d04a      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a36      	ldr	r2, [pc, #216]	; (8006308 <HAL_DMA_Start_IT+0x478>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d045      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a34      	ldr	r2, [pc, #208]	; (800630c <HAL_DMA_Start_IT+0x47c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d040      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a33      	ldr	r2, [pc, #204]	; (8006310 <HAL_DMA_Start_IT+0x480>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d03b      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a31      	ldr	r2, [pc, #196]	; (8006314 <HAL_DMA_Start_IT+0x484>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d036      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a30      	ldr	r2, [pc, #192]	; (8006318 <HAL_DMA_Start_IT+0x488>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d031      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2e      	ldr	r2, [pc, #184]	; (800631c <HAL_DMA_Start_IT+0x48c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d02c      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2d      	ldr	r2, [pc, #180]	; (8006320 <HAL_DMA_Start_IT+0x490>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d027      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2b      	ldr	r2, [pc, #172]	; (8006324 <HAL_DMA_Start_IT+0x494>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d022      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2a      	ldr	r2, [pc, #168]	; (8006328 <HAL_DMA_Start_IT+0x498>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d01d      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a28      	ldr	r2, [pc, #160]	; (800632c <HAL_DMA_Start_IT+0x49c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d018      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a27      	ldr	r2, [pc, #156]	; (8006330 <HAL_DMA_Start_IT+0x4a0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d013      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a25      	ldr	r2, [pc, #148]	; (8006334 <HAL_DMA_Start_IT+0x4a4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00e      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a24      	ldr	r2, [pc, #144]	; (8006338 <HAL_DMA_Start_IT+0x4a8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d009      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a22      	ldr	r2, [pc, #136]	; (800633c <HAL_DMA_Start_IT+0x4ac>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <HAL_DMA_Start_IT+0x430>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_DMA_Start_IT+0x4b0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d108      	bne.n	80062d2 <HAL_DMA_Start_IT+0x442>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	e012      	b.n	80062f8 <HAL_DMA_Start_IT+0x468>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e009      	b.n	80062f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40020010 	.word	0x40020010
 8006308:	40020028 	.word	0x40020028
 800630c:	40020040 	.word	0x40020040
 8006310:	40020058 	.word	0x40020058
 8006314:	40020070 	.word	0x40020070
 8006318:	40020088 	.word	0x40020088
 800631c:	400200a0 	.word	0x400200a0
 8006320:	400200b8 	.word	0x400200b8
 8006324:	40020410 	.word	0x40020410
 8006328:	40020428 	.word	0x40020428
 800632c:	40020440 	.word	0x40020440
 8006330:	40020458 	.word	0x40020458
 8006334:	40020470 	.word	0x40020470
 8006338:	40020488 	.word	0x40020488
 800633c:	400204a0 	.word	0x400204a0
 8006340:	400204b8 	.word	0x400204b8
 8006344:	58025408 	.word	0x58025408
 8006348:	5802541c 	.word	0x5802541c
 800634c:	58025430 	.word	0x58025430
 8006350:	58025444 	.word	0x58025444
 8006354:	58025458 	.word	0x58025458
 8006358:	5802546c 	.word	0x5802546c
 800635c:	58025480 	.word	0x58025480
 8006360:	58025494 	.word	0x58025494

08006364 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800636c:	f7fe f938 	bl	80045e0 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e2dc      	b.n	8006936 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d008      	beq.n	800639a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2280      	movs	r2, #128	; 0x80
 800638c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e2cd      	b.n	8006936 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a76      	ldr	r2, [pc, #472]	; (8006578 <HAL_DMA_Abort+0x214>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d04a      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a74      	ldr	r2, [pc, #464]	; (800657c <HAL_DMA_Abort+0x218>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d045      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a73      	ldr	r2, [pc, #460]	; (8006580 <HAL_DMA_Abort+0x21c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d040      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a71      	ldr	r2, [pc, #452]	; (8006584 <HAL_DMA_Abort+0x220>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d03b      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a70      	ldr	r2, [pc, #448]	; (8006588 <HAL_DMA_Abort+0x224>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d036      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a6e      	ldr	r2, [pc, #440]	; (800658c <HAL_DMA_Abort+0x228>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d031      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6d      	ldr	r2, [pc, #436]	; (8006590 <HAL_DMA_Abort+0x22c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d02c      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a6b      	ldr	r2, [pc, #428]	; (8006594 <HAL_DMA_Abort+0x230>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d027      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a6a      	ldr	r2, [pc, #424]	; (8006598 <HAL_DMA_Abort+0x234>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d022      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a68      	ldr	r2, [pc, #416]	; (800659c <HAL_DMA_Abort+0x238>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d01d      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a67      	ldr	r2, [pc, #412]	; (80065a0 <HAL_DMA_Abort+0x23c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d018      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a65      	ldr	r2, [pc, #404]	; (80065a4 <HAL_DMA_Abort+0x240>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a64      	ldr	r2, [pc, #400]	; (80065a8 <HAL_DMA_Abort+0x244>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00e      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a62      	ldr	r2, [pc, #392]	; (80065ac <HAL_DMA_Abort+0x248>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a61      	ldr	r2, [pc, #388]	; (80065b0 <HAL_DMA_Abort+0x24c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_DMA_Abort+0xd6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a5f      	ldr	r2, [pc, #380]	; (80065b4 <HAL_DMA_Abort+0x250>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d101      	bne.n	800643e <HAL_DMA_Abort+0xda>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <HAL_DMA_Abort+0xdc>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d013      	beq.n	800646c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 021e 	bic.w	r2, r2, #30
 8006452:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006462:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e00a      	b.n	8006482 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 020e 	bic.w	r2, r2, #14
 800647a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a3c      	ldr	r2, [pc, #240]	; (8006578 <HAL_DMA_Abort+0x214>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d072      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a3a      	ldr	r2, [pc, #232]	; (800657c <HAL_DMA_Abort+0x218>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d06d      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a39      	ldr	r2, [pc, #228]	; (8006580 <HAL_DMA_Abort+0x21c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d068      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a37      	ldr	r2, [pc, #220]	; (8006584 <HAL_DMA_Abort+0x220>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d063      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a36      	ldr	r2, [pc, #216]	; (8006588 <HAL_DMA_Abort+0x224>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d05e      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a34      	ldr	r2, [pc, #208]	; (800658c <HAL_DMA_Abort+0x228>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d059      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a33      	ldr	r2, [pc, #204]	; (8006590 <HAL_DMA_Abort+0x22c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d054      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a31      	ldr	r2, [pc, #196]	; (8006594 <HAL_DMA_Abort+0x230>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d04f      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a30      	ldr	r2, [pc, #192]	; (8006598 <HAL_DMA_Abort+0x234>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d04a      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2e      	ldr	r2, [pc, #184]	; (800659c <HAL_DMA_Abort+0x238>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d045      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2d      	ldr	r2, [pc, #180]	; (80065a0 <HAL_DMA_Abort+0x23c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d040      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2b      	ldr	r2, [pc, #172]	; (80065a4 <HAL_DMA_Abort+0x240>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d03b      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2a      	ldr	r2, [pc, #168]	; (80065a8 <HAL_DMA_Abort+0x244>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d036      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a28      	ldr	r2, [pc, #160]	; (80065ac <HAL_DMA_Abort+0x248>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d031      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <HAL_DMA_Abort+0x24c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d02c      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a25      	ldr	r2, [pc, #148]	; (80065b4 <HAL_DMA_Abort+0x250>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d027      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a24      	ldr	r2, [pc, #144]	; (80065b8 <HAL_DMA_Abort+0x254>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d022      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a22      	ldr	r2, [pc, #136]	; (80065bc <HAL_DMA_Abort+0x258>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01d      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <HAL_DMA_Abort+0x25c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d018      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <HAL_DMA_Abort+0x260>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <HAL_DMA_Abort+0x264>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00e      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1c      	ldr	r2, [pc, #112]	; (80065cc <HAL_DMA_Abort+0x268>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d009      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <HAL_DMA_Abort+0x26c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d004      	beq.n	8006572 <HAL_DMA_Abort+0x20e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a19      	ldr	r2, [pc, #100]	; (80065d4 <HAL_DMA_Abort+0x270>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d132      	bne.n	80065d8 <HAL_DMA_Abort+0x274>
 8006572:	2301      	movs	r3, #1
 8006574:	e031      	b.n	80065da <HAL_DMA_Abort+0x276>
 8006576:	bf00      	nop
 8006578:	40020010 	.word	0x40020010
 800657c:	40020028 	.word	0x40020028
 8006580:	40020040 	.word	0x40020040
 8006584:	40020058 	.word	0x40020058
 8006588:	40020070 	.word	0x40020070
 800658c:	40020088 	.word	0x40020088
 8006590:	400200a0 	.word	0x400200a0
 8006594:	400200b8 	.word	0x400200b8
 8006598:	40020410 	.word	0x40020410
 800659c:	40020428 	.word	0x40020428
 80065a0:	40020440 	.word	0x40020440
 80065a4:	40020458 	.word	0x40020458
 80065a8:	40020470 	.word	0x40020470
 80065ac:	40020488 	.word	0x40020488
 80065b0:	400204a0 	.word	0x400204a0
 80065b4:	400204b8 	.word	0x400204b8
 80065b8:	58025408 	.word	0x58025408
 80065bc:	5802541c 	.word	0x5802541c
 80065c0:	58025430 	.word	0x58025430
 80065c4:	58025444 	.word	0x58025444
 80065c8:	58025458 	.word	0x58025458
 80065cc:	5802546c 	.word	0x5802546c
 80065d0:	58025480 	.word	0x58025480
 80065d4:	58025494 	.word	0x58025494
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a6d      	ldr	r2, [pc, #436]	; (80067a8 <HAL_DMA_Abort+0x444>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d04a      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a6b      	ldr	r2, [pc, #428]	; (80067ac <HAL_DMA_Abort+0x448>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d045      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a6a      	ldr	r2, [pc, #424]	; (80067b0 <HAL_DMA_Abort+0x44c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d040      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a68      	ldr	r2, [pc, #416]	; (80067b4 <HAL_DMA_Abort+0x450>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d03b      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a67      	ldr	r2, [pc, #412]	; (80067b8 <HAL_DMA_Abort+0x454>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d036      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a65      	ldr	r2, [pc, #404]	; (80067bc <HAL_DMA_Abort+0x458>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d031      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a64      	ldr	r2, [pc, #400]	; (80067c0 <HAL_DMA_Abort+0x45c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d02c      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a62      	ldr	r2, [pc, #392]	; (80067c4 <HAL_DMA_Abort+0x460>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d027      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a61      	ldr	r2, [pc, #388]	; (80067c8 <HAL_DMA_Abort+0x464>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d022      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a5f      	ldr	r2, [pc, #380]	; (80067cc <HAL_DMA_Abort+0x468>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01d      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a5e      	ldr	r2, [pc, #376]	; (80067d0 <HAL_DMA_Abort+0x46c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5c      	ldr	r2, [pc, #368]	; (80067d4 <HAL_DMA_Abort+0x470>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5b      	ldr	r2, [pc, #364]	; (80067d8 <HAL_DMA_Abort+0x474>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a59      	ldr	r2, [pc, #356]	; (80067dc <HAL_DMA_Abort+0x478>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a58      	ldr	r2, [pc, #352]	; (80067e0 <HAL_DMA_Abort+0x47c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_DMA_Abort+0x32a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a56      	ldr	r2, [pc, #344]	; (80067e4 <HAL_DMA_Abort+0x480>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <HAL_DMA_Abort+0x33c>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e007      	b.n	80066b0 <HAL_DMA_Abort+0x34c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066b0:	e013      	b.n	80066da <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066b2:	f7fd ff95 	bl	80045e0 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b05      	cmp	r3, #5
 80066be:	d90c      	bls.n	80066da <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2203      	movs	r2, #3
 80066ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e12d      	b.n	8006936 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e5      	bne.n	80066b2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a2f      	ldr	r2, [pc, #188]	; (80067a8 <HAL_DMA_Abort+0x444>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d04a      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a2d      	ldr	r2, [pc, #180]	; (80067ac <HAL_DMA_Abort+0x448>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d045      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a2c      	ldr	r2, [pc, #176]	; (80067b0 <HAL_DMA_Abort+0x44c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d040      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a2a      	ldr	r2, [pc, #168]	; (80067b4 <HAL_DMA_Abort+0x450>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d03b      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a29      	ldr	r2, [pc, #164]	; (80067b8 <HAL_DMA_Abort+0x454>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d036      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a27      	ldr	r2, [pc, #156]	; (80067bc <HAL_DMA_Abort+0x458>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d031      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a26      	ldr	r2, [pc, #152]	; (80067c0 <HAL_DMA_Abort+0x45c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d02c      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a24      	ldr	r2, [pc, #144]	; (80067c4 <HAL_DMA_Abort+0x460>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d027      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a23      	ldr	r2, [pc, #140]	; (80067c8 <HAL_DMA_Abort+0x464>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d022      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a21      	ldr	r2, [pc, #132]	; (80067cc <HAL_DMA_Abort+0x468>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01d      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a20      	ldr	r2, [pc, #128]	; (80067d0 <HAL_DMA_Abort+0x46c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d018      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1e      	ldr	r2, [pc, #120]	; (80067d4 <HAL_DMA_Abort+0x470>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1d      	ldr	r2, [pc, #116]	; (80067d8 <HAL_DMA_Abort+0x474>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00e      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1b      	ldr	r2, [pc, #108]	; (80067dc <HAL_DMA_Abort+0x478>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1a      	ldr	r2, [pc, #104]	; (80067e0 <HAL_DMA_Abort+0x47c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_DMA_Abort+0x422>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <HAL_DMA_Abort+0x480>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d101      	bne.n	800678a <HAL_DMA_Abort+0x426>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <HAL_DMA_Abort+0x428>
 800678a:	2300      	movs	r3, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02b      	beq.n	80067e8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006794:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	223f      	movs	r2, #63	; 0x3f
 80067a0:	409a      	lsls	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	609a      	str	r2, [r3, #8]
 80067a6:	e02a      	b.n	80067fe <HAL_DMA_Abort+0x49a>
 80067a8:	40020010 	.word	0x40020010
 80067ac:	40020028 	.word	0x40020028
 80067b0:	40020040 	.word	0x40020040
 80067b4:	40020058 	.word	0x40020058
 80067b8:	40020070 	.word	0x40020070
 80067bc:	40020088 	.word	0x40020088
 80067c0:	400200a0 	.word	0x400200a0
 80067c4:	400200b8 	.word	0x400200b8
 80067c8:	40020410 	.word	0x40020410
 80067cc:	40020428 	.word	0x40020428
 80067d0:	40020440 	.word	0x40020440
 80067d4:	40020458 	.word	0x40020458
 80067d8:	40020470 	.word	0x40020470
 80067dc:	40020488 	.word	0x40020488
 80067e0:	400204a0 	.word	0x400204a0
 80067e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2201      	movs	r2, #1
 80067f8:	409a      	lsls	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a4f      	ldr	r2, [pc, #316]	; (8006940 <HAL_DMA_Abort+0x5dc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d072      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a4d      	ldr	r2, [pc, #308]	; (8006944 <HAL_DMA_Abort+0x5e0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d06d      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a4c      	ldr	r2, [pc, #304]	; (8006948 <HAL_DMA_Abort+0x5e4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d068      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a4a      	ldr	r2, [pc, #296]	; (800694c <HAL_DMA_Abort+0x5e8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d063      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a49      	ldr	r2, [pc, #292]	; (8006950 <HAL_DMA_Abort+0x5ec>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d05e      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a47      	ldr	r2, [pc, #284]	; (8006954 <HAL_DMA_Abort+0x5f0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d059      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a46      	ldr	r2, [pc, #280]	; (8006958 <HAL_DMA_Abort+0x5f4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d054      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a44      	ldr	r2, [pc, #272]	; (800695c <HAL_DMA_Abort+0x5f8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d04f      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a43      	ldr	r2, [pc, #268]	; (8006960 <HAL_DMA_Abort+0x5fc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04a      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a41      	ldr	r2, [pc, #260]	; (8006964 <HAL_DMA_Abort+0x600>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d045      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a40      	ldr	r2, [pc, #256]	; (8006968 <HAL_DMA_Abort+0x604>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d040      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a3e      	ldr	r2, [pc, #248]	; (800696c <HAL_DMA_Abort+0x608>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d03b      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3d      	ldr	r2, [pc, #244]	; (8006970 <HAL_DMA_Abort+0x60c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d036      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a3b      	ldr	r2, [pc, #236]	; (8006974 <HAL_DMA_Abort+0x610>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d031      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a3a      	ldr	r2, [pc, #232]	; (8006978 <HAL_DMA_Abort+0x614>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d02c      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a38      	ldr	r2, [pc, #224]	; (800697c <HAL_DMA_Abort+0x618>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d027      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a37      	ldr	r2, [pc, #220]	; (8006980 <HAL_DMA_Abort+0x61c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a35      	ldr	r2, [pc, #212]	; (8006984 <HAL_DMA_Abort+0x620>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01d      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a34      	ldr	r2, [pc, #208]	; (8006988 <HAL_DMA_Abort+0x624>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a32      	ldr	r2, [pc, #200]	; (800698c <HAL_DMA_Abort+0x628>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a31      	ldr	r2, [pc, #196]	; (8006990 <HAL_DMA_Abort+0x62c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2f      	ldr	r2, [pc, #188]	; (8006994 <HAL_DMA_Abort+0x630>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2e      	ldr	r2, [pc, #184]	; (8006998 <HAL_DMA_Abort+0x634>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_DMA_Abort+0x58a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a2c      	ldr	r2, [pc, #176]	; (800699c <HAL_DMA_Abort+0x638>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d101      	bne.n	80068f2 <HAL_DMA_Abort+0x58e>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <HAL_DMA_Abort+0x590>
 80068f2:	2300      	movs	r3, #0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d015      	beq.n	8006924 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006900:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00c      	beq.n	8006924 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006918:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006922:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40020010 	.word	0x40020010
 8006944:	40020028 	.word	0x40020028
 8006948:	40020040 	.word	0x40020040
 800694c:	40020058 	.word	0x40020058
 8006950:	40020070 	.word	0x40020070
 8006954:	40020088 	.word	0x40020088
 8006958:	400200a0 	.word	0x400200a0
 800695c:	400200b8 	.word	0x400200b8
 8006960:	40020410 	.word	0x40020410
 8006964:	40020428 	.word	0x40020428
 8006968:	40020440 	.word	0x40020440
 800696c:	40020458 	.word	0x40020458
 8006970:	40020470 	.word	0x40020470
 8006974:	40020488 	.word	0x40020488
 8006978:	400204a0 	.word	0x400204a0
 800697c:	400204b8 	.word	0x400204b8
 8006980:	58025408 	.word	0x58025408
 8006984:	5802541c 	.word	0x5802541c
 8006988:	58025430 	.word	0x58025430
 800698c:	58025444 	.word	0x58025444
 8006990:	58025458 	.word	0x58025458
 8006994:	5802546c 	.word	0x5802546c
 8006998:	58025480 	.word	0x58025480
 800699c:	58025494 	.word	0x58025494

080069a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e205      	b.n	8006dbe <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d004      	beq.n	80069c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2280      	movs	r2, #128	; 0x80
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e1fa      	b.n	8006dbe <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a8c      	ldr	r2, [pc, #560]	; (8006c00 <HAL_DMA_Abort_IT+0x260>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d04a      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a8b      	ldr	r2, [pc, #556]	; (8006c04 <HAL_DMA_Abort_IT+0x264>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d045      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a89      	ldr	r2, [pc, #548]	; (8006c08 <HAL_DMA_Abort_IT+0x268>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d040      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a88      	ldr	r2, [pc, #544]	; (8006c0c <HAL_DMA_Abort_IT+0x26c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d03b      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a86      	ldr	r2, [pc, #536]	; (8006c10 <HAL_DMA_Abort_IT+0x270>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d036      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a85      	ldr	r2, [pc, #532]	; (8006c14 <HAL_DMA_Abort_IT+0x274>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d031      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a83      	ldr	r2, [pc, #524]	; (8006c18 <HAL_DMA_Abort_IT+0x278>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d02c      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a82      	ldr	r2, [pc, #520]	; (8006c1c <HAL_DMA_Abort_IT+0x27c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d027      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a80      	ldr	r2, [pc, #512]	; (8006c20 <HAL_DMA_Abort_IT+0x280>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d022      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a7f      	ldr	r2, [pc, #508]	; (8006c24 <HAL_DMA_Abort_IT+0x284>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d01d      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a7d      	ldr	r2, [pc, #500]	; (8006c28 <HAL_DMA_Abort_IT+0x288>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d018      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a7c      	ldr	r2, [pc, #496]	; (8006c2c <HAL_DMA_Abort_IT+0x28c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a7a      	ldr	r2, [pc, #488]	; (8006c30 <HAL_DMA_Abort_IT+0x290>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00e      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a79      	ldr	r2, [pc, #484]	; (8006c34 <HAL_DMA_Abort_IT+0x294>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d009      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a77      	ldr	r2, [pc, #476]	; (8006c38 <HAL_DMA_Abort_IT+0x298>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <HAL_DMA_Abort_IT+0xc8>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a76      	ldr	r2, [pc, #472]	; (8006c3c <HAL_DMA_Abort_IT+0x29c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d101      	bne.n	8006a6c <HAL_DMA_Abort_IT+0xcc>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <HAL_DMA_Abort_IT+0xce>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d065      	beq.n	8006b3e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2204      	movs	r2, #4
 8006a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a60      	ldr	r2, [pc, #384]	; (8006c00 <HAL_DMA_Abort_IT+0x260>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d04a      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a5e      	ldr	r2, [pc, #376]	; (8006c04 <HAL_DMA_Abort_IT+0x264>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d045      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a5d      	ldr	r2, [pc, #372]	; (8006c08 <HAL_DMA_Abort_IT+0x268>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d040      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a5b      	ldr	r2, [pc, #364]	; (8006c0c <HAL_DMA_Abort_IT+0x26c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d03b      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a5a      	ldr	r2, [pc, #360]	; (8006c10 <HAL_DMA_Abort_IT+0x270>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d036      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a58      	ldr	r2, [pc, #352]	; (8006c14 <HAL_DMA_Abort_IT+0x274>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d031      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a57      	ldr	r2, [pc, #348]	; (8006c18 <HAL_DMA_Abort_IT+0x278>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d02c      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a55      	ldr	r2, [pc, #340]	; (8006c1c <HAL_DMA_Abort_IT+0x27c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d027      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a54      	ldr	r2, [pc, #336]	; (8006c20 <HAL_DMA_Abort_IT+0x280>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d022      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a52      	ldr	r2, [pc, #328]	; (8006c24 <HAL_DMA_Abort_IT+0x284>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d01d      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a51      	ldr	r2, [pc, #324]	; (8006c28 <HAL_DMA_Abort_IT+0x288>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d018      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a4f      	ldr	r2, [pc, #316]	; (8006c2c <HAL_DMA_Abort_IT+0x28c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a4e      	ldr	r2, [pc, #312]	; (8006c30 <HAL_DMA_Abort_IT+0x290>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00e      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a4c      	ldr	r2, [pc, #304]	; (8006c34 <HAL_DMA_Abort_IT+0x294>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a4b      	ldr	r2, [pc, #300]	; (8006c38 <HAL_DMA_Abort_IT+0x298>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d004      	beq.n	8006b1a <HAL_DMA_Abort_IT+0x17a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a49      	ldr	r2, [pc, #292]	; (8006c3c <HAL_DMA_Abort_IT+0x29c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d108      	bne.n	8006b2c <HAL_DMA_Abort_IT+0x18c>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0201 	bic.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e147      	b.n	8006dbc <HAL_DMA_Abort_IT+0x41c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0201 	bic.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	e13e      	b.n	8006dbc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 020e 	bic.w	r2, r2, #14
 8006b4c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <HAL_DMA_Abort_IT+0x260>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d04a      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a29      	ldr	r2, [pc, #164]	; (8006c04 <HAL_DMA_Abort_IT+0x264>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d045      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a28      	ldr	r2, [pc, #160]	; (8006c08 <HAL_DMA_Abort_IT+0x268>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d040      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a26      	ldr	r2, [pc, #152]	; (8006c0c <HAL_DMA_Abort_IT+0x26c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d03b      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a25      	ldr	r2, [pc, #148]	; (8006c10 <HAL_DMA_Abort_IT+0x270>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d036      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a23      	ldr	r2, [pc, #140]	; (8006c14 <HAL_DMA_Abort_IT+0x274>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d031      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a22      	ldr	r2, [pc, #136]	; (8006c18 <HAL_DMA_Abort_IT+0x278>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d02c      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <HAL_DMA_Abort_IT+0x27c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d027      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <HAL_DMA_Abort_IT+0x280>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d022      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <HAL_DMA_Abort_IT+0x284>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01d      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <HAL_DMA_Abort_IT+0x288>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d018      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1a      	ldr	r2, [pc, #104]	; (8006c2c <HAL_DMA_Abort_IT+0x28c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a19      	ldr	r2, [pc, #100]	; (8006c30 <HAL_DMA_Abort_IT+0x290>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <HAL_DMA_Abort_IT+0x294>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d009      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a16      	ldr	r2, [pc, #88]	; (8006c38 <HAL_DMA_Abort_IT+0x298>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_DMA_Abort_IT+0x24e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <HAL_DMA_Abort_IT+0x29c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d128      	bne.n	8006c40 <HAL_DMA_Abort_IT+0x2a0>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0201 	bic.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e027      	b.n	8006c50 <HAL_DMA_Abort_IT+0x2b0>
 8006c00:	40020010 	.word	0x40020010
 8006c04:	40020028 	.word	0x40020028
 8006c08:	40020040 	.word	0x40020040
 8006c0c:	40020058 	.word	0x40020058
 8006c10:	40020070 	.word	0x40020070
 8006c14:	40020088 	.word	0x40020088
 8006c18:	400200a0 	.word	0x400200a0
 8006c1c:	400200b8 	.word	0x400200b8
 8006c20:	40020410 	.word	0x40020410
 8006c24:	40020428 	.word	0x40020428
 8006c28:	40020440 	.word	0x40020440
 8006c2c:	40020458 	.word	0x40020458
 8006c30:	40020470 	.word	0x40020470
 8006c34:	40020488 	.word	0x40020488
 8006c38:	400204a0 	.word	0x400204a0
 8006c3c:	400204b8 	.word	0x400204b8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0201 	bic.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a5c      	ldr	r2, [pc, #368]	; (8006dc8 <HAL_DMA_Abort_IT+0x428>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d072      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a5b      	ldr	r2, [pc, #364]	; (8006dcc <HAL_DMA_Abort_IT+0x42c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d06d      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a59      	ldr	r2, [pc, #356]	; (8006dd0 <HAL_DMA_Abort_IT+0x430>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d068      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a58      	ldr	r2, [pc, #352]	; (8006dd4 <HAL_DMA_Abort_IT+0x434>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d063      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a56      	ldr	r2, [pc, #344]	; (8006dd8 <HAL_DMA_Abort_IT+0x438>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d05e      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a55      	ldr	r2, [pc, #340]	; (8006ddc <HAL_DMA_Abort_IT+0x43c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d059      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a53      	ldr	r2, [pc, #332]	; (8006de0 <HAL_DMA_Abort_IT+0x440>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d054      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a52      	ldr	r2, [pc, #328]	; (8006de4 <HAL_DMA_Abort_IT+0x444>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d04f      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a50      	ldr	r2, [pc, #320]	; (8006de8 <HAL_DMA_Abort_IT+0x448>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d04a      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a4f      	ldr	r2, [pc, #316]	; (8006dec <HAL_DMA_Abort_IT+0x44c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d045      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a4d      	ldr	r2, [pc, #308]	; (8006df0 <HAL_DMA_Abort_IT+0x450>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d040      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a4c      	ldr	r2, [pc, #304]	; (8006df4 <HAL_DMA_Abort_IT+0x454>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d03b      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a4a      	ldr	r2, [pc, #296]	; (8006df8 <HAL_DMA_Abort_IT+0x458>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d036      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a49      	ldr	r2, [pc, #292]	; (8006dfc <HAL_DMA_Abort_IT+0x45c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d031      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a47      	ldr	r2, [pc, #284]	; (8006e00 <HAL_DMA_Abort_IT+0x460>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d02c      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a46      	ldr	r2, [pc, #280]	; (8006e04 <HAL_DMA_Abort_IT+0x464>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d027      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a44      	ldr	r2, [pc, #272]	; (8006e08 <HAL_DMA_Abort_IT+0x468>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d022      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a43      	ldr	r2, [pc, #268]	; (8006e0c <HAL_DMA_Abort_IT+0x46c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d01d      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a41      	ldr	r2, [pc, #260]	; (8006e10 <HAL_DMA_Abort_IT+0x470>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d018      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a40      	ldr	r2, [pc, #256]	; (8006e14 <HAL_DMA_Abort_IT+0x474>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a3e      	ldr	r2, [pc, #248]	; (8006e18 <HAL_DMA_Abort_IT+0x478>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <HAL_DMA_Abort_IT+0x47c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a3b      	ldr	r2, [pc, #236]	; (8006e20 <HAL_DMA_Abort_IT+0x480>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <HAL_DMA_Abort_IT+0x3a0>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a3a      	ldr	r2, [pc, #232]	; (8006e24 <HAL_DMA_Abort_IT+0x484>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d101      	bne.n	8006d44 <HAL_DMA_Abort_IT+0x3a4>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <HAL_DMA_Abort_IT+0x3a6>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d028      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	2201      	movs	r2, #1
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00c      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40020010 	.word	0x40020010
 8006dcc:	40020028 	.word	0x40020028
 8006dd0:	40020040 	.word	0x40020040
 8006dd4:	40020058 	.word	0x40020058
 8006dd8:	40020070 	.word	0x40020070
 8006ddc:	40020088 	.word	0x40020088
 8006de0:	400200a0 	.word	0x400200a0
 8006de4:	400200b8 	.word	0x400200b8
 8006de8:	40020410 	.word	0x40020410
 8006dec:	40020428 	.word	0x40020428
 8006df0:	40020440 	.word	0x40020440
 8006df4:	40020458 	.word	0x40020458
 8006df8:	40020470 	.word	0x40020470
 8006dfc:	40020488 	.word	0x40020488
 8006e00:	400204a0 	.word	0x400204a0
 8006e04:	400204b8 	.word	0x400204b8
 8006e08:	58025408 	.word	0x58025408
 8006e0c:	5802541c 	.word	0x5802541c
 8006e10:	58025430 	.word	0x58025430
 8006e14:	58025444 	.word	0x58025444
 8006e18:	58025458 	.word	0x58025458
 8006e1c:	5802546c 	.word	0x5802546c
 8006e20:	58025480 	.word	0x58025480
 8006e24:	58025494 	.word	0x58025494

08006e28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e34:	4b67      	ldr	r3, [pc, #412]	; (8006fd4 <HAL_DMA_IRQHandler+0x1ac>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a67      	ldr	r2, [pc, #412]	; (8006fd8 <HAL_DMA_IRQHandler+0x1b0>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	0a9b      	lsrs	r3, r3, #10
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a5f      	ldr	r2, [pc, #380]	; (8006fdc <HAL_DMA_IRQHandler+0x1b4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d04a      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a5d      	ldr	r2, [pc, #372]	; (8006fe0 <HAL_DMA_IRQHandler+0x1b8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d045      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a5c      	ldr	r2, [pc, #368]	; (8006fe4 <HAL_DMA_IRQHandler+0x1bc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d040      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a5a      	ldr	r2, [pc, #360]	; (8006fe8 <HAL_DMA_IRQHandler+0x1c0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d03b      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a59      	ldr	r2, [pc, #356]	; (8006fec <HAL_DMA_IRQHandler+0x1c4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d036      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a57      	ldr	r2, [pc, #348]	; (8006ff0 <HAL_DMA_IRQHandler+0x1c8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d031      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a56      	ldr	r2, [pc, #344]	; (8006ff4 <HAL_DMA_IRQHandler+0x1cc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d02c      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a54      	ldr	r2, [pc, #336]	; (8006ff8 <HAL_DMA_IRQHandler+0x1d0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d027      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a53      	ldr	r2, [pc, #332]	; (8006ffc <HAL_DMA_IRQHandler+0x1d4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d022      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a51      	ldr	r2, [pc, #324]	; (8007000 <HAL_DMA_IRQHandler+0x1d8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01d      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a50      	ldr	r2, [pc, #320]	; (8007004 <HAL_DMA_IRQHandler+0x1dc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d018      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a4e      	ldr	r2, [pc, #312]	; (8007008 <HAL_DMA_IRQHandler+0x1e0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d013      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a4d      	ldr	r2, [pc, #308]	; (800700c <HAL_DMA_IRQHandler+0x1e4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00e      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a4b      	ldr	r2, [pc, #300]	; (8007010 <HAL_DMA_IRQHandler+0x1e8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a4a      	ldr	r2, [pc, #296]	; (8007014 <HAL_DMA_IRQHandler+0x1ec>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d004      	beq.n	8006efa <HAL_DMA_IRQHandler+0xd2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a48      	ldr	r2, [pc, #288]	; (8007018 <HAL_DMA_IRQHandler+0x1f0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d101      	bne.n	8006efe <HAL_DMA_IRQHandler+0xd6>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <HAL_DMA_IRQHandler+0xd8>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 842b 	beq.w	800775c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2208      	movs	r2, #8
 8006f10:	409a      	lsls	r2, r3
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80a2 	beq.w	8007060 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a2e      	ldr	r2, [pc, #184]	; (8006fdc <HAL_DMA_IRQHandler+0x1b4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d04a      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a2d      	ldr	r2, [pc, #180]	; (8006fe0 <HAL_DMA_IRQHandler+0x1b8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d045      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2b      	ldr	r2, [pc, #172]	; (8006fe4 <HAL_DMA_IRQHandler+0x1bc>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d040      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a2a      	ldr	r2, [pc, #168]	; (8006fe8 <HAL_DMA_IRQHandler+0x1c0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d03b      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a28      	ldr	r2, [pc, #160]	; (8006fec <HAL_DMA_IRQHandler+0x1c4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d036      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a27      	ldr	r2, [pc, #156]	; (8006ff0 <HAL_DMA_IRQHandler+0x1c8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d031      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <HAL_DMA_IRQHandler+0x1cc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d02c      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a24      	ldr	r2, [pc, #144]	; (8006ff8 <HAL_DMA_IRQHandler+0x1d0>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d027      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <HAL_DMA_IRQHandler+0x1d4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d022      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a21      	ldr	r2, [pc, #132]	; (8007000 <HAL_DMA_IRQHandler+0x1d8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d01d      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <HAL_DMA_IRQHandler+0x1dc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d018      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <HAL_DMA_IRQHandler+0x1e0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d013      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	; (800700c <HAL_DMA_IRQHandler+0x1e4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00e      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <HAL_DMA_IRQHandler+0x1e8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d009      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a19      	ldr	r2, [pc, #100]	; (8007014 <HAL_DMA_IRQHandler+0x1ec>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d004      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x194>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a18      	ldr	r2, [pc, #96]	; (8007018 <HAL_DMA_IRQHandler+0x1f0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d12f      	bne.n	800701c <HAL_DMA_IRQHandler+0x1f4>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bf14      	ite	ne
 8006fca:	2301      	movne	r3, #1
 8006fcc:	2300      	moveq	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	e02e      	b.n	8007030 <HAL_DMA_IRQHandler+0x208>
 8006fd2:	bf00      	nop
 8006fd4:	24000000 	.word	0x24000000
 8006fd8:	1b4e81b5 	.word	0x1b4e81b5
 8006fdc:	40020010 	.word	0x40020010
 8006fe0:	40020028 	.word	0x40020028
 8006fe4:	40020040 	.word	0x40020040
 8006fe8:	40020058 	.word	0x40020058
 8006fec:	40020070 	.word	0x40020070
 8006ff0:	40020088 	.word	0x40020088
 8006ff4:	400200a0 	.word	0x400200a0
 8006ff8:	400200b8 	.word	0x400200b8
 8006ffc:	40020410 	.word	0x40020410
 8007000:	40020428 	.word	0x40020428
 8007004:	40020440 	.word	0x40020440
 8007008:	40020458 	.word	0x40020458
 800700c:	40020470 	.word	0x40020470
 8007010:	40020488 	.word	0x40020488
 8007014:	400204a0 	.word	0x400204a0
 8007018:	400204b8 	.word	0x400204b8
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	bf14      	ite	ne
 800702a:	2301      	movne	r3, #1
 800702c:	2300      	moveq	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d015      	beq.n	8007060 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0204 	bic.w	r2, r2, #4
 8007042:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2208      	movs	r2, #8
 800704e:	409a      	lsls	r2, r3
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007058:	f043 0201 	orr.w	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007064:	f003 031f 	and.w	r3, r3, #31
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	fa22 f303 	lsr.w	r3, r2, r3
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d06e      	beq.n	8007154 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a69      	ldr	r2, [pc, #420]	; (8007220 <HAL_DMA_IRQHandler+0x3f8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d04a      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a67      	ldr	r2, [pc, #412]	; (8007224 <HAL_DMA_IRQHandler+0x3fc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d045      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a66      	ldr	r2, [pc, #408]	; (8007228 <HAL_DMA_IRQHandler+0x400>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d040      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a64      	ldr	r2, [pc, #400]	; (800722c <HAL_DMA_IRQHandler+0x404>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d03b      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a63      	ldr	r2, [pc, #396]	; (8007230 <HAL_DMA_IRQHandler+0x408>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d036      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a61      	ldr	r2, [pc, #388]	; (8007234 <HAL_DMA_IRQHandler+0x40c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d031      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a60      	ldr	r2, [pc, #384]	; (8007238 <HAL_DMA_IRQHandler+0x410>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d02c      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a5e      	ldr	r2, [pc, #376]	; (800723c <HAL_DMA_IRQHandler+0x414>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d027      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a5d      	ldr	r2, [pc, #372]	; (8007240 <HAL_DMA_IRQHandler+0x418>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d022      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a5b      	ldr	r2, [pc, #364]	; (8007244 <HAL_DMA_IRQHandler+0x41c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d01d      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a5a      	ldr	r2, [pc, #360]	; (8007248 <HAL_DMA_IRQHandler+0x420>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d018      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a58      	ldr	r2, [pc, #352]	; (800724c <HAL_DMA_IRQHandler+0x424>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a57      	ldr	r2, [pc, #348]	; (8007250 <HAL_DMA_IRQHandler+0x428>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00e      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a55      	ldr	r2, [pc, #340]	; (8007254 <HAL_DMA_IRQHandler+0x42c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a54      	ldr	r2, [pc, #336]	; (8007258 <HAL_DMA_IRQHandler+0x430>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_DMA_IRQHandler+0x2ee>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a52      	ldr	r2, [pc, #328]	; (800725c <HAL_DMA_IRQHandler+0x434>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d10a      	bne.n	800712c <HAL_DMA_IRQHandler+0x304>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf14      	ite	ne
 8007124:	2301      	movne	r3, #1
 8007126:	2300      	moveq	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	e003      	b.n	8007134 <HAL_DMA_IRQHandler+0x30c>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2300      	movs	r3, #0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00d      	beq.n	8007154 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	2201      	movs	r2, #1
 8007142:	409a      	lsls	r2, r3
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714c:	f043 0202 	orr.w	r2, r3, #2
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2204      	movs	r2, #4
 800715e:	409a      	lsls	r2, r3
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	4013      	ands	r3, r2
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 808f 	beq.w	8007288 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a2c      	ldr	r2, [pc, #176]	; (8007220 <HAL_DMA_IRQHandler+0x3f8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d04a      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a2a      	ldr	r2, [pc, #168]	; (8007224 <HAL_DMA_IRQHandler+0x3fc>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d045      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a29      	ldr	r2, [pc, #164]	; (8007228 <HAL_DMA_IRQHandler+0x400>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d040      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a27      	ldr	r2, [pc, #156]	; (800722c <HAL_DMA_IRQHandler+0x404>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d03b      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a26      	ldr	r2, [pc, #152]	; (8007230 <HAL_DMA_IRQHandler+0x408>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d036      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a24      	ldr	r2, [pc, #144]	; (8007234 <HAL_DMA_IRQHandler+0x40c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d031      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a23      	ldr	r2, [pc, #140]	; (8007238 <HAL_DMA_IRQHandler+0x410>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d02c      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a21      	ldr	r2, [pc, #132]	; (800723c <HAL_DMA_IRQHandler+0x414>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d027      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a20      	ldr	r2, [pc, #128]	; (8007240 <HAL_DMA_IRQHandler+0x418>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d022      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1e      	ldr	r2, [pc, #120]	; (8007244 <HAL_DMA_IRQHandler+0x41c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01d      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1d      	ldr	r2, [pc, #116]	; (8007248 <HAL_DMA_IRQHandler+0x420>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d018      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1b      	ldr	r2, [pc, #108]	; (800724c <HAL_DMA_IRQHandler+0x424>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1a      	ldr	r2, [pc, #104]	; (8007250 <HAL_DMA_IRQHandler+0x428>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00e      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a18      	ldr	r2, [pc, #96]	; (8007254 <HAL_DMA_IRQHandler+0x42c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a17      	ldr	r2, [pc, #92]	; (8007258 <HAL_DMA_IRQHandler+0x430>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d004      	beq.n	800720a <HAL_DMA_IRQHandler+0x3e2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a15      	ldr	r2, [pc, #84]	; (800725c <HAL_DMA_IRQHandler+0x434>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d12a      	bne.n	8007260 <HAL_DMA_IRQHandler+0x438>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	bf14      	ite	ne
 8007218:	2301      	movne	r3, #1
 800721a:	2300      	moveq	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	e023      	b.n	8007268 <HAL_DMA_IRQHandler+0x440>
 8007220:	40020010 	.word	0x40020010
 8007224:	40020028 	.word	0x40020028
 8007228:	40020040 	.word	0x40020040
 800722c:	40020058 	.word	0x40020058
 8007230:	40020070 	.word	0x40020070
 8007234:	40020088 	.word	0x40020088
 8007238:	400200a0 	.word	0x400200a0
 800723c:	400200b8 	.word	0x400200b8
 8007240:	40020410 	.word	0x40020410
 8007244:	40020428 	.word	0x40020428
 8007248:	40020440 	.word	0x40020440
 800724c:	40020458 	.word	0x40020458
 8007250:	40020470 	.word	0x40020470
 8007254:	40020488 	.word	0x40020488
 8007258:	400204a0 	.word	0x400204a0
 800725c:	400204b8 	.word	0x400204b8
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00d      	beq.n	8007288 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	2204      	movs	r2, #4
 8007276:	409a      	lsls	r2, r3
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007280:	f043 0204 	orr.w	r2, r3, #4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728c:	f003 031f 	and.w	r3, r3, #31
 8007290:	2210      	movs	r2, #16
 8007292:	409a      	lsls	r2, r3
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 80a6 	beq.w	80073ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a85      	ldr	r2, [pc, #532]	; (80074b8 <HAL_DMA_IRQHandler+0x690>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d04a      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a83      	ldr	r2, [pc, #524]	; (80074bc <HAL_DMA_IRQHandler+0x694>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d045      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a82      	ldr	r2, [pc, #520]	; (80074c0 <HAL_DMA_IRQHandler+0x698>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d040      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a80      	ldr	r2, [pc, #512]	; (80074c4 <HAL_DMA_IRQHandler+0x69c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d03b      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a7f      	ldr	r2, [pc, #508]	; (80074c8 <HAL_DMA_IRQHandler+0x6a0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d036      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a7d      	ldr	r2, [pc, #500]	; (80074cc <HAL_DMA_IRQHandler+0x6a4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d031      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a7c      	ldr	r2, [pc, #496]	; (80074d0 <HAL_DMA_IRQHandler+0x6a8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d02c      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a7a      	ldr	r2, [pc, #488]	; (80074d4 <HAL_DMA_IRQHandler+0x6ac>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d027      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a79      	ldr	r2, [pc, #484]	; (80074d8 <HAL_DMA_IRQHandler+0x6b0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d022      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a77      	ldr	r2, [pc, #476]	; (80074dc <HAL_DMA_IRQHandler+0x6b4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d01d      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a76      	ldr	r2, [pc, #472]	; (80074e0 <HAL_DMA_IRQHandler+0x6b8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d018      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a74      	ldr	r2, [pc, #464]	; (80074e4 <HAL_DMA_IRQHandler+0x6bc>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a73      	ldr	r2, [pc, #460]	; (80074e8 <HAL_DMA_IRQHandler+0x6c0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00e      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a71      	ldr	r2, [pc, #452]	; (80074ec <HAL_DMA_IRQHandler+0x6c4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d009      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a70      	ldr	r2, [pc, #448]	; (80074f0 <HAL_DMA_IRQHandler+0x6c8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d004      	beq.n	800733e <HAL_DMA_IRQHandler+0x516>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a6e      	ldr	r2, [pc, #440]	; (80074f4 <HAL_DMA_IRQHandler+0x6cc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d10a      	bne.n	8007354 <HAL_DMA_IRQHandler+0x52c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	e009      	b.n	8007368 <HAL_DMA_IRQHandler+0x540>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	bf14      	ite	ne
 8007362:	2301      	movne	r3, #1
 8007364:	2300      	moveq	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d03e      	beq.n	80073ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	2210      	movs	r2, #16
 8007376:	409a      	lsls	r2, r3
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d018      	beq.n	80073bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d108      	bne.n	80073aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d024      	beq.n	80073ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	4798      	blx	r3
 80073a8:	e01f      	b.n	80073ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01b      	beq.n	80073ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
 80073ba:	e016      	b.n	80073ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d107      	bne.n	80073da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0208 	bic.w	r2, r2, #8
 80073d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2220      	movs	r2, #32
 80073f4:	409a      	lsls	r2, r3
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	4013      	ands	r3, r2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 8110 	beq.w	8007620 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a2c      	ldr	r2, [pc, #176]	; (80074b8 <HAL_DMA_IRQHandler+0x690>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d04a      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a2b      	ldr	r2, [pc, #172]	; (80074bc <HAL_DMA_IRQHandler+0x694>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d045      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a29      	ldr	r2, [pc, #164]	; (80074c0 <HAL_DMA_IRQHandler+0x698>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d040      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a28      	ldr	r2, [pc, #160]	; (80074c4 <HAL_DMA_IRQHandler+0x69c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d03b      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a26      	ldr	r2, [pc, #152]	; (80074c8 <HAL_DMA_IRQHandler+0x6a0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d036      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a25      	ldr	r2, [pc, #148]	; (80074cc <HAL_DMA_IRQHandler+0x6a4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d031      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a23      	ldr	r2, [pc, #140]	; (80074d0 <HAL_DMA_IRQHandler+0x6a8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d02c      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a22      	ldr	r2, [pc, #136]	; (80074d4 <HAL_DMA_IRQHandler+0x6ac>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d027      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a20      	ldr	r2, [pc, #128]	; (80074d8 <HAL_DMA_IRQHandler+0x6b0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d022      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1f      	ldr	r2, [pc, #124]	; (80074dc <HAL_DMA_IRQHandler+0x6b4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d01d      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1d      	ldr	r2, [pc, #116]	; (80074e0 <HAL_DMA_IRQHandler+0x6b8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d018      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <HAL_DMA_IRQHandler+0x6bc>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d013      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1a      	ldr	r2, [pc, #104]	; (80074e8 <HAL_DMA_IRQHandler+0x6c0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00e      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a19      	ldr	r2, [pc, #100]	; (80074ec <HAL_DMA_IRQHandler+0x6c4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d009      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a17      	ldr	r2, [pc, #92]	; (80074f0 <HAL_DMA_IRQHandler+0x6c8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x678>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a16      	ldr	r2, [pc, #88]	; (80074f4 <HAL_DMA_IRQHandler+0x6cc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d12b      	bne.n	80074f8 <HAL_DMA_IRQHandler+0x6d0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0310 	and.w	r3, r3, #16
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bf14      	ite	ne
 80074ae:	2301      	movne	r3, #1
 80074b0:	2300      	moveq	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	e02a      	b.n	800750c <HAL_DMA_IRQHandler+0x6e4>
 80074b6:	bf00      	nop
 80074b8:	40020010 	.word	0x40020010
 80074bc:	40020028 	.word	0x40020028
 80074c0:	40020040 	.word	0x40020040
 80074c4:	40020058 	.word	0x40020058
 80074c8:	40020070 	.word	0x40020070
 80074cc:	40020088 	.word	0x40020088
 80074d0:	400200a0 	.word	0x400200a0
 80074d4:	400200b8 	.word	0x400200b8
 80074d8:	40020410 	.word	0x40020410
 80074dc:	40020428 	.word	0x40020428
 80074e0:	40020440 	.word	0x40020440
 80074e4:	40020458 	.word	0x40020458
 80074e8:	40020470 	.word	0x40020470
 80074ec:	40020488 	.word	0x40020488
 80074f0:	400204a0 	.word	0x400204a0
 80074f4:	400204b8 	.word	0x400204b8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	bf14      	ite	ne
 8007506:	2301      	movne	r3, #1
 8007508:	2300      	moveq	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 8087 	beq.w	8007620 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007516:	f003 031f 	and.w	r3, r3, #31
 800751a:	2220      	movs	r2, #32
 800751c:	409a      	lsls	r2, r3
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b04      	cmp	r3, #4
 800752c:	d139      	bne.n	80075a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0216 	bic.w	r2, r2, #22
 800753c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695a      	ldr	r2, [r3, #20]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800754c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <HAL_DMA_IRQHandler+0x736>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0208 	bic.w	r2, r2, #8
 800756c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007572:	f003 031f 	and.w	r3, r3, #31
 8007576:	223f      	movs	r2, #63	; 0x3f
 8007578:	409a      	lsls	r2, r3
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 834a 	beq.w	8007c2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
          }
          return;
 80075a0:	e344      	b.n	8007c2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d018      	beq.n	80075e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d02c      	beq.n	8007620 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
 80075ce:	e027      	b.n	8007620 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d023      	beq.n	8007620 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
 80075e0:	e01e      	b.n	8007620 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10f      	bne.n	8007610 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0210 	bic.w	r2, r2, #16
 80075fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8306 	beq.w	8007c36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8088 	beq.w	8007748 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2204      	movs	r2, #4
 800763c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a7a      	ldr	r2, [pc, #488]	; (8007830 <HAL_DMA_IRQHandler+0xa08>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d04a      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a79      	ldr	r2, [pc, #484]	; (8007834 <HAL_DMA_IRQHandler+0xa0c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d045      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a77      	ldr	r2, [pc, #476]	; (8007838 <HAL_DMA_IRQHandler+0xa10>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d040      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a76      	ldr	r2, [pc, #472]	; (800783c <HAL_DMA_IRQHandler+0xa14>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d03b      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a74      	ldr	r2, [pc, #464]	; (8007840 <HAL_DMA_IRQHandler+0xa18>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d036      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a73      	ldr	r2, [pc, #460]	; (8007844 <HAL_DMA_IRQHandler+0xa1c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d031      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a71      	ldr	r2, [pc, #452]	; (8007848 <HAL_DMA_IRQHandler+0xa20>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d02c      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a70      	ldr	r2, [pc, #448]	; (800784c <HAL_DMA_IRQHandler+0xa24>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d027      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a6e      	ldr	r2, [pc, #440]	; (8007850 <HAL_DMA_IRQHandler+0xa28>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d022      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a6d      	ldr	r2, [pc, #436]	; (8007854 <HAL_DMA_IRQHandler+0xa2c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d01d      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a6b      	ldr	r2, [pc, #428]	; (8007858 <HAL_DMA_IRQHandler+0xa30>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d018      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a6a      	ldr	r2, [pc, #424]	; (800785c <HAL_DMA_IRQHandler+0xa34>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d013      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a68      	ldr	r2, [pc, #416]	; (8007860 <HAL_DMA_IRQHandler+0xa38>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00e      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a67      	ldr	r2, [pc, #412]	; (8007864 <HAL_DMA_IRQHandler+0xa3c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d009      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a65      	ldr	r2, [pc, #404]	; (8007868 <HAL_DMA_IRQHandler+0xa40>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d004      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x8b8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a64      	ldr	r2, [pc, #400]	; (800786c <HAL_DMA_IRQHandler+0xa44>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d108      	bne.n	80076f2 <HAL_DMA_IRQHandler+0x8ca>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e007      	b.n	8007702 <HAL_DMA_IRQHandler+0x8da>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770a:	429a      	cmp	r2, r3
 800770c:	d307      	bcc.n	800771e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f2      	bne.n	8007702 <HAL_DMA_IRQHandler+0x8da>
 800771c:	e000      	b.n	8007720 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800771e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d004      	beq.n	8007738 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2203      	movs	r2, #3
 8007732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007736:	e003      	b.n	8007740 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8272 	beq.w	8007c36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
 800775a:	e26c      	b.n	8007c36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a43      	ldr	r2, [pc, #268]	; (8007870 <HAL_DMA_IRQHandler+0xa48>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d022      	beq.n	80077ac <HAL_DMA_IRQHandler+0x984>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a42      	ldr	r2, [pc, #264]	; (8007874 <HAL_DMA_IRQHandler+0xa4c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d01d      	beq.n	80077ac <HAL_DMA_IRQHandler+0x984>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a40      	ldr	r2, [pc, #256]	; (8007878 <HAL_DMA_IRQHandler+0xa50>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d018      	beq.n	80077ac <HAL_DMA_IRQHandler+0x984>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a3f      	ldr	r2, [pc, #252]	; (800787c <HAL_DMA_IRQHandler+0xa54>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d013      	beq.n	80077ac <HAL_DMA_IRQHandler+0x984>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a3d      	ldr	r2, [pc, #244]	; (8007880 <HAL_DMA_IRQHandler+0xa58>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00e      	beq.n	80077ac <HAL_DMA_IRQHandler+0x984>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a3c      	ldr	r2, [pc, #240]	; (8007884 <HAL_DMA_IRQHandler+0xa5c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d009      	beq.n	80077ac <HAL_DMA_IRQHandler+0x984>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a3a      	ldr	r2, [pc, #232]	; (8007888 <HAL_DMA_IRQHandler+0xa60>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <HAL_DMA_IRQHandler+0x984>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a39      	ldr	r2, [pc, #228]	; (800788c <HAL_DMA_IRQHandler+0xa64>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d101      	bne.n	80077b0 <HAL_DMA_IRQHandler+0x988>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <HAL_DMA_IRQHandler+0x98a>
 80077b0:	2300      	movs	r3, #0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 823f 	beq.w	8007c36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	2204      	movs	r2, #4
 80077ca:	409a      	lsls	r2, r3
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80cd 	beq.w	8007970 <HAL_DMA_IRQHandler+0xb48>
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 80c7 	beq.w	8007970 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	2204      	movs	r2, #4
 80077ec:	409a      	lsls	r2, r3
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d049      	beq.n	8007890 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8210 	beq.w	8007c30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007818:	e20a      	b.n	8007c30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 8206 	beq.w	8007c30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800782c:	e200      	b.n	8007c30 <HAL_DMA_IRQHandler+0xe08>
 800782e:	bf00      	nop
 8007830:	40020010 	.word	0x40020010
 8007834:	40020028 	.word	0x40020028
 8007838:	40020040 	.word	0x40020040
 800783c:	40020058 	.word	0x40020058
 8007840:	40020070 	.word	0x40020070
 8007844:	40020088 	.word	0x40020088
 8007848:	400200a0 	.word	0x400200a0
 800784c:	400200b8 	.word	0x400200b8
 8007850:	40020410 	.word	0x40020410
 8007854:	40020428 	.word	0x40020428
 8007858:	40020440 	.word	0x40020440
 800785c:	40020458 	.word	0x40020458
 8007860:	40020470 	.word	0x40020470
 8007864:	40020488 	.word	0x40020488
 8007868:	400204a0 	.word	0x400204a0
 800786c:	400204b8 	.word	0x400204b8
 8007870:	58025408 	.word	0x58025408
 8007874:	5802541c 	.word	0x5802541c
 8007878:	58025430 	.word	0x58025430
 800787c:	58025444 	.word	0x58025444
 8007880:	58025458 	.word	0x58025458
 8007884:	5802546c 	.word	0x5802546c
 8007888:	58025480 	.word	0x58025480
 800788c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d160      	bne.n	800795c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a8c      	ldr	r2, [pc, #560]	; (8007ad0 <HAL_DMA_IRQHandler+0xca8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d04a      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a8a      	ldr	r2, [pc, #552]	; (8007ad4 <HAL_DMA_IRQHandler+0xcac>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d045      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a89      	ldr	r2, [pc, #548]	; (8007ad8 <HAL_DMA_IRQHandler+0xcb0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d040      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a87      	ldr	r2, [pc, #540]	; (8007adc <HAL_DMA_IRQHandler+0xcb4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d03b      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a86      	ldr	r2, [pc, #536]	; (8007ae0 <HAL_DMA_IRQHandler+0xcb8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d036      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a84      	ldr	r2, [pc, #528]	; (8007ae4 <HAL_DMA_IRQHandler+0xcbc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d031      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a83      	ldr	r2, [pc, #524]	; (8007ae8 <HAL_DMA_IRQHandler+0xcc0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d02c      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a81      	ldr	r2, [pc, #516]	; (8007aec <HAL_DMA_IRQHandler+0xcc4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d027      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a80      	ldr	r2, [pc, #512]	; (8007af0 <HAL_DMA_IRQHandler+0xcc8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d022      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a7e      	ldr	r2, [pc, #504]	; (8007af4 <HAL_DMA_IRQHandler+0xccc>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d01d      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a7d      	ldr	r2, [pc, #500]	; (8007af8 <HAL_DMA_IRQHandler+0xcd0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d018      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a7b      	ldr	r2, [pc, #492]	; (8007afc <HAL_DMA_IRQHandler+0xcd4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d013      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a7a      	ldr	r2, [pc, #488]	; (8007b00 <HAL_DMA_IRQHandler+0xcd8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d00e      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a78      	ldr	r2, [pc, #480]	; (8007b04 <HAL_DMA_IRQHandler+0xcdc>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d009      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a77      	ldr	r2, [pc, #476]	; (8007b08 <HAL_DMA_IRQHandler+0xce0>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d004      	beq.n	800793a <HAL_DMA_IRQHandler+0xb12>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a75      	ldr	r2, [pc, #468]	; (8007b0c <HAL_DMA_IRQHandler+0xce4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d108      	bne.n	800794c <HAL_DMA_IRQHandler+0xb24>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0208 	bic.w	r2, r2, #8
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	e007      	b.n	800795c <HAL_DMA_IRQHandler+0xb34>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0204 	bic.w	r2, r2, #4
 800795a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8165 	beq.w	8007c30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800796e:	e15f      	b.n	8007c30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	2202      	movs	r2, #2
 800797a:	409a      	lsls	r2, r3
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 80c5 	beq.w	8007b10 <HAL_DMA_IRQHandler+0xce8>
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80bf 	beq.w	8007b10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007996:	f003 031f 	and.w	r3, r3, #31
 800799a:	2202      	movs	r2, #2
 800799c:	409a      	lsls	r2, r3
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d018      	beq.n	80079de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d109      	bne.n	80079ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 813a 	beq.w	8007c34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079c8:	e134      	b.n	8007c34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 8130 	beq.w	8007c34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079dc:	e12a      	b.n	8007c34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f003 0320 	and.w	r3, r3, #32
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d168      	bne.n	8007aba <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a38      	ldr	r2, [pc, #224]	; (8007ad0 <HAL_DMA_IRQHandler+0xca8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d04a      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a37      	ldr	r2, [pc, #220]	; (8007ad4 <HAL_DMA_IRQHandler+0xcac>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d045      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a35      	ldr	r2, [pc, #212]	; (8007ad8 <HAL_DMA_IRQHandler+0xcb0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d040      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a34      	ldr	r2, [pc, #208]	; (8007adc <HAL_DMA_IRQHandler+0xcb4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d03b      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a32      	ldr	r2, [pc, #200]	; (8007ae0 <HAL_DMA_IRQHandler+0xcb8>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d036      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a31      	ldr	r2, [pc, #196]	; (8007ae4 <HAL_DMA_IRQHandler+0xcbc>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d031      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a2f      	ldr	r2, [pc, #188]	; (8007ae8 <HAL_DMA_IRQHandler+0xcc0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d02c      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a2e      	ldr	r2, [pc, #184]	; (8007aec <HAL_DMA_IRQHandler+0xcc4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d027      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a2c      	ldr	r2, [pc, #176]	; (8007af0 <HAL_DMA_IRQHandler+0xcc8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d022      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a2b      	ldr	r2, [pc, #172]	; (8007af4 <HAL_DMA_IRQHandler+0xccc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d01d      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a29      	ldr	r2, [pc, #164]	; (8007af8 <HAL_DMA_IRQHandler+0xcd0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d018      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a28      	ldr	r2, [pc, #160]	; (8007afc <HAL_DMA_IRQHandler+0xcd4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d013      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a26      	ldr	r2, [pc, #152]	; (8007b00 <HAL_DMA_IRQHandler+0xcd8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00e      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a25      	ldr	r2, [pc, #148]	; (8007b04 <HAL_DMA_IRQHandler+0xcdc>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d009      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a23      	ldr	r2, [pc, #140]	; (8007b08 <HAL_DMA_IRQHandler+0xce0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xc60>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a22      	ldr	r2, [pc, #136]	; (8007b0c <HAL_DMA_IRQHandler+0xce4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d108      	bne.n	8007a9a <HAL_DMA_IRQHandler+0xc72>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0214 	bic.w	r2, r2, #20
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	e007      	b.n	8007aaa <HAL_DMA_IRQHandler+0xc82>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 020a 	bic.w	r2, r2, #10
 8007aa8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80b8 	beq.w	8007c34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007acc:	e0b2      	b.n	8007c34 <HAL_DMA_IRQHandler+0xe0c>
 8007ace:	bf00      	nop
 8007ad0:	40020010 	.word	0x40020010
 8007ad4:	40020028 	.word	0x40020028
 8007ad8:	40020040 	.word	0x40020040
 8007adc:	40020058 	.word	0x40020058
 8007ae0:	40020070 	.word	0x40020070
 8007ae4:	40020088 	.word	0x40020088
 8007ae8:	400200a0 	.word	0x400200a0
 8007aec:	400200b8 	.word	0x400200b8
 8007af0:	40020410 	.word	0x40020410
 8007af4:	40020428 	.word	0x40020428
 8007af8:	40020440 	.word	0x40020440
 8007afc:	40020458 	.word	0x40020458
 8007b00:	40020470 	.word	0x40020470
 8007b04:	40020488 	.word	0x40020488
 8007b08:	400204a0 	.word	0x400204a0
 8007b0c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	2208      	movs	r2, #8
 8007b1a:	409a      	lsls	r2, r3
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 8088 	beq.w	8007c36 <HAL_DMA_IRQHandler+0xe0e>
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8082 	beq.w	8007c36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a41      	ldr	r2, [pc, #260]	; (8007c3c <HAL_DMA_IRQHandler+0xe14>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d04a      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a3f      	ldr	r2, [pc, #252]	; (8007c40 <HAL_DMA_IRQHandler+0xe18>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d045      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a3e      	ldr	r2, [pc, #248]	; (8007c44 <HAL_DMA_IRQHandler+0xe1c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d040      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a3c      	ldr	r2, [pc, #240]	; (8007c48 <HAL_DMA_IRQHandler+0xe20>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d03b      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a3b      	ldr	r2, [pc, #236]	; (8007c4c <HAL_DMA_IRQHandler+0xe24>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d036      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a39      	ldr	r2, [pc, #228]	; (8007c50 <HAL_DMA_IRQHandler+0xe28>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d031      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a38      	ldr	r2, [pc, #224]	; (8007c54 <HAL_DMA_IRQHandler+0xe2c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d02c      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a36      	ldr	r2, [pc, #216]	; (8007c58 <HAL_DMA_IRQHandler+0xe30>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d027      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a35      	ldr	r2, [pc, #212]	; (8007c5c <HAL_DMA_IRQHandler+0xe34>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d022      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a33      	ldr	r2, [pc, #204]	; (8007c60 <HAL_DMA_IRQHandler+0xe38>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01d      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a32      	ldr	r2, [pc, #200]	; (8007c64 <HAL_DMA_IRQHandler+0xe3c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d018      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a30      	ldr	r2, [pc, #192]	; (8007c68 <HAL_DMA_IRQHandler+0xe40>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d013      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2f      	ldr	r2, [pc, #188]	; (8007c6c <HAL_DMA_IRQHandler+0xe44>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a2d      	ldr	r2, [pc, #180]	; (8007c70 <HAL_DMA_IRQHandler+0xe48>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d009      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a2c      	ldr	r2, [pc, #176]	; (8007c74 <HAL_DMA_IRQHandler+0xe4c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d004      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xdaa>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a2a      	ldr	r2, [pc, #168]	; (8007c78 <HAL_DMA_IRQHandler+0xe50>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d108      	bne.n	8007be4 <HAL_DMA_IRQHandler+0xdbc>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 021c 	bic.w	r2, r2, #28
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e007      	b.n	8007bf4 <HAL_DMA_IRQHandler+0xdcc>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 020e 	bic.w	r2, r2, #14
 8007bf2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf8:	f003 031f 	and.w	r3, r3, #31
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	409a      	lsls	r2, r3
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d009      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
 8007c2a:	e004      	b.n	8007c36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c2c:	bf00      	nop
 8007c2e:	e002      	b.n	8007c36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c30:	bf00      	nop
 8007c32:	e000      	b.n	8007c36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c36:	3728      	adds	r7, #40	; 0x28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40020010 	.word	0x40020010
 8007c40:	40020028 	.word	0x40020028
 8007c44:	40020040 	.word	0x40020040
 8007c48:	40020058 	.word	0x40020058
 8007c4c:	40020070 	.word	0x40020070
 8007c50:	40020088 	.word	0x40020088
 8007c54:	400200a0 	.word	0x400200a0
 8007c58:	400200b8 	.word	0x400200b8
 8007c5c:	40020410 	.word	0x40020410
 8007c60:	40020428 	.word	0x40020428
 8007c64:	40020440 	.word	0x40020440
 8007c68:	40020458 	.word	0x40020458
 8007c6c:	40020470 	.word	0x40020470
 8007c70:	40020488 	.word	0x40020488
 8007c74:	400204a0 	.word	0x400204a0
 8007c78:	400204b8 	.word	0x400204b8

08007c7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c94:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a84      	ldr	r2, [pc, #528]	; (8007eac <DMA_SetConfig+0x230>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d072      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a82      	ldr	r2, [pc, #520]	; (8007eb0 <DMA_SetConfig+0x234>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d06d      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a81      	ldr	r2, [pc, #516]	; (8007eb4 <DMA_SetConfig+0x238>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d068      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a7f      	ldr	r2, [pc, #508]	; (8007eb8 <DMA_SetConfig+0x23c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d063      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a7e      	ldr	r2, [pc, #504]	; (8007ebc <DMA_SetConfig+0x240>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d05e      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a7c      	ldr	r2, [pc, #496]	; (8007ec0 <DMA_SetConfig+0x244>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d059      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a7b      	ldr	r2, [pc, #492]	; (8007ec4 <DMA_SetConfig+0x248>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d054      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a79      	ldr	r2, [pc, #484]	; (8007ec8 <DMA_SetConfig+0x24c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d04f      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a78      	ldr	r2, [pc, #480]	; (8007ecc <DMA_SetConfig+0x250>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d04a      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a76      	ldr	r2, [pc, #472]	; (8007ed0 <DMA_SetConfig+0x254>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d045      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a75      	ldr	r2, [pc, #468]	; (8007ed4 <DMA_SetConfig+0x258>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d040      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a73      	ldr	r2, [pc, #460]	; (8007ed8 <DMA_SetConfig+0x25c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d03b      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a72      	ldr	r2, [pc, #456]	; (8007edc <DMA_SetConfig+0x260>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d036      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a70      	ldr	r2, [pc, #448]	; (8007ee0 <DMA_SetConfig+0x264>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d031      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a6f      	ldr	r2, [pc, #444]	; (8007ee4 <DMA_SetConfig+0x268>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d02c      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a6d      	ldr	r2, [pc, #436]	; (8007ee8 <DMA_SetConfig+0x26c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d027      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a6c      	ldr	r2, [pc, #432]	; (8007eec <DMA_SetConfig+0x270>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d022      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a6a      	ldr	r2, [pc, #424]	; (8007ef0 <DMA_SetConfig+0x274>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d01d      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a69      	ldr	r2, [pc, #420]	; (8007ef4 <DMA_SetConfig+0x278>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d018      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a67      	ldr	r2, [pc, #412]	; (8007ef8 <DMA_SetConfig+0x27c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d013      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a66      	ldr	r2, [pc, #408]	; (8007efc <DMA_SetConfig+0x280>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00e      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a64      	ldr	r2, [pc, #400]	; (8007f00 <DMA_SetConfig+0x284>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d009      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a63      	ldr	r2, [pc, #396]	; (8007f04 <DMA_SetConfig+0x288>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d004      	beq.n	8007d86 <DMA_SetConfig+0x10a>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a61      	ldr	r2, [pc, #388]	; (8007f08 <DMA_SetConfig+0x28c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d101      	bne.n	8007d8a <DMA_SetConfig+0x10e>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <DMA_SetConfig+0x110>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00d      	beq.n	8007dac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007daa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a3e      	ldr	r2, [pc, #248]	; (8007eac <DMA_SetConfig+0x230>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d04a      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a3d      	ldr	r2, [pc, #244]	; (8007eb0 <DMA_SetConfig+0x234>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d045      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a3b      	ldr	r2, [pc, #236]	; (8007eb4 <DMA_SetConfig+0x238>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d040      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a3a      	ldr	r2, [pc, #232]	; (8007eb8 <DMA_SetConfig+0x23c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d03b      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a38      	ldr	r2, [pc, #224]	; (8007ebc <DMA_SetConfig+0x240>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d036      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a37      	ldr	r2, [pc, #220]	; (8007ec0 <DMA_SetConfig+0x244>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d031      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a35      	ldr	r2, [pc, #212]	; (8007ec4 <DMA_SetConfig+0x248>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d02c      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a34      	ldr	r2, [pc, #208]	; (8007ec8 <DMA_SetConfig+0x24c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d027      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a32      	ldr	r2, [pc, #200]	; (8007ecc <DMA_SetConfig+0x250>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d022      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a31      	ldr	r2, [pc, #196]	; (8007ed0 <DMA_SetConfig+0x254>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d01d      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2f      	ldr	r2, [pc, #188]	; (8007ed4 <DMA_SetConfig+0x258>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d018      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a2e      	ldr	r2, [pc, #184]	; (8007ed8 <DMA_SetConfig+0x25c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d013      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a2c      	ldr	r2, [pc, #176]	; (8007edc <DMA_SetConfig+0x260>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00e      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a2b      	ldr	r2, [pc, #172]	; (8007ee0 <DMA_SetConfig+0x264>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d009      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a29      	ldr	r2, [pc, #164]	; (8007ee4 <DMA_SetConfig+0x268>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d004      	beq.n	8007e4c <DMA_SetConfig+0x1d0>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a28      	ldr	r2, [pc, #160]	; (8007ee8 <DMA_SetConfig+0x26c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d101      	bne.n	8007e50 <DMA_SetConfig+0x1d4>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <DMA_SetConfig+0x1d6>
 8007e50:	2300      	movs	r3, #0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d05a      	beq.n	8007f0c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5a:	f003 031f 	and.w	r3, r3, #31
 8007e5e:	223f      	movs	r2, #63	; 0x3f
 8007e60:	409a      	lsls	r2, r3
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	2b40      	cmp	r3, #64	; 0x40
 8007e84:	d108      	bne.n	8007e98 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e96:	e087      	b.n	8007fa8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	60da      	str	r2, [r3, #12]
}
 8007ea8:	e07e      	b.n	8007fa8 <DMA_SetConfig+0x32c>
 8007eaa:	bf00      	nop
 8007eac:	40020010 	.word	0x40020010
 8007eb0:	40020028 	.word	0x40020028
 8007eb4:	40020040 	.word	0x40020040
 8007eb8:	40020058 	.word	0x40020058
 8007ebc:	40020070 	.word	0x40020070
 8007ec0:	40020088 	.word	0x40020088
 8007ec4:	400200a0 	.word	0x400200a0
 8007ec8:	400200b8 	.word	0x400200b8
 8007ecc:	40020410 	.word	0x40020410
 8007ed0:	40020428 	.word	0x40020428
 8007ed4:	40020440 	.word	0x40020440
 8007ed8:	40020458 	.word	0x40020458
 8007edc:	40020470 	.word	0x40020470
 8007ee0:	40020488 	.word	0x40020488
 8007ee4:	400204a0 	.word	0x400204a0
 8007ee8:	400204b8 	.word	0x400204b8
 8007eec:	58025408 	.word	0x58025408
 8007ef0:	5802541c 	.word	0x5802541c
 8007ef4:	58025430 	.word	0x58025430
 8007ef8:	58025444 	.word	0x58025444
 8007efc:	58025458 	.word	0x58025458
 8007f00:	5802546c 	.word	0x5802546c
 8007f04:	58025480 	.word	0x58025480
 8007f08:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a28      	ldr	r2, [pc, #160]	; (8007fb4 <DMA_SetConfig+0x338>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d022      	beq.n	8007f5c <DMA_SetConfig+0x2e0>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a27      	ldr	r2, [pc, #156]	; (8007fb8 <DMA_SetConfig+0x33c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d01d      	beq.n	8007f5c <DMA_SetConfig+0x2e0>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a25      	ldr	r2, [pc, #148]	; (8007fbc <DMA_SetConfig+0x340>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d018      	beq.n	8007f5c <DMA_SetConfig+0x2e0>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a24      	ldr	r2, [pc, #144]	; (8007fc0 <DMA_SetConfig+0x344>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d013      	beq.n	8007f5c <DMA_SetConfig+0x2e0>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a22      	ldr	r2, [pc, #136]	; (8007fc4 <DMA_SetConfig+0x348>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00e      	beq.n	8007f5c <DMA_SetConfig+0x2e0>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a21      	ldr	r2, [pc, #132]	; (8007fc8 <DMA_SetConfig+0x34c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d009      	beq.n	8007f5c <DMA_SetConfig+0x2e0>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a1f      	ldr	r2, [pc, #124]	; (8007fcc <DMA_SetConfig+0x350>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d004      	beq.n	8007f5c <DMA_SetConfig+0x2e0>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a1e      	ldr	r2, [pc, #120]	; (8007fd0 <DMA_SetConfig+0x354>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d101      	bne.n	8007f60 <DMA_SetConfig+0x2e4>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e000      	b.n	8007f62 <DMA_SetConfig+0x2e6>
 8007f60:	2300      	movs	r3, #0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d020      	beq.n	8007fa8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6a:	f003 031f 	and.w	r3, r3, #31
 8007f6e:	2201      	movs	r2, #1
 8007f70:	409a      	lsls	r2, r3
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b40      	cmp	r3, #64	; 0x40
 8007f84:	d108      	bne.n	8007f98 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	60da      	str	r2, [r3, #12]
}
 8007f96:	e007      	b.n	8007fa8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	60da      	str	r2, [r3, #12]
}
 8007fa8:	bf00      	nop
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	58025408 	.word	0x58025408
 8007fb8:	5802541c 	.word	0x5802541c
 8007fbc:	58025430 	.word	0x58025430
 8007fc0:	58025444 	.word	0x58025444
 8007fc4:	58025458 	.word	0x58025458
 8007fc8:	5802546c 	.word	0x5802546c
 8007fcc:	58025480 	.word	0x58025480
 8007fd0:	58025494 	.word	0x58025494

08007fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a42      	ldr	r2, [pc, #264]	; (80080ec <DMA_CalcBaseAndBitshift+0x118>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d04a      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a41      	ldr	r2, [pc, #260]	; (80080f0 <DMA_CalcBaseAndBitshift+0x11c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d045      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a3f      	ldr	r2, [pc, #252]	; (80080f4 <DMA_CalcBaseAndBitshift+0x120>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d040      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a3e      	ldr	r2, [pc, #248]	; (80080f8 <DMA_CalcBaseAndBitshift+0x124>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d03b      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a3c      	ldr	r2, [pc, #240]	; (80080fc <DMA_CalcBaseAndBitshift+0x128>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d036      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a3b      	ldr	r2, [pc, #236]	; (8008100 <DMA_CalcBaseAndBitshift+0x12c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d031      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a39      	ldr	r2, [pc, #228]	; (8008104 <DMA_CalcBaseAndBitshift+0x130>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d02c      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a38      	ldr	r2, [pc, #224]	; (8008108 <DMA_CalcBaseAndBitshift+0x134>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d027      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a36      	ldr	r2, [pc, #216]	; (800810c <DMA_CalcBaseAndBitshift+0x138>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d022      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a35      	ldr	r2, [pc, #212]	; (8008110 <DMA_CalcBaseAndBitshift+0x13c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d01d      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a33      	ldr	r2, [pc, #204]	; (8008114 <DMA_CalcBaseAndBitshift+0x140>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d018      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a32      	ldr	r2, [pc, #200]	; (8008118 <DMA_CalcBaseAndBitshift+0x144>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d013      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a30      	ldr	r2, [pc, #192]	; (800811c <DMA_CalcBaseAndBitshift+0x148>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00e      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a2f      	ldr	r2, [pc, #188]	; (8008120 <DMA_CalcBaseAndBitshift+0x14c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d009      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a2d      	ldr	r2, [pc, #180]	; (8008124 <DMA_CalcBaseAndBitshift+0x150>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d004      	beq.n	800807c <DMA_CalcBaseAndBitshift+0xa8>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a2c      	ldr	r2, [pc, #176]	; (8008128 <DMA_CalcBaseAndBitshift+0x154>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d101      	bne.n	8008080 <DMA_CalcBaseAndBitshift+0xac>
 800807c:	2301      	movs	r3, #1
 800807e:	e000      	b.n	8008082 <DMA_CalcBaseAndBitshift+0xae>
 8008080:	2300      	movs	r3, #0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d024      	beq.n	80080d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	3b10      	subs	r3, #16
 800808e:	4a27      	ldr	r2, [pc, #156]	; (800812c <DMA_CalcBaseAndBitshift+0x158>)
 8008090:	fba2 2303 	umull	r2, r3, r2, r3
 8008094:	091b      	lsrs	r3, r3, #4
 8008096:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	4a24      	ldr	r2, [pc, #144]	; (8008130 <DMA_CalcBaseAndBitshift+0x15c>)
 80080a0:	5cd3      	ldrb	r3, [r2, r3]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d908      	bls.n	80080c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	4b1f      	ldr	r3, [pc, #124]	; (8008134 <DMA_CalcBaseAndBitshift+0x160>)
 80080b6:	4013      	ands	r3, r2
 80080b8:	1d1a      	adds	r2, r3, #4
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	659a      	str	r2, [r3, #88]	; 0x58
 80080be:	e00d      	b.n	80080dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	4b1b      	ldr	r3, [pc, #108]	; (8008134 <DMA_CalcBaseAndBitshift+0x160>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6593      	str	r3, [r2, #88]	; 0x58
 80080ce:	e005      	b.n	80080dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	40020010 	.word	0x40020010
 80080f0:	40020028 	.word	0x40020028
 80080f4:	40020040 	.word	0x40020040
 80080f8:	40020058 	.word	0x40020058
 80080fc:	40020070 	.word	0x40020070
 8008100:	40020088 	.word	0x40020088
 8008104:	400200a0 	.word	0x400200a0
 8008108:	400200b8 	.word	0x400200b8
 800810c:	40020410 	.word	0x40020410
 8008110:	40020428 	.word	0x40020428
 8008114:	40020440 	.word	0x40020440
 8008118:	40020458 	.word	0x40020458
 800811c:	40020470 	.word	0x40020470
 8008120:	40020488 	.word	0x40020488
 8008124:	400204a0 	.word	0x400204a0
 8008128:	400204b8 	.word	0x400204b8
 800812c:	aaaaaaab 	.word	0xaaaaaaab
 8008130:	08011ec0 	.word	0x08011ec0
 8008134:	fffffc00 	.word	0xfffffc00

08008138 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d120      	bne.n	800818e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	2b03      	cmp	r3, #3
 8008152:	d858      	bhi.n	8008206 <DMA_CheckFifoParam+0xce>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <DMA_CheckFifoParam+0x24>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	0800816d 	.word	0x0800816d
 8008160:	0800817f 	.word	0x0800817f
 8008164:	0800816d 	.word	0x0800816d
 8008168:	08008207 	.word	0x08008207
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d048      	beq.n	800820a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800817c:	e045      	b.n	800820a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008186:	d142      	bne.n	800820e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800818c:	e03f      	b.n	800820e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008196:	d123      	bne.n	80081e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819c:	2b03      	cmp	r3, #3
 800819e:	d838      	bhi.n	8008212 <DMA_CheckFifoParam+0xda>
 80081a0:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <DMA_CheckFifoParam+0x70>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	080081b9 	.word	0x080081b9
 80081ac:	080081bf 	.word	0x080081bf
 80081b0:	080081b9 	.word	0x080081b9
 80081b4:	080081d1 	.word	0x080081d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	73fb      	strb	r3, [r7, #15]
        break;
 80081bc:	e030      	b.n	8008220 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d025      	beq.n	8008216 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081ce:	e022      	b.n	8008216 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081d8:	d11f      	bne.n	800821a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081de:	e01c      	b.n	800821a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d902      	bls.n	80081ee <DMA_CheckFifoParam+0xb6>
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d003      	beq.n	80081f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80081ec:	e018      	b.n	8008220 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	73fb      	strb	r3, [r7, #15]
        break;
 80081f2:	e015      	b.n	8008220 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00e      	beq.n	800821e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	73fb      	strb	r3, [r7, #15]
    break;
 8008204:	e00b      	b.n	800821e <DMA_CheckFifoParam+0xe6>
        break;
 8008206:	bf00      	nop
 8008208:	e00a      	b.n	8008220 <DMA_CheckFifoParam+0xe8>
        break;
 800820a:	bf00      	nop
 800820c:	e008      	b.n	8008220 <DMA_CheckFifoParam+0xe8>
        break;
 800820e:	bf00      	nop
 8008210:	e006      	b.n	8008220 <DMA_CheckFifoParam+0xe8>
        break;
 8008212:	bf00      	nop
 8008214:	e004      	b.n	8008220 <DMA_CheckFifoParam+0xe8>
        break;
 8008216:	bf00      	nop
 8008218:	e002      	b.n	8008220 <DMA_CheckFifoParam+0xe8>
        break;
 800821a:	bf00      	nop
 800821c:	e000      	b.n	8008220 <DMA_CheckFifoParam+0xe8>
    break;
 800821e:	bf00      	nop
    }
  }

  return status;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop

08008230 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a38      	ldr	r2, [pc, #224]	; (8008324 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d022      	beq.n	800828e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a36      	ldr	r2, [pc, #216]	; (8008328 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d01d      	beq.n	800828e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a35      	ldr	r2, [pc, #212]	; (800832c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d018      	beq.n	800828e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a33      	ldr	r2, [pc, #204]	; (8008330 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d013      	beq.n	800828e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a32      	ldr	r2, [pc, #200]	; (8008334 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00e      	beq.n	800828e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a30      	ldr	r2, [pc, #192]	; (8008338 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d009      	beq.n	800828e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a2f      	ldr	r2, [pc, #188]	; (800833c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d004      	beq.n	800828e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a2d      	ldr	r2, [pc, #180]	; (8008340 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d101      	bne.n	8008292 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008292:	2300      	movs	r3, #0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01a      	beq.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	3b08      	subs	r3, #8
 80082a0:	4a28      	ldr	r2, [pc, #160]	; (8008344 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80082a2:	fba2 2303 	umull	r2, r3, r2, r3
 80082a6:	091b      	lsrs	r3, r3, #4
 80082a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4b26      	ldr	r3, [pc, #152]	; (8008348 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80082ae:	4413      	add	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	461a      	mov	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a24      	ldr	r2, [pc, #144]	; (800834c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80082bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f003 031f 	and.w	r3, r3, #31
 80082c4:	2201      	movs	r2, #1
 80082c6:	409a      	lsls	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80082cc:	e024      	b.n	8008318 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	3b10      	subs	r3, #16
 80082d6:	4a1e      	ldr	r2, [pc, #120]	; (8008350 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80082d8:	fba2 2303 	umull	r2, r3, r2, r3
 80082dc:	091b      	lsrs	r3, r3, #4
 80082de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4a1c      	ldr	r2, [pc, #112]	; (8008354 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d806      	bhi.n	80082f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4a1b      	ldr	r2, [pc, #108]	; (8008358 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d902      	bls.n	80082f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3308      	adds	r3, #8
 80082f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4b18      	ldr	r3, [pc, #96]	; (800835c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	461a      	mov	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a16      	ldr	r2, [pc, #88]	; (8008360 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008308:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f003 031f 	and.w	r3, r3, #31
 8008310:	2201      	movs	r2, #1
 8008312:	409a      	lsls	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008318:	bf00      	nop
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	58025408 	.word	0x58025408
 8008328:	5802541c 	.word	0x5802541c
 800832c:	58025430 	.word	0x58025430
 8008330:	58025444 	.word	0x58025444
 8008334:	58025458 	.word	0x58025458
 8008338:	5802546c 	.word	0x5802546c
 800833c:	58025480 	.word	0x58025480
 8008340:	58025494 	.word	0x58025494
 8008344:	cccccccd 	.word	0xcccccccd
 8008348:	16009600 	.word	0x16009600
 800834c:	58025880 	.word	0x58025880
 8008350:	aaaaaaab 	.word	0xaaaaaaab
 8008354:	400204b8 	.word	0x400204b8
 8008358:	4002040f 	.word	0x4002040f
 800835c:	10008200 	.word	0x10008200
 8008360:	40020880 	.word	0x40020880

08008364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d04a      	beq.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b08      	cmp	r3, #8
 800837e:	d847      	bhi.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a25      	ldr	r2, [pc, #148]	; (800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d022      	beq.n	80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a24      	ldr	r2, [pc, #144]	; (8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d01d      	beq.n	80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a22      	ldr	r2, [pc, #136]	; (8008424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d018      	beq.n	80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a21      	ldr	r2, [pc, #132]	; (8008428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d013      	beq.n	80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1f      	ldr	r2, [pc, #124]	; (800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00e      	beq.n	80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1e      	ldr	r2, [pc, #120]	; (8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d009      	beq.n	80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1c      	ldr	r2, [pc, #112]	; (8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d004      	beq.n	80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1b      	ldr	r2, [pc, #108]	; (8008438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d101      	bne.n	80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e000      	b.n	80083d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80083d4:	2300      	movs	r3, #0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4b17      	ldr	r3, [pc, #92]	; (800843c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	461a      	mov	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a15      	ldr	r2, [pc, #84]	; (8008440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80083ec:	671a      	str	r2, [r3, #112]	; 0x70
 80083ee:	e009      	b.n	8008404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4b14      	ldr	r3, [pc, #80]	; (8008444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	461a      	mov	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a11      	ldr	r2, [pc, #68]	; (8008448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008402:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3b01      	subs	r3, #1
 8008408:	2201      	movs	r2, #1
 800840a:	409a      	lsls	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008410:	bf00      	nop
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	58025408 	.word	0x58025408
 8008420:	5802541c 	.word	0x5802541c
 8008424:	58025430 	.word	0x58025430
 8008428:	58025444 	.word	0x58025444
 800842c:	58025458 	.word	0x58025458
 8008430:	5802546c 	.word	0x5802546c
 8008434:	58025480 	.word	0x58025480
 8008438:	58025494 	.word	0x58025494
 800843c:	1600963f 	.word	0x1600963f
 8008440:	58025940 	.word	0x58025940
 8008444:	1000823f 	.word	0x1000823f
 8008448:	40020940 	.word	0x40020940

0800844c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e0c6      	b.n	80085ec <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fb f97c 	bl	8003764 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2223      	movs	r2, #35	; 0x23
 8008470:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008472:	4b60      	ldr	r3, [pc, #384]	; (80085f4 <HAL_ETH_Init+0x1a8>)
 8008474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008478:	4a5e      	ldr	r2, [pc, #376]	; (80085f4 <HAL_ETH_Init+0x1a8>)
 800847a:	f043 0302 	orr.w	r3, r3, #2
 800847e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008482:	4b5c      	ldr	r3, [pc, #368]	; (80085f4 <HAL_ETH_Init+0x1a8>)
 8008484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008488:	f003 0302 	and.w	r3, r3, #2
 800848c:	60bb      	str	r3, [r7, #8]
 800848e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	7a1b      	ldrb	r3, [r3, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8008498:	2000      	movs	r0, #0
 800849a:	f7fc f8dd 	bl	8004658 <HAL_SYSCFG_ETHInterfaceSelect>
 800849e:	e003      	b.n	80084a8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80084a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80084a4:	f7fc f8d8 	bl	8004658 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0201 	orr.w	r2, r2, #1
 80084ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084c0:	f7fc f88e 	bl	80045e0 <HAL_GetTick>
 80084c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80084c6:	e00f      	b.n	80084e8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80084c8:	f7fc f88a 	bl	80045e0 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80084d6:	d907      	bls.n	80084e8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2204      	movs	r2, #4
 80084dc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	22e0      	movs	r2, #224	; 0xe0
 80084e2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e081      	b.n	80085ec <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e6      	bne.n	80084c8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fac0 	bl	8008a80 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8008500:	f001 fe8c 	bl	800a21c <HAL_RCC_GetHCLKFreq>
 8008504:	4603      	mov	r3, r0
 8008506:	4a3c      	ldr	r2, [pc, #240]	; (80085f8 <HAL_ETH_Init+0x1ac>)
 8008508:	fba2 2303 	umull	r2, r3, r2, r3
 800850c:	0c9a      	lsrs	r2, r3, #18
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3a01      	subs	r2, #1
 8008514:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fa13 	bl	8008944 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008534:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008538:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	22e0      	movs	r2, #224	; 0xe0
 8008550:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e04a      	b.n	80085ec <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	f241 1308 	movw	r3, #4360	; 0x1108
 800855e:	4413      	add	r3, r2
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4b26      	ldr	r3, [pc, #152]	; (80085fc <HAL_ETH_Init+0x1b0>)
 8008564:	4013      	ands	r3, r2
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6952      	ldr	r2, [r2, #20]
 800856a:	0052      	lsls	r2, r2, #1
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	6809      	ldr	r1, [r1, #0]
 8008570:	431a      	orrs	r2, r3
 8008572:	f241 1308 	movw	r3, #4360	; 0x1108
 8008576:	440b      	add	r3, r1
 8008578:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fad8 	bl	8008b30 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fb1c 	bl	8008bbe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	3305      	adds	r3, #5
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	021a      	lsls	r2, r3, #8
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	3304      	adds	r3, #4
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	4619      	mov	r1, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	3303      	adds	r3, #3
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	061a      	lsls	r2, r3, #24
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	3302      	adds	r3, #2
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	3301      	adds	r3, #1
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80085c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80085d2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80085d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2210      	movs	r2, #16
 80085e2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2210      	movs	r2, #16
 80085e8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	58024400 	.word	0x58024400
 80085f8:	431bde83 	.word	0x431bde83
 80085fc:	ffff8001 	.word	0xffff8001

08008600 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8008612:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	791b      	ldrb	r3, [r3, #4]
 8008618:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800861a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	7b1b      	ldrb	r3, [r3, #12]
 8008620:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008622:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	7b5b      	ldrb	r3, [r3, #13]
 8008628:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800862a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	7b9b      	ldrb	r3, [r3, #14]
 8008630:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008632:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	7bdb      	ldrb	r3, [r3, #15]
 8008638:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800863a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	7c12      	ldrb	r2, [r2, #16]
 8008640:	2a00      	cmp	r2, #0
 8008642:	d102      	bne.n	800864a <ETH_SetMACConfig+0x4a>
 8008644:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008648:	e000      	b.n	800864c <ETH_SetMACConfig+0x4c>
 800864a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800864c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	7c52      	ldrb	r2, [r2, #17]
 8008652:	2a00      	cmp	r2, #0
 8008654:	d102      	bne.n	800865c <ETH_SetMACConfig+0x5c>
 8008656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800865a:	e000      	b.n	800865e <ETH_SetMACConfig+0x5e>
 800865c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800865e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	7c9b      	ldrb	r3, [r3, #18]
 8008664:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008666:	431a      	orrs	r2, r3
                                macconf->Speed |
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800866c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8008672:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	7f1b      	ldrb	r3, [r3, #28]
 8008678:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800867a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	7f5b      	ldrb	r3, [r3, #29]
 8008680:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008682:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	7f92      	ldrb	r2, [r2, #30]
 8008688:	2a00      	cmp	r2, #0
 800868a:	d102      	bne.n	8008692 <ETH_SetMACConfig+0x92>
 800868c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008690:	e000      	b.n	8008694 <ETH_SetMACConfig+0x94>
 8008692:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008694:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	7fdb      	ldrb	r3, [r3, #31]
 800869a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800869c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80086a4:	2a00      	cmp	r2, #0
 80086a6:	d102      	bne.n	80086ae <ETH_SetMACConfig+0xae>
 80086a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086ac:	e000      	b.n	80086b0 <ETH_SetMACConfig+0xb0>
 80086ae:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80086b0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80086b6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086be:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80086c0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	4b56      	ldr	r3, [pc, #344]	; (800882c <ETH_SetMACConfig+0x22c>)
 80086d2:	4013      	ands	r3, r2
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6812      	ldr	r2, [r2, #0]
 80086d8:	68f9      	ldr	r1, [r7, #12]
 80086da:	430b      	orrs	r3, r1
 80086dc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80086ea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80086ec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086f4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80086f6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80086fe:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8008700:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008708:	2a00      	cmp	r2, #0
 800870a:	d102      	bne.n	8008712 <ETH_SetMACConfig+0x112>
 800870c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008710:	e000      	b.n	8008714 <ETH_SetMACConfig+0x114>
 8008712:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008714:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	4b42      	ldr	r3, [pc, #264]	; (8008830 <ETH_SetMACConfig+0x230>)
 8008726:	4013      	ands	r3, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6812      	ldr	r2, [r2, #0]
 800872c:	68f9      	ldr	r1, [r7, #12]
 800872e:	430b      	orrs	r3, r1
 8008730:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008738:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	4b3a      	ldr	r3, [pc, #232]	; (8008834 <ETH_SetMACConfig+0x234>)
 800874a:	4013      	ands	r3, r2
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	68f9      	ldr	r1, [r7, #12]
 8008752:	430b      	orrs	r3, r1
 8008754:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800875c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008762:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800876a:	2a00      	cmp	r2, #0
 800876c:	d101      	bne.n	8008772 <ETH_SetMACConfig+0x172>
 800876e:	2280      	movs	r2, #128	; 0x80
 8008770:	e000      	b.n	8008774 <ETH_SetMACConfig+0x174>
 8008772:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8008774:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800877a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800877c:	4313      	orrs	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008786:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800878a:	4013      	ands	r3, r2
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6812      	ldr	r2, [r2, #0]
 8008790:	68f9      	ldr	r1, [r7, #12]
 8008792:	430b      	orrs	r3, r1
 8008794:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800879c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80087a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b2:	f023 0103 	bic.w	r1, r3, #3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	430a      	orrs	r2, r1
 80087be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80087ca:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	d101      	bne.n	80087ee <ETH_SetMACConfig+0x1ee>
 80087ea:	2240      	movs	r2, #64	; 0x40
 80087ec:	e000      	b.n	80087f0 <ETH_SetMACConfig+0x1f0>
 80087ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80087f0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80087f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80087fa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008802:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008810:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	430a      	orrs	r2, r1
 800881c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008820:	bf00      	nop
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	00048083 	.word	0x00048083
 8008830:	c0f88000 	.word	0xc0f88000
 8008834:	fffffef0 	.word	0xfffffef0

08008838 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	4b38      	ldr	r3, [pc, #224]	; (8008930 <ETH_SetDMAConfig+0xf8>)
 800884e:	4013      	ands	r3, r2
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	6809      	ldr	r1, [r1, #0]
 8008858:	431a      	orrs	r2, r3
 800885a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800885e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	791b      	ldrb	r3, [r3, #4]
 8008864:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800886a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	7b1b      	ldrb	r3, [r3, #12]
 8008870:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	f241 0304 	movw	r3, #4100	; 0x1004
 800887e:	4413      	add	r3, r2
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	4b2c      	ldr	r3, [pc, #176]	; (8008934 <ETH_SetDMAConfig+0xfc>)
 8008884:	4013      	ands	r3, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6811      	ldr	r1, [r2, #0]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	431a      	orrs	r2, r3
 800888e:	f241 0304 	movw	r3, #4100	; 0x1004
 8008892:	440b      	add	r3, r1
 8008894:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	7b5b      	ldrb	r3, [r3, #13]
 800889a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80088a0:	4313      	orrs	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	4b22      	ldr	r3, [pc, #136]	; (8008938 <ETH_SetDMAConfig+0x100>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6811      	ldr	r1, [r2, #0]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	431a      	orrs	r2, r3
 80088ba:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80088be:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	7d1b      	ldrb	r3, [r3, #20]
 80088c8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80088ca:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	7f5b      	ldrb	r3, [r3, #29]
 80088d0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	f241 1304 	movw	r3, #4356	; 0x1104
 80088de:	4413      	add	r3, r2
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b16      	ldr	r3, [pc, #88]	; (800893c <ETH_SetDMAConfig+0x104>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6811      	ldr	r1, [r2, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	431a      	orrs	r2, r3
 80088ee:	f241 1304 	movw	r3, #4356	; 0x1104
 80088f2:	440b      	add	r3, r1
 80088f4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	7f1b      	ldrb	r3, [r3, #28]
 80088fa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008900:	4313      	orrs	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	f241 1308 	movw	r3, #4360	; 0x1108
 800890c:	4413      	add	r3, r2
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <ETH_SetDMAConfig+0x108>)
 8008912:	4013      	ands	r3, r2
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	6811      	ldr	r1, [r2, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	431a      	orrs	r2, r3
 800891c:	f241 1308 	movw	r3, #4360	; 0x1108
 8008920:	440b      	add	r3, r1
 8008922:	601a      	str	r2, [r3, #0]
}
 8008924:	bf00      	nop
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	ffff87fd 	.word	0xffff87fd
 8008934:	ffff2ffe 	.word	0xffff2ffe
 8008938:	fffec000 	.word	0xfffec000
 800893c:	ffc0efef 	.word	0xffc0efef
 8008940:	7fc0ffff 	.word	0x7fc0ffff

08008944 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b0a4      	sub	sp, #144	; 0x90
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800894c:	2301      	movs	r3, #1
 800894e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008952:	2300      	movs	r3, #0
 8008954:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8008956:	2300      	movs	r3, #0
 8008958:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800895c:	2300      	movs	r3, #0
 800895e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800896e:	2301      	movs	r3, #1
 8008970:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008974:	2300      	movs	r3, #0
 8008976:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008984:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8008986:	2300      	movs	r3, #0
 8008988:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800898c:	2300      	movs	r3, #0
 800898e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008990:	2300      	movs	r3, #0
 8008992:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008996:	2300      	movs	r3, #0
 8008998:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800899c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80089a0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80089a2:	2300      	movs	r3, #0
 80089a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80089a8:	2300      	movs	r3, #0
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80089be:	2300      	movs	r3, #0
 80089c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80089c6:	2300      	movs	r3, #0
 80089c8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80089ca:	2300      	movs	r3, #0
 80089cc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80089d6:	2301      	movs	r3, #1
 80089d8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80089dc:	2320      	movs	r3, #32
 80089de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80089e8:	2300      	movs	r3, #0
 80089ea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80089ee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80089f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80089f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089f8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008a00:	2302      	movs	r3, #2
 8008a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008a06:	2300      	movs	r3, #0
 8008a08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008a22:	2301      	movs	r3, #1
 8008a24:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fde6 	bl	8008600 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008a34:	2301      	movs	r3, #1
 8008a36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008a46:	2300      	movs	r3, #0
 8008a48:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008a4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008a58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8008a64:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008a68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008a6a:	f107 0308 	add.w	r3, r7, #8
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff fee1 	bl	8008838 <ETH_SetDMAConfig>
}
 8008a76:	bf00      	nop
 8008a78:	3790      	adds	r7, #144	; 0x90
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a90:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a98:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008a9a:	f001 fbbf 	bl	800a21c <HAL_RCC_GetHCLKFreq>
 8008a9e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	4a1e      	ldr	r2, [pc, #120]	; (8008b1c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d908      	bls.n	8008aba <ETH_MAC_MDIO_ClkConfig+0x3a>
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	4a1d      	ldr	r2, [pc, #116]	; (8008b20 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d804      	bhi.n	8008aba <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	e027      	b.n	8008b0a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	4a18      	ldr	r2, [pc, #96]	; (8008b20 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d908      	bls.n	8008ad4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	4a17      	ldr	r2, [pc, #92]	; (8008b24 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d204      	bcs.n	8008ad4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	e01a      	b.n	8008b0a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4a13      	ldr	r2, [pc, #76]	; (8008b24 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d303      	bcc.n	8008ae4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4a12      	ldr	r2, [pc, #72]	; (8008b28 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d911      	bls.n	8008b08 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4a10      	ldr	r2, [pc, #64]	; (8008b28 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d908      	bls.n	8008afe <ETH_MAC_MDIO_ClkConfig+0x7e>
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4a0f      	ldr	r2, [pc, #60]	; (8008b2c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d804      	bhi.n	8008afe <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	e005      	b.n	8008b0a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	e000      	b.n	8008b0a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008b08:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008b14:	bf00      	nop
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	01312cff 	.word	0x01312cff
 8008b20:	02160ebf 	.word	0x02160ebf
 8008b24:	03938700 	.word	0x03938700
 8008b28:	05f5e0ff 	.word	0x05f5e0ff
 8008b2c:	08f0d17f 	.word	0x08f0d17f

08008b30 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	e01d      	b.n	8008b7a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68d9      	ldr	r1, [r3, #12]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4613      	mov	r3, r2
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	4413      	add	r3, r2
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	440b      	add	r3, r1
 8008b4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2200      	movs	r2, #0
 8008b66:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	3206      	adds	r2, #6
 8008b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d9de      	bls.n	8008b3e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f241 132c 	movw	r3, #4396	; 0x112c
 8008b8e:	4413      	add	r3, r2
 8008b90:	2203      	movs	r2, #3
 8008b92:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68d9      	ldr	r1, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	f241 1314 	movw	r3, #4372	; 0x1114
 8008ba0:	4413      	add	r3, r2
 8008ba2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8008bb0:	601a      	str	r2, [r3, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e024      	b.n	8008c16 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6919      	ldr	r1, [r3, #16]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	4413      	add	r3, r2
 8008bd8:	00db      	lsls	r3, r3, #3
 8008bda:	440b      	add	r3, r1
 8008bdc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2200      	movs	r2, #0
 8008be8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2200      	movs	r2, #0
 8008bee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3310      	adds	r3, #16
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	440b      	add	r3, r1
 8008c0e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3301      	adds	r3, #1
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d9d7      	bls.n	8008bcc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	f241 1330 	movw	r3, #4400	; 0x1130
 8008c42:	4413      	add	r3, r2
 8008c44:	2203      	movs	r2, #3
 8008c46:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6919      	ldr	r1, [r3, #16]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	f241 131c 	movw	r3, #4380	; 0x111c
 8008c54:	4413      	add	r3, r2
 8008c56:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	f241 1328 	movw	r3, #4392	; 0x1128
 8008c68:	4413      	add	r3, r2
 8008c6a:	6019      	str	r1, [r3, #0]
}
 8008c6c:	bf00      	nop
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b089      	sub	sp, #36	; 0x24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c86:	4b89      	ldr	r3, [pc, #548]	; (8008eac <HAL_GPIO_Init+0x234>)
 8008c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c8a:	e194      	b.n	8008fb6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	2101      	movs	r1, #1
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	fa01 f303 	lsl.w	r3, r1, r3
 8008c98:	4013      	ands	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 8186 	beq.w	8008fb0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f003 0303 	and.w	r3, r3, #3
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d005      	beq.n	8008cbc <HAL_GPIO_Init+0x44>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d130      	bne.n	8008d1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfa:	43db      	mvns	r3, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	091b      	lsrs	r3, r3, #4
 8008d08:	f003 0201 	and.w	r2, r3, #1
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d017      	beq.n	8008d5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	2203      	movs	r2, #3
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d123      	bne.n	8008dae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	08da      	lsrs	r2, r3, #3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3208      	adds	r2, #8
 8008d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	220f      	movs	r2, #15
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	43db      	mvns	r3, r3
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	4013      	ands	r3, r2
 8008d88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	08da      	lsrs	r2, r3, #3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3208      	adds	r2, #8
 8008da8:	69b9      	ldr	r1, [r7, #24]
 8008daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	2203      	movs	r2, #3
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	43db      	mvns	r3, r3
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f003 0203 	and.w	r2, r3, #3
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	005b      	lsls	r3, r3, #1
 8008dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80e0 	beq.w	8008fb0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008df0:	4b2f      	ldr	r3, [pc, #188]	; (8008eb0 <HAL_GPIO_Init+0x238>)
 8008df2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008df6:	4a2e      	ldr	r2, [pc, #184]	; (8008eb0 <HAL_GPIO_Init+0x238>)
 8008df8:	f043 0302 	orr.w	r3, r3, #2
 8008dfc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008e00:	4b2b      	ldr	r3, [pc, #172]	; (8008eb0 <HAL_GPIO_Init+0x238>)
 8008e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e06:	f003 0302 	and.w	r3, r3, #2
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e0e:	4a29      	ldr	r2, [pc, #164]	; (8008eb4 <HAL_GPIO_Init+0x23c>)
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	089b      	lsrs	r3, r3, #2
 8008e14:	3302      	adds	r3, #2
 8008e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	220f      	movs	r2, #15
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	43db      	mvns	r3, r3
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a20      	ldr	r2, [pc, #128]	; (8008eb8 <HAL_GPIO_Init+0x240>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d052      	beq.n	8008ee0 <HAL_GPIO_Init+0x268>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a1f      	ldr	r2, [pc, #124]	; (8008ebc <HAL_GPIO_Init+0x244>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d031      	beq.n	8008ea6 <HAL_GPIO_Init+0x22e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <HAL_GPIO_Init+0x248>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d02b      	beq.n	8008ea2 <HAL_GPIO_Init+0x22a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a1d      	ldr	r2, [pc, #116]	; (8008ec4 <HAL_GPIO_Init+0x24c>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d025      	beq.n	8008e9e <HAL_GPIO_Init+0x226>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a1c      	ldr	r2, [pc, #112]	; (8008ec8 <HAL_GPIO_Init+0x250>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d01f      	beq.n	8008e9a <HAL_GPIO_Init+0x222>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ecc <HAL_GPIO_Init+0x254>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d019      	beq.n	8008e96 <HAL_GPIO_Init+0x21e>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a1a      	ldr	r2, [pc, #104]	; (8008ed0 <HAL_GPIO_Init+0x258>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d013      	beq.n	8008e92 <HAL_GPIO_Init+0x21a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a19      	ldr	r2, [pc, #100]	; (8008ed4 <HAL_GPIO_Init+0x25c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00d      	beq.n	8008e8e <HAL_GPIO_Init+0x216>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a18      	ldr	r2, [pc, #96]	; (8008ed8 <HAL_GPIO_Init+0x260>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d007      	beq.n	8008e8a <HAL_GPIO_Init+0x212>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a17      	ldr	r2, [pc, #92]	; (8008edc <HAL_GPIO_Init+0x264>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d101      	bne.n	8008e86 <HAL_GPIO_Init+0x20e>
 8008e82:	2309      	movs	r3, #9
 8008e84:	e02d      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008e86:	230a      	movs	r3, #10
 8008e88:	e02b      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008e8a:	2308      	movs	r3, #8
 8008e8c:	e029      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008e8e:	2307      	movs	r3, #7
 8008e90:	e027      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008e92:	2306      	movs	r3, #6
 8008e94:	e025      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008e96:	2305      	movs	r3, #5
 8008e98:	e023      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	e021      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e01f      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e01d      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e01b      	b.n	8008ee2 <HAL_GPIO_Init+0x26a>
 8008eaa:	bf00      	nop
 8008eac:	58000080 	.word	0x58000080
 8008eb0:	58024400 	.word	0x58024400
 8008eb4:	58000400 	.word	0x58000400
 8008eb8:	58020000 	.word	0x58020000
 8008ebc:	58020400 	.word	0x58020400
 8008ec0:	58020800 	.word	0x58020800
 8008ec4:	58020c00 	.word	0x58020c00
 8008ec8:	58021000 	.word	0x58021000
 8008ecc:	58021400 	.word	0x58021400
 8008ed0:	58021800 	.word	0x58021800
 8008ed4:	58021c00 	.word	0x58021c00
 8008ed8:	58022000 	.word	0x58022000
 8008edc:	58022400 	.word	0x58022400
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	69fa      	ldr	r2, [r7, #28]
 8008ee4:	f002 0203 	and.w	r2, r2, #3
 8008ee8:	0092      	lsls	r2, r2, #2
 8008eea:	4093      	lsls	r3, r2
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ef2:	4938      	ldr	r1, [pc, #224]	; (8008fd4 <HAL_GPIO_Init+0x35c>)
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	089b      	lsrs	r3, r3, #2
 8008ef8:	3302      	adds	r3, #2
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	43db      	mvns	r3, r3
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	43db      	mvns	r3, r3
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	43db      	mvns	r3, r3
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	43db      	mvns	r3, r3
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	4013      	ands	r3, r2
 8008f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f47f ae63 	bne.w	8008c8c <HAL_GPIO_Init+0x14>
  }
}
 8008fc6:	bf00      	nop
 8008fc8:	bf00      	nop
 8008fca:	3724      	adds	r7, #36	; 0x24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	58000400 	.word	0x58000400

08008fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	807b      	strh	r3, [r7, #2]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fe8:	787b      	ldrb	r3, [r7, #1]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fee:	887a      	ldrh	r2, [r7, #2]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ff4:	e003      	b.n	8008ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ff6:	887b      	ldrh	r3, [r7, #2]
 8008ff8:	041a      	lsls	r2, r3, #16
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	619a      	str	r2, [r3, #24]
}
 8008ffe:	bf00      	nop
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	4603      	mov	r3, r0
 8009012:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009018:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	4013      	ands	r3, r2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009028:	88fb      	ldrh	r3, [r7, #6]
 800902a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800902e:	88fb      	ldrh	r3, [r7, #6]
 8009030:	4618      	mov	r0, r3
 8009032:	f7fa fa99 	bl	8003568 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800903e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009040:	b08f      	sub	sp, #60	; 0x3c
 8009042:	af0a      	add	r7, sp, #40	; 0x28
 8009044:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e116      	b.n	800927e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d106      	bne.n	8009070 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7fb f862 	bl	8004134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2203      	movs	r2, #3
 8009074:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4618      	mov	r0, r3
 8009090:	f007 f8aa 	bl	80101e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	603b      	str	r3, [r7, #0]
 800909a:	687e      	ldr	r6, [r7, #4]
 800909c:	466d      	mov	r5, sp
 800909e:	f106 0410 	add.w	r4, r6, #16
 80090a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80090ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80090b2:	1d33      	adds	r3, r6, #4
 80090b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090b6:	6838      	ldr	r0, [r7, #0]
 80090b8:	f007 f828 	bl	801010c <USB_CoreInit>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e0d7      	b.n	800927e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f007 f898 	bl	801020a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]
 80090de:	e04a      	b.n	8009176 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80090e0:	7bfa      	ldrb	r2, [r7, #15]
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	4613      	mov	r3, r2
 80090e6:	00db      	lsls	r3, r3, #3
 80090e8:	1a9b      	subs	r3, r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	440b      	add	r3, r1
 80090ee:	333d      	adds	r3, #61	; 0x3d
 80090f0:	2201      	movs	r2, #1
 80090f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80090f4:	7bfa      	ldrb	r2, [r7, #15]
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4613      	mov	r3, r2
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	1a9b      	subs	r3, r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	333c      	adds	r3, #60	; 0x3c
 8009104:	7bfa      	ldrb	r2, [r7, #15]
 8009106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009108:	7bfa      	ldrb	r2, [r7, #15]
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	b298      	uxth	r0, r3
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	4613      	mov	r3, r2
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	1a9b      	subs	r3, r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	3342      	adds	r3, #66	; 0x42
 800911c:	4602      	mov	r2, r0
 800911e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009120:	7bfa      	ldrb	r2, [r7, #15]
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	4613      	mov	r3, r2
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	333f      	adds	r3, #63	; 0x3f
 8009130:	2200      	movs	r2, #0
 8009132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009134:	7bfa      	ldrb	r2, [r7, #15]
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	4613      	mov	r3, r2
 800913a:	00db      	lsls	r3, r3, #3
 800913c:	1a9b      	subs	r3, r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	440b      	add	r3, r1
 8009142:	3344      	adds	r3, #68	; 0x44
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009148:	7bfa      	ldrb	r2, [r7, #15]
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	4613      	mov	r3, r2
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	440b      	add	r3, r1
 8009156:	3348      	adds	r3, #72	; 0x48
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800915c:	7bfa      	ldrb	r2, [r7, #15]
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	3350      	adds	r3, #80	; 0x50
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	3301      	adds	r3, #1
 8009174:	73fb      	strb	r3, [r7, #15]
 8009176:	7bfa      	ldrb	r2, [r7, #15]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	429a      	cmp	r2, r3
 800917e:	d3af      	bcc.n	80090e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
 8009184:	e044      	b.n	8009210 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009186:	7bfa      	ldrb	r2, [r7, #15]
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	4613      	mov	r3, r2
 800918c:	00db      	lsls	r3, r3, #3
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	440b      	add	r3, r1
 8009194:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009198:	2200      	movs	r2, #0
 800919a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800919c:	7bfa      	ldrb	r2, [r7, #15]
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	4613      	mov	r3, r2
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	440b      	add	r3, r1
 80091aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80091ae:	7bfa      	ldrb	r2, [r7, #15]
 80091b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80091b2:	7bfa      	ldrb	r2, [r7, #15]
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	4613      	mov	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	1a9b      	subs	r3, r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	440b      	add	r3, r1
 80091c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80091c4:	2200      	movs	r2, #0
 80091c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80091c8:	7bfa      	ldrb	r2, [r7, #15]
 80091ca:	6879      	ldr	r1, [r7, #4]
 80091cc:	4613      	mov	r3, r2
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	1a9b      	subs	r3, r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	440b      	add	r3, r1
 80091d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80091de:	7bfa      	ldrb	r2, [r7, #15]
 80091e0:	6879      	ldr	r1, [r7, #4]
 80091e2:	4613      	mov	r3, r2
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	440b      	add	r3, r1
 80091ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80091f4:	7bfa      	ldrb	r2, [r7, #15]
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	4613      	mov	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	1a9b      	subs	r3, r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009206:	2200      	movs	r2, #0
 8009208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	3301      	adds	r3, #1
 800920e:	73fb      	strb	r3, [r7, #15]
 8009210:	7bfa      	ldrb	r2, [r7, #15]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	429a      	cmp	r2, r3
 8009218:	d3b5      	bcc.n	8009186 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	687e      	ldr	r6, [r7, #4]
 8009222:	466d      	mov	r5, sp
 8009224:	f106 0410 	add.w	r4, r6, #16
 8009228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800922a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800922c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800922e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009230:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009234:	e885 0003 	stmia.w	r5, {r0, r1}
 8009238:	1d33      	adds	r3, r6, #4
 800923a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800923c:	6838      	ldr	r0, [r7, #0]
 800923e:	f007 f831 	bl	80102a4 <USB_DevInit>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e014      	b.n	800927e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	2b01      	cmp	r3, #1
 800926a:	d102      	bne.n	8009272 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f80b 	bl	8009288 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f007 f9eb 	bl	8010652 <USB_DevDisconnect>

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009288 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092b6:	4b05      	ldr	r3, [pc, #20]	; (80092cc <HAL_PCDEx_ActivateLPM+0x44>)
 80092b8:	4313      	orrs	r3, r2
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	10000003 	.word	0x10000003

080092d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80092d8:	4b19      	ldr	r3, [pc, #100]	; (8009340 <HAL_PWREx_ConfigSupply+0x70>)
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	d00a      	beq.n	80092fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80092e4:	4b16      	ldr	r3, [pc, #88]	; (8009340 <HAL_PWREx_ConfigSupply+0x70>)
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d001      	beq.n	80092f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e01f      	b.n	8009336 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e01d      	b.n	8009336 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80092fa:	4b11      	ldr	r3, [pc, #68]	; (8009340 <HAL_PWREx_ConfigSupply+0x70>)
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f023 0207 	bic.w	r2, r3, #7
 8009302:	490f      	ldr	r1, [pc, #60]	; (8009340 <HAL_PWREx_ConfigSupply+0x70>)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4313      	orrs	r3, r2
 8009308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800930a:	f7fb f969 	bl	80045e0 <HAL_GetTick>
 800930e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009310:	e009      	b.n	8009326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009312:	f7fb f965 	bl	80045e0 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009320:	d901      	bls.n	8009326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e007      	b.n	8009336 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009326:	4b06      	ldr	r3, [pc, #24]	; (8009340 <HAL_PWREx_ConfigSupply+0x70>)
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800932e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009332:	d1ee      	bne.n	8009312 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	58024800 	.word	0x58024800

08009344 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009344:	b480      	push	{r7}
 8009346:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009348:	4b05      	ldr	r3, [pc, #20]	; (8009360 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4a04      	ldr	r2, [pc, #16]	; (8009360 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800934e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009352:	60d3      	str	r3, [r2, #12]
}
 8009354:	bf00      	nop
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	58024800 	.word	0x58024800

08009364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08c      	sub	sp, #48	; 0x30
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d102      	bne.n	8009378 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	f000 bc1c 	b.w	8009bb0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 8087 	beq.w	8009494 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009386:	4b9e      	ldr	r3, [pc, #632]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800938e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009390:	4b9b      	ldr	r3, [pc, #620]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009394:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009398:	2b10      	cmp	r3, #16
 800939a:	d007      	beq.n	80093ac <HAL_RCC_OscConfig+0x48>
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	2b18      	cmp	r3, #24
 80093a0:	d110      	bne.n	80093c4 <HAL_RCC_OscConfig+0x60>
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d10b      	bne.n	80093c4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093ac:	4b94      	ldr	r3, [pc, #592]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d06c      	beq.n	8009492 <HAL_RCC_OscConfig+0x12e>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d168      	bne.n	8009492 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e3f5      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093cc:	d106      	bne.n	80093dc <HAL_RCC_OscConfig+0x78>
 80093ce:	4b8c      	ldr	r3, [pc, #560]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a8b      	ldr	r2, [pc, #556]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80093d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	e02e      	b.n	800943a <HAL_RCC_OscConfig+0xd6>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10c      	bne.n	80093fe <HAL_RCC_OscConfig+0x9a>
 80093e4:	4b86      	ldr	r3, [pc, #536]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a85      	ldr	r2, [pc, #532]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80093ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	4b83      	ldr	r3, [pc, #524]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a82      	ldr	r2, [pc, #520]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80093f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093fa:	6013      	str	r3, [r2, #0]
 80093fc:	e01d      	b.n	800943a <HAL_RCC_OscConfig+0xd6>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009406:	d10c      	bne.n	8009422 <HAL_RCC_OscConfig+0xbe>
 8009408:	4b7d      	ldr	r3, [pc, #500]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a7c      	ldr	r2, [pc, #496]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 800940e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	4b7a      	ldr	r3, [pc, #488]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a79      	ldr	r2, [pc, #484]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 800941a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	e00b      	b.n	800943a <HAL_RCC_OscConfig+0xd6>
 8009422:	4b77      	ldr	r3, [pc, #476]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a76      	ldr	r2, [pc, #472]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	4b74      	ldr	r3, [pc, #464]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a73      	ldr	r2, [pc, #460]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009438:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d013      	beq.n	800946a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009442:	f7fb f8cd 	bl	80045e0 <HAL_GetTick>
 8009446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009448:	e008      	b.n	800945c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800944a:	f7fb f8c9 	bl	80045e0 <HAL_GetTick>
 800944e:	4602      	mov	r2, r0
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	2b64      	cmp	r3, #100	; 0x64
 8009456:	d901      	bls.n	800945c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e3a9      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800945c:	4b68      	ldr	r3, [pc, #416]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d0f0      	beq.n	800944a <HAL_RCC_OscConfig+0xe6>
 8009468:	e014      	b.n	8009494 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800946a:	f7fb f8b9 	bl	80045e0 <HAL_GetTick>
 800946e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009470:	e008      	b.n	8009484 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009472:	f7fb f8b5 	bl	80045e0 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b64      	cmp	r3, #100	; 0x64
 800947e:	d901      	bls.n	8009484 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e395      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009484:	4b5e      	ldr	r3, [pc, #376]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1f0      	bne.n	8009472 <HAL_RCC_OscConfig+0x10e>
 8009490:	e000      	b.n	8009494 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009492:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 80ca 	beq.w	8009636 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094a2:	4b57      	ldr	r3, [pc, #348]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094aa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094ac:	4b54      	ldr	r3, [pc, #336]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80094ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d007      	beq.n	80094c8 <HAL_RCC_OscConfig+0x164>
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	2b18      	cmp	r3, #24
 80094bc:	d156      	bne.n	800956c <HAL_RCC_OscConfig+0x208>
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	f003 0303 	and.w	r3, r3, #3
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d151      	bne.n	800956c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094c8:	4b4d      	ldr	r3, [pc, #308]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d005      	beq.n	80094e0 <HAL_RCC_OscConfig+0x17c>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e367      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094e0:	4b47      	ldr	r3, [pc, #284]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f023 0219 	bic.w	r2, r3, #25
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	4944      	ldr	r1, [pc, #272]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094f2:	f7fb f875 	bl	80045e0 <HAL_GetTick>
 80094f6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094f8:	e008      	b.n	800950c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094fa:	f7fb f871 	bl	80045e0 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d901      	bls.n	800950c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e351      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800950c:	4b3c      	ldr	r3, [pc, #240]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0f0      	beq.n	80094fa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009518:	f7fb f892 	bl	8004640 <HAL_GetREVID>
 800951c:	4603      	mov	r3, r0
 800951e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009522:	4293      	cmp	r3, r2
 8009524:	d817      	bhi.n	8009556 <HAL_RCC_OscConfig+0x1f2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	2b40      	cmp	r3, #64	; 0x40
 800952c:	d108      	bne.n	8009540 <HAL_RCC_OscConfig+0x1dc>
 800952e:	4b34      	ldr	r3, [pc, #208]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009536:	4a32      	ldr	r2, [pc, #200]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800953c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800953e:	e07a      	b.n	8009636 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009540:	4b2f      	ldr	r3, [pc, #188]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	031b      	lsls	r3, r3, #12
 800954e:	492c      	ldr	r1, [pc, #176]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009550:	4313      	orrs	r3, r2
 8009552:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009554:	e06f      	b.n	8009636 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009556:	4b2a      	ldr	r3, [pc, #168]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	061b      	lsls	r3, r3, #24
 8009564:	4926      	ldr	r1, [pc, #152]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009566:	4313      	orrs	r3, r2
 8009568:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800956a:	e064      	b.n	8009636 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d047      	beq.n	8009604 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009574:	4b22      	ldr	r3, [pc, #136]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f023 0219 	bic.w	r2, r3, #25
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	491f      	ldr	r1, [pc, #124]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 8009582:	4313      	orrs	r3, r2
 8009584:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009586:	f7fb f82b 	bl	80045e0 <HAL_GetTick>
 800958a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800958c:	e008      	b.n	80095a0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800958e:	f7fb f827 	bl	80045e0 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e307      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095a0:	4b17      	ldr	r3, [pc, #92]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095ac:	f7fb f848 	bl	8004640 <HAL_GetREVID>
 80095b0:	4603      	mov	r3, r0
 80095b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d817      	bhi.n	80095ea <HAL_RCC_OscConfig+0x286>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2b40      	cmp	r3, #64	; 0x40
 80095c0:	d108      	bne.n	80095d4 <HAL_RCC_OscConfig+0x270>
 80095c2:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80095ca:	4a0d      	ldr	r2, [pc, #52]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80095cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095d0:	6053      	str	r3, [r2, #4]
 80095d2:	e030      	b.n	8009636 <HAL_RCC_OscConfig+0x2d2>
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	031b      	lsls	r3, r3, #12
 80095e2:	4907      	ldr	r1, [pc, #28]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	604b      	str	r3, [r1, #4]
 80095e8:	e025      	b.n	8009636 <HAL_RCC_OscConfig+0x2d2>
 80095ea:	4b05      	ldr	r3, [pc, #20]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	061b      	lsls	r3, r3, #24
 80095f8:	4901      	ldr	r1, [pc, #4]	; (8009600 <HAL_RCC_OscConfig+0x29c>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	604b      	str	r3, [r1, #4]
 80095fe:	e01a      	b.n	8009636 <HAL_RCC_OscConfig+0x2d2>
 8009600:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009604:	4b9e      	ldr	r3, [pc, #632]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a9d      	ldr	r2, [pc, #628]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800960a:	f023 0301 	bic.w	r3, r3, #1
 800960e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009610:	f7fa ffe6 	bl	80045e0 <HAL_GetTick>
 8009614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009616:	e008      	b.n	800962a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009618:	f7fa ffe2 	bl	80045e0 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d901      	bls.n	800962a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e2c2      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800962a:	4b95      	ldr	r3, [pc, #596]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0304 	and.w	r3, r3, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1f0      	bne.n	8009618 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0310 	and.w	r3, r3, #16
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 80a9 	beq.w	8009796 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009644:	4b8e      	ldr	r3, [pc, #568]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800964c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800964e:	4b8c      	ldr	r3, [pc, #560]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009652:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	2b08      	cmp	r3, #8
 8009658:	d007      	beq.n	800966a <HAL_RCC_OscConfig+0x306>
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	2b18      	cmp	r3, #24
 800965e:	d13a      	bne.n	80096d6 <HAL_RCC_OscConfig+0x372>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f003 0303 	and.w	r3, r3, #3
 8009666:	2b01      	cmp	r3, #1
 8009668:	d135      	bne.n	80096d6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800966a:	4b85      	ldr	r3, [pc, #532]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <HAL_RCC_OscConfig+0x31e>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	2b80      	cmp	r3, #128	; 0x80
 800967c:	d001      	beq.n	8009682 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e296      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009682:	f7fa ffdd 	bl	8004640 <HAL_GetREVID>
 8009686:	4603      	mov	r3, r0
 8009688:	f241 0203 	movw	r2, #4099	; 0x1003
 800968c:	4293      	cmp	r3, r2
 800968e:	d817      	bhi.n	80096c0 <HAL_RCC_OscConfig+0x35c>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	2b20      	cmp	r3, #32
 8009696:	d108      	bne.n	80096aa <HAL_RCC_OscConfig+0x346>
 8009698:	4b79      	ldr	r3, [pc, #484]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80096a0:	4a77      	ldr	r2, [pc, #476]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80096a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096a6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096a8:	e075      	b.n	8009796 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096aa:	4b75      	ldr	r3, [pc, #468]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	069b      	lsls	r3, r3, #26
 80096b8:	4971      	ldr	r1, [pc, #452]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096be:	e06a      	b.n	8009796 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096c0:	4b6f      	ldr	r3, [pc, #444]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	061b      	lsls	r3, r3, #24
 80096ce:	496c      	ldr	r1, [pc, #432]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096d4:	e05f      	b.n	8009796 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d042      	beq.n	8009764 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80096de:	4b68      	ldr	r3, [pc, #416]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a67      	ldr	r2, [pc, #412]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80096e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ea:	f7fa ff79 	bl	80045e0 <HAL_GetTick>
 80096ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096f0:	e008      	b.n	8009704 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80096f2:	f7fa ff75 	bl	80045e0 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d901      	bls.n	8009704 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e255      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009704:	4b5e      	ldr	r3, [pc, #376]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0f0      	beq.n	80096f2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009710:	f7fa ff96 	bl	8004640 <HAL_GetREVID>
 8009714:	4603      	mov	r3, r0
 8009716:	f241 0203 	movw	r2, #4099	; 0x1003
 800971a:	4293      	cmp	r3, r2
 800971c:	d817      	bhi.n	800974e <HAL_RCC_OscConfig+0x3ea>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	2b20      	cmp	r3, #32
 8009724:	d108      	bne.n	8009738 <HAL_RCC_OscConfig+0x3d4>
 8009726:	4b56      	ldr	r3, [pc, #344]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800972e:	4a54      	ldr	r2, [pc, #336]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009734:	6053      	str	r3, [r2, #4]
 8009736:	e02e      	b.n	8009796 <HAL_RCC_OscConfig+0x432>
 8009738:	4b51      	ldr	r3, [pc, #324]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	069b      	lsls	r3, r3, #26
 8009746:	494e      	ldr	r1, [pc, #312]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009748:	4313      	orrs	r3, r2
 800974a:	604b      	str	r3, [r1, #4]
 800974c:	e023      	b.n	8009796 <HAL_RCC_OscConfig+0x432>
 800974e:	4b4c      	ldr	r3, [pc, #304]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	061b      	lsls	r3, r3, #24
 800975c:	4948      	ldr	r1, [pc, #288]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800975e:	4313      	orrs	r3, r2
 8009760:	60cb      	str	r3, [r1, #12]
 8009762:	e018      	b.n	8009796 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009764:	4b46      	ldr	r3, [pc, #280]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a45      	ldr	r2, [pc, #276]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800976a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800976e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009770:	f7fa ff36 	bl	80045e0 <HAL_GetTick>
 8009774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009776:	e008      	b.n	800978a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009778:	f7fa ff32 	bl	80045e0 <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	2b02      	cmp	r3, #2
 8009784:	d901      	bls.n	800978a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e212      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800978a:	4b3d      	ldr	r3, [pc, #244]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1f0      	bne.n	8009778 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0308 	and.w	r3, r3, #8
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d036      	beq.n	8009810 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d019      	beq.n	80097de <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097aa:	4b35      	ldr	r3, [pc, #212]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80097ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ae:	4a34      	ldr	r2, [pc, #208]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80097b0:	f043 0301 	orr.w	r3, r3, #1
 80097b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097b6:	f7fa ff13 	bl	80045e0 <HAL_GetTick>
 80097ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80097bc:	e008      	b.n	80097d0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097be:	f7fa ff0f 	bl	80045e0 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d901      	bls.n	80097d0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e1ef      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80097d0:	4b2b      	ldr	r3, [pc, #172]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80097d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0f0      	beq.n	80097be <HAL_RCC_OscConfig+0x45a>
 80097dc:	e018      	b.n	8009810 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097de:	4b28      	ldr	r3, [pc, #160]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80097e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097e2:	4a27      	ldr	r2, [pc, #156]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 80097e4:	f023 0301 	bic.w	r3, r3, #1
 80097e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ea:	f7fa fef9 	bl	80045e0 <HAL_GetTick>
 80097ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097f0:	e008      	b.n	8009804 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097f2:	f7fa fef5 	bl	80045e0 <HAL_GetTick>
 80097f6:	4602      	mov	r2, r0
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d901      	bls.n	8009804 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e1d5      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009804:	4b1e      	ldr	r3, [pc, #120]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009808:	f003 0302 	and.w	r3, r3, #2
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1f0      	bne.n	80097f2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0320 	and.w	r3, r3, #32
 8009818:	2b00      	cmp	r3, #0
 800981a:	d039      	beq.n	8009890 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d019      	beq.n	8009858 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009824:	4b16      	ldr	r3, [pc, #88]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a15      	ldr	r2, [pc, #84]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800982a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800982e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009830:	f7fa fed6 	bl	80045e0 <HAL_GetTick>
 8009834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009836:	e008      	b.n	800984a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009838:	f7fa fed2 	bl	80045e0 <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d901      	bls.n	800984a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e1b2      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800984a:	4b0d      	ldr	r3, [pc, #52]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0f0      	beq.n	8009838 <HAL_RCC_OscConfig+0x4d4>
 8009856:	e01b      	b.n	8009890 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009858:	4b09      	ldr	r3, [pc, #36]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a08      	ldr	r2, [pc, #32]	; (8009880 <HAL_RCC_OscConfig+0x51c>)
 800985e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009862:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009864:	f7fa febc 	bl	80045e0 <HAL_GetTick>
 8009868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800986a:	e00b      	b.n	8009884 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800986c:	f7fa feb8 	bl	80045e0 <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b02      	cmp	r3, #2
 8009878:	d904      	bls.n	8009884 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e198      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
 800987e:	bf00      	nop
 8009880:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009884:	4ba3      	ldr	r3, [pc, #652]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1ed      	bne.n	800986c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 8081 	beq.w	80099a0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800989e:	4b9e      	ldr	r3, [pc, #632]	; (8009b18 <HAL_RCC_OscConfig+0x7b4>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a9d      	ldr	r2, [pc, #628]	; (8009b18 <HAL_RCC_OscConfig+0x7b4>)
 80098a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098aa:	f7fa fe99 	bl	80045e0 <HAL_GetTick>
 80098ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098b0:	e008      	b.n	80098c4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80098b2:	f7fa fe95 	bl	80045e0 <HAL_GetTick>
 80098b6:	4602      	mov	r2, r0
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	2b64      	cmp	r3, #100	; 0x64
 80098be:	d901      	bls.n	80098c4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e175      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098c4:	4b94      	ldr	r3, [pc, #592]	; (8009b18 <HAL_RCC_OscConfig+0x7b4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0f0      	beq.n	80098b2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d106      	bne.n	80098e6 <HAL_RCC_OscConfig+0x582>
 80098d8:	4b8e      	ldr	r3, [pc, #568]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80098da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098dc:	4a8d      	ldr	r2, [pc, #564]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80098de:	f043 0301 	orr.w	r3, r3, #1
 80098e2:	6713      	str	r3, [r2, #112]	; 0x70
 80098e4:	e02d      	b.n	8009942 <HAL_RCC_OscConfig+0x5de>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10c      	bne.n	8009908 <HAL_RCC_OscConfig+0x5a4>
 80098ee:	4b89      	ldr	r3, [pc, #548]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80098f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f2:	4a88      	ldr	r2, [pc, #544]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80098f4:	f023 0301 	bic.w	r3, r3, #1
 80098f8:	6713      	str	r3, [r2, #112]	; 0x70
 80098fa:	4b86      	ldr	r3, [pc, #536]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80098fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fe:	4a85      	ldr	r2, [pc, #532]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009900:	f023 0304 	bic.w	r3, r3, #4
 8009904:	6713      	str	r3, [r2, #112]	; 0x70
 8009906:	e01c      	b.n	8009942 <HAL_RCC_OscConfig+0x5de>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	2b05      	cmp	r3, #5
 800990e:	d10c      	bne.n	800992a <HAL_RCC_OscConfig+0x5c6>
 8009910:	4b80      	ldr	r3, [pc, #512]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009914:	4a7f      	ldr	r2, [pc, #508]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009916:	f043 0304 	orr.w	r3, r3, #4
 800991a:	6713      	str	r3, [r2, #112]	; 0x70
 800991c:	4b7d      	ldr	r3, [pc, #500]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 800991e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009920:	4a7c      	ldr	r2, [pc, #496]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009922:	f043 0301 	orr.w	r3, r3, #1
 8009926:	6713      	str	r3, [r2, #112]	; 0x70
 8009928:	e00b      	b.n	8009942 <HAL_RCC_OscConfig+0x5de>
 800992a:	4b7a      	ldr	r3, [pc, #488]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 800992c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992e:	4a79      	ldr	r2, [pc, #484]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009930:	f023 0301 	bic.w	r3, r3, #1
 8009934:	6713      	str	r3, [r2, #112]	; 0x70
 8009936:	4b77      	ldr	r3, [pc, #476]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993a:	4a76      	ldr	r2, [pc, #472]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 800993c:	f023 0304 	bic.w	r3, r3, #4
 8009940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d015      	beq.n	8009976 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800994a:	f7fa fe49 	bl	80045e0 <HAL_GetTick>
 800994e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009950:	e00a      	b.n	8009968 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009952:	f7fa fe45 	bl	80045e0 <HAL_GetTick>
 8009956:	4602      	mov	r2, r0
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009960:	4293      	cmp	r3, r2
 8009962:	d901      	bls.n	8009968 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e123      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009968:	4b6a      	ldr	r3, [pc, #424]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 800996a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	2b00      	cmp	r3, #0
 8009972:	d0ee      	beq.n	8009952 <HAL_RCC_OscConfig+0x5ee>
 8009974:	e014      	b.n	80099a0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009976:	f7fa fe33 	bl	80045e0 <HAL_GetTick>
 800997a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800997c:	e00a      	b.n	8009994 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800997e:	f7fa fe2f 	bl	80045e0 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	f241 3288 	movw	r2, #5000	; 0x1388
 800998c:	4293      	cmp	r3, r2
 800998e:	d901      	bls.n	8009994 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e10d      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009994:	4b5f      	ldr	r3, [pc, #380]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1ee      	bne.n	800997e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8102 	beq.w	8009bae <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80099aa:	4b5a      	ldr	r3, [pc, #360]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099b2:	2b18      	cmp	r3, #24
 80099b4:	f000 80bd 	beq.w	8009b32 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b02      	cmp	r3, #2
 80099be:	f040 8095 	bne.w	8009aec <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099c2:	4b54      	ldr	r3, [pc, #336]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a53      	ldr	r2, [pc, #332]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80099c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ce:	f7fa fe07 	bl	80045e0 <HAL_GetTick>
 80099d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099d4:	e008      	b.n	80099e8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099d6:	f7fa fe03 	bl	80045e0 <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d901      	bls.n	80099e8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e0e3      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099e8:	4b4a      	ldr	r3, [pc, #296]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1f0      	bne.n	80099d6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099f4:	4b47      	ldr	r3, [pc, #284]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 80099f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099f8:	4b48      	ldr	r3, [pc, #288]	; (8009b1c <HAL_RCC_OscConfig+0x7b8>)
 80099fa:	4013      	ands	r3, r2
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a04:	0112      	lsls	r2, r2, #4
 8009a06:	430a      	orrs	r2, r1
 8009a08:	4942      	ldr	r1, [pc, #264]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	628b      	str	r3, [r1, #40]	; 0x28
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a12:	3b01      	subs	r3, #1
 8009a14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	025b      	lsls	r3, r3, #9
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	431a      	orrs	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	041b      	lsls	r3, r3, #16
 8009a2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a36:	3b01      	subs	r3, #1
 8009a38:	061b      	lsls	r3, r3, #24
 8009a3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a3e:	4935      	ldr	r1, [pc, #212]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a40:	4313      	orrs	r3, r2
 8009a42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009a44:	4b33      	ldr	r3, [pc, #204]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a48:	4a32      	ldr	r2, [pc, #200]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a4a:	f023 0301 	bic.w	r3, r3, #1
 8009a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a50:	4b30      	ldr	r3, [pc, #192]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a54:	4b32      	ldr	r3, [pc, #200]	; (8009b20 <HAL_RCC_OscConfig+0x7bc>)
 8009a56:	4013      	ands	r3, r2
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a5c:	00d2      	lsls	r2, r2, #3
 8009a5e:	492d      	ldr	r1, [pc, #180]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a60:	4313      	orrs	r3, r2
 8009a62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009a64:	4b2b      	ldr	r3, [pc, #172]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a68:	f023 020c 	bic.w	r2, r3, #12
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	4928      	ldr	r1, [pc, #160]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009a76:	4b27      	ldr	r3, [pc, #156]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7a:	f023 0202 	bic.w	r2, r3, #2
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a82:	4924      	ldr	r1, [pc, #144]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009a88:	4b22      	ldr	r3, [pc, #136]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	4a21      	ldr	r2, [pc, #132]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a94:	4b1f      	ldr	r3, [pc, #124]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	4a1e      	ldr	r2, [pc, #120]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009aa0:	4b1c      	ldr	r3, [pc, #112]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	4a1b      	ldr	r2, [pc, #108]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009aac:	4b19      	ldr	r3, [pc, #100]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab0:	4a18      	ldr	r2, [pc, #96]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009ab2:	f043 0301 	orr.w	r3, r3, #1
 8009ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ab8:	4b16      	ldr	r3, [pc, #88]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a15      	ldr	r2, [pc, #84]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac4:	f7fa fd8c 	bl	80045e0 <HAL_GetTick>
 8009ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009aca:	e008      	b.n	8009ade <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009acc:	f7fa fd88 	bl	80045e0 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e068      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ade:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0f0      	beq.n	8009acc <HAL_RCC_OscConfig+0x768>
 8009aea:	e060      	b.n	8009bae <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009aec:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a08      	ldr	r2, [pc, #32]	; (8009b14 <HAL_RCC_OscConfig+0x7b0>)
 8009af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af8:	f7fa fd72 	bl	80045e0 <HAL_GetTick>
 8009afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009afe:	e011      	b.n	8009b24 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b00:	f7fa fd6e 	bl	80045e0 <HAL_GetTick>
 8009b04:	4602      	mov	r2, r0
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d90a      	bls.n	8009b24 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e04e      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
 8009b12:	bf00      	nop
 8009b14:	58024400 	.word	0x58024400
 8009b18:	58024800 	.word	0x58024800
 8009b1c:	fffffc0c 	.word	0xfffffc0c
 8009b20:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b24:	4b24      	ldr	r3, [pc, #144]	; (8009bb8 <HAL_RCC_OscConfig+0x854>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e7      	bne.n	8009b00 <HAL_RCC_OscConfig+0x79c>
 8009b30:	e03d      	b.n	8009bae <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009b32:	4b21      	ldr	r3, [pc, #132]	; (8009bb8 <HAL_RCC_OscConfig+0x854>)
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b38:	4b1f      	ldr	r3, [pc, #124]	; (8009bb8 <HAL_RCC_OscConfig+0x854>)
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d031      	beq.n	8009baa <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f003 0203 	and.w	r2, r3, #3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d12a      	bne.n	8009baa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	091b      	lsrs	r3, r3, #4
 8009b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d122      	bne.n	8009baa <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d11a      	bne.n	8009baa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	0a5b      	lsrs	r3, r3, #9
 8009b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b80:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d111      	bne.n	8009baa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	0c1b      	lsrs	r3, r3, #16
 8009b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d108      	bne.n	8009baa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	0e1b      	lsrs	r3, r3, #24
 8009b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d001      	beq.n	8009bae <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e000      	b.n	8009bb0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3730      	adds	r7, #48	; 0x30
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	58024400 	.word	0x58024400

08009bbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e19c      	b.n	8009f0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009bd0:	4b8a      	ldr	r3, [pc, #552]	; (8009dfc <HAL_RCC_ClockConfig+0x240>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 030f 	and.w	r3, r3, #15
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d910      	bls.n	8009c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bde:	4b87      	ldr	r3, [pc, #540]	; (8009dfc <HAL_RCC_ClockConfig+0x240>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f023 020f 	bic.w	r2, r3, #15
 8009be6:	4985      	ldr	r1, [pc, #532]	; (8009dfc <HAL_RCC_ClockConfig+0x240>)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bee:	4b83      	ldr	r3, [pc, #524]	; (8009dfc <HAL_RCC_ClockConfig+0x240>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d001      	beq.n	8009c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e184      	b.n	8009f0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d010      	beq.n	8009c2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691a      	ldr	r2, [r3, #16]
 8009c10:	4b7b      	ldr	r3, [pc, #492]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d908      	bls.n	8009c2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c1c:	4b78      	ldr	r3, [pc, #480]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	4975      	ldr	r1, [pc, #468]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0308 	and.w	r3, r3, #8
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d010      	beq.n	8009c5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	695a      	ldr	r2, [r3, #20]
 8009c3e:	4b70      	ldr	r3, [pc, #448]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d908      	bls.n	8009c5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c4a:	4b6d      	ldr	r3, [pc, #436]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	496a      	ldr	r1, [pc, #424]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d010      	beq.n	8009c8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	699a      	ldr	r2, [r3, #24]
 8009c6c:	4b64      	ldr	r3, [pc, #400]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d908      	bls.n	8009c8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c78:	4b61      	ldr	r3, [pc, #388]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	495e      	ldr	r1, [pc, #376]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d010      	beq.n	8009cb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	69da      	ldr	r2, [r3, #28]
 8009c9a:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d908      	bls.n	8009cb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009ca6:	4b56      	ldr	r3, [pc, #344]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	4953      	ldr	r1, [pc, #332]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0302 	and.w	r3, r3, #2
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d010      	beq.n	8009ce6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	4b4d      	ldr	r3, [pc, #308]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d908      	bls.n	8009ce6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cd4:	4b4a      	ldr	r3, [pc, #296]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	f023 020f 	bic.w	r2, r3, #15
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	4947      	ldr	r1, [pc, #284]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d055      	beq.n	8009d9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009cf2:	4b43      	ldr	r3, [pc, #268]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	4940      	ldr	r1, [pc, #256]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009d00:	4313      	orrs	r3, r2
 8009d02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d107      	bne.n	8009d1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d0c:	4b3c      	ldr	r3, [pc, #240]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d121      	bne.n	8009d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e0f6      	b.n	8009f0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d107      	bne.n	8009d34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d24:	4b36      	ldr	r3, [pc, #216]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d115      	bne.n	8009d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e0ea      	b.n	8009f0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d107      	bne.n	8009d4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d3c:	4b30      	ldr	r3, [pc, #192]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d109      	bne.n	8009d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e0de      	b.n	8009f0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d4c:	4b2c      	ldr	r3, [pc, #176]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e0d6      	b.n	8009f0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d5c:	4b28      	ldr	r3, [pc, #160]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	f023 0207 	bic.w	r2, r3, #7
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	4925      	ldr	r1, [pc, #148]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d6e:	f7fa fc37 	bl	80045e0 <HAL_GetTick>
 8009d72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d74:	e00a      	b.n	8009d8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d76:	f7fa fc33 	bl	80045e0 <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d901      	bls.n	8009d8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e0be      	b.n	8009f0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d8c:	4b1c      	ldr	r3, [pc, #112]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d1eb      	bne.n	8009d76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0302 	and.w	r3, r3, #2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d010      	beq.n	8009dcc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	f003 030f 	and.w	r3, r3, #15
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d208      	bcs.n	8009dcc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dba:	4b11      	ldr	r3, [pc, #68]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	f023 020f 	bic.w	r2, r3, #15
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	490e      	ldr	r1, [pc, #56]	; (8009e00 <HAL_RCC_ClockConfig+0x244>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009dcc:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <HAL_RCC_ClockConfig+0x240>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 030f 	and.w	r3, r3, #15
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d214      	bcs.n	8009e04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dda:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <HAL_RCC_ClockConfig+0x240>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f023 020f 	bic.w	r2, r3, #15
 8009de2:	4906      	ldr	r1, [pc, #24]	; (8009dfc <HAL_RCC_ClockConfig+0x240>)
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dea:	4b04      	ldr	r3, [pc, #16]	; (8009dfc <HAL_RCC_ClockConfig+0x240>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 030f 	and.w	r3, r3, #15
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d005      	beq.n	8009e04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e086      	b.n	8009f0a <HAL_RCC_ClockConfig+0x34e>
 8009dfc:	52002000 	.word	0x52002000
 8009e00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0304 	and.w	r3, r3, #4
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d010      	beq.n	8009e32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691a      	ldr	r2, [r3, #16]
 8009e14:	4b3f      	ldr	r3, [pc, #252]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d208      	bcs.n	8009e32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e20:	4b3c      	ldr	r3, [pc, #240]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	4939      	ldr	r1, [pc, #228]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0308 	and.w	r3, r3, #8
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d010      	beq.n	8009e60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695a      	ldr	r2, [r3, #20]
 8009e42:	4b34      	ldr	r3, [pc, #208]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d208      	bcs.n	8009e60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e4e:	4b31      	ldr	r3, [pc, #196]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	695b      	ldr	r3, [r3, #20]
 8009e5a:	492e      	ldr	r1, [pc, #184]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0310 	and.w	r3, r3, #16
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d010      	beq.n	8009e8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	699a      	ldr	r2, [r3, #24]
 8009e70:	4b28      	ldr	r3, [pc, #160]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009e72:	69db      	ldr	r3, [r3, #28]
 8009e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d208      	bcs.n	8009e8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e7c:	4b25      	ldr	r3, [pc, #148]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	4922      	ldr	r1, [pc, #136]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0320 	and.w	r3, r3, #32
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d010      	beq.n	8009ebc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	69da      	ldr	r2, [r3, #28]
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d208      	bcs.n	8009ebc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009eaa:	4b1a      	ldr	r3, [pc, #104]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	4917      	ldr	r1, [pc, #92]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ebc:	f000 f834 	bl	8009f28 <HAL_RCC_GetSysClockFreq>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	4b14      	ldr	r3, [pc, #80]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	f003 030f 	and.w	r3, r3, #15
 8009ecc:	4912      	ldr	r1, [pc, #72]	; (8009f18 <HAL_RCC_ClockConfig+0x35c>)
 8009ece:	5ccb      	ldrb	r3, [r1, r3]
 8009ed0:	f003 031f 	and.w	r3, r3, #31
 8009ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009eda:	4b0e      	ldr	r3, [pc, #56]	; (8009f14 <HAL_RCC_ClockConfig+0x358>)
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	f003 030f 	and.w	r3, r3, #15
 8009ee2:	4a0d      	ldr	r2, [pc, #52]	; (8009f18 <HAL_RCC_ClockConfig+0x35c>)
 8009ee4:	5cd3      	ldrb	r3, [r2, r3]
 8009ee6:	f003 031f 	and.w	r3, r3, #31
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef0:	4a0a      	ldr	r2, [pc, #40]	; (8009f1c <HAL_RCC_ClockConfig+0x360>)
 8009ef2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ef4:	4a0a      	ldr	r2, [pc, #40]	; (8009f20 <HAL_RCC_ClockConfig+0x364>)
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009efa:	4b0a      	ldr	r3, [pc, #40]	; (8009f24 <HAL_RCC_ClockConfig+0x368>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fa fb24 	bl	800454c <HAL_InitTick>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	58024400 	.word	0x58024400
 8009f18:	08011eb0 	.word	0x08011eb0
 8009f1c:	24000004 	.word	0x24000004
 8009f20:	24000000 	.word	0x24000000
 8009f24:	24000008 	.word	0x24000008

08009f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b089      	sub	sp, #36	; 0x24
 8009f2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f2e:	4bb3      	ldr	r3, [pc, #716]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f36:	2b18      	cmp	r3, #24
 8009f38:	f200 8155 	bhi.w	800a1e6 <HAL_RCC_GetSysClockFreq+0x2be>
 8009f3c:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f42:	bf00      	nop
 8009f44:	08009fa9 	.word	0x08009fa9
 8009f48:	0800a1e7 	.word	0x0800a1e7
 8009f4c:	0800a1e7 	.word	0x0800a1e7
 8009f50:	0800a1e7 	.word	0x0800a1e7
 8009f54:	0800a1e7 	.word	0x0800a1e7
 8009f58:	0800a1e7 	.word	0x0800a1e7
 8009f5c:	0800a1e7 	.word	0x0800a1e7
 8009f60:	0800a1e7 	.word	0x0800a1e7
 8009f64:	08009fcf 	.word	0x08009fcf
 8009f68:	0800a1e7 	.word	0x0800a1e7
 8009f6c:	0800a1e7 	.word	0x0800a1e7
 8009f70:	0800a1e7 	.word	0x0800a1e7
 8009f74:	0800a1e7 	.word	0x0800a1e7
 8009f78:	0800a1e7 	.word	0x0800a1e7
 8009f7c:	0800a1e7 	.word	0x0800a1e7
 8009f80:	0800a1e7 	.word	0x0800a1e7
 8009f84:	08009fd5 	.word	0x08009fd5
 8009f88:	0800a1e7 	.word	0x0800a1e7
 8009f8c:	0800a1e7 	.word	0x0800a1e7
 8009f90:	0800a1e7 	.word	0x0800a1e7
 8009f94:	0800a1e7 	.word	0x0800a1e7
 8009f98:	0800a1e7 	.word	0x0800a1e7
 8009f9c:	0800a1e7 	.word	0x0800a1e7
 8009fa0:	0800a1e7 	.word	0x0800a1e7
 8009fa4:	08009fdb 	.word	0x08009fdb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fa8:	4b94      	ldr	r3, [pc, #592]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d009      	beq.n	8009fc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fb4:	4b91      	ldr	r3, [pc, #580]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	08db      	lsrs	r3, r3, #3
 8009fba:	f003 0303 	and.w	r3, r3, #3
 8009fbe:	4a90      	ldr	r2, [pc, #576]	; (800a200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009fc6:	e111      	b.n	800a1ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009fc8:	4b8d      	ldr	r3, [pc, #564]	; (800a200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009fca:	61bb      	str	r3, [r7, #24]
    break;
 8009fcc:	e10e      	b.n	800a1ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009fce:	4b8d      	ldr	r3, [pc, #564]	; (800a204 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009fd0:	61bb      	str	r3, [r7, #24]
    break;
 8009fd2:	e10b      	b.n	800a1ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009fd4:	4b8c      	ldr	r3, [pc, #560]	; (800a208 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009fd6:	61bb      	str	r3, [r7, #24]
    break;
 8009fd8:	e108      	b.n	800a1ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fda:	4b88      	ldr	r3, [pc, #544]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fde:	f003 0303 	and.w	r3, r3, #3
 8009fe2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009fe4:	4b85      	ldr	r3, [pc, #532]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe8:	091b      	lsrs	r3, r3, #4
 8009fea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009ff0:	4b82      	ldr	r3, [pc, #520]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ffa:	4b80      	ldr	r3, [pc, #512]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffe:	08db      	lsrs	r3, r3, #3
 800a000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	fb02 f303 	mul.w	r3, r2, r3
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a012:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 80e1 	beq.w	800a1e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b02      	cmp	r3, #2
 800a022:	f000 8083 	beq.w	800a12c <HAL_RCC_GetSysClockFreq+0x204>
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b02      	cmp	r3, #2
 800a02a:	f200 80a1 	bhi.w	800a170 <HAL_RCC_GetSysClockFreq+0x248>
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <HAL_RCC_GetSysClockFreq+0x114>
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d056      	beq.n	800a0e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a03a:	e099      	b.n	800a170 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a03c:	4b6f      	ldr	r3, [pc, #444]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0320 	and.w	r3, r3, #32
 800a044:	2b00      	cmp	r3, #0
 800a046:	d02d      	beq.n	800a0a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a048:	4b6c      	ldr	r3, [pc, #432]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	08db      	lsrs	r3, r3, #3
 800a04e:	f003 0303 	and.w	r3, r3, #3
 800a052:	4a6b      	ldr	r2, [pc, #428]	; (800a200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a054:	fa22 f303 	lsr.w	r3, r2, r3
 800a058:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	ee07 3a90 	vmov	s15, r3
 800a060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a072:	4b62      	ldr	r3, [pc, #392]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a07a:	ee07 3a90 	vmov	s15, r3
 800a07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a082:	ed97 6a02 	vldr	s12, [r7, #8]
 800a086:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a0a2:	e087      	b.n	800a1b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a210 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b6:	4b51      	ldr	r3, [pc, #324]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0e6:	e065      	b.n	800a1b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a214 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fa:	4b40      	ldr	r3, [pc, #256]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a10e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a12a:	e043      	b.n	800a1b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a136:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a218 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a13e:	4b2f      	ldr	r3, [pc, #188]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a152:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a16e:	e021      	b.n	800a1b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a214 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a182:	4b1e      	ldr	r3, [pc, #120]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a192:	ed97 6a02 	vldr	s12, [r7, #8]
 800a196:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a1b4:	4b11      	ldr	r3, [pc, #68]	; (800a1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b8:	0a5b      	lsrs	r3, r3, #9
 800a1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1be:	3301      	adds	r3, #1
 800a1c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	ee07 3a90 	vmov	s15, r3
 800a1c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a1cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1d8:	ee17 3a90 	vmov	r3, s15
 800a1dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a1de:	e005      	b.n	800a1ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61bb      	str	r3, [r7, #24]
    break;
 800a1e4:	e002      	b.n	800a1ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a1e6:	4b07      	ldr	r3, [pc, #28]	; (800a204 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a1e8:	61bb      	str	r3, [r7, #24]
    break;
 800a1ea:	bf00      	nop
  }

  return sysclockfreq;
 800a1ec:	69bb      	ldr	r3, [r7, #24]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3724      	adds	r7, #36	; 0x24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	58024400 	.word	0x58024400
 800a200:	03d09000 	.word	0x03d09000
 800a204:	003d0900 	.word	0x003d0900
 800a208:	02dc6c00 	.word	0x02dc6c00
 800a20c:	46000000 	.word	0x46000000
 800a210:	4c742400 	.word	0x4c742400
 800a214:	4a742400 	.word	0x4a742400
 800a218:	4c371b00 	.word	0x4c371b00

0800a21c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a222:	f7ff fe81 	bl	8009f28 <HAL_RCC_GetSysClockFreq>
 800a226:	4602      	mov	r2, r0
 800a228:	4b10      	ldr	r3, [pc, #64]	; (800a26c <HAL_RCC_GetHCLKFreq+0x50>)
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	0a1b      	lsrs	r3, r3, #8
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	490f      	ldr	r1, [pc, #60]	; (800a270 <HAL_RCC_GetHCLKFreq+0x54>)
 800a234:	5ccb      	ldrb	r3, [r1, r3]
 800a236:	f003 031f 	and.w	r3, r3, #31
 800a23a:	fa22 f303 	lsr.w	r3, r2, r3
 800a23e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a240:	4b0a      	ldr	r3, [pc, #40]	; (800a26c <HAL_RCC_GetHCLKFreq+0x50>)
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	4a09      	ldr	r2, [pc, #36]	; (800a270 <HAL_RCC_GetHCLKFreq+0x54>)
 800a24a:	5cd3      	ldrb	r3, [r2, r3]
 800a24c:	f003 031f 	and.w	r3, r3, #31
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	fa22 f303 	lsr.w	r3, r2, r3
 800a256:	4a07      	ldr	r2, [pc, #28]	; (800a274 <HAL_RCC_GetHCLKFreq+0x58>)
 800a258:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a25a:	4a07      	ldr	r2, [pc, #28]	; (800a278 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a260:	4b04      	ldr	r3, [pc, #16]	; (800a274 <HAL_RCC_GetHCLKFreq+0x58>)
 800a262:	681b      	ldr	r3, [r3, #0]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	58024400 	.word	0x58024400
 800a270:	08011eb0 	.word	0x08011eb0
 800a274:	24000004 	.word	0x24000004
 800a278:	24000000 	.word	0x24000000

0800a27c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a280:	f7ff ffcc 	bl	800a21c <HAL_RCC_GetHCLKFreq>
 800a284:	4602      	mov	r2, r0
 800a286:	4b06      	ldr	r3, [pc, #24]	; (800a2a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	091b      	lsrs	r3, r3, #4
 800a28c:	f003 0307 	and.w	r3, r3, #7
 800a290:	4904      	ldr	r1, [pc, #16]	; (800a2a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a292:	5ccb      	ldrb	r3, [r1, r3]
 800a294:	f003 031f 	and.w	r3, r3, #31
 800a298:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	58024400 	.word	0x58024400
 800a2a4:	08011eb0 	.word	0x08011eb0

0800a2a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a2ac:	f7ff ffb6 	bl	800a21c <HAL_RCC_GetHCLKFreq>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	4904      	ldr	r1, [pc, #16]	; (800a2d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a2be:	5ccb      	ldrb	r3, [r1, r3]
 800a2c0:	f003 031f 	and.w	r3, r3, #31
 800a2c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	58024400 	.word	0x58024400
 800a2d0:	08011eb0 	.word	0x08011eb0

0800a2d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a2dc:	2300      	movs	r3, #0
 800a2de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d03f      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2f8:	d02a      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a2fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2fe:	d824      	bhi.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a304:	d018      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a30a:	d81e      	bhi.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a314:	d007      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a316:	e018      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a318:	4bab      	ldr	r3, [pc, #684]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31c:	4aaa      	ldr	r2, [pc, #680]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a31e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a324:	e015      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3304      	adds	r3, #4
 800a32a:	2102      	movs	r1, #2
 800a32c:	4618      	mov	r0, r3
 800a32e:	f001 fff3 	bl	800c318 <RCCEx_PLL2_Config>
 800a332:	4603      	mov	r3, r0
 800a334:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a336:	e00c      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3324      	adds	r3, #36	; 0x24
 800a33c:	2102      	movs	r1, #2
 800a33e:	4618      	mov	r0, r3
 800a340:	f002 f89c 	bl	800c47c <RCCEx_PLL3_Config>
 800a344:	4603      	mov	r3, r0
 800a346:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a348:	e003      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	75fb      	strb	r3, [r7, #23]
      break;
 800a34e:	e000      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a350:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d109      	bne.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a358:	4b9b      	ldr	r3, [pc, #620]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a35c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a364:	4998      	ldr	r1, [pc, #608]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a366:	4313      	orrs	r3, r2
 800a368:	650b      	str	r3, [r1, #80]	; 0x50
 800a36a:	e001      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d03d      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a380:	2b04      	cmp	r3, #4
 800a382:	d826      	bhi.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a384:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a3a1 	.word	0x0800a3a1
 800a390:	0800a3af 	.word	0x0800a3af
 800a394:	0800a3c1 	.word	0x0800a3c1
 800a398:	0800a3d9 	.word	0x0800a3d9
 800a39c:	0800a3d9 	.word	0x0800a3d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a0:	4b89      	ldr	r3, [pc, #548]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	4a88      	ldr	r2, [pc, #544]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a3ac:	e015      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f001 ffaf 	bl	800c318 <RCCEx_PLL2_Config>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a3be:	e00c      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	3324      	adds	r3, #36	; 0x24
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f002 f858 	bl	800c47c <RCCEx_PLL3_Config>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a3d0:	e003      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d6:	e000      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a3d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d109      	bne.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3e0:	4b79      	ldr	r3, [pc, #484]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e4:	f023 0207 	bic.w	r2, r3, #7
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ec:	4976      	ldr	r1, [pc, #472]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	650b      	str	r3, [r1, #80]	; 0x50
 800a3f2:	e001      	b.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a400:	2b00      	cmp	r3, #0
 800a402:	d042      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a40c:	d02b      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a40e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a412:	d825      	bhi.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a414:	2bc0      	cmp	r3, #192	; 0xc0
 800a416:	d028      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a418:	2bc0      	cmp	r3, #192	; 0xc0
 800a41a:	d821      	bhi.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a41c:	2b80      	cmp	r3, #128	; 0x80
 800a41e:	d016      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a420:	2b80      	cmp	r3, #128	; 0x80
 800a422:	d81d      	bhi.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a428:	2b40      	cmp	r3, #64	; 0x40
 800a42a:	d007      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a42c:	e018      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a42e:	4b66      	ldr	r3, [pc, #408]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	4a65      	ldr	r2, [pc, #404]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a438:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a43a:	e017      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3304      	adds	r3, #4
 800a440:	2100      	movs	r1, #0
 800a442:	4618      	mov	r0, r3
 800a444:	f001 ff68 	bl	800c318 <RCCEx_PLL2_Config>
 800a448:	4603      	mov	r3, r0
 800a44a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a44c:	e00e      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3324      	adds	r3, #36	; 0x24
 800a452:	2100      	movs	r1, #0
 800a454:	4618      	mov	r0, r3
 800a456:	f002 f811 	bl	800c47c <RCCEx_PLL3_Config>
 800a45a:	4603      	mov	r3, r0
 800a45c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a45e:	e005      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	75fb      	strb	r3, [r7, #23]
      break;
 800a464:	e002      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a466:	bf00      	nop
 800a468:	e000      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a46a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d109      	bne.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a472:	4b55      	ldr	r3, [pc, #340]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a476:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a47e:	4952      	ldr	r1, [pc, #328]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a480:	4313      	orrs	r3, r2
 800a482:	650b      	str	r3, [r1, #80]	; 0x50
 800a484:	e001      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a486:	7dfb      	ldrb	r3, [r7, #23]
 800a488:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a492:	2b00      	cmp	r3, #0
 800a494:	d049      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a49c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4a0:	d030      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a4a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4a6:	d82a      	bhi.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a4a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a4ac:	d02c      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a4ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a4b2:	d824      	bhi.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a4b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4b8:	d018      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a4ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4be:	d81e      	bhi.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a4c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4c8:	d007      	beq.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a4ca:	e018      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4cc:	4b3e      	ldr	r3, [pc, #248]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	4a3d      	ldr	r2, [pc, #244]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a4d8:	e017      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3304      	adds	r3, #4
 800a4de:	2100      	movs	r1, #0
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f001 ff19 	bl	800c318 <RCCEx_PLL2_Config>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a4ea:	e00e      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3324      	adds	r3, #36	; 0x24
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 ffc2 	bl	800c47c <RCCEx_PLL3_Config>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a4fc:	e005      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	75fb      	strb	r3, [r7, #23]
      break;
 800a502:	e002      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a504:	bf00      	nop
 800a506:	e000      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a510:	4b2d      	ldr	r3, [pc, #180]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a514:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a51e:	492a      	ldr	r1, [pc, #168]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a520:	4313      	orrs	r3, r2
 800a522:	658b      	str	r3, [r1, #88]	; 0x58
 800a524:	e001      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a526:	7dfb      	ldrb	r3, [r7, #23]
 800a528:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a532:	2b00      	cmp	r3, #0
 800a534:	d04c      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a53c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a540:	d030      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a542:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a546:	d82a      	bhi.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a548:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a54c:	d02c      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a54e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a552:	d824      	bhi.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a558:	d018      	beq.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a55a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a55e:	d81e      	bhi.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a568:	d007      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a56a:	e018      	b.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a56c:	4b16      	ldr	r3, [pc, #88]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a570:	4a15      	ldr	r2, [pc, #84]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a578:	e017      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3304      	adds	r3, #4
 800a57e:	2100      	movs	r1, #0
 800a580:	4618      	mov	r0, r3
 800a582:	f001 fec9 	bl	800c318 <RCCEx_PLL2_Config>
 800a586:	4603      	mov	r3, r0
 800a588:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a58a:	e00e      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	3324      	adds	r3, #36	; 0x24
 800a590:	2100      	movs	r1, #0
 800a592:	4618      	mov	r0, r3
 800a594:	f001 ff72 	bl	800c47c <RCCEx_PLL3_Config>
 800a598:	4603      	mov	r3, r0
 800a59a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a59c:	e005      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a5a2:	e002      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a5a4:	bf00      	nop
 800a5a6:	e000      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a5a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10d      	bne.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a5b0:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a5be:	4902      	ldr	r1, [pc, #8]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	658b      	str	r3, [r1, #88]	; 0x58
 800a5c4:	e004      	b.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a5c6:	bf00      	nop
 800a5c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
 800a5ce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d032      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5e0:	2b30      	cmp	r3, #48	; 0x30
 800a5e2:	d01c      	beq.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a5e4:	2b30      	cmp	r3, #48	; 0x30
 800a5e6:	d817      	bhi.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a5e8:	2b20      	cmp	r3, #32
 800a5ea:	d00c      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a5ec:	2b20      	cmp	r3, #32
 800a5ee:	d813      	bhi.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d016      	beq.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a5f4:	2b10      	cmp	r3, #16
 800a5f6:	d10f      	bne.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5f8:	4baf      	ldr	r3, [pc, #700]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	4aae      	ldr	r2, [pc, #696]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a604:	e00e      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	3304      	adds	r3, #4
 800a60a:	2102      	movs	r1, #2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f001 fe83 	bl	800c318 <RCCEx_PLL2_Config>
 800a612:	4603      	mov	r3, r0
 800a614:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a616:	e005      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	75fb      	strb	r3, [r7, #23]
      break;
 800a61c:	e002      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a61e:	bf00      	nop
 800a620:	e000      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a622:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d109      	bne.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a62a:	4ba3      	ldr	r3, [pc, #652]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a636:	49a0      	ldr	r1, [pc, #640]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a63c:	e001      	b.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d047      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a656:	d030      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a65c:	d82a      	bhi.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a65e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a662:	d02c      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a664:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a668:	d824      	bhi.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a66a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a66e:	d018      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a674:	d81e      	bhi.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a67e:	d007      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a680:	e018      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a682:	4b8d      	ldr	r3, [pc, #564]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	4a8c      	ldr	r2, [pc, #560]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a68c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a68e:	e017      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3304      	adds	r3, #4
 800a694:	2100      	movs	r1, #0
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fe3e 	bl	800c318 <RCCEx_PLL2_Config>
 800a69c:	4603      	mov	r3, r0
 800a69e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a6a0:	e00e      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3324      	adds	r3, #36	; 0x24
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f001 fee7 	bl	800c47c <RCCEx_PLL3_Config>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a6b2:	e005      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6b8:	e002      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a6ba:	bf00      	nop
 800a6bc:	e000      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a6be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6c0:	7dfb      	ldrb	r3, [r7, #23]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d109      	bne.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a6c6:	4b7c      	ldr	r3, [pc, #496]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a6c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6d2:	4979      	ldr	r1, [pc, #484]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	650b      	str	r3, [r1, #80]	; 0x50
 800a6d8:	e001      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d049      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6f2:	d02e      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a6f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6f8:	d828      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a6fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6fe:	d02a      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a704:	d822      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a706:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a70a:	d026      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a70c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a710:	d81c      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a716:	d010      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a71c:	d816      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d01d      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a726:	d111      	bne.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3304      	adds	r3, #4
 800a72c:	2101      	movs	r1, #1
 800a72e:	4618      	mov	r0, r3
 800a730:	f001 fdf2 	bl	800c318 <RCCEx_PLL2_Config>
 800a734:	4603      	mov	r3, r0
 800a736:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a738:	e012      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3324      	adds	r3, #36	; 0x24
 800a73e:	2101      	movs	r1, #1
 800a740:	4618      	mov	r0, r3
 800a742:	f001 fe9b 	bl	800c47c <RCCEx_PLL3_Config>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a74a:	e009      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	75fb      	strb	r3, [r7, #23]
      break;
 800a750:	e006      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a752:	bf00      	nop
 800a754:	e004      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a756:	bf00      	nop
 800a758:	e002      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a75a:	bf00      	nop
 800a75c:	e000      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a75e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d109      	bne.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a766:	4b54      	ldr	r3, [pc, #336]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a76a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a772:	4951      	ldr	r1, [pc, #324]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a774:	4313      	orrs	r3, r2
 800a776:	650b      	str	r3, [r1, #80]	; 0x50
 800a778:	e001      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a786:	2b00      	cmp	r3, #0
 800a788:	d04b      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a794:	d02e      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a79a:	d828      	bhi.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a79c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a0:	d02a      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a6:	d822      	bhi.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a7a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7ac:	d026      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a7ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7b2:	d81c      	bhi.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a7b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b8:	d010      	beq.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a7ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7be:	d816      	bhi.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d01d      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a7c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7c8:	d111      	bne.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	2101      	movs	r1, #1
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 fda1 	bl	800c318 <RCCEx_PLL2_Config>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a7da:	e012      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3324      	adds	r3, #36	; 0x24
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 fe4a 	bl	800c47c <RCCEx_PLL3_Config>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a7ec:	e009      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7f2:	e006      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7f4:	bf00      	nop
 800a7f6:	e004      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7f8:	bf00      	nop
 800a7fa:	e002      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a7fc:	bf00      	nop
 800a7fe:	e000      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a800:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10a      	bne.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a808:	4b2b      	ldr	r3, [pc, #172]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a816:	4928      	ldr	r1, [pc, #160]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a818:	4313      	orrs	r3, r2
 800a81a:	658b      	str	r3, [r1, #88]	; 0x58
 800a81c:	e001      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d02f      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a836:	d00e      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a83c:	d814      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d015      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a846:	d10f      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a848:	4b1b      	ldr	r3, [pc, #108]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84c:	4a1a      	ldr	r2, [pc, #104]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a84e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a854:	e00c      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	3304      	adds	r3, #4
 800a85a:	2101      	movs	r1, #1
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 fd5b 	bl	800c318 <RCCEx_PLL2_Config>
 800a862:	4603      	mov	r3, r0
 800a864:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a866:	e003      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	75fb      	strb	r3, [r7, #23]
      break;
 800a86c:	e000      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a86e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a870:	7dfb      	ldrb	r3, [r7, #23]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d109      	bne.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a876:	4b10      	ldr	r3, [pc, #64]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a87a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a882:	490d      	ldr	r1, [pc, #52]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a884:	4313      	orrs	r3, r2
 800a886:	650b      	str	r3, [r1, #80]	; 0x50
 800a888:	e001      	b.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
 800a88c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d033      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d81c      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a8a2:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a8:	0800a8e3 	.word	0x0800a8e3
 800a8ac:	0800a8bd 	.word	0x0800a8bd
 800a8b0:	0800a8cb 	.word	0x0800a8cb
 800a8b4:	0800a8e3 	.word	0x0800a8e3
 800a8b8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8bc:	4bb8      	ldr	r3, [pc, #736]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	4ab7      	ldr	r2, [pc, #732]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a8c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a8c8:	e00c      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	2102      	movs	r1, #2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 fd21 	bl	800c318 <RCCEx_PLL2_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a8da:	e003      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e0:	e000      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a8e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8e4:	7dfb      	ldrb	r3, [r7, #23]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d109      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a8ea:	4bad      	ldr	r3, [pc, #692]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ee:	f023 0203 	bic.w	r2, r3, #3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f6:	49aa      	ldr	r1, [pc, #680]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a8fc:	e001      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fe:	7dfb      	ldrb	r3, [r7, #23]
 800a900:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 8086 	beq.w	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a910:	4ba4      	ldr	r3, [pc, #656]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4aa3      	ldr	r2, [pc, #652]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a91a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a91c:	f7f9 fe60 	bl	80045e0 <HAL_GetTick>
 800a920:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a922:	e009      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a924:	f7f9 fe5c 	bl	80045e0 <HAL_GetTick>
 800a928:	4602      	mov	r2, r0
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	2b64      	cmp	r3, #100	; 0x64
 800a930:	d902      	bls.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a932:	2303      	movs	r3, #3
 800a934:	75fb      	strb	r3, [r7, #23]
        break;
 800a936:	e005      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a938:	4b9a      	ldr	r3, [pc, #616]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a940:	2b00      	cmp	r3, #0
 800a942:	d0ef      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a944:	7dfb      	ldrb	r3, [r7, #23]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d166      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a94a:	4b95      	ldr	r3, [pc, #596]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a94c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a954:	4053      	eors	r3, r2
 800a956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d013      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a95e:	4b90      	ldr	r3, [pc, #576]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a966:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a968:	4b8d      	ldr	r3, [pc, #564]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a96c:	4a8c      	ldr	r2, [pc, #560]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a96e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a972:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a974:	4b8a      	ldr	r3, [pc, #552]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a978:	4a89      	ldr	r2, [pc, #548]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a97a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a97e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a980:	4a87      	ldr	r2, [pc, #540]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a98c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a990:	d115      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a992:	f7f9 fe25 	bl	80045e0 <HAL_GetTick>
 800a996:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a998:	e00b      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a99a:	f7f9 fe21 	bl	80045e0 <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d902      	bls.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	75fb      	strb	r3, [r7, #23]
            break;
 800a9b0:	e005      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9b2:	4b7b      	ldr	r3, [pc, #492]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0ed      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d126      	bne.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9d2:	d10d      	bne.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a9d4:	4b72      	ldr	r3, [pc, #456]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9e2:	0919      	lsrs	r1, r3, #4
 800a9e4:	4b70      	ldr	r3, [pc, #448]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a9e6:	400b      	ands	r3, r1
 800a9e8:	496d      	ldr	r1, [pc, #436]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	610b      	str	r3, [r1, #16]
 800a9ee:	e005      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a9f0:	4b6b      	ldr	r3, [pc, #428]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	4a6a      	ldr	r2, [pc, #424]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a9fa:	6113      	str	r3, [r2, #16]
 800a9fc:	4b68      	ldr	r3, [pc, #416]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa0a:	4965      	ldr	r1, [pc, #404]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	670b      	str	r3, [r1, #112]	; 0x70
 800aa10:	e004      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	75bb      	strb	r3, [r7, #22]
 800aa16:	e001      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa18:	7dfb      	ldrb	r3, [r7, #23]
 800aa1a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d07e      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa2c:	2b28      	cmp	r3, #40	; 0x28
 800aa2e:	d867      	bhi.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800aa30:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800ab07 	.word	0x0800ab07
 800aa3c:	0800ab01 	.word	0x0800ab01
 800aa40:	0800ab01 	.word	0x0800ab01
 800aa44:	0800ab01 	.word	0x0800ab01
 800aa48:	0800ab01 	.word	0x0800ab01
 800aa4c:	0800ab01 	.word	0x0800ab01
 800aa50:	0800ab01 	.word	0x0800ab01
 800aa54:	0800ab01 	.word	0x0800ab01
 800aa58:	0800aadd 	.word	0x0800aadd
 800aa5c:	0800ab01 	.word	0x0800ab01
 800aa60:	0800ab01 	.word	0x0800ab01
 800aa64:	0800ab01 	.word	0x0800ab01
 800aa68:	0800ab01 	.word	0x0800ab01
 800aa6c:	0800ab01 	.word	0x0800ab01
 800aa70:	0800ab01 	.word	0x0800ab01
 800aa74:	0800ab01 	.word	0x0800ab01
 800aa78:	0800aaef 	.word	0x0800aaef
 800aa7c:	0800ab01 	.word	0x0800ab01
 800aa80:	0800ab01 	.word	0x0800ab01
 800aa84:	0800ab01 	.word	0x0800ab01
 800aa88:	0800ab01 	.word	0x0800ab01
 800aa8c:	0800ab01 	.word	0x0800ab01
 800aa90:	0800ab01 	.word	0x0800ab01
 800aa94:	0800ab01 	.word	0x0800ab01
 800aa98:	0800ab07 	.word	0x0800ab07
 800aa9c:	0800ab01 	.word	0x0800ab01
 800aaa0:	0800ab01 	.word	0x0800ab01
 800aaa4:	0800ab01 	.word	0x0800ab01
 800aaa8:	0800ab01 	.word	0x0800ab01
 800aaac:	0800ab01 	.word	0x0800ab01
 800aab0:	0800ab01 	.word	0x0800ab01
 800aab4:	0800ab01 	.word	0x0800ab01
 800aab8:	0800ab07 	.word	0x0800ab07
 800aabc:	0800ab01 	.word	0x0800ab01
 800aac0:	0800ab01 	.word	0x0800ab01
 800aac4:	0800ab01 	.word	0x0800ab01
 800aac8:	0800ab01 	.word	0x0800ab01
 800aacc:	0800ab01 	.word	0x0800ab01
 800aad0:	0800ab01 	.word	0x0800ab01
 800aad4:	0800ab01 	.word	0x0800ab01
 800aad8:	0800ab07 	.word	0x0800ab07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3304      	adds	r3, #4
 800aae0:	2101      	movs	r1, #1
 800aae2:	4618      	mov	r0, r3
 800aae4:	f001 fc18 	bl	800c318 <RCCEx_PLL2_Config>
 800aae8:	4603      	mov	r3, r0
 800aaea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aaec:	e00c      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	3324      	adds	r3, #36	; 0x24
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f001 fcc1 	bl	800c47c <RCCEx_PLL3_Config>
 800aafa:	4603      	mov	r3, r0
 800aafc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aafe:	e003      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	75fb      	strb	r3, [r7, #23]
      break;
 800ab04:	e000      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800ab06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d109      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ab0e:	4b24      	ldr	r3, [pc, #144]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab1a:	4921      	ldr	r1, [pc, #132]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	654b      	str	r3, [r1, #84]	; 0x54
 800ab20:	e001      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0302 	and.w	r3, r3, #2
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d03e      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab36:	2b05      	cmp	r3, #5
 800ab38:	d820      	bhi.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800ab3a:	a201      	add	r2, pc, #4	; (adr r2, 800ab40 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800ab3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab40:	0800ab83 	.word	0x0800ab83
 800ab44:	0800ab59 	.word	0x0800ab59
 800ab48:	0800ab6b 	.word	0x0800ab6b
 800ab4c:	0800ab83 	.word	0x0800ab83
 800ab50:	0800ab83 	.word	0x0800ab83
 800ab54:	0800ab83 	.word	0x0800ab83
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 fbda 	bl	800c318 <RCCEx_PLL2_Config>
 800ab64:	4603      	mov	r3, r0
 800ab66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ab68:	e00c      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	3324      	adds	r3, #36	; 0x24
 800ab6e:	2101      	movs	r1, #1
 800ab70:	4618      	mov	r0, r3
 800ab72:	f001 fc83 	bl	800c47c <RCCEx_PLL3_Config>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ab7a:	e003      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab80:	e000      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800ab82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d110      	bne.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8e:	f023 0207 	bic.w	r2, r3, #7
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab96:	4902      	ldr	r1, [pc, #8]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	654b      	str	r3, [r1, #84]	; 0x54
 800ab9c:	e008      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800ab9e:	bf00      	nop
 800aba0:	58024400 	.word	0x58024400
 800aba4:	58024800 	.word	0x58024800
 800aba8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abac:	7dfb      	ldrb	r3, [r7, #23]
 800abae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0304 	and.w	r3, r3, #4
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d039      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc2:	2b05      	cmp	r3, #5
 800abc4:	d820      	bhi.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800abc6:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800abc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abcc:	0800ac0f 	.word	0x0800ac0f
 800abd0:	0800abe5 	.word	0x0800abe5
 800abd4:	0800abf7 	.word	0x0800abf7
 800abd8:	0800ac0f 	.word	0x0800ac0f
 800abdc:	0800ac0f 	.word	0x0800ac0f
 800abe0:	0800ac0f 	.word	0x0800ac0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	3304      	adds	r3, #4
 800abe8:	2101      	movs	r1, #1
 800abea:	4618      	mov	r0, r3
 800abec:	f001 fb94 	bl	800c318 <RCCEx_PLL2_Config>
 800abf0:	4603      	mov	r3, r0
 800abf2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800abf4:	e00c      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	3324      	adds	r3, #36	; 0x24
 800abfa:	2101      	movs	r1, #1
 800abfc:	4618      	mov	r0, r3
 800abfe:	f001 fc3d 	bl	800c47c <RCCEx_PLL3_Config>
 800ac02:	4603      	mov	r3, r0
 800ac04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ac06:	e003      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac0c:	e000      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800ac0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10a      	bne.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ac16:	4bb7      	ldr	r3, [pc, #732]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac1a:	f023 0207 	bic.w	r2, r3, #7
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac24:	49b3      	ldr	r1, [pc, #716]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	658b      	str	r3, [r1, #88]	; 0x58
 800ac2a:	e001      	b.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0320 	and.w	r3, r3, #32
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d04b      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac46:	d02e      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800ac48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac4c:	d828      	bhi.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac52:	d02a      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800ac54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac58:	d822      	bhi.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac5e:	d026      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800ac60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac64:	d81c      	bhi.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac6a:	d010      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800ac6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac70:	d816      	bhi.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d01d      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800ac76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac7a:	d111      	bne.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	2100      	movs	r1, #0
 800ac82:	4618      	mov	r0, r3
 800ac84:	f001 fb48 	bl	800c318 <RCCEx_PLL2_Config>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ac8c:	e012      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3324      	adds	r3, #36	; 0x24
 800ac92:	2102      	movs	r1, #2
 800ac94:	4618      	mov	r0, r3
 800ac96:	f001 fbf1 	bl	800c47c <RCCEx_PLL3_Config>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ac9e:	e009      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	75fb      	strb	r3, [r7, #23]
      break;
 800aca4:	e006      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aca6:	bf00      	nop
 800aca8:	e004      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800acaa:	bf00      	nop
 800acac:	e002      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800acae:	bf00      	nop
 800acb0:	e000      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800acb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acb4:	7dfb      	ldrb	r3, [r7, #23]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10a      	bne.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800acba:	4b8e      	ldr	r3, [pc, #568]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800acbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acc8:	498a      	ldr	r1, [pc, #552]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800acca:	4313      	orrs	r3, r2
 800accc:	654b      	str	r3, [r1, #84]	; 0x54
 800acce:	e001      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd0:	7dfb      	ldrb	r3, [r7, #23]
 800acd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d04b      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ace6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800acea:	d02e      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800acec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800acf0:	d828      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800acf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acf6:	d02a      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800acf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acfc:	d822      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800acfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad02:	d026      	beq.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800ad04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad08:	d81c      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad0e:	d010      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800ad10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad14:	d816      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d01d      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800ad1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad1e:	d111      	bne.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	3304      	adds	r3, #4
 800ad24:	2100      	movs	r1, #0
 800ad26:	4618      	mov	r0, r3
 800ad28:	f001 faf6 	bl	800c318 <RCCEx_PLL2_Config>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ad30:	e012      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3324      	adds	r3, #36	; 0x24
 800ad36:	2102      	movs	r1, #2
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f001 fb9f 	bl	800c47c <RCCEx_PLL3_Config>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ad42:	e009      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	75fb      	strb	r3, [r7, #23]
      break;
 800ad48:	e006      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad4a:	bf00      	nop
 800ad4c:	e004      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad4e:	bf00      	nop
 800ad50:	e002      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad52:	bf00      	nop
 800ad54:	e000      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ad56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad5e:	4b65      	ldr	r3, [pc, #404]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad6c:	4961      	ldr	r1, [pc, #388]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	658b      	str	r3, [r1, #88]	; 0x58
 800ad72:	e001      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d04b      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ad8e:	d02e      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800ad90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ad94:	d828      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ad96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad9a:	d02a      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800ad9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ada0:	d822      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ada2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ada6:	d026      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ada8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800adac:	d81c      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800adae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adb2:	d010      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800adb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adb8:	d816      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d01d      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800adbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adc2:	d111      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	3304      	adds	r3, #4
 800adc8:	2100      	movs	r1, #0
 800adca:	4618      	mov	r0, r3
 800adcc:	f001 faa4 	bl	800c318 <RCCEx_PLL2_Config>
 800add0:	4603      	mov	r3, r0
 800add2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800add4:	e012      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3324      	adds	r3, #36	; 0x24
 800adda:	2102      	movs	r1, #2
 800addc:	4618      	mov	r0, r3
 800adde:	f001 fb4d 	bl	800c47c <RCCEx_PLL3_Config>
 800ade2:	4603      	mov	r3, r0
 800ade4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ade6:	e009      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	75fb      	strb	r3, [r7, #23]
      break;
 800adec:	e006      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adee:	bf00      	nop
 800adf0:	e004      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adf2:	bf00      	nop
 800adf4:	e002      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adf6:	bf00      	nop
 800adf8:	e000      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800adfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10a      	bne.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ae02:	4b3c      	ldr	r3, [pc, #240]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae10:	4938      	ldr	r1, [pc, #224]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae12:	4313      	orrs	r3, r2
 800ae14:	658b      	str	r3, [r1, #88]	; 0x58
 800ae16:	e001      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae18:	7dfb      	ldrb	r3, [r7, #23]
 800ae1a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0308 	and.w	r3, r3, #8
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01a      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae32:	d10a      	bne.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3324      	adds	r3, #36	; 0x24
 800ae38:	2102      	movs	r1, #2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 fb1e 	bl	800c47c <RCCEx_PLL3_Config>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ae4a:	4b2a      	ldr	r3, [pc, #168]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae58:	4926      	ldr	r1, [pc, #152]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0310 	and.w	r3, r3, #16
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d01a      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae74:	d10a      	bne.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3324      	adds	r3, #36	; 0x24
 800ae7a:	2102      	movs	r1, #2
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f001 fafd 	bl	800c47c <RCCEx_PLL3_Config>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ae8c:	4b19      	ldr	r3, [pc, #100]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae9a:	4916      	ldr	r1, [pc, #88]	; (800aef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d036      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aeb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeb6:	d01f      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800aeb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aebc:	d817      	bhi.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800aec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec6:	d009      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800aec8:	e011      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3304      	adds	r3, #4
 800aece:	2100      	movs	r1, #0
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 fa21 	bl	800c318 <RCCEx_PLL2_Config>
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aeda:	e00e      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3324      	adds	r3, #36	; 0x24
 800aee0:	2102      	movs	r1, #2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 faca 	bl	800c47c <RCCEx_PLL3_Config>
 800aee8:	4603      	mov	r3, r0
 800aeea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aeec:	e005      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	75fb      	strb	r3, [r7, #23]
      break;
 800aef2:	e002      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800aef4:	58024400 	.word	0x58024400
      break;
 800aef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10a      	bne.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af00:	4b93      	ldr	r3, [pc, #588]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af0e:	4990      	ldr	r1, [pc, #576]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af10:	4313      	orrs	r3, r2
 800af12:	658b      	str	r3, [r1, #88]	; 0x58
 800af14:	e001      	b.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af22:	2b00      	cmp	r3, #0
 800af24:	d033      	beq.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af30:	d01c      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800af32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af36:	d816      	bhi.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800af38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af3c:	d003      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800af3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af42:	d007      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800af44:	e00f      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af46:	4b82      	ldr	r3, [pc, #520]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4a:	4a81      	ldr	r2, [pc, #516]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800af52:	e00c      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	3324      	adds	r3, #36	; 0x24
 800af58:	2101      	movs	r1, #1
 800af5a:	4618      	mov	r0, r3
 800af5c:	f001 fa8e 	bl	800c47c <RCCEx_PLL3_Config>
 800af60:	4603      	mov	r3, r0
 800af62:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800af64:	e003      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	75fb      	strb	r3, [r7, #23]
      break;
 800af6a:	e000      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800af6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800af74:	4b76      	ldr	r3, [pc, #472]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af82:	4973      	ldr	r1, [pc, #460]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af84:	4313      	orrs	r3, r2
 800af86:	654b      	str	r3, [r1, #84]	; 0x54
 800af88:	e001      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af8a:	7dfb      	ldrb	r3, [r7, #23]
 800af8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d029      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800afa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa6:	d007      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800afa8:	e00f      	b.n	800afca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afaa:	4b69      	ldr	r3, [pc, #420]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afae:	4a68      	ldr	r2, [pc, #416]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800afb6:	e00b      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3304      	adds	r3, #4
 800afbc:	2102      	movs	r1, #2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f001 f9aa 	bl	800c318 <RCCEx_PLL2_Config>
 800afc4:	4603      	mov	r3, r0
 800afc6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800afc8:	e002      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	75fb      	strb	r3, [r7, #23]
      break;
 800afce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d109      	bne.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800afd6:	4b5e      	ldr	r3, [pc, #376]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe2:	495b      	ldr	r1, [pc, #364]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800afe8:	e001      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3324      	adds	r3, #36	; 0x24
 800affe:	2102      	movs	r1, #2
 800b000:	4618      	mov	r0, r3
 800b002:	f001 fa3b 	bl	800c47c <RCCEx_PLL3_Config>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d030      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b024:	d017      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b02a:	d811      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b030:	d013      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b036:	d80b      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d010      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b03c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b040:	d106      	bne.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b042:	4b43      	ldr	r3, [pc, #268]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b046:	4a42      	ldr	r2, [pc, #264]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b04c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b04e:	e007      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	75fb      	strb	r3, [r7, #23]
      break;
 800b054:	e004      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b056:	bf00      	nop
 800b058:	e002      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b05a:	bf00      	nop
 800b05c:	e000      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b05e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b060:	7dfb      	ldrb	r3, [r7, #23]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d109      	bne.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b066:	4b3a      	ldr	r3, [pc, #232]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b072:	4937      	ldr	r1, [pc, #220]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b074:	4313      	orrs	r3, r2
 800b076:	654b      	str	r3, [r1, #84]	; 0x54
 800b078:	e001      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d008      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b08a:	4b31      	ldr	r3, [pc, #196]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b096:	492e      	ldr	r1, [pc, #184]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b098:	4313      	orrs	r3, r2
 800b09a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d009      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b0a8:	4b29      	ldr	r3, [pc, #164]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b0b6:	4926      	ldr	r1, [pc, #152]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d008      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b0c8:	4b21      	ldr	r3, [pc, #132]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0d4:	491e      	ldr	r1, [pc, #120]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00d      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b0e6:	4b1a      	ldr	r3, [pc, #104]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	4a19      	ldr	r2, [pc, #100]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b0f0:	6113      	str	r3, [r2, #16]
 800b0f2:	4b17      	ldr	r3, [pc, #92]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0f4:	691a      	ldr	r2, [r3, #16]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b0fc:	4914      	ldr	r1, [pc, #80]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	da08      	bge.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b10a:	4b11      	ldr	r3, [pc, #68]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b10e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b116:	490e      	ldr	r1, [pc, #56]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b118:	4313      	orrs	r3, r2
 800b11a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d009      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b128:	4b09      	ldr	r3, [pc, #36]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b136:	4906      	ldr	r1, [pc, #24]	; (800b150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b13c:	7dbb      	ldrb	r3, [r7, #22]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	e000      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	58024400 	.word	0x58024400

0800b154 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b090      	sub	sp, #64	; 0x40
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b162:	f040 8095 	bne.w	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b166:	4bae      	ldr	r3, [pc, #696]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b16a:	f003 0307 	and.w	r3, r3, #7
 800b16e:	633b      	str	r3, [r7, #48]	; 0x30
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	2b04      	cmp	r3, #4
 800b174:	f200 8088 	bhi.w	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b178:	a201      	add	r2, pc, #4	; (adr r2, 800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17e:	bf00      	nop
 800b180:	0800b195 	.word	0x0800b195
 800b184:	0800b1bd 	.word	0x0800b1bd
 800b188:	0800b1e5 	.word	0x0800b1e5
 800b18c:	0800b281 	.word	0x0800b281
 800b190:	0800b20d 	.word	0x0800b20d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b194:	4ba2      	ldr	r3, [pc, #648]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b19c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1a0:	d108      	bne.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 ff64 	bl	800c074 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b1b0:	f000 bc95 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1b8:	f000 bc91 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1bc:	4b98      	ldr	r3, [pc, #608]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1c8:	d108      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ca:	f107 0318 	add.w	r3, r7, #24
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fca8 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b1d8:	f000 bc81 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1e0:	f000 bc7d 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1e4:	4b8e      	ldr	r3, [pc, #568]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1f0:	d108      	bne.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1f2:	f107 030c 	add.w	r3, r7, #12
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 fde8 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b200:	f000 bc6d 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b208:	f000 bc69 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b20c:	4b84      	ldr	r3, [pc, #528]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b20e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b214:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b216:	4b82      	ldr	r3, [pc, #520]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0304 	and.w	r3, r3, #4
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d10c      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b224:	2b00      	cmp	r3, #0
 800b226:	d109      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b228:	4b7d      	ldr	r3, [pc, #500]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	08db      	lsrs	r3, r3, #3
 800b22e:	f003 0303 	and.w	r3, r3, #3
 800b232:	4a7c      	ldr	r2, [pc, #496]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b234:	fa22 f303 	lsr.w	r3, r2, r3
 800b238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b23a:	e01f      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b23c:	4b78      	ldr	r3, [pc, #480]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b248:	d106      	bne.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b250:	d102      	bne.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b252:	4b75      	ldr	r3, [pc, #468]	; (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b254:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b256:	e011      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b258:	4b71      	ldr	r3, [pc, #452]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b264:	d106      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b26c:	d102      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b26e:	4b6f      	ldr	r3, [pc, #444]	; (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b270:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b272:	e003      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b278:	f000 bc31 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b27c:	f000 bc2f 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b280:	4b6b      	ldr	r3, [pc, #428]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b284:	f000 bc2b 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b28c:	f000 bc27 	b.w	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b296:	f040 8095 	bne.w	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b29a:	4b61      	ldr	r3, [pc, #388]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b29e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b2a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2aa:	d04d      	beq.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2b2:	f200 8084 	bhi.w	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	2bc0      	cmp	r3, #192	; 0xc0
 800b2ba:	d07d      	beq.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	2bc0      	cmp	r3, #192	; 0xc0
 800b2c0:	d87d      	bhi.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c4:	2b80      	cmp	r3, #128	; 0x80
 800b2c6:	d02d      	beq.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	2b80      	cmp	r3, #128	; 0x80
 800b2cc:	d877      	bhi.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	2b40      	cmp	r3, #64	; 0x40
 800b2d8:	d012      	beq.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b2da:	e070      	b.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2dc:	4b50      	ldr	r3, [pc, #320]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2e8:	d107      	bne.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 fec0 	bl	800c074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2f8:	e3f1      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2fe:	e3ee      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b300:	4b47      	ldr	r3, [pc, #284]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b30c:	d107      	bne.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b30e:	f107 0318 	add.w	r3, r7, #24
 800b312:	4618      	mov	r0, r3
 800b314:	f000 fc06 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b31c:	e3df      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b31e:	2300      	movs	r3, #0
 800b320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b322:	e3dc      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b324:	4b3e      	ldr	r3, [pc, #248]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b32c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b330:	d107      	bne.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b332:	f107 030c 	add.w	r3, r7, #12
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fd48 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b340:	e3cd      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b346:	e3ca      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b348:	4b35      	ldr	r3, [pc, #212]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b34a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b350:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b352:	4b33      	ldr	r3, [pc, #204]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 0304 	and.w	r3, r3, #4
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	d10c      	bne.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b360:	2b00      	cmp	r3, #0
 800b362:	d109      	bne.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b364:	4b2e      	ldr	r3, [pc, #184]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	08db      	lsrs	r3, r3, #3
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	4a2d      	ldr	r2, [pc, #180]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b370:	fa22 f303 	lsr.w	r3, r2, r3
 800b374:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b376:	e01e      	b.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b378:	4b29      	ldr	r3, [pc, #164]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b384:	d106      	bne.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b38c:	d102      	bne.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b38e:	4b26      	ldr	r3, [pc, #152]	; (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b390:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b392:	e010      	b.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b394:	4b22      	ldr	r3, [pc, #136]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b39c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3a0:	d106      	bne.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a8:	d102      	bne.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b3aa:	4b20      	ldr	r3, [pc, #128]	; (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ae:	e002      	b.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b3b4:	e393      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b3b6:	e392      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b3b8:	4b1d      	ldr	r3, [pc, #116]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3bc:	e38f      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3c2:	e38c      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3ca:	f040 80a7 	bne.w	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b3ce:	4b14      	ldr	r3, [pc, #80]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b3d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3de:	d05f      	beq.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3e6:	f200 8096 	bhi.w	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b3f0:	f000 808e 	beq.w	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b3fa:	f200 808c 	bhi.w	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b404:	d03a      	beq.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b40c:	f200 8083 	bhi.w	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00e      	beq.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b41c:	d01c      	beq.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800b41e:	e07a      	b.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b420:	58024400 	.word	0x58024400
 800b424:	03d09000 	.word	0x03d09000
 800b428:	003d0900 	.word	0x003d0900
 800b42c:	02dc6c00 	.word	0x02dc6c00
 800b430:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b434:	4baa      	ldr	r3, [pc, #680]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b43c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b440:	d107      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b446:	4618      	mov	r0, r3
 800b448:	f000 fe14 	bl	800c074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b450:	e345      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b456:	e342      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b458:	4ba1      	ldr	r3, [pc, #644]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b464:	d107      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b466:	f107 0318 	add.w	r3, r7, #24
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 fb5a 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b474:	e333      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b47a:	e330      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b47c:	4b98      	ldr	r3, [pc, #608]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b488:	d107      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b48a:	f107 030c 	add.w	r3, r7, #12
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 fc9c 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b498:	e321      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b49e:	e31e      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b4a0:	4b8f      	ldr	r3, [pc, #572]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b4a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4a8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4aa:	4b8d      	ldr	r3, [pc, #564]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 0304 	and.w	r3, r3, #4
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	d10c      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800b4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d109      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4bc:	4b88      	ldr	r3, [pc, #544]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	08db      	lsrs	r3, r3, #3
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	4a87      	ldr	r2, [pc, #540]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ce:	e01e      	b.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4d0:	4b83      	ldr	r3, [pc, #524]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4dc:	d106      	bne.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800b4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4e4:	d102      	bne.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b4e6:	4b80      	ldr	r3, [pc, #512]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ea:	e010      	b.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4ec:	4b7c      	ldr	r3, [pc, #496]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4f8:	d106      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800b4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b500:	d102      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b502:	4b7a      	ldr	r3, [pc, #488]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b504:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b506:	e002      	b.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b50c:	e2e7      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b50e:	e2e6      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b510:	4b77      	ldr	r3, [pc, #476]	; (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b514:	e2e3      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b51a:	e2e0      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b522:	f040 809c 	bne.w	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b526:	4b6e      	ldr	r3, [pc, #440]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b52e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b536:	d054      	beq.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b53e:	f200 808b 	bhi.w	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b548:	f000 8083 	beq.w	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b552:	f200 8081 	bhi.w	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b55c:	d02f      	beq.n	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b564:	d878      	bhi.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d004      	beq.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b572:	d012      	beq.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b574:	e070      	b.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b576:	4b5a      	ldr	r3, [pc, #360]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b582:	d107      	bne.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fd73 	bl	800c074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b590:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b592:	e2a4      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b594:	2300      	movs	r3, #0
 800b596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b598:	e2a1      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b59a:	4b51      	ldr	r3, [pc, #324]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5a6:	d107      	bne.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5a8:	f107 0318 	add.w	r3, r7, #24
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 fab9 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b5b6:	e292      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5bc:	e28f      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5be:	4b48      	ldr	r3, [pc, #288]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ca:	d107      	bne.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5cc:	f107 030c 	add.w	r3, r7, #12
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 fbfb 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5da:	e280      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5e0:	e27d      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5e2:	4b3f      	ldr	r3, [pc, #252]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5ea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5ec:	4b3c      	ldr	r3, [pc, #240]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0304 	and.w	r3, r3, #4
 800b5f4:	2b04      	cmp	r3, #4
 800b5f6:	d10c      	bne.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d109      	bne.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b5fe:	4b38      	ldr	r3, [pc, #224]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	08db      	lsrs	r3, r3, #3
 800b604:	f003 0303 	and.w	r3, r3, #3
 800b608:	4a36      	ldr	r2, [pc, #216]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b60a:	fa22 f303 	lsr.w	r3, r2, r3
 800b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b610:	e01e      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b612:	4b33      	ldr	r3, [pc, #204]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b61e:	d106      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b626:	d102      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b628:	4b2f      	ldr	r3, [pc, #188]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b62c:	e010      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b62e:	4b2c      	ldr	r3, [pc, #176]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b63a:	d106      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b642:	d102      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b644:	4b29      	ldr	r3, [pc, #164]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b648:	e002      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b64e:	e246      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b650:	e245      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b652:	4b27      	ldr	r3, [pc, #156]	; (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b656:	e242      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b65c:	e23f      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b664:	f040 80a8 	bne.w	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b668:	4b1d      	ldr	r3, [pc, #116]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b670:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b678:	d060      	beq.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b680:	f200 8097 	bhi.w	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b68a:	f000 808f 	beq.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b690:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b694:	f200 808d 	bhi.w	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b69e:	d03b      	beq.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6a6:	f200 8084 	bhi.w	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d004      	beq.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b6:	d01d      	beq.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800b6b8:	e07b      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6ba:	4b09      	ldr	r3, [pc, #36]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6c6:	d107      	bne.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 fcd1 	bl	800c074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b6d6:	e202      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6dc:	e1ff      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6de:	bf00      	nop
 800b6e0:	58024400 	.word	0x58024400
 800b6e4:	03d09000 	.word	0x03d09000
 800b6e8:	003d0900 	.word	0x003d0900
 800b6ec:	02dc6c00 	.word	0x02dc6c00
 800b6f0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6f4:	4ba3      	ldr	r3, [pc, #652]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b700:	d107      	bne.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b702:	f107 0318 	add.w	r3, r7, #24
 800b706:	4618      	mov	r0, r3
 800b708:	f000 fa0c 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b710:	e1e5      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b716:	e1e2      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b718:	4b9a      	ldr	r3, [pc, #616]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b724:	d107      	bne.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b726:	f107 030c 	add.w	r3, r7, #12
 800b72a:	4618      	mov	r0, r3
 800b72c:	f000 fb4e 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b734:	e1d3      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b736:	2300      	movs	r3, #0
 800b738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b73a:	e1d0      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b73c:	4b91      	ldr	r3, [pc, #580]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b73e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b744:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b746:	4b8f      	ldr	r3, [pc, #572]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 0304 	and.w	r3, r3, #4
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d10c      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	2b00      	cmp	r3, #0
 800b756:	d109      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b758:	4b8a      	ldr	r3, [pc, #552]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	08db      	lsrs	r3, r3, #3
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	4a89      	ldr	r2, [pc, #548]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b764:	fa22 f303 	lsr.w	r3, r2, r3
 800b768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b76a:	e01e      	b.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b76c:	4b85      	ldr	r3, [pc, #532]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b778:	d106      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b780:	d102      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b782:	4b82      	ldr	r3, [pc, #520]	; (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b784:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b786:	e010      	b.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b788:	4b7e      	ldr	r3, [pc, #504]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b794:	d106      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b79c:	d102      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b79e:	4b7c      	ldr	r3, [pc, #496]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7a2:	e002      	b.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b7a8:	e199      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7aa:	e198      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b7ac:	4b79      	ldr	r3, [pc, #484]	; (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7b0:	e195      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7b6:	e192      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b7be:	d173      	bne.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b7c0:	4b70      	ldr	r3, [pc, #448]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b7c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b7c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7d0:	d02f      	beq.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7d8:	d863      	bhi.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d004      	beq.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e6:	d012      	beq.n	800b80e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800b7e8:	e05b      	b.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7ea:	4b66      	ldr	r3, [pc, #408]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7f6:	d107      	bne.n	800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7f8:	f107 0318 	add.w	r3, r7, #24
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 f991 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b806:	e16a      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b80c:	e167      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b80e:	4b5d      	ldr	r3, [pc, #372]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b81a:	d107      	bne.n	800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b81c:	f107 030c 	add.w	r3, r7, #12
 800b820:	4618      	mov	r0, r3
 800b822:	f000 fad3 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b82a:	e158      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b830:	e155      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b832:	4b54      	ldr	r3, [pc, #336]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b83a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b83c:	4b51      	ldr	r3, [pc, #324]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0304 	and.w	r3, r3, #4
 800b844:	2b04      	cmp	r3, #4
 800b846:	d10c      	bne.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d109      	bne.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b84e:	4b4d      	ldr	r3, [pc, #308]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	08db      	lsrs	r3, r3, #3
 800b854:	f003 0303 	and.w	r3, r3, #3
 800b858:	4a4b      	ldr	r2, [pc, #300]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b85a:	fa22 f303 	lsr.w	r3, r2, r3
 800b85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b860:	e01e      	b.n	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b862:	4b48      	ldr	r3, [pc, #288]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b86e:	d106      	bne.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b876:	d102      	bne.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b878:	4b44      	ldr	r3, [pc, #272]	; (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b87c:	e010      	b.n	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b87e:	4b41      	ldr	r3, [pc, #260]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b88a:	d106      	bne.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b892:	d102      	bne.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b894:	4b3e      	ldr	r3, [pc, #248]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b898:	e002      	b.n	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b89e:	e11e      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b8a0:	e11d      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8a6:	e11a      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8ae:	d133      	bne.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b8b0:	4b34      	ldr	r3, [pc, #208]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8c6:	d012      	beq.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b8c8:	e023      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8ca:	4b2e      	ldr	r3, [pc, #184]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8d6:	d107      	bne.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 fbc9 	bl	800c074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b8e6:	e0fa      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8ec:	e0f7      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8ee:	4b25      	ldr	r3, [pc, #148]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8fa:	d107      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8fc:	f107 0318 	add.w	r3, r7, #24
 800b900:	4618      	mov	r0, r3
 800b902:	f000 f90f 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b906:	6a3b      	ldr	r3, [r7, #32]
 800b908:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b90a:	e0e8      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b910:	e0e5      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b916:	e0e2      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b91e:	f040 808f 	bne.w	800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b922:	4b18      	ldr	r3, [pc, #96]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b926:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b92a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b932:	d075      	beq.n	800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b93a:	d87e      	bhi.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b942:	d060      	beq.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b94a:	d876      	bhi.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b952:	d045      	beq.n	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b95a:	d86e      	bhi.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b962:	d02b      	beq.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b96a:	d866      	bhi.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d004      	beq.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b978:	d00e      	beq.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b97a:	e05e      	b.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b97c:	f000 f8bc 	bl	800baf8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b980:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b982:	e0ac      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b984:	58024400 	.word	0x58024400
 800b988:	03d09000 	.word	0x03d09000
 800b98c:	003d0900 	.word	0x003d0900
 800b990:	02dc6c00 	.word	0x02dc6c00
 800b994:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b998:	4b53      	ldr	r3, [pc, #332]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9a4:	d107      	bne.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9a6:	f107 0318 	add.w	r3, r7, #24
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 f8ba 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b9b4:	e093      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9ba:	e090      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9bc:	4b4a      	ldr	r3, [pc, #296]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9c8:	d107      	bne.n	800b9da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9ca:	f107 030c 	add.w	r3, r7, #12
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 f9fc 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b9d8:	e081      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9de:	e07e      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9e0:	4b41      	ldr	r3, [pc, #260]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f003 0304 	and.w	r3, r3, #4
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	d109      	bne.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9ec:	4b3e      	ldr	r3, [pc, #248]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	08db      	lsrs	r3, r3, #3
 800b9f2:	f003 0303 	and.w	r3, r3, #3
 800b9f6:	4a3d      	ldr	r2, [pc, #244]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b9fe:	e06e      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba04:	e06b      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba06:	4b38      	ldr	r3, [pc, #224]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba12:	d102      	bne.n	800ba1a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800ba14:	4b36      	ldr	r3, [pc, #216]	; (800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ba16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba18:	e061      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba1e:	e05e      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba20:	4b31      	ldr	r3, [pc, #196]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba2c:	d102      	bne.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800ba2e:	4b31      	ldr	r3, [pc, #196]	; (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ba30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba32:	e054      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba38:	e051      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba3e:	e04e      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba46:	d148      	bne.n	800bada <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ba48:	4b27      	ldr	r3, [pc, #156]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba58:	d02a      	beq.n	800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba60:	d838      	bhi.n	800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba6e:	d00d      	beq.n	800ba8c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ba70:	e030      	b.n	800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba72:	4b1d      	ldr	r3, [pc, #116]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba7e:	d102      	bne.n	800ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800ba80:	4b1c      	ldr	r3, [pc, #112]	; (800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba84:	e02b      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba8a:	e028      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba8c:	4b16      	ldr	r3, [pc, #88]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba98:	d107      	bne.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 fae8 	bl	800c074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800baa8:	e019      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800baae:	e016      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bab0:	4b0d      	ldr	r3, [pc, #52]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800babc:	d107      	bne.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800babe:	f107 0318 	add.w	r3, r7, #24
 800bac2:	4618      	mov	r0, r3
 800bac4:	f000 f82e 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bacc:	e007      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bad2:	e004      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800bad4:	2300      	movs	r3, #0
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bad8:	e001      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800bada:	2300      	movs	r3, #0
 800badc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800bade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3740      	adds	r7, #64	; 0x40
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	58024400 	.word	0x58024400
 800baec:	03d09000 	.word	0x03d09000
 800baf0:	003d0900 	.word	0x003d0900
 800baf4:	02dc6c00 	.word	0x02dc6c00

0800baf8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bafc:	f7fe fb8e 	bl	800a21c <HAL_RCC_GetHCLKFreq>
 800bb00:	4602      	mov	r2, r0
 800bb02:	4b06      	ldr	r3, [pc, #24]	; (800bb1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	091b      	lsrs	r3, r3, #4
 800bb08:	f003 0307 	and.w	r3, r3, #7
 800bb0c:	4904      	ldr	r1, [pc, #16]	; (800bb20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb0e:	5ccb      	ldrb	r3, [r1, r3]
 800bb10:	f003 031f 	and.w	r3, r3, #31
 800bb14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	58024400 	.word	0x58024400
 800bb20:	08011eb0 	.word	0x08011eb0

0800bb24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b089      	sub	sp, #36	; 0x24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb2c:	4ba1      	ldr	r3, [pc, #644]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb30:	f003 0303 	and.w	r3, r3, #3
 800bb34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bb36:	4b9f      	ldr	r3, [pc, #636]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3a:	0b1b      	lsrs	r3, r3, #12
 800bb3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb42:	4b9c      	ldr	r3, [pc, #624]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb46:	091b      	lsrs	r3, r3, #4
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bb4e:	4b99      	ldr	r3, [pc, #612]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb52:	08db      	lsrs	r3, r3, #3
 800bb54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	fb02 f303 	mul.w	r3, r2, r3
 800bb5e:	ee07 3a90 	vmov	s15, r3
 800bb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f000 8111 	beq.w	800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	f000 8083 	beq.w	800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	f200 80a1 	bhi.w	800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d003      	beq.n	800bb90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d056      	beq.n	800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bb8e:	e099      	b.n	800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb90:	4b88      	ldr	r3, [pc, #544]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0320 	and.w	r3, r3, #32
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d02d      	beq.n	800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb9c:	4b85      	ldr	r3, [pc, #532]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	08db      	lsrs	r3, r3, #3
 800bba2:	f003 0303 	and.w	r3, r3, #3
 800bba6:	4a84      	ldr	r2, [pc, #528]	; (800bdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bba8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	ee07 3a90 	vmov	s15, r3
 800bbb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc6:	4b7b      	ldr	r3, [pc, #492]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbce:	ee07 3a90 	vmov	s15, r3
 800bbd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbda:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bdbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bbf6:	e087      	b.n	800bd08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc0a:	4b6a      	ldr	r3, [pc, #424]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc12:	ee07 3a90 	vmov	s15, r3
 800bc16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bdbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc3a:	e065      	b.n	800bd08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc4e:	4b59      	ldr	r3, [pc, #356]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc56:	ee07 3a90 	vmov	s15, r3
 800bc5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc62:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bdbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc7e:	e043      	b.n	800bd08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	ee07 3a90 	vmov	s15, r3
 800bc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bdc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bc8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc92:	4b48      	ldr	r3, [pc, #288]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc9a:	ee07 3a90 	vmov	s15, r3
 800bc9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bca6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bdbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcc2:	e021      	b.n	800bd08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	ee07 3a90 	vmov	s15, r3
 800bcca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd6:	4b37      	ldr	r3, [pc, #220]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcde:	ee07 3a90 	vmov	s15, r3
 800bce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bdbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bd08:	4b2a      	ldr	r3, [pc, #168]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0c:	0a5b      	lsrs	r3, r3, #9
 800bd0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd12:	ee07 3a90 	vmov	s15, r3
 800bd16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd22:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd2e:	ee17 2a90 	vmov	r2, s15
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bd36:	4b1f      	ldr	r3, [pc, #124]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3a:	0c1b      	lsrs	r3, r3, #16
 800bd3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd40:	ee07 3a90 	vmov	s15, r3
 800bd44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd50:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd5c:	ee17 2a90 	vmov	r2, s15
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bd64:	4b13      	ldr	r3, [pc, #76]	; (800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd68:	0e1b      	lsrs	r3, r3, #24
 800bd6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd6e:	ee07 3a90 	vmov	s15, r3
 800bd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd8a:	ee17 2a90 	vmov	r2, s15
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd92:	e008      	b.n	800bda6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	609a      	str	r2, [r3, #8]
}
 800bda6:	bf00      	nop
 800bda8:	3724      	adds	r7, #36	; 0x24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	58024400 	.word	0x58024400
 800bdb8:	03d09000 	.word	0x03d09000
 800bdbc:	46000000 	.word	0x46000000
 800bdc0:	4c742400 	.word	0x4c742400
 800bdc4:	4a742400 	.word	0x4a742400
 800bdc8:	4c371b00 	.word	0x4c371b00

0800bdcc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b089      	sub	sp, #36	; 0x24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdd4:	4ba1      	ldr	r3, [pc, #644]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd8:	f003 0303 	and.w	r3, r3, #3
 800bddc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bdde:	4b9f      	ldr	r3, [pc, #636]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	0d1b      	lsrs	r3, r3, #20
 800bde4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bde8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bdea:	4b9c      	ldr	r3, [pc, #624]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdee:	0a1b      	lsrs	r3, r3, #8
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bdf6:	4b99      	ldr	r3, [pc, #612]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdfa:	08db      	lsrs	r3, r3, #3
 800bdfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	fb02 f303 	mul.w	r3, r2, r3
 800be06:	ee07 3a90 	vmov	s15, r3
 800be0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 8111 	beq.w	800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	f000 8083 	beq.w	800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	2b02      	cmp	r3, #2
 800be26:	f200 80a1 	bhi.w	800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d003      	beq.n	800be38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d056      	beq.n	800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be36:	e099      	b.n	800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be38:	4b88      	ldr	r3, [pc, #544]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f003 0320 	and.w	r3, r3, #32
 800be40:	2b00      	cmp	r3, #0
 800be42:	d02d      	beq.n	800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be44:	4b85      	ldr	r3, [pc, #532]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	08db      	lsrs	r3, r3, #3
 800be4a:	f003 0303 	and.w	r3, r3, #3
 800be4e:	4a84      	ldr	r2, [pc, #528]	; (800c060 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be50:	fa22 f303 	lsr.w	r3, r2, r3
 800be54:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	ee07 3a90 	vmov	s15, r3
 800be5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	ee07 3a90 	vmov	s15, r3
 800be66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be6e:	4b7b      	ldr	r3, [pc, #492]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be76:	ee07 3a90 	vmov	s15, r3
 800be7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be82:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800be9e:	e087      	b.n	800bfb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800beae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beb2:	4b6a      	ldr	r3, [pc, #424]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beba:	ee07 3a90 	vmov	s15, r3
 800bebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bec6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bee2:	e065      	b.n	800bfb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	ee07 3a90 	vmov	s15, r3
 800beea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bef6:	4b59      	ldr	r3, [pc, #356]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800befe:	ee07 3a90 	vmov	s15, r3
 800bf02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf06:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf26:	e043      	b.n	800bfb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	ee07 3a90 	vmov	s15, r3
 800bf2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c070 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf3a:	4b48      	ldr	r3, [pc, #288]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf42:	ee07 3a90 	vmov	s15, r3
 800bf46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf6a:	e021      	b.n	800bfb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	ee07 3a90 	vmov	s15, r3
 800bf72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf7e:	4b37      	ldr	r3, [pc, #220]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf86:	ee07 3a90 	vmov	s15, r3
 800bf8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf92:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bfb0:	4b2a      	ldr	r3, [pc, #168]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb4:	0a5b      	lsrs	r3, r3, #9
 800bfb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfba:	ee07 3a90 	vmov	s15, r3
 800bfbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfca:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfd6:	ee17 2a90 	vmov	r2, s15
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bfde:	4b1f      	ldr	r3, [pc, #124]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	0c1b      	lsrs	r3, r3, #16
 800bfe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfe8:	ee07 3a90 	vmov	s15, r3
 800bfec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bff4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bff8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c004:	ee17 2a90 	vmov	r2, s15
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c00c:	4b13      	ldr	r3, [pc, #76]	; (800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c010:	0e1b      	lsrs	r3, r3, #24
 800c012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c016:	ee07 3a90 	vmov	s15, r3
 800c01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c01e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c022:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c026:	edd7 6a07 	vldr	s13, [r7, #28]
 800c02a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c02e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c032:	ee17 2a90 	vmov	r2, s15
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c03a:	e008      	b.n	800c04e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	609a      	str	r2, [r3, #8]
}
 800c04e:	bf00      	nop
 800c050:	3724      	adds	r7, #36	; 0x24
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	58024400 	.word	0x58024400
 800c060:	03d09000 	.word	0x03d09000
 800c064:	46000000 	.word	0x46000000
 800c068:	4c742400 	.word	0x4c742400
 800c06c:	4a742400 	.word	0x4a742400
 800c070:	4c371b00 	.word	0x4c371b00

0800c074 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c074:	b480      	push	{r7}
 800c076:	b089      	sub	sp, #36	; 0x24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c07c:	4ba0      	ldr	r3, [pc, #640]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c080:	f003 0303 	and.w	r3, r3, #3
 800c084:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c086:	4b9e      	ldr	r3, [pc, #632]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08a:	091b      	lsrs	r3, r3, #4
 800c08c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c090:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c092:	4b9b      	ldr	r3, [pc, #620]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c096:	f003 0301 	and.w	r3, r3, #1
 800c09a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c09c:	4b98      	ldr	r3, [pc, #608]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a0:	08db      	lsrs	r3, r3, #3
 800c0a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	fb02 f303 	mul.w	r3, r2, r3
 800c0ac:	ee07 3a90 	vmov	s15, r3
 800c0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 8111 	beq.w	800c2e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	f000 8083 	beq.w	800c1ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	f200 80a1 	bhi.w	800c212 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d003      	beq.n	800c0de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d056      	beq.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c0dc:	e099      	b.n	800c212 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0de:	4b88      	ldr	r3, [pc, #544]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 0320 	and.w	r3, r3, #32
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d02d      	beq.n	800c146 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0ea:	4b85      	ldr	r3, [pc, #532]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	08db      	lsrs	r3, r3, #3
 800c0f0:	f003 0303 	and.w	r3, r3, #3
 800c0f4:	4a83      	ldr	r2, [pc, #524]	; (800c304 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0fa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	ee07 3a90 	vmov	s15, r3
 800c102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	ee07 3a90 	vmov	s15, r3
 800c10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c114:	4b7a      	ldr	r3, [pc, #488]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11c:	ee07 3a90 	vmov	s15, r3
 800c120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c124:	ed97 6a03 	vldr	s12, [r7, #12]
 800c128:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c12c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c13c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c140:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c144:	e087      	b.n	800c256 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	ee07 3a90 	vmov	s15, r3
 800c14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c150:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c30c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c158:	4b69      	ldr	r3, [pc, #420]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c160:	ee07 3a90 	vmov	s15, r3
 800c164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c168:	ed97 6a03 	vldr	s12, [r7, #12]
 800c16c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c188:	e065      	b.n	800c256 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	ee07 3a90 	vmov	s15, r3
 800c190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c194:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c310 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c19c:	4b58      	ldr	r3, [pc, #352]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1a4:	ee07 3a90 	vmov	s15, r3
 800c1a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1cc:	e043      	b.n	800c256 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	ee07 3a90 	vmov	s15, r3
 800c1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c314 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c1dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1e0:	4b47      	ldr	r3, [pc, #284]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1e8:	ee07 3a90 	vmov	s15, r3
 800c1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c20c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c210:	e021      	b.n	800c256 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	ee07 3a90 	vmov	s15, r3
 800c218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c21c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c30c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c224:	4b36      	ldr	r3, [pc, #216]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c22c:	ee07 3a90 	vmov	s15, r3
 800c230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c234:	ed97 6a03 	vldr	s12, [r7, #12]
 800c238:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c23c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c250:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c254:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c256:	4b2a      	ldr	r3, [pc, #168]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25a:	0a5b      	lsrs	r3, r3, #9
 800c25c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c260:	ee07 3a90 	vmov	s15, r3
 800c264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c26c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c270:	edd7 6a07 	vldr	s13, [r7, #28]
 800c274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c27c:	ee17 2a90 	vmov	r2, s15
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c284:	4b1e      	ldr	r3, [pc, #120]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c288:	0c1b      	lsrs	r3, r3, #16
 800c28a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c28e:	ee07 3a90 	vmov	s15, r3
 800c292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c29a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c29e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2aa:	ee17 2a90 	vmov	r2, s15
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c2b2:	4b13      	ldr	r3, [pc, #76]	; (800c300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b6:	0e1b      	lsrs	r3, r3, #24
 800c2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2bc:	ee07 3a90 	vmov	s15, r3
 800c2c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2d8:	ee17 2a90 	vmov	r2, s15
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c2e0:	e008      	b.n	800c2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	609a      	str	r2, [r3, #8]
}
 800c2f4:	bf00      	nop
 800c2f6:	3724      	adds	r7, #36	; 0x24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	58024400 	.word	0x58024400
 800c304:	03d09000 	.word	0x03d09000
 800c308:	46000000 	.word	0x46000000
 800c30c:	4c742400 	.word	0x4c742400
 800c310:	4a742400 	.word	0x4a742400
 800c314:	4c371b00 	.word	0x4c371b00

0800c318 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c326:	4b53      	ldr	r3, [pc, #332]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32a:	f003 0303 	and.w	r3, r3, #3
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d101      	bne.n	800c336 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e099      	b.n	800c46a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c336:	4b4f      	ldr	r3, [pc, #316]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a4e      	ldr	r2, [pc, #312]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c33c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c342:	f7f8 f94d 	bl	80045e0 <HAL_GetTick>
 800c346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c348:	e008      	b.n	800c35c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c34a:	f7f8 f949 	bl	80045e0 <HAL_GetTick>
 800c34e:	4602      	mov	r2, r0
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	2b02      	cmp	r3, #2
 800c356:	d901      	bls.n	800c35c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e086      	b.n	800c46a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c35c:	4b45      	ldr	r3, [pc, #276]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1f0      	bne.n	800c34a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c368:	4b42      	ldr	r3, [pc, #264]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	031b      	lsls	r3, r3, #12
 800c376:	493f      	ldr	r1, [pc, #252]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	628b      	str	r3, [r1, #40]	; 0x28
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	3b01      	subs	r3, #1
 800c382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	025b      	lsls	r3, r3, #9
 800c38e:	b29b      	uxth	r3, r3
 800c390:	431a      	orrs	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	3b01      	subs	r3, #1
 800c398:	041b      	lsls	r3, r3, #16
 800c39a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	061b      	lsls	r3, r3, #24
 800c3a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3ac:	4931      	ldr	r1, [pc, #196]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c3b2:	4b30      	ldr	r3, [pc, #192]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	492d      	ldr	r1, [pc, #180]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c3c4:	4b2b      	ldr	r3, [pc, #172]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c8:	f023 0220 	bic.w	r2, r3, #32
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	4928      	ldr	r1, [pc, #160]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c3d6:	4b27      	ldr	r3, [pc, #156]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3da:	4a26      	ldr	r2, [pc, #152]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3dc:	f023 0310 	bic.w	r3, r3, #16
 800c3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c3e2:	4b24      	ldr	r3, [pc, #144]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3e6:	4b24      	ldr	r3, [pc, #144]	; (800c478 <RCCEx_PLL2_Config+0x160>)
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	69d2      	ldr	r2, [r2, #28]
 800c3ee:	00d2      	lsls	r2, r2, #3
 800c3f0:	4920      	ldr	r1, [pc, #128]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c3f6:	4b1f      	ldr	r3, [pc, #124]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fa:	4a1e      	ldr	r2, [pc, #120]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c3fc:	f043 0310 	orr.w	r3, r3, #16
 800c400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d106      	bne.n	800c416 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c408:	4b1a      	ldr	r3, [pc, #104]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40c:	4a19      	ldr	r2, [pc, #100]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c40e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c412:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c414:	e00f      	b.n	800c436 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d106      	bne.n	800c42a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c41c:	4b15      	ldr	r3, [pc, #84]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	4a14      	ldr	r2, [pc, #80]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c426:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c428:	e005      	b.n	800c436 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c42a:	4b12      	ldr	r3, [pc, #72]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42e:	4a11      	ldr	r2, [pc, #68]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c434:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c436:	4b0f      	ldr	r3, [pc, #60]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a0e      	ldr	r2, [pc, #56]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c43c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c442:	f7f8 f8cd 	bl	80045e0 <HAL_GetTick>
 800c446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c448:	e008      	b.n	800c45c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c44a:	f7f8 f8c9 	bl	80045e0 <HAL_GetTick>
 800c44e:	4602      	mov	r2, r0
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	2b02      	cmp	r3, #2
 800c456:	d901      	bls.n	800c45c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c458:	2303      	movs	r3, #3
 800c45a:	e006      	b.n	800c46a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c45c:	4b05      	ldr	r3, [pc, #20]	; (800c474 <RCCEx_PLL2_Config+0x15c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0f0      	beq.n	800c44a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	58024400 	.word	0x58024400
 800c478:	ffff0007 	.word	0xffff0007

0800c47c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c486:	2300      	movs	r3, #0
 800c488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c48a:	4b53      	ldr	r3, [pc, #332]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48e:	f003 0303 	and.w	r3, r3, #3
 800c492:	2b03      	cmp	r3, #3
 800c494:	d101      	bne.n	800c49a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c496:	2301      	movs	r3, #1
 800c498:	e099      	b.n	800c5ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c49a:	4b4f      	ldr	r3, [pc, #316]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a4e      	ldr	r2, [pc, #312]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c4a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4a6:	f7f8 f89b 	bl	80045e0 <HAL_GetTick>
 800c4aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c4ac:	e008      	b.n	800c4c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c4ae:	f7f8 f897 	bl	80045e0 <HAL_GetTick>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d901      	bls.n	800c4c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c4bc:	2303      	movs	r3, #3
 800c4be:	e086      	b.n	800c5ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c4c0:	4b45      	ldr	r3, [pc, #276]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1f0      	bne.n	800c4ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c4cc:	4b42      	ldr	r3, [pc, #264]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	051b      	lsls	r3, r3, #20
 800c4da:	493f      	ldr	r1, [pc, #252]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	628b      	str	r3, [r1, #40]	; 0x28
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	025b      	lsls	r3, r3, #9
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	041b      	lsls	r3, r3, #16
 800c4fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c502:	431a      	orrs	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	3b01      	subs	r3, #1
 800c50a:	061b      	lsls	r3, r3, #24
 800c50c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c510:	4931      	ldr	r1, [pc, #196]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c512:	4313      	orrs	r3, r2
 800c514:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c516:	4b30      	ldr	r3, [pc, #192]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	492d      	ldr	r1, [pc, #180]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c524:	4313      	orrs	r3, r2
 800c526:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c528:	4b2b      	ldr	r3, [pc, #172]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	4928      	ldr	r1, [pc, #160]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c536:	4313      	orrs	r3, r2
 800c538:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c53a:	4b27      	ldr	r3, [pc, #156]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53e:	4a26      	ldr	r2, [pc, #152]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c546:	4b24      	ldr	r3, [pc, #144]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c54a:	4b24      	ldr	r3, [pc, #144]	; (800c5dc <RCCEx_PLL3_Config+0x160>)
 800c54c:	4013      	ands	r3, r2
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	69d2      	ldr	r2, [r2, #28]
 800c552:	00d2      	lsls	r2, r2, #3
 800c554:	4920      	ldr	r1, [pc, #128]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c556:	4313      	orrs	r3, r2
 800c558:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c55a:	4b1f      	ldr	r3, [pc, #124]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55e:	4a1e      	ldr	r2, [pc, #120]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d106      	bne.n	800c57a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c56c:	4b1a      	ldr	r3, [pc, #104]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c570:	4a19      	ldr	r2, [pc, #100]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c572:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c576:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c578:	e00f      	b.n	800c59a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d106      	bne.n	800c58e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c580:	4b15      	ldr	r3, [pc, #84]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c584:	4a14      	ldr	r2, [pc, #80]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c58a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c58c:	e005      	b.n	800c59a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c58e:	4b12      	ldr	r3, [pc, #72]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c592:	4a11      	ldr	r2, [pc, #68]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c598:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c59a:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a0e      	ldr	r2, [pc, #56]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c5a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5a6:	f7f8 f81b 	bl	80045e0 <HAL_GetTick>
 800c5aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c5ac:	e008      	b.n	800c5c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c5ae:	f7f8 f817 	bl	80045e0 <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d901      	bls.n	800c5c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e006      	b.n	800c5ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c5c0:	4b05      	ldr	r3, [pc, #20]	; (800c5d8 <RCCEx_PLL3_Config+0x15c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0f0      	beq.n	800c5ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	58024400 	.word	0x58024400
 800c5dc:	ffff0007 	.word	0xffff0007

0800c5e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d101      	bne.n	800c5f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e0f1      	b.n	800c7d6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a78      	ldr	r2, [pc, #480]	; (800c7e0 <HAL_SPI_Init+0x200>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d00f      	beq.n	800c622 <HAL_SPI_Init+0x42>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a77      	ldr	r2, [pc, #476]	; (800c7e4 <HAL_SPI_Init+0x204>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d00a      	beq.n	800c622 <HAL_SPI_Init+0x42>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a75      	ldr	r2, [pc, #468]	; (800c7e8 <HAL_SPI_Init+0x208>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d005      	beq.n	800c622 <HAL_SPI_Init+0x42>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	2b0f      	cmp	r3, #15
 800c61c:	d901      	bls.n	800c622 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e0d9      	b.n	800c7d6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f8e2 	bl	800c7ec <SPI_GetPacketSize>
 800c628:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a6c      	ldr	r2, [pc, #432]	; (800c7e0 <HAL_SPI_Init+0x200>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d00c      	beq.n	800c64e <HAL_SPI_Init+0x6e>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a6a      	ldr	r2, [pc, #424]	; (800c7e4 <HAL_SPI_Init+0x204>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d007      	beq.n	800c64e <HAL_SPI_Init+0x6e>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a69      	ldr	r2, [pc, #420]	; (800c7e8 <HAL_SPI_Init+0x208>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d002      	beq.n	800c64e <HAL_SPI_Init+0x6e>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2b08      	cmp	r3, #8
 800c64c:	d811      	bhi.n	800c672 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c652:	4a63      	ldr	r2, [pc, #396]	; (800c7e0 <HAL_SPI_Init+0x200>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d009      	beq.n	800c66c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a61      	ldr	r2, [pc, #388]	; (800c7e4 <HAL_SPI_Init+0x204>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d004      	beq.n	800c66c <HAL_SPI_Init+0x8c>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a60      	ldr	r2, [pc, #384]	; (800c7e8 <HAL_SPI_Init+0x208>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d104      	bne.n	800c676 <HAL_SPI_Init+0x96>
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2b10      	cmp	r3, #16
 800c670:	d901      	bls.n	800c676 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	e0af      	b.n	800c7d6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7f7 f938 	bl	8003900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2202      	movs	r2, #2
 800c694:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f022 0201 	bic.w	r2, r2, #1
 800c6a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c6b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c6bc:	d119      	bne.n	800c6f2 <HAL_SPI_Init+0x112>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6c6:	d103      	bne.n	800c6d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d008      	beq.n	800c6e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10c      	bne.n	800c6f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c6dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6e0:	d107      	bne.n	800c6f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c6f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	69da      	ldr	r2, [r3, #28]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	431a      	orrs	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c704:	ea42 0103 	orr.w	r1, r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	68da      	ldr	r2, [r3, #12]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	430a      	orrs	r2, r1
 800c712:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71c:	431a      	orrs	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c722:	431a      	orrs	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	431a      	orrs	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	431a      	orrs	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	431a      	orrs	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a1b      	ldr	r3, [r3, #32]
 800c73a:	431a      	orrs	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	431a      	orrs	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c746:	431a      	orrs	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	431a      	orrs	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c752:	ea42 0103 	orr.w	r1, r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	430a      	orrs	r2, r1
 800c760:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d113      	bne.n	800c792 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c77c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c790:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f022 0201 	bic.w	r2, r2, #1
 800c7a0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00a      	beq.n	800c7c4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	40013000 	.word	0x40013000
 800c7e4:	40003800 	.word	0x40003800
 800c7e8:	40003c00 	.word	0x40003c00

0800c7ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7f8:	095b      	lsrs	r3, r3, #5
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	3301      	adds	r3, #1
 800c804:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	3307      	adds	r3, #7
 800c80a:	08db      	lsrs	r3, r3, #3
 800c80c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	fb02 f303 	mul.w	r3, r2, r3
}
 800c816:	4618      	mov	r0, r3
 800c818:	3714      	adds	r7, #20
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c830:	2301      	movs	r3, #1
 800c832:	e049      	b.n	800c8c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d106      	bne.n	800c84e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7f7 f9f5 	bl	8003c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2202      	movs	r2, #2
 800c852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	3304      	adds	r3, #4
 800c85e:	4619      	mov	r1, r3
 800c860:	4610      	mov	r0, r2
 800c862:	f000 ff3b 	bl	800d6dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d001      	beq.n	800c8e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e054      	b.n	800c992 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f042 0201 	orr.w	r2, r2, #1
 800c8fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a26      	ldr	r2, [pc, #152]	; (800c9a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d022      	beq.n	800c950 <HAL_TIM_Base_Start_IT+0x80>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c912:	d01d      	beq.n	800c950 <HAL_TIM_Base_Start_IT+0x80>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a22      	ldr	r2, [pc, #136]	; (800c9a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d018      	beq.n	800c950 <HAL_TIM_Base_Start_IT+0x80>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a21      	ldr	r2, [pc, #132]	; (800c9a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d013      	beq.n	800c950 <HAL_TIM_Base_Start_IT+0x80>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a1f      	ldr	r2, [pc, #124]	; (800c9ac <HAL_TIM_Base_Start_IT+0xdc>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d00e      	beq.n	800c950 <HAL_TIM_Base_Start_IT+0x80>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a1e      	ldr	r2, [pc, #120]	; (800c9b0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d009      	beq.n	800c950 <HAL_TIM_Base_Start_IT+0x80>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a1c      	ldr	r2, [pc, #112]	; (800c9b4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d004      	beq.n	800c950 <HAL_TIM_Base_Start_IT+0x80>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a1b      	ldr	r2, [pc, #108]	; (800c9b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d115      	bne.n	800c97c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	689a      	ldr	r2, [r3, #8]
 800c956:	4b19      	ldr	r3, [pc, #100]	; (800c9bc <HAL_TIM_Base_Start_IT+0xec>)
 800c958:	4013      	ands	r3, r2
 800c95a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2b06      	cmp	r3, #6
 800c960:	d015      	beq.n	800c98e <HAL_TIM_Base_Start_IT+0xbe>
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c968:	d011      	beq.n	800c98e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f042 0201 	orr.w	r2, r2, #1
 800c978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c97a:	e008      	b.n	800c98e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f042 0201 	orr.w	r2, r2, #1
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	e000      	b.n	800c990 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c98e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3714      	adds	r7, #20
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	40010000 	.word	0x40010000
 800c9a4:	40000400 	.word	0x40000400
 800c9a8:	40000800 	.word	0x40000800
 800c9ac:	40000c00 	.word	0x40000c00
 800c9b0:	40010400 	.word	0x40010400
 800c9b4:	40001800 	.word	0x40001800
 800c9b8:	40014000 	.word	0x40014000
 800c9bc:	00010007 	.word	0x00010007

0800c9c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e049      	b.n	800ca66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d106      	bne.n	800c9ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f841 	bl	800ca6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	4610      	mov	r0, r2
 800ca00:	f000 fe6c 	bl	800d6dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2201      	movs	r2, #1
 800ca58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca64:	2300      	movs	r3, #0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ca76:	bf00      	nop
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
	...

0800ca84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d109      	bne.n	800caa8 <HAL_TIM_PWM_Start+0x24>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	bf14      	ite	ne
 800caa0:	2301      	movne	r3, #1
 800caa2:	2300      	moveq	r3, #0
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	e03c      	b.n	800cb22 <HAL_TIM_PWM_Start+0x9e>
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d109      	bne.n	800cac2 <HAL_TIM_PWM_Start+0x3e>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	bf14      	ite	ne
 800caba:	2301      	movne	r3, #1
 800cabc:	2300      	moveq	r3, #0
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	e02f      	b.n	800cb22 <HAL_TIM_PWM_Start+0x9e>
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	2b08      	cmp	r3, #8
 800cac6:	d109      	bne.n	800cadc <HAL_TIM_PWM_Start+0x58>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	bf14      	ite	ne
 800cad4:	2301      	movne	r3, #1
 800cad6:	2300      	moveq	r3, #0
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	e022      	b.n	800cb22 <HAL_TIM_PWM_Start+0x9e>
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2b0c      	cmp	r3, #12
 800cae0:	d109      	bne.n	800caf6 <HAL_TIM_PWM_Start+0x72>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	2b01      	cmp	r3, #1
 800caec:	bf14      	ite	ne
 800caee:	2301      	movne	r3, #1
 800caf0:	2300      	moveq	r3, #0
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	e015      	b.n	800cb22 <HAL_TIM_PWM_Start+0x9e>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b10      	cmp	r3, #16
 800cafa:	d109      	bne.n	800cb10 <HAL_TIM_PWM_Start+0x8c>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	bf14      	ite	ne
 800cb08:	2301      	movne	r3, #1
 800cb0a:	2300      	moveq	r3, #0
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	e008      	b.n	800cb22 <HAL_TIM_PWM_Start+0x9e>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	bf14      	ite	ne
 800cb1c:	2301      	movne	r3, #1
 800cb1e:	2300      	moveq	r3, #0
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e0a1      	b.n	800cc6e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d104      	bne.n	800cb3a <HAL_TIM_PWM_Start+0xb6>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb38:	e023      	b.n	800cb82 <HAL_TIM_PWM_Start+0xfe>
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	2b04      	cmp	r3, #4
 800cb3e:	d104      	bne.n	800cb4a <HAL_TIM_PWM_Start+0xc6>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2202      	movs	r2, #2
 800cb44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb48:	e01b      	b.n	800cb82 <HAL_TIM_PWM_Start+0xfe>
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2b08      	cmp	r3, #8
 800cb4e:	d104      	bne.n	800cb5a <HAL_TIM_PWM_Start+0xd6>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2202      	movs	r2, #2
 800cb54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb58:	e013      	b.n	800cb82 <HAL_TIM_PWM_Start+0xfe>
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b0c      	cmp	r3, #12
 800cb5e:	d104      	bne.n	800cb6a <HAL_TIM_PWM_Start+0xe6>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2202      	movs	r2, #2
 800cb64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb68:	e00b      	b.n	800cb82 <HAL_TIM_PWM_Start+0xfe>
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b10      	cmp	r3, #16
 800cb6e:	d104      	bne.n	800cb7a <HAL_TIM_PWM_Start+0xf6>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2202      	movs	r2, #2
 800cb74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb78:	e003      	b.n	800cb82 <HAL_TIM_PWM_Start+0xfe>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2202      	movs	r2, #2
 800cb7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2201      	movs	r2, #1
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f001 f9b4 	bl	800def8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a38      	ldr	r2, [pc, #224]	; (800cc78 <HAL_TIM_PWM_Start+0x1f4>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d013      	beq.n	800cbc2 <HAL_TIM_PWM_Start+0x13e>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a37      	ldr	r2, [pc, #220]	; (800cc7c <HAL_TIM_PWM_Start+0x1f8>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d00e      	beq.n	800cbc2 <HAL_TIM_PWM_Start+0x13e>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a35      	ldr	r2, [pc, #212]	; (800cc80 <HAL_TIM_PWM_Start+0x1fc>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d009      	beq.n	800cbc2 <HAL_TIM_PWM_Start+0x13e>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a34      	ldr	r2, [pc, #208]	; (800cc84 <HAL_TIM_PWM_Start+0x200>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d004      	beq.n	800cbc2 <HAL_TIM_PWM_Start+0x13e>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a32      	ldr	r2, [pc, #200]	; (800cc88 <HAL_TIM_PWM_Start+0x204>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d101      	bne.n	800cbc6 <HAL_TIM_PWM_Start+0x142>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e000      	b.n	800cbc8 <HAL_TIM_PWM_Start+0x144>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d007      	beq.n	800cbdc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cbda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a25      	ldr	r2, [pc, #148]	; (800cc78 <HAL_TIM_PWM_Start+0x1f4>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d022      	beq.n	800cc2c <HAL_TIM_PWM_Start+0x1a8>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbee:	d01d      	beq.n	800cc2c <HAL_TIM_PWM_Start+0x1a8>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a25      	ldr	r2, [pc, #148]	; (800cc8c <HAL_TIM_PWM_Start+0x208>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d018      	beq.n	800cc2c <HAL_TIM_PWM_Start+0x1a8>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a24      	ldr	r2, [pc, #144]	; (800cc90 <HAL_TIM_PWM_Start+0x20c>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d013      	beq.n	800cc2c <HAL_TIM_PWM_Start+0x1a8>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a22      	ldr	r2, [pc, #136]	; (800cc94 <HAL_TIM_PWM_Start+0x210>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d00e      	beq.n	800cc2c <HAL_TIM_PWM_Start+0x1a8>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a1a      	ldr	r2, [pc, #104]	; (800cc7c <HAL_TIM_PWM_Start+0x1f8>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d009      	beq.n	800cc2c <HAL_TIM_PWM_Start+0x1a8>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a1e      	ldr	r2, [pc, #120]	; (800cc98 <HAL_TIM_PWM_Start+0x214>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d004      	beq.n	800cc2c <HAL_TIM_PWM_Start+0x1a8>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a16      	ldr	r2, [pc, #88]	; (800cc80 <HAL_TIM_PWM_Start+0x1fc>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d115      	bne.n	800cc58 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	689a      	ldr	r2, [r3, #8]
 800cc32:	4b1a      	ldr	r3, [pc, #104]	; (800cc9c <HAL_TIM_PWM_Start+0x218>)
 800cc34:	4013      	ands	r3, r2
 800cc36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2b06      	cmp	r3, #6
 800cc3c:	d015      	beq.n	800cc6a <HAL_TIM_PWM_Start+0x1e6>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc44:	d011      	beq.n	800cc6a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f042 0201 	orr.w	r2, r2, #1
 800cc54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc56:	e008      	b.n	800cc6a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f042 0201 	orr.w	r2, r2, #1
 800cc66:	601a      	str	r2, [r3, #0]
 800cc68:	e000      	b.n	800cc6c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	40010000 	.word	0x40010000
 800cc7c:	40010400 	.word	0x40010400
 800cc80:	40014000 	.word	0x40014000
 800cc84:	40014400 	.word	0x40014400
 800cc88:	40014800 	.word	0x40014800
 800cc8c:	40000400 	.word	0x40000400
 800cc90:	40000800 	.word	0x40000800
 800cc94:	40000c00 	.word	0x40000c00
 800cc98:	40001800 	.word	0x40001800
 800cc9c:	00010007 	.word	0x00010007

0800cca0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f001 f920 	bl	800def8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a3e      	ldr	r2, [pc, #248]	; (800cdb8 <HAL_TIM_PWM_Stop+0x118>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d013      	beq.n	800ccea <HAL_TIM_PWM_Stop+0x4a>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a3d      	ldr	r2, [pc, #244]	; (800cdbc <HAL_TIM_PWM_Stop+0x11c>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d00e      	beq.n	800ccea <HAL_TIM_PWM_Stop+0x4a>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a3b      	ldr	r2, [pc, #236]	; (800cdc0 <HAL_TIM_PWM_Stop+0x120>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d009      	beq.n	800ccea <HAL_TIM_PWM_Stop+0x4a>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a3a      	ldr	r2, [pc, #232]	; (800cdc4 <HAL_TIM_PWM_Stop+0x124>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d004      	beq.n	800ccea <HAL_TIM_PWM_Stop+0x4a>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a38      	ldr	r2, [pc, #224]	; (800cdc8 <HAL_TIM_PWM_Stop+0x128>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d101      	bne.n	800ccee <HAL_TIM_PWM_Stop+0x4e>
 800ccea:	2301      	movs	r3, #1
 800ccec:	e000      	b.n	800ccf0 <HAL_TIM_PWM_Stop+0x50>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d017      	beq.n	800cd24 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6a1a      	ldr	r2, [r3, #32]
 800ccfa:	f241 1311 	movw	r3, #4369	; 0x1111
 800ccfe:	4013      	ands	r3, r2
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10f      	bne.n	800cd24 <HAL_TIM_PWM_Stop+0x84>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	6a1a      	ldr	r2, [r3, #32]
 800cd0a:	f240 4344 	movw	r3, #1092	; 0x444
 800cd0e:	4013      	ands	r3, r2
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d107      	bne.n	800cd24 <HAL_TIM_PWM_Stop+0x84>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6a1a      	ldr	r2, [r3, #32]
 800cd2a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd2e:	4013      	ands	r3, r2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10f      	bne.n	800cd54 <HAL_TIM_PWM_Stop+0xb4>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6a1a      	ldr	r2, [r3, #32]
 800cd3a:	f240 4344 	movw	r3, #1092	; 0x444
 800cd3e:	4013      	ands	r3, r2
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d107      	bne.n	800cd54 <HAL_TIM_PWM_Stop+0xb4>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f022 0201 	bic.w	r2, r2, #1
 800cd52:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d104      	bne.n	800cd64 <HAL_TIM_PWM_Stop+0xc4>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd62:	e023      	b.n	800cdac <HAL_TIM_PWM_Stop+0x10c>
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	2b04      	cmp	r3, #4
 800cd68:	d104      	bne.n	800cd74 <HAL_TIM_PWM_Stop+0xd4>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd72:	e01b      	b.n	800cdac <HAL_TIM_PWM_Stop+0x10c>
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2b08      	cmp	r3, #8
 800cd78:	d104      	bne.n	800cd84 <HAL_TIM_PWM_Stop+0xe4>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd82:	e013      	b.n	800cdac <HAL_TIM_PWM_Stop+0x10c>
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b0c      	cmp	r3, #12
 800cd88:	d104      	bne.n	800cd94 <HAL_TIM_PWM_Stop+0xf4>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd92:	e00b      	b.n	800cdac <HAL_TIM_PWM_Stop+0x10c>
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	2b10      	cmp	r3, #16
 800cd98:	d104      	bne.n	800cda4 <HAL_TIM_PWM_Stop+0x104>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cda2:	e003      	b.n	800cdac <HAL_TIM_PWM_Stop+0x10c>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3708      	adds	r7, #8
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	40010000 	.word	0x40010000
 800cdbc:	40010400 	.word	0x40010400
 800cdc0:	40014000 	.word	0x40014000
 800cdc4:	40014400 	.word	0x40014400
 800cdc8:	40014800 	.word	0x40014800

0800cdcc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d101      	bne.n	800cde0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e08f      	b.n	800cf00 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d106      	bne.n	800cdfa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7f6 fe0f 	bl	8003a18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2202      	movs	r2, #2
 800cdfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6899      	ldr	r1, [r3, #8]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	4b3e      	ldr	r3, [pc, #248]	; (800cf08 <HAL_TIM_Encoder_Init+0x13c>)
 800ce0e:	400b      	ands	r3, r1
 800ce10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f000 fc5d 	bl	800d6dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6a1b      	ldr	r3, [r3, #32]
 800ce38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	4b31      	ldr	r3, [pc, #196]	; (800cf0c <HAL_TIM_Encoder_Init+0x140>)
 800ce48:	4013      	ands	r3, r2
 800ce4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	689a      	ldr	r2, [r3, #8]
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	699b      	ldr	r3, [r3, #24]
 800ce54:	021b      	lsls	r3, r3, #8
 800ce56:	4313      	orrs	r3, r2
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ce5e:	693a      	ldr	r2, [r7, #16]
 800ce60:	4b2b      	ldr	r3, [pc, #172]	; (800cf10 <HAL_TIM_Encoder_Init+0x144>)
 800ce62:	4013      	ands	r3, r2
 800ce64:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	4b2a      	ldr	r3, [pc, #168]	; (800cf14 <HAL_TIM_Encoder_Init+0x148>)
 800ce6a:	4013      	ands	r3, r2
 800ce6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	69db      	ldr	r3, [r3, #28]
 800ce76:	021b      	lsls	r3, r3, #8
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	693a      	ldr	r2, [r7, #16]
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	011a      	lsls	r2, r3, #4
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	6a1b      	ldr	r3, [r3, #32]
 800ce8a:	031b      	lsls	r3, r3, #12
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	693a      	ldr	r2, [r7, #16]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ce9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cea2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	685a      	ldr	r2, [r3, #4]
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	695b      	ldr	r3, [r3, #20]
 800ceac:	011b      	lsls	r3, r3, #4
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2201      	movs	r2, #1
 800cee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2201      	movs	r2, #1
 800ceea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2201      	movs	r2, #1
 800cefa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3718      	adds	r7, #24
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	fffebff8 	.word	0xfffebff8
 800cf0c:	fffffcfc 	.word	0xfffffcfc
 800cf10:	fffff3f3 	.word	0xfffff3f3
 800cf14:	ffff0f0f 	.word	0xffff0f0f

0800cf18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cf30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d110      	bne.n	800cf6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d102      	bne.n	800cf54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cf4e:	7b7b      	ldrb	r3, [r7, #13]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d001      	beq.n	800cf58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	e069      	b.n	800d02c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2202      	movs	r2, #2
 800cf5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2202      	movs	r2, #2
 800cf64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf68:	e031      	b.n	800cfce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	2b04      	cmp	r3, #4
 800cf6e:	d110      	bne.n	800cf92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d102      	bne.n	800cf7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cf76:	7b3b      	ldrb	r3, [r7, #12]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d001      	beq.n	800cf80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e055      	b.n	800d02c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2202      	movs	r2, #2
 800cf84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf90:	e01d      	b.n	800cfce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d108      	bne.n	800cfaa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d105      	bne.n	800cfaa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf9e:	7b7b      	ldrb	r3, [r7, #13]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d102      	bne.n	800cfaa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cfa4:	7b3b      	ldrb	r3, [r7, #12]
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d001      	beq.n	800cfae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e03e      	b.n	800d02c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2202      	movs	r2, #2
 800cfba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2202      	movs	r2, #2
 800cfc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2202      	movs	r2, #2
 800cfca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d003      	beq.n	800cfdc <HAL_TIM_Encoder_Start+0xc4>
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2b04      	cmp	r3, #4
 800cfd8:	d008      	beq.n	800cfec <HAL_TIM_Encoder_Start+0xd4>
 800cfda:	e00f      	b.n	800cffc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f000 ff87 	bl	800def8 <TIM_CCxChannelCmd>
      break;
 800cfea:	e016      	b.n	800d01a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2201      	movs	r2, #1
 800cff2:	2104      	movs	r1, #4
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 ff7f 	bl	800def8 <TIM_CCxChannelCmd>
      break;
 800cffa:	e00e      	b.n	800d01a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2201      	movs	r2, #1
 800d002:	2100      	movs	r1, #0
 800d004:	4618      	mov	r0, r3
 800d006:	f000 ff77 	bl	800def8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2201      	movs	r2, #1
 800d010:	2104      	movs	r1, #4
 800d012:	4618      	mov	r0, r3
 800d014:	f000 ff70 	bl	800def8 <TIM_CCxChannelCmd>
      break;
 800d018:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f042 0201 	orr.w	r2, r2, #1
 800d028:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3710      	adds	r7, #16
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	f003 0302 	and.w	r3, r3, #2
 800d046:	2b02      	cmp	r3, #2
 800d048:	d122      	bne.n	800d090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	f003 0302 	and.w	r3, r3, #2
 800d054:	2b02      	cmp	r3, #2
 800d056:	d11b      	bne.n	800d090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f06f 0202 	mvn.w	r2, #2
 800d060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	f003 0303 	and.w	r3, r3, #3
 800d072:	2b00      	cmp	r3, #0
 800d074:	d003      	beq.n	800d07e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fb12 	bl	800d6a0 <HAL_TIM_IC_CaptureCallback>
 800d07c:	e005      	b.n	800d08a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fb04 	bl	800d68c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fb15 	bl	800d6b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	f003 0304 	and.w	r3, r3, #4
 800d09a:	2b04      	cmp	r3, #4
 800d09c:	d122      	bne.n	800d0e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	f003 0304 	and.w	r3, r3, #4
 800d0a8:	2b04      	cmp	r3, #4
 800d0aa:	d11b      	bne.n	800d0e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f06f 0204 	mvn.w	r2, #4
 800d0b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2202      	movs	r2, #2
 800d0ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	699b      	ldr	r3, [r3, #24]
 800d0c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 fae8 	bl	800d6a0 <HAL_TIM_IC_CaptureCallback>
 800d0d0:	e005      	b.n	800d0de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fada 	bl	800d68c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 faeb 	bl	800d6b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	f003 0308 	and.w	r3, r3, #8
 800d0ee:	2b08      	cmp	r3, #8
 800d0f0:	d122      	bne.n	800d138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	f003 0308 	and.w	r3, r3, #8
 800d0fc:	2b08      	cmp	r3, #8
 800d0fe:	d11b      	bne.n	800d138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f06f 0208 	mvn.w	r2, #8
 800d108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2204      	movs	r2, #4
 800d10e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	69db      	ldr	r3, [r3, #28]
 800d116:	f003 0303 	and.w	r3, r3, #3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d003      	beq.n	800d126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 fabe 	bl	800d6a0 <HAL_TIM_IC_CaptureCallback>
 800d124:	e005      	b.n	800d132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fab0 	bl	800d68c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fac1 	bl	800d6b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	f003 0310 	and.w	r3, r3, #16
 800d142:	2b10      	cmp	r3, #16
 800d144:	d122      	bne.n	800d18c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	f003 0310 	and.w	r3, r3, #16
 800d150:	2b10      	cmp	r3, #16
 800d152:	d11b      	bne.n	800d18c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f06f 0210 	mvn.w	r2, #16
 800d15c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2208      	movs	r2, #8
 800d162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	69db      	ldr	r3, [r3, #28]
 800d16a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d003      	beq.n	800d17a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fa94 	bl	800d6a0 <HAL_TIM_IC_CaptureCallback>
 800d178:	e005      	b.n	800d186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 fa86 	bl	800d68c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 fa97 	bl	800d6b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2200      	movs	r2, #0
 800d18a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	f003 0301 	and.w	r3, r3, #1
 800d196:	2b01      	cmp	r3, #1
 800d198:	d10e      	bne.n	800d1b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	f003 0301 	and.w	r3, r3, #1
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d107      	bne.n	800d1b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f06f 0201 	mvn.w	r2, #1
 800d1b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7f6 f9c2 	bl	800353c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	691b      	ldr	r3, [r3, #16]
 800d1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1c2:	2b80      	cmp	r3, #128	; 0x80
 800d1c4:	d10e      	bne.n	800d1e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1d0:	2b80      	cmp	r3, #128	; 0x80
 800d1d2:	d107      	bne.n	800d1e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 ffc6 	bl	800e170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1f2:	d10e      	bne.n	800d212 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1fe:	2b80      	cmp	r3, #128	; 0x80
 800d200:	d107      	bne.n	800d212 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 ffb9 	bl	800e184 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d21c:	2b40      	cmp	r3, #64	; 0x40
 800d21e:	d10e      	bne.n	800d23e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d22a:	2b40      	cmp	r3, #64	; 0x40
 800d22c:	d107      	bne.n	800d23e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fa45 	bl	800d6c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	f003 0320 	and.w	r3, r3, #32
 800d248:	2b20      	cmp	r3, #32
 800d24a:	d10e      	bne.n	800d26a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	f003 0320 	and.w	r3, r3, #32
 800d256:	2b20      	cmp	r3, #32
 800d258:	d107      	bne.n	800d26a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f06f 0220 	mvn.w	r2, #32
 800d262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 ff79 	bl	800e15c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d26a:	bf00      	nop
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
	...

0800d274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d101      	bne.n	800d292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d28e:	2302      	movs	r3, #2
 800d290:	e0ff      	b.n	800d492 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2201      	movs	r2, #1
 800d296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b14      	cmp	r3, #20
 800d29e:	f200 80f0 	bhi.w	800d482 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d2a2:	a201      	add	r2, pc, #4	; (adr r2, 800d2a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a8:	0800d2fd 	.word	0x0800d2fd
 800d2ac:	0800d483 	.word	0x0800d483
 800d2b0:	0800d483 	.word	0x0800d483
 800d2b4:	0800d483 	.word	0x0800d483
 800d2b8:	0800d33d 	.word	0x0800d33d
 800d2bc:	0800d483 	.word	0x0800d483
 800d2c0:	0800d483 	.word	0x0800d483
 800d2c4:	0800d483 	.word	0x0800d483
 800d2c8:	0800d37f 	.word	0x0800d37f
 800d2cc:	0800d483 	.word	0x0800d483
 800d2d0:	0800d483 	.word	0x0800d483
 800d2d4:	0800d483 	.word	0x0800d483
 800d2d8:	0800d3bf 	.word	0x0800d3bf
 800d2dc:	0800d483 	.word	0x0800d483
 800d2e0:	0800d483 	.word	0x0800d483
 800d2e4:	0800d483 	.word	0x0800d483
 800d2e8:	0800d401 	.word	0x0800d401
 800d2ec:	0800d483 	.word	0x0800d483
 800d2f0:	0800d483 	.word	0x0800d483
 800d2f4:	0800d483 	.word	0x0800d483
 800d2f8:	0800d441 	.word	0x0800d441
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68b9      	ldr	r1, [r7, #8]
 800d302:	4618      	mov	r0, r3
 800d304:	f000 fa84 	bl	800d810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	699a      	ldr	r2, [r3, #24]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f042 0208 	orr.w	r2, r2, #8
 800d316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	699a      	ldr	r2, [r3, #24]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f022 0204 	bic.w	r2, r2, #4
 800d326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6999      	ldr	r1, [r3, #24]
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	691a      	ldr	r2, [r3, #16]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	430a      	orrs	r2, r1
 800d338:	619a      	str	r2, [r3, #24]
      break;
 800d33a:	e0a5      	b.n	800d488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68b9      	ldr	r1, [r7, #8]
 800d342:	4618      	mov	r0, r3
 800d344:	f000 faf4 	bl	800d930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	699a      	ldr	r2, [r3, #24]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	699a      	ldr	r2, [r3, #24]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	6999      	ldr	r1, [r3, #24]
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	021a      	lsls	r2, r3, #8
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	430a      	orrs	r2, r1
 800d37a:	619a      	str	r2, [r3, #24]
      break;
 800d37c:	e084      	b.n	800d488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68b9      	ldr	r1, [r7, #8]
 800d384:	4618      	mov	r0, r3
 800d386:	f000 fb5d 	bl	800da44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	69da      	ldr	r2, [r3, #28]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f042 0208 	orr.w	r2, r2, #8
 800d398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	69da      	ldr	r2, [r3, #28]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f022 0204 	bic.w	r2, r2, #4
 800d3a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	69d9      	ldr	r1, [r3, #28]
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	691a      	ldr	r2, [r3, #16]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	430a      	orrs	r2, r1
 800d3ba:	61da      	str	r2, [r3, #28]
      break;
 800d3bc:	e064      	b.n	800d488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	68b9      	ldr	r1, [r7, #8]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f000 fbc5 	bl	800db54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	69da      	ldr	r2, [r3, #28]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69da      	ldr	r2, [r3, #28]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	69d9      	ldr	r1, [r3, #28]
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	691b      	ldr	r3, [r3, #16]
 800d3f4:	021a      	lsls	r2, r3, #8
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	430a      	orrs	r2, r1
 800d3fc:	61da      	str	r2, [r3, #28]
      break;
 800d3fe:	e043      	b.n	800d488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	68b9      	ldr	r1, [r7, #8]
 800d406:	4618      	mov	r0, r3
 800d408:	f000 fc0e 	bl	800dc28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f042 0208 	orr.w	r2, r2, #8
 800d41a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f022 0204 	bic.w	r2, r2, #4
 800d42a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	691a      	ldr	r2, [r3, #16]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	430a      	orrs	r2, r1
 800d43c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d43e:	e023      	b.n	800d488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68b9      	ldr	r1, [r7, #8]
 800d446:	4618      	mov	r0, r3
 800d448:	f000 fc52 	bl	800dcf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d45a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d46a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	021a      	lsls	r2, r3, #8
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	430a      	orrs	r2, r1
 800d47e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d480:	e002      	b.n	800d488 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	75fb      	strb	r3, [r7, #23]
      break;
 800d486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d490:	7dfb      	ldrb	r3, [r7, #23]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop

0800d49c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d101      	bne.n	800d4b8 <HAL_TIM_ConfigClockSource+0x1c>
 800d4b4:	2302      	movs	r3, #2
 800d4b6:	e0dc      	b.n	800d672 <HAL_TIM_ConfigClockSource+0x1d6>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2202      	movs	r2, #2
 800d4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d4d0:	68ba      	ldr	r2, [r7, #8]
 800d4d2:	4b6a      	ldr	r3, [pc, #424]	; (800d67c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68ba      	ldr	r2, [r7, #8]
 800d4e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a64      	ldr	r2, [pc, #400]	; (800d680 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	f000 80a9 	beq.w	800d646 <HAL_TIM_ConfigClockSource+0x1aa>
 800d4f4:	4a62      	ldr	r2, [pc, #392]	; (800d680 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	f200 80ae 	bhi.w	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4fc:	4a61      	ldr	r2, [pc, #388]	; (800d684 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	f000 80a1 	beq.w	800d646 <HAL_TIM_ConfigClockSource+0x1aa>
 800d504:	4a5f      	ldr	r2, [pc, #380]	; (800d684 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d506:	4293      	cmp	r3, r2
 800d508:	f200 80a6 	bhi.w	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d50c:	4a5e      	ldr	r2, [pc, #376]	; (800d688 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	f000 8099 	beq.w	800d646 <HAL_TIM_ConfigClockSource+0x1aa>
 800d514:	4a5c      	ldr	r2, [pc, #368]	; (800d688 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d516:	4293      	cmp	r3, r2
 800d518:	f200 809e 	bhi.w	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d51c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d520:	f000 8091 	beq.w	800d646 <HAL_TIM_ConfigClockSource+0x1aa>
 800d524:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d528:	f200 8096 	bhi.w	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d52c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d530:	f000 8089 	beq.w	800d646 <HAL_TIM_ConfigClockSource+0x1aa>
 800d534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d538:	f200 808e 	bhi.w	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d53c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d540:	d03e      	beq.n	800d5c0 <HAL_TIM_ConfigClockSource+0x124>
 800d542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d546:	f200 8087 	bhi.w	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d54a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d54e:	f000 8086 	beq.w	800d65e <HAL_TIM_ConfigClockSource+0x1c2>
 800d552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d556:	d87f      	bhi.n	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d558:	2b70      	cmp	r3, #112	; 0x70
 800d55a:	d01a      	beq.n	800d592 <HAL_TIM_ConfigClockSource+0xf6>
 800d55c:	2b70      	cmp	r3, #112	; 0x70
 800d55e:	d87b      	bhi.n	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d560:	2b60      	cmp	r3, #96	; 0x60
 800d562:	d050      	beq.n	800d606 <HAL_TIM_ConfigClockSource+0x16a>
 800d564:	2b60      	cmp	r3, #96	; 0x60
 800d566:	d877      	bhi.n	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d568:	2b50      	cmp	r3, #80	; 0x50
 800d56a:	d03c      	beq.n	800d5e6 <HAL_TIM_ConfigClockSource+0x14a>
 800d56c:	2b50      	cmp	r3, #80	; 0x50
 800d56e:	d873      	bhi.n	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d570:	2b40      	cmp	r3, #64	; 0x40
 800d572:	d058      	beq.n	800d626 <HAL_TIM_ConfigClockSource+0x18a>
 800d574:	2b40      	cmp	r3, #64	; 0x40
 800d576:	d86f      	bhi.n	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d578:	2b30      	cmp	r3, #48	; 0x30
 800d57a:	d064      	beq.n	800d646 <HAL_TIM_ConfigClockSource+0x1aa>
 800d57c:	2b30      	cmp	r3, #48	; 0x30
 800d57e:	d86b      	bhi.n	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d580:	2b20      	cmp	r3, #32
 800d582:	d060      	beq.n	800d646 <HAL_TIM_ConfigClockSource+0x1aa>
 800d584:	2b20      	cmp	r3, #32
 800d586:	d867      	bhi.n	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d05c      	beq.n	800d646 <HAL_TIM_ConfigClockSource+0x1aa>
 800d58c:	2b10      	cmp	r3, #16
 800d58e:	d05a      	beq.n	800d646 <HAL_TIM_ConfigClockSource+0x1aa>
 800d590:	e062      	b.n	800d658 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6818      	ldr	r0, [r3, #0]
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	6899      	ldr	r1, [r3, #8]
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	685a      	ldr	r2, [r3, #4]
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	f000 fc89 	bl	800deb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d5b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	609a      	str	r2, [r3, #8]
      break;
 800d5be:	e04f      	b.n	800d660 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6818      	ldr	r0, [r3, #0]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	6899      	ldr	r1, [r3, #8]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	f000 fc72 	bl	800deb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	689a      	ldr	r2, [r3, #8]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5e2:	609a      	str	r2, [r3, #8]
      break;
 800d5e4:	e03c      	b.n	800d660 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6818      	ldr	r0, [r3, #0]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	6859      	ldr	r1, [r3, #4]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	f000 fbe2 	bl	800ddbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2150      	movs	r1, #80	; 0x50
 800d5fe:	4618      	mov	r0, r3
 800d600:	f000 fc3c 	bl	800de7c <TIM_ITRx_SetConfig>
      break;
 800d604:	e02c      	b.n	800d660 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6818      	ldr	r0, [r3, #0]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	6859      	ldr	r1, [r3, #4]
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	461a      	mov	r2, r3
 800d614:	f000 fc01 	bl	800de1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2160      	movs	r1, #96	; 0x60
 800d61e:	4618      	mov	r0, r3
 800d620:	f000 fc2c 	bl	800de7c <TIM_ITRx_SetConfig>
      break;
 800d624:	e01c      	b.n	800d660 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6818      	ldr	r0, [r3, #0]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	6859      	ldr	r1, [r3, #4]
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	461a      	mov	r2, r3
 800d634:	f000 fbc2 	bl	800ddbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2140      	movs	r1, #64	; 0x40
 800d63e:	4618      	mov	r0, r3
 800d640:	f000 fc1c 	bl	800de7c <TIM_ITRx_SetConfig>
      break;
 800d644:	e00c      	b.n	800d660 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4619      	mov	r1, r3
 800d650:	4610      	mov	r0, r2
 800d652:	f000 fc13 	bl	800de7c <TIM_ITRx_SetConfig>
      break;
 800d656:	e003      	b.n	800d660 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d658:	2301      	movs	r3, #1
 800d65a:	73fb      	strb	r3, [r7, #15]
      break;
 800d65c:	e000      	b.n	800d660 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d65e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d670:	7bfb      	ldrb	r3, [r7, #15]
}
 800d672:	4618      	mov	r0, r3
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	ffceff88 	.word	0xffceff88
 800d680:	00100040 	.word	0x00100040
 800d684:	00100030 	.word	0x00100030
 800d688:	00100020 	.word	0x00100020

0800d68c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d694:	bf00      	nop
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d6a8:	bf00      	nop
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d6d0:	bf00      	nop
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a40      	ldr	r2, [pc, #256]	; (800d7f0 <TIM_Base_SetConfig+0x114>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d013      	beq.n	800d71c <TIM_Base_SetConfig+0x40>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6fa:	d00f      	beq.n	800d71c <TIM_Base_SetConfig+0x40>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4a3d      	ldr	r2, [pc, #244]	; (800d7f4 <TIM_Base_SetConfig+0x118>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d00b      	beq.n	800d71c <TIM_Base_SetConfig+0x40>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a3c      	ldr	r2, [pc, #240]	; (800d7f8 <TIM_Base_SetConfig+0x11c>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d007      	beq.n	800d71c <TIM_Base_SetConfig+0x40>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a3b      	ldr	r2, [pc, #236]	; (800d7fc <TIM_Base_SetConfig+0x120>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d003      	beq.n	800d71c <TIM_Base_SetConfig+0x40>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a3a      	ldr	r2, [pc, #232]	; (800d800 <TIM_Base_SetConfig+0x124>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d108      	bne.n	800d72e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	4313      	orrs	r3, r2
 800d72c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4a2f      	ldr	r2, [pc, #188]	; (800d7f0 <TIM_Base_SetConfig+0x114>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d01f      	beq.n	800d776 <TIM_Base_SetConfig+0x9a>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d73c:	d01b      	beq.n	800d776 <TIM_Base_SetConfig+0x9a>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4a2c      	ldr	r2, [pc, #176]	; (800d7f4 <TIM_Base_SetConfig+0x118>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d017      	beq.n	800d776 <TIM_Base_SetConfig+0x9a>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	4a2b      	ldr	r2, [pc, #172]	; (800d7f8 <TIM_Base_SetConfig+0x11c>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d013      	beq.n	800d776 <TIM_Base_SetConfig+0x9a>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4a2a      	ldr	r2, [pc, #168]	; (800d7fc <TIM_Base_SetConfig+0x120>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d00f      	beq.n	800d776 <TIM_Base_SetConfig+0x9a>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a29      	ldr	r2, [pc, #164]	; (800d800 <TIM_Base_SetConfig+0x124>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d00b      	beq.n	800d776 <TIM_Base_SetConfig+0x9a>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4a28      	ldr	r2, [pc, #160]	; (800d804 <TIM_Base_SetConfig+0x128>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d007      	beq.n	800d776 <TIM_Base_SetConfig+0x9a>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4a27      	ldr	r2, [pc, #156]	; (800d808 <TIM_Base_SetConfig+0x12c>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d003      	beq.n	800d776 <TIM_Base_SetConfig+0x9a>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4a26      	ldr	r2, [pc, #152]	; (800d80c <TIM_Base_SetConfig+0x130>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d108      	bne.n	800d788 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d77c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	68fa      	ldr	r2, [r7, #12]
 800d784:	4313      	orrs	r3, r2
 800d786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	695b      	ldr	r3, [r3, #20]
 800d792:	4313      	orrs	r3, r2
 800d794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	689a      	ldr	r2, [r3, #8]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a10      	ldr	r2, [pc, #64]	; (800d7f0 <TIM_Base_SetConfig+0x114>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d00f      	beq.n	800d7d4 <TIM_Base_SetConfig+0xf8>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a12      	ldr	r2, [pc, #72]	; (800d800 <TIM_Base_SetConfig+0x124>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d00b      	beq.n	800d7d4 <TIM_Base_SetConfig+0xf8>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a11      	ldr	r2, [pc, #68]	; (800d804 <TIM_Base_SetConfig+0x128>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d007      	beq.n	800d7d4 <TIM_Base_SetConfig+0xf8>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a10      	ldr	r2, [pc, #64]	; (800d808 <TIM_Base_SetConfig+0x12c>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d003      	beq.n	800d7d4 <TIM_Base_SetConfig+0xf8>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a0f      	ldr	r2, [pc, #60]	; (800d80c <TIM_Base_SetConfig+0x130>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d103      	bne.n	800d7dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	691a      	ldr	r2, [r3, #16]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	615a      	str	r2, [r3, #20]
}
 800d7e2:	bf00      	nop
 800d7e4:	3714      	adds	r7, #20
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	40010000 	.word	0x40010000
 800d7f4:	40000400 	.word	0x40000400
 800d7f8:	40000800 	.word	0x40000800
 800d7fc:	40000c00 	.word	0x40000c00
 800d800:	40010400 	.word	0x40010400
 800d804:	40014000 	.word	0x40014000
 800d808:	40014400 	.word	0x40014400
 800d80c:	40014800 	.word	0x40014800

0800d810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a1b      	ldr	r3, [r3, #32]
 800d81e:	f023 0201 	bic.w	r2, r3, #1
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	699b      	ldr	r3, [r3, #24]
 800d836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	4b37      	ldr	r3, [pc, #220]	; (800d918 <TIM_OC1_SetConfig+0x108>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f023 0303 	bic.w	r3, r3, #3
 800d846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	4313      	orrs	r3, r2
 800d850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	f023 0302 	bic.w	r3, r3, #2
 800d858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	4313      	orrs	r3, r2
 800d862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a2d      	ldr	r2, [pc, #180]	; (800d91c <TIM_OC1_SetConfig+0x10c>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d00f      	beq.n	800d88c <TIM_OC1_SetConfig+0x7c>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a2c      	ldr	r2, [pc, #176]	; (800d920 <TIM_OC1_SetConfig+0x110>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d00b      	beq.n	800d88c <TIM_OC1_SetConfig+0x7c>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a2b      	ldr	r2, [pc, #172]	; (800d924 <TIM_OC1_SetConfig+0x114>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d007      	beq.n	800d88c <TIM_OC1_SetConfig+0x7c>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a2a      	ldr	r2, [pc, #168]	; (800d928 <TIM_OC1_SetConfig+0x118>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d003      	beq.n	800d88c <TIM_OC1_SetConfig+0x7c>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4a29      	ldr	r2, [pc, #164]	; (800d92c <TIM_OC1_SetConfig+0x11c>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d10c      	bne.n	800d8a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	f023 0308 	bic.w	r3, r3, #8
 800d892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	697a      	ldr	r2, [r7, #20]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	f023 0304 	bic.w	r3, r3, #4
 800d8a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a1c      	ldr	r2, [pc, #112]	; (800d91c <TIM_OC1_SetConfig+0x10c>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d00f      	beq.n	800d8ce <TIM_OC1_SetConfig+0xbe>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4a1b      	ldr	r2, [pc, #108]	; (800d920 <TIM_OC1_SetConfig+0x110>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d00b      	beq.n	800d8ce <TIM_OC1_SetConfig+0xbe>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	4a1a      	ldr	r2, [pc, #104]	; (800d924 <TIM_OC1_SetConfig+0x114>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d007      	beq.n	800d8ce <TIM_OC1_SetConfig+0xbe>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4a19      	ldr	r2, [pc, #100]	; (800d928 <TIM_OC1_SetConfig+0x118>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d003      	beq.n	800d8ce <TIM_OC1_SetConfig+0xbe>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4a18      	ldr	r2, [pc, #96]	; (800d92c <TIM_OC1_SetConfig+0x11c>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d111      	bne.n	800d8f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	695b      	ldr	r3, [r3, #20]
 800d8e2:	693a      	ldr	r2, [r7, #16]
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	693a      	ldr	r2, [r7, #16]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	685a      	ldr	r2, [r3, #4]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	621a      	str	r2, [r3, #32]
}
 800d90c:	bf00      	nop
 800d90e:	371c      	adds	r7, #28
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr
 800d918:	fffeff8f 	.word	0xfffeff8f
 800d91c:	40010000 	.word	0x40010000
 800d920:	40010400 	.word	0x40010400
 800d924:	40014000 	.word	0x40014000
 800d928:	40014400 	.word	0x40014400
 800d92c:	40014800 	.word	0x40014800

0800d930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d930:	b480      	push	{r7}
 800d932:	b087      	sub	sp, #28
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	f023 0210 	bic.w	r2, r3, #16
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	4b34      	ldr	r3, [pc, #208]	; (800da2c <TIM_OC2_SetConfig+0xfc>)
 800d95c:	4013      	ands	r3, r2
 800d95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	021b      	lsls	r3, r3, #8
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	4313      	orrs	r3, r2
 800d972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	f023 0320 	bic.w	r3, r3, #32
 800d97a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	011b      	lsls	r3, r3, #4
 800d982:	697a      	ldr	r2, [r7, #20]
 800d984:	4313      	orrs	r3, r2
 800d986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a29      	ldr	r2, [pc, #164]	; (800da30 <TIM_OC2_SetConfig+0x100>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d003      	beq.n	800d998 <TIM_OC2_SetConfig+0x68>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a28      	ldr	r2, [pc, #160]	; (800da34 <TIM_OC2_SetConfig+0x104>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d10d      	bne.n	800d9b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d99e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	011b      	lsls	r3, r3, #4
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4a1e      	ldr	r2, [pc, #120]	; (800da30 <TIM_OC2_SetConfig+0x100>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d00f      	beq.n	800d9dc <TIM_OC2_SetConfig+0xac>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	4a1d      	ldr	r2, [pc, #116]	; (800da34 <TIM_OC2_SetConfig+0x104>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d00b      	beq.n	800d9dc <TIM_OC2_SetConfig+0xac>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	4a1c      	ldr	r2, [pc, #112]	; (800da38 <TIM_OC2_SetConfig+0x108>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d007      	beq.n	800d9dc <TIM_OC2_SetConfig+0xac>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4a1b      	ldr	r2, [pc, #108]	; (800da3c <TIM_OC2_SetConfig+0x10c>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d003      	beq.n	800d9dc <TIM_OC2_SetConfig+0xac>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	4a1a      	ldr	r2, [pc, #104]	; (800da40 <TIM_OC2_SetConfig+0x110>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d113      	bne.n	800da04 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	695b      	ldr	r3, [r3, #20]
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	699b      	ldr	r3, [r3, #24]
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	4313      	orrs	r3, r2
 800da02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	693a      	ldr	r2, [r7, #16]
 800da08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	621a      	str	r2, [r3, #32]
}
 800da1e:	bf00      	nop
 800da20:	371c      	adds	r7, #28
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	feff8fff 	.word	0xfeff8fff
 800da30:	40010000 	.word	0x40010000
 800da34:	40010400 	.word	0x40010400
 800da38:	40014000 	.word	0x40014000
 800da3c:	40014400 	.word	0x40014400
 800da40:	40014800 	.word	0x40014800

0800da44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da44:	b480      	push	{r7}
 800da46:	b087      	sub	sp, #28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	69db      	ldr	r3, [r3, #28]
 800da6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	4b33      	ldr	r3, [pc, #204]	; (800db3c <TIM_OC3_SetConfig+0xf8>)
 800da70:	4013      	ands	r3, r2
 800da72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f023 0303 	bic.w	r3, r3, #3
 800da7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	4313      	orrs	r3, r2
 800da84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	021b      	lsls	r3, r3, #8
 800da94:	697a      	ldr	r2, [r7, #20]
 800da96:	4313      	orrs	r3, r2
 800da98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a28      	ldr	r2, [pc, #160]	; (800db40 <TIM_OC3_SetConfig+0xfc>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d003      	beq.n	800daaa <TIM_OC3_SetConfig+0x66>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a27      	ldr	r2, [pc, #156]	; (800db44 <TIM_OC3_SetConfig+0x100>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d10d      	bne.n	800dac6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	021b      	lsls	r3, r3, #8
 800dab8:	697a      	ldr	r2, [r7, #20]
 800daba:	4313      	orrs	r3, r2
 800dabc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a1d      	ldr	r2, [pc, #116]	; (800db40 <TIM_OC3_SetConfig+0xfc>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d00f      	beq.n	800daee <TIM_OC3_SetConfig+0xaa>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a1c      	ldr	r2, [pc, #112]	; (800db44 <TIM_OC3_SetConfig+0x100>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d00b      	beq.n	800daee <TIM_OC3_SetConfig+0xaa>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a1b      	ldr	r2, [pc, #108]	; (800db48 <TIM_OC3_SetConfig+0x104>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d007      	beq.n	800daee <TIM_OC3_SetConfig+0xaa>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a1a      	ldr	r2, [pc, #104]	; (800db4c <TIM_OC3_SetConfig+0x108>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d003      	beq.n	800daee <TIM_OC3_SetConfig+0xaa>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a19      	ldr	r2, [pc, #100]	; (800db50 <TIM_OC3_SetConfig+0x10c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d113      	bne.n	800db16 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dafc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	695b      	ldr	r3, [r3, #20]
 800db02:	011b      	lsls	r3, r3, #4
 800db04:	693a      	ldr	r2, [r7, #16]
 800db06:	4313      	orrs	r3, r2
 800db08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	699b      	ldr	r3, [r3, #24]
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	693a      	ldr	r2, [r7, #16]
 800db12:	4313      	orrs	r3, r2
 800db14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	693a      	ldr	r2, [r7, #16]
 800db1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	685a      	ldr	r2, [r3, #4]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	697a      	ldr	r2, [r7, #20]
 800db2e:	621a      	str	r2, [r3, #32]
}
 800db30:	bf00      	nop
 800db32:	371c      	adds	r7, #28
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	fffeff8f 	.word	0xfffeff8f
 800db40:	40010000 	.word	0x40010000
 800db44:	40010400 	.word	0x40010400
 800db48:	40014000 	.word	0x40014000
 800db4c:	40014400 	.word	0x40014400
 800db50:	40014800 	.word	0x40014800

0800db54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db54:	b480      	push	{r7}
 800db56:	b087      	sub	sp, #28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6a1b      	ldr	r3, [r3, #32]
 800db62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	69db      	ldr	r3, [r3, #28]
 800db7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	4b24      	ldr	r3, [pc, #144]	; (800dc10 <TIM_OC4_SetConfig+0xbc>)
 800db80:	4013      	ands	r3, r2
 800db82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	021b      	lsls	r3, r3, #8
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	4313      	orrs	r3, r2
 800db96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	031b      	lsls	r3, r3, #12
 800dba6:	693a      	ldr	r2, [r7, #16]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4a19      	ldr	r2, [pc, #100]	; (800dc14 <TIM_OC4_SetConfig+0xc0>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d00f      	beq.n	800dbd4 <TIM_OC4_SetConfig+0x80>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	4a18      	ldr	r2, [pc, #96]	; (800dc18 <TIM_OC4_SetConfig+0xc4>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d00b      	beq.n	800dbd4 <TIM_OC4_SetConfig+0x80>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4a17      	ldr	r2, [pc, #92]	; (800dc1c <TIM_OC4_SetConfig+0xc8>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d007      	beq.n	800dbd4 <TIM_OC4_SetConfig+0x80>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4a16      	ldr	r2, [pc, #88]	; (800dc20 <TIM_OC4_SetConfig+0xcc>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d003      	beq.n	800dbd4 <TIM_OC4_SetConfig+0x80>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4a15      	ldr	r2, [pc, #84]	; (800dc24 <TIM_OC4_SetConfig+0xd0>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d109      	bne.n	800dbe8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	019b      	lsls	r3, r3, #6
 800dbe2:	697a      	ldr	r2, [r7, #20]
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	697a      	ldr	r2, [r7, #20]
 800dbec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	693a      	ldr	r2, [r7, #16]
 800dc00:	621a      	str	r2, [r3, #32]
}
 800dc02:	bf00      	nop
 800dc04:	371c      	adds	r7, #28
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	feff8fff 	.word	0xfeff8fff
 800dc14:	40010000 	.word	0x40010000
 800dc18:	40010400 	.word	0x40010400
 800dc1c:	40014000 	.word	0x40014000
 800dc20:	40014400 	.word	0x40014400
 800dc24:	40014800 	.word	0x40014800

0800dc28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b087      	sub	sp, #28
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6a1b      	ldr	r3, [r3, #32]
 800dc36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	4b21      	ldr	r3, [pc, #132]	; (800dcd8 <TIM_OC5_SetConfig+0xb0>)
 800dc54:	4013      	ands	r3, r2
 800dc56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dc68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	041b      	lsls	r3, r3, #16
 800dc70:	693a      	ldr	r2, [r7, #16]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4a18      	ldr	r2, [pc, #96]	; (800dcdc <TIM_OC5_SetConfig+0xb4>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d00f      	beq.n	800dc9e <TIM_OC5_SetConfig+0x76>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4a17      	ldr	r2, [pc, #92]	; (800dce0 <TIM_OC5_SetConfig+0xb8>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d00b      	beq.n	800dc9e <TIM_OC5_SetConfig+0x76>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4a16      	ldr	r2, [pc, #88]	; (800dce4 <TIM_OC5_SetConfig+0xbc>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d007      	beq.n	800dc9e <TIM_OC5_SetConfig+0x76>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a15      	ldr	r2, [pc, #84]	; (800dce8 <TIM_OC5_SetConfig+0xc0>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d003      	beq.n	800dc9e <TIM_OC5_SetConfig+0x76>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4a14      	ldr	r2, [pc, #80]	; (800dcec <TIM_OC5_SetConfig+0xc4>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d109      	bne.n	800dcb2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dca4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	021b      	lsls	r3, r3, #8
 800dcac:	697a      	ldr	r2, [r7, #20]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	697a      	ldr	r2, [r7, #20]
 800dcb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	685a      	ldr	r2, [r3, #4]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	693a      	ldr	r2, [r7, #16]
 800dcca:	621a      	str	r2, [r3, #32]
}
 800dccc:	bf00      	nop
 800dcce:	371c      	adds	r7, #28
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	fffeff8f 	.word	0xfffeff8f
 800dcdc:	40010000 	.word	0x40010000
 800dce0:	40010400 	.word	0x40010400
 800dce4:	40014000 	.word	0x40014000
 800dce8:	40014400 	.word	0x40014400
 800dcec:	40014800 	.word	0x40014800

0800dcf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a1b      	ldr	r3, [r3, #32]
 800dcfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a1b      	ldr	r3, [r3, #32]
 800dd0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	4b22      	ldr	r3, [pc, #136]	; (800dda4 <TIM_OC6_SetConfig+0xb4>)
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	021b      	lsls	r3, r3, #8
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	051b      	lsls	r3, r3, #20
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4a19      	ldr	r2, [pc, #100]	; (800dda8 <TIM_OC6_SetConfig+0xb8>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d00f      	beq.n	800dd68 <TIM_OC6_SetConfig+0x78>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4a18      	ldr	r2, [pc, #96]	; (800ddac <TIM_OC6_SetConfig+0xbc>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d00b      	beq.n	800dd68 <TIM_OC6_SetConfig+0x78>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a17      	ldr	r2, [pc, #92]	; (800ddb0 <TIM_OC6_SetConfig+0xc0>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d007      	beq.n	800dd68 <TIM_OC6_SetConfig+0x78>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a16      	ldr	r2, [pc, #88]	; (800ddb4 <TIM_OC6_SetConfig+0xc4>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d003      	beq.n	800dd68 <TIM_OC6_SetConfig+0x78>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a15      	ldr	r2, [pc, #84]	; (800ddb8 <TIM_OC6_SetConfig+0xc8>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d109      	bne.n	800dd7c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	695b      	ldr	r3, [r3, #20]
 800dd74:	029b      	lsls	r3, r3, #10
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	621a      	str	r2, [r3, #32]
}
 800dd96:	bf00      	nop
 800dd98:	371c      	adds	r7, #28
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	feff8fff 	.word	0xfeff8fff
 800dda8:	40010000 	.word	0x40010000
 800ddac:	40010400 	.word	0x40010400
 800ddb0:	40014000 	.word	0x40014000
 800ddb4:	40014400 	.word	0x40014400
 800ddb8:	40014800 	.word	0x40014800

0800ddbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b087      	sub	sp, #28
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6a1b      	ldr	r3, [r3, #32]
 800ddcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	f023 0201 	bic.w	r2, r3, #1
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	699b      	ldr	r3, [r3, #24]
 800ddde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dde6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	011b      	lsls	r3, r3, #4
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	f023 030a 	bic.w	r3, r3, #10
 800ddf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ddfa:	697a      	ldr	r2, [r7, #20]
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	4313      	orrs	r3, r2
 800de00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	697a      	ldr	r2, [r7, #20]
 800de0c:	621a      	str	r2, [r3, #32]
}
 800de0e:	bf00      	nop
 800de10:	371c      	adds	r7, #28
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr

0800de1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de1a:	b480      	push	{r7}
 800de1c:	b087      	sub	sp, #28
 800de1e:	af00      	add	r7, sp, #0
 800de20:	60f8      	str	r0, [r7, #12]
 800de22:	60b9      	str	r1, [r7, #8]
 800de24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6a1b      	ldr	r3, [r3, #32]
 800de2a:	f023 0210 	bic.w	r2, r3, #16
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6a1b      	ldr	r3, [r3, #32]
 800de3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	031b      	lsls	r3, r3, #12
 800de4a:	697a      	ldr	r2, [r7, #20]
 800de4c:	4313      	orrs	r3, r2
 800de4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800de56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	011b      	lsls	r3, r3, #4
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	4313      	orrs	r3, r2
 800de60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	697a      	ldr	r2, [r7, #20]
 800de66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	693a      	ldr	r2, [r7, #16]
 800de6c:	621a      	str	r2, [r3, #32]
}
 800de6e:	bf00      	nop
 800de70:	371c      	adds	r7, #28
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
	...

0800de7c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	4b09      	ldr	r3, [pc, #36]	; (800deb4 <TIM_ITRx_SetConfig+0x38>)
 800de90:	4013      	ands	r3, r2
 800de92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de94:	683a      	ldr	r2, [r7, #0]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	4313      	orrs	r3, r2
 800de9a:	f043 0307 	orr.w	r3, r3, #7
 800de9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	609a      	str	r2, [r3, #8]
}
 800dea6:	bf00      	nop
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	ffcfff8f 	.word	0xffcfff8f

0800deb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800deb8:	b480      	push	{r7}
 800deba:	b087      	sub	sp, #28
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	607a      	str	r2, [r7, #4]
 800dec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	689b      	ldr	r3, [r3, #8]
 800deca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ded2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	021a      	lsls	r2, r3, #8
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	431a      	orrs	r2, r3
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	4313      	orrs	r3, r2
 800dee0:	697a      	ldr	r2, [r7, #20]
 800dee2:	4313      	orrs	r3, r2
 800dee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	697a      	ldr	r2, [r7, #20]
 800deea:	609a      	str	r2, [r3, #8]
}
 800deec:	bf00      	nop
 800deee:	371c      	adds	r7, #28
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800def8:	b480      	push	{r7}
 800defa:	b087      	sub	sp, #28
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	f003 031f 	and.w	r3, r3, #31
 800df0a:	2201      	movs	r2, #1
 800df0c:	fa02 f303 	lsl.w	r3, r2, r3
 800df10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6a1a      	ldr	r2, [r3, #32]
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	43db      	mvns	r3, r3
 800df1a:	401a      	ands	r2, r3
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	6a1a      	ldr	r2, [r3, #32]
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	f003 031f 	and.w	r3, r3, #31
 800df2a:	6879      	ldr	r1, [r7, #4]
 800df2c:	fa01 f303 	lsl.w	r3, r1, r3
 800df30:	431a      	orrs	r2, r3
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	621a      	str	r2, [r3, #32]
}
 800df36:	bf00      	nop
 800df38:	371c      	adds	r7, #28
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
	...

0800df44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df54:	2b01      	cmp	r3, #1
 800df56:	d101      	bne.n	800df5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df58:	2302      	movs	r3, #2
 800df5a:	e06d      	b.n	800e038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2201      	movs	r2, #1
 800df60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2202      	movs	r2, #2
 800df68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a30      	ldr	r2, [pc, #192]	; (800e044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d004      	beq.n	800df90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a2f      	ldr	r2, [pc, #188]	; (800e048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d108      	bne.n	800dfa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a20      	ldr	r2, [pc, #128]	; (800e044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d022      	beq.n	800e00c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfce:	d01d      	beq.n	800e00c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a1d      	ldr	r2, [pc, #116]	; (800e04c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d018      	beq.n	800e00c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a1c      	ldr	r2, [pc, #112]	; (800e050 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d013      	beq.n	800e00c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a1a      	ldr	r2, [pc, #104]	; (800e054 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d00e      	beq.n	800e00c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a15      	ldr	r2, [pc, #84]	; (800e048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d009      	beq.n	800e00c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4a16      	ldr	r2, [pc, #88]	; (800e058 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d004      	beq.n	800e00c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4a15      	ldr	r2, [pc, #84]	; (800e05c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d10c      	bne.n	800e026 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e012:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	68ba      	ldr	r2, [r7, #8]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	40010000 	.word	0x40010000
 800e048:	40010400 	.word	0x40010400
 800e04c:	40000400 	.word	0x40000400
 800e050:	40000800 	.word	0x40000800
 800e054:	40000c00 	.word	0x40000c00
 800e058:	40001800 	.word	0x40001800
 800e05c:	40014000 	.word	0x40014000

0800e060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e06a:	2300      	movs	r3, #0
 800e06c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e074:	2b01      	cmp	r3, #1
 800e076:	d101      	bne.n	800e07c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e078:	2302      	movs	r3, #2
 800e07a:	e065      	b.n	800e148 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	4313      	orrs	r3, r2
 800e090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	4313      	orrs	r3, r2
 800e09e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	691b      	ldr	r3, [r3, #16]
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	695b      	ldr	r3, [r3, #20]
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	699b      	ldr	r3, [r3, #24]
 800e0f0:	041b      	lsls	r3, r3, #16
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4a16      	ldr	r2, [pc, #88]	; (800e154 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d004      	beq.n	800e10a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a14      	ldr	r2, [pc, #80]	; (800e158 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d115      	bne.n	800e136 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e114:	051b      	lsls	r3, r3, #20
 800e116:	4313      	orrs	r3, r2
 800e118:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	4313      	orrs	r3, r2
 800e126:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	6a1b      	ldr	r3, [r3, #32]
 800e132:	4313      	orrs	r3, r2
 800e134:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e146:	2300      	movs	r3, #0
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3714      	adds	r7, #20
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr
 800e154:	40010000 	.word	0x40010000
 800e158:	40010400 	.word	0x40010400

0800e15c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e042      	b.n	800e230 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d106      	bne.n	800e1c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7f5 fe93 	bl	8003ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2224      	movs	r2, #36	; 0x24
 800e1c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f022 0201 	bic.w	r2, r2, #1
 800e1d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fce0 	bl	800eba0 <UART_SetConfig>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d101      	bne.n	800e1ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e022      	b.n	800e230 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d002      	beq.n	800e1f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f001 fa34 	bl	800f660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	689a      	ldr	r2, [r3, #8]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f042 0201 	orr.w	r2, r2, #1
 800e226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f001 fabb 	bl	800f7a4 <UART_CheckIdleState>
 800e22e:	4603      	mov	r3, r0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08a      	sub	sp, #40	; 0x28
 800e23c:	af02      	add	r7, sp, #8
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	603b      	str	r3, [r7, #0]
 800e244:	4613      	mov	r3, r2
 800e246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e24e:	2b20      	cmp	r3, #32
 800e250:	f040 8083 	bne.w	800e35a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d002      	beq.n	800e260 <HAL_UART_Transmit+0x28>
 800e25a:	88fb      	ldrh	r3, [r7, #6]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d101      	bne.n	800e264 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e260:	2301      	movs	r3, #1
 800e262:	e07b      	b.n	800e35c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d101      	bne.n	800e272 <HAL_UART_Transmit+0x3a>
 800e26e:	2302      	movs	r3, #2
 800e270:	e074      	b.n	800e35c <HAL_UART_Transmit+0x124>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2201      	movs	r2, #1
 800e276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2221      	movs	r2, #33	; 0x21
 800e286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e28a:	f7f6 f9a9 	bl	80045e0 <HAL_GetTick>
 800e28e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	88fa      	ldrh	r2, [r7, #6]
 800e294:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	88fa      	ldrh	r2, [r7, #6]
 800e29c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2a8:	d108      	bne.n	800e2bc <HAL_UART_Transmit+0x84>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d104      	bne.n	800e2bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	61bb      	str	r3, [r7, #24]
 800e2ba:	e003      	b.n	800e2c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e2cc:	e02c      	b.n	800e328 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	2180      	movs	r1, #128	; 0x80
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f001 faae 	bl	800f83a <UART_WaitOnFlagUntilTimeout>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d001      	beq.n	800e2e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e2e4:	2303      	movs	r3, #3
 800e2e6:	e039      	b.n	800e35c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10b      	bne.n	800e306 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	881b      	ldrh	r3, [r3, #0]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	3302      	adds	r3, #2
 800e302:	61bb      	str	r3, [r7, #24]
 800e304:	e007      	b.n	800e316 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	781a      	ldrb	r2, [r3, #0]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	3301      	adds	r3, #1
 800e314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	3b01      	subs	r3, #1
 800e320:	b29a      	uxth	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e32e:	b29b      	uxth	r3, r3
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1cc      	bne.n	800e2ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	2200      	movs	r2, #0
 800e33c:	2140      	movs	r1, #64	; 0x40
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f001 fa7b 	bl	800f83a <UART_WaitOnFlagUntilTimeout>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e34a:	2303      	movs	r3, #3
 800e34c:	e006      	b.n	800e35c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2220      	movs	r2, #32
 800e352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e356:	2300      	movs	r3, #0
 800e358:	e000      	b.n	800e35c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e35a:	2302      	movs	r3, #2
  }
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3720      	adds	r7, #32
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08a      	sub	sp, #40	; 0x28
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	4613      	mov	r3, r2
 800e370:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e378:	2b20      	cmp	r3, #32
 800e37a:	d142      	bne.n	800e402 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d002      	beq.n	800e388 <HAL_UART_Receive_DMA+0x24>
 800e382:	88fb      	ldrh	r3, [r7, #6]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	e03b      	b.n	800e404 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e392:	2b01      	cmp	r3, #1
 800e394:	d101      	bne.n	800e39a <HAL_UART_Receive_DMA+0x36>
 800e396:	2302      	movs	r3, #2
 800e398:	e034      	b.n	800e404 <HAL_UART_Receive_DMA+0xa0>
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a17      	ldr	r2, [pc, #92]	; (800e40c <HAL_UART_Receive_DMA+0xa8>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d01f      	beq.n	800e3f2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d018      	beq.n	800e3f2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	e853 3f00 	ldrex	r3, [r3]
 800e3cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e3d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	461a      	mov	r2, r3
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3de:	623b      	str	r3, [r7, #32]
 800e3e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e2:	69f9      	ldr	r1, [r7, #28]
 800e3e4:	6a3a      	ldr	r2, [r7, #32]
 800e3e6:	e841 2300 	strex	r3, r2, [r1]
 800e3ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d1e6      	bne.n	800e3c0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e3f2:	88fb      	ldrh	r3, [r7, #6]
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	68b9      	ldr	r1, [r7, #8]
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f001 fae7 	bl	800f9cc <UART_Start_Receive_DMA>
 800e3fe:	4603      	mov	r3, r0
 800e400:	e000      	b.n	800e404 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e402:	2302      	movs	r3, #2
  }
}
 800e404:	4618      	mov	r0, r3
 800e406:	3728      	adds	r7, #40	; 0x28
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	58000c00 	.word	0x58000c00

0800e410 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b0ba      	sub	sp, #232	; 0xe8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	69db      	ldr	r3, [r3, #28]
 800e41e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e436:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e43a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e43e:	4013      	ands	r3, r2
 800e440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d11b      	bne.n	800e484 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e450:	f003 0320 	and.w	r3, r3, #32
 800e454:	2b00      	cmp	r3, #0
 800e456:	d015      	beq.n	800e484 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e45c:	f003 0320 	and.w	r3, r3, #32
 800e460:	2b00      	cmp	r3, #0
 800e462:	d105      	bne.n	800e470 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d009      	beq.n	800e484 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e474:	2b00      	cmp	r3, #0
 800e476:	f000 835a 	beq.w	800eb2e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	4798      	blx	r3
      }
      return;
 800e482:	e354      	b.n	800eb2e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 811f 	beq.w	800e6cc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e48e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e492:	4b8b      	ldr	r3, [pc, #556]	; (800e6c0 <HAL_UART_IRQHandler+0x2b0>)
 800e494:	4013      	ands	r3, r2
 800e496:	2b00      	cmp	r3, #0
 800e498:	d106      	bne.n	800e4a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e49a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e49e:	4b89      	ldr	r3, [pc, #548]	; (800e6c4 <HAL_UART_IRQHandler+0x2b4>)
 800e4a0:	4013      	ands	r3, r2
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f000 8112 	beq.w	800e6cc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ac:	f003 0301 	and.w	r3, r3, #1
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d011      	beq.n	800e4d8 <HAL_UART_IRQHandler+0xc8>
 800e4b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00b      	beq.n	800e4d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4ce:	f043 0201 	orr.w	r2, r3, #1
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4dc:	f003 0302 	and.w	r3, r3, #2
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d011      	beq.n	800e508 <HAL_UART_IRQHandler+0xf8>
 800e4e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4e8:	f003 0301 	and.w	r3, r3, #1
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00b      	beq.n	800e508 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2202      	movs	r2, #2
 800e4f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4fe:	f043 0204 	orr.w	r2, r3, #4
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e50c:	f003 0304 	and.w	r3, r3, #4
 800e510:	2b00      	cmp	r3, #0
 800e512:	d011      	beq.n	800e538 <HAL_UART_IRQHandler+0x128>
 800e514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e518:	f003 0301 	and.w	r3, r3, #1
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d00b      	beq.n	800e538 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2204      	movs	r2, #4
 800e526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e52e:	f043 0202 	orr.w	r2, r3, #2
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e53c:	f003 0308 	and.w	r3, r3, #8
 800e540:	2b00      	cmp	r3, #0
 800e542:	d017      	beq.n	800e574 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e548:	f003 0320 	and.w	r3, r3, #32
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d105      	bne.n	800e55c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e550:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e554:	4b5a      	ldr	r3, [pc, #360]	; (800e6c0 <HAL_UART_IRQHandler+0x2b0>)
 800e556:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00b      	beq.n	800e574 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2208      	movs	r2, #8
 800e562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e56a:	f043 0208 	orr.w	r2, r3, #8
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d012      	beq.n	800e5a6 <HAL_UART_IRQHandler+0x196>
 800e580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00c      	beq.n	800e5a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e59c:	f043 0220 	orr.w	r2, r3, #32
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 82c0 	beq.w	800eb32 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5b6:	f003 0320 	and.w	r3, r3, #32
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d013      	beq.n	800e5e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e5be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5c2:	f003 0320 	and.w	r3, r3, #32
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d105      	bne.n	800e5d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e5ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d007      	beq.n	800e5e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d003      	beq.n	800e5e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5fa:	2b40      	cmp	r3, #64	; 0x40
 800e5fc:	d005      	beq.n	800e60a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e5fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e602:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e606:	2b00      	cmp	r3, #0
 800e608:	d04f      	beq.n	800e6aa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f001 fac8 	bl	800fba0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	689b      	ldr	r3, [r3, #8]
 800e616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e61a:	2b40      	cmp	r3, #64	; 0x40
 800e61c:	d141      	bne.n	800e6a2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3308      	adds	r3, #8
 800e624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e62c:	e853 3f00 	ldrex	r3, [r3]
 800e630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e63c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3308      	adds	r3, #8
 800e646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e64a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e64e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e65a:	e841 2300 	strex	r3, r2, [r1]
 800e65e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1d9      	bne.n	800e61e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d013      	beq.n	800e69a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e676:	4a14      	ldr	r2, [pc, #80]	; (800e6c8 <HAL_UART_IRQHandler+0x2b8>)
 800e678:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e67e:	4618      	mov	r0, r3
 800e680:	f7f8 f98e 	bl	80069a0 <HAL_DMA_Abort_IT>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d017      	beq.n	800e6ba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e694:	4610      	mov	r0, r2
 800e696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e698:	e00f      	b.n	800e6ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 fa6a 	bl	800eb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6a0:	e00b      	b.n	800e6ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 fa66 	bl	800eb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6a8:	e007      	b.n	800e6ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fa62 	bl	800eb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e6b8:	e23b      	b.n	800eb32 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6ba:	bf00      	nop
    return;
 800e6bc:	e239      	b.n	800eb32 <HAL_UART_IRQHandler+0x722>
 800e6be:	bf00      	nop
 800e6c0:	10000001 	.word	0x10000001
 800e6c4:	04000120 	.word	0x04000120
 800e6c8:	0800fe47 	.word	0x0800fe47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	f040 81ce 	bne.w	800ea72 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6da:	f003 0310 	and.w	r3, r3, #16
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f000 81c7 	beq.w	800ea72 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6e8:	f003 0310 	and.w	r3, r3, #16
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f000 81c0 	beq.w	800ea72 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2210      	movs	r2, #16
 800e6f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	689b      	ldr	r3, [r3, #8]
 800e700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e704:	2b40      	cmp	r3, #64	; 0x40
 800e706:	f040 813b 	bne.w	800e980 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a8b      	ldr	r2, [pc, #556]	; (800e940 <HAL_UART_IRQHandler+0x530>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d059      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a89      	ldr	r2, [pc, #548]	; (800e944 <HAL_UART_IRQHandler+0x534>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d053      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a87      	ldr	r2, [pc, #540]	; (800e948 <HAL_UART_IRQHandler+0x538>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d04d      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4a85      	ldr	r2, [pc, #532]	; (800e94c <HAL_UART_IRQHandler+0x53c>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d047      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a83      	ldr	r2, [pc, #524]	; (800e950 <HAL_UART_IRQHandler+0x540>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d041      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a81      	ldr	r2, [pc, #516]	; (800e954 <HAL_UART_IRQHandler+0x544>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d03b      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a7f      	ldr	r2, [pc, #508]	; (800e958 <HAL_UART_IRQHandler+0x548>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d035      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a7d      	ldr	r2, [pc, #500]	; (800e95c <HAL_UART_IRQHandler+0x54c>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d02f      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a7b      	ldr	r2, [pc, #492]	; (800e960 <HAL_UART_IRQHandler+0x550>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d029      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a79      	ldr	r2, [pc, #484]	; (800e964 <HAL_UART_IRQHandler+0x554>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d023      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a77      	ldr	r2, [pc, #476]	; (800e968 <HAL_UART_IRQHandler+0x558>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d01d      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a75      	ldr	r2, [pc, #468]	; (800e96c <HAL_UART_IRQHandler+0x55c>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d017      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a73      	ldr	r2, [pc, #460]	; (800e970 <HAL_UART_IRQHandler+0x560>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d011      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a71      	ldr	r2, [pc, #452]	; (800e974 <HAL_UART_IRQHandler+0x564>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d00b      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a6f      	ldr	r2, [pc, #444]	; (800e978 <HAL_UART_IRQHandler+0x568>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d005      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3ba>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a6d      	ldr	r2, [pc, #436]	; (800e97c <HAL_UART_IRQHandler+0x56c>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d105      	bne.n	800e7d6 <HAL_UART_IRQHandler+0x3c6>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	e004      	b.n	800e7e0 <HAL_UART_IRQHandler+0x3d0>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e7e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f000 81a4 	beq.w	800eb36 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e7f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	f080 819c 	bcs.w	800eb36 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e80c:	69db      	ldr	r3, [r3, #28]
 800e80e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e812:	f000 8086 	beq.w	800e922 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e81e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e822:	e853 3f00 	ldrex	r3, [r3]
 800e826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e82a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e82e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	461a      	mov	r2, r3
 800e83c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e844:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e848:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e84c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e850:	e841 2300 	strex	r3, r2, [r1]
 800e854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1da      	bne.n	800e816 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	3308      	adds	r3, #8
 800e866:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e86a:	e853 3f00 	ldrex	r3, [r3]
 800e86e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e872:	f023 0301 	bic.w	r3, r3, #1
 800e876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	3308      	adds	r3, #8
 800e880:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e884:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e888:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e88c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e890:	e841 2300 	strex	r3, r2, [r1]
 800e894:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1e1      	bne.n	800e860 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8a6:	e853 3f00 	ldrex	r3, [r3]
 800e8aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e8ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3308      	adds	r3, #8
 800e8bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e8c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e8c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e8c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8c8:	e841 2300 	strex	r3, r2, [r1]
 800e8cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e8ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d1e3      	bne.n	800e89c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2220      	movs	r2, #32
 800e8d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8ea:	e853 3f00 	ldrex	r3, [r3]
 800e8ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8f2:	f023 0310 	bic.w	r3, r3, #16
 800e8f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	461a      	mov	r2, r3
 800e900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e904:	65bb      	str	r3, [r7, #88]	; 0x58
 800e906:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e90a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e90c:	e841 2300 	strex	r3, r2, [r1]
 800e910:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1e4      	bne.n	800e8e2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7f7 fd21 	bl	8006364 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e92e:	b29b      	uxth	r3, r3
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	b29b      	uxth	r3, r3
 800e934:	4619      	mov	r1, r3
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 f926 	bl	800eb88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e93c:	e0fb      	b.n	800eb36 <HAL_UART_IRQHandler+0x726>
 800e93e:	bf00      	nop
 800e940:	40020010 	.word	0x40020010
 800e944:	40020028 	.word	0x40020028
 800e948:	40020040 	.word	0x40020040
 800e94c:	40020058 	.word	0x40020058
 800e950:	40020070 	.word	0x40020070
 800e954:	40020088 	.word	0x40020088
 800e958:	400200a0 	.word	0x400200a0
 800e95c:	400200b8 	.word	0x400200b8
 800e960:	40020410 	.word	0x40020410
 800e964:	40020428 	.word	0x40020428
 800e968:	40020440 	.word	0x40020440
 800e96c:	40020458 	.word	0x40020458
 800e970:	40020470 	.word	0x40020470
 800e974:	40020488 	.word	0x40020488
 800e978:	400204a0 	.word	0x400204a0
 800e97c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	1ad3      	subs	r3, r2, r3
 800e990:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f000 80cc 	beq.w	800eb3a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e9a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f000 80c7 	beq.w	800eb3a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b4:	e853 3f00 	ldrex	r3, [r3]
 800e9b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e9c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e9ce:	647b      	str	r3, [r7, #68]	; 0x44
 800e9d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9d6:	e841 2300 	strex	r3, r2, [r1]
 800e9da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1e4      	bne.n	800e9ac <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	3308      	adds	r3, #8
 800e9e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ec:	e853 3f00 	ldrex	r3, [r3]
 800e9f0:	623b      	str	r3, [r7, #32]
   return(result);
 800e9f2:	6a3a      	ldr	r2, [r7, #32]
 800e9f4:	4b54      	ldr	r3, [pc, #336]	; (800eb48 <HAL_UART_IRQHandler+0x738>)
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	3308      	adds	r3, #8
 800ea02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea06:	633a      	str	r2, [r7, #48]	; 0x30
 800ea08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea0e:	e841 2300 	strex	r3, r2, [r1]
 800ea12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1e3      	bne.n	800e9e2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2220      	movs	r2, #32
 800ea1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	e853 3f00 	ldrex	r3, [r3]
 800ea3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f023 0310 	bic.w	r3, r3, #16
 800ea42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ea50:	61fb      	str	r3, [r7, #28]
 800ea52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea54:	69b9      	ldr	r1, [r7, #24]
 800ea56:	69fa      	ldr	r2, [r7, #28]
 800ea58:	e841 2300 	strex	r3, r2, [r1]
 800ea5c:	617b      	str	r3, [r7, #20]
   return(result);
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d1e4      	bne.n	800ea2e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ea64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea68:	4619      	mov	r1, r3
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f88c 	bl	800eb88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea70:	e063      	b.n	800eb3a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ea72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00e      	beq.n	800ea9c <HAL_UART_IRQHandler+0x68c>
 800ea7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d008      	beq.n	800ea9c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ea92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f001 fa17 	bl	800fec8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ea9a:	e051      	b.n	800eb40 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ea9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d014      	beq.n	800ead2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eaa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d105      	bne.n	800eac0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d008      	beq.n	800ead2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d03a      	beq.n	800eb3e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	4798      	blx	r3
    }
    return;
 800ead0:	e035      	b.n	800eb3e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ead2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ead6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d009      	beq.n	800eaf2 <HAL_UART_IRQHandler+0x6e2>
 800eade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d003      	beq.n	800eaf2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f001 f9c1 	bl	800fe72 <UART_EndTransmit_IT>
    return;
 800eaf0:	e026      	b.n	800eb40 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eaf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d009      	beq.n	800eb12 <HAL_UART_IRQHandler+0x702>
 800eafe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d003      	beq.n	800eb12 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f001 f9f0 	bl	800fef0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb10:	e016      	b.n	800eb40 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eb12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d010      	beq.n	800eb40 <HAL_UART_IRQHandler+0x730>
 800eb1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	da0c      	bge.n	800eb40 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f001 f9d8 	bl	800fedc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb2c:	e008      	b.n	800eb40 <HAL_UART_IRQHandler+0x730>
      return;
 800eb2e:	bf00      	nop
 800eb30:	e006      	b.n	800eb40 <HAL_UART_IRQHandler+0x730>
    return;
 800eb32:	bf00      	nop
 800eb34:	e004      	b.n	800eb40 <HAL_UART_IRQHandler+0x730>
      return;
 800eb36:	bf00      	nop
 800eb38:	e002      	b.n	800eb40 <HAL_UART_IRQHandler+0x730>
      return;
 800eb3a:	bf00      	nop
 800eb3c:	e000      	b.n	800eb40 <HAL_UART_IRQHandler+0x730>
    return;
 800eb3e:	bf00      	nop
  }
}
 800eb40:	37e8      	adds	r7, #232	; 0xe8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	effffffe 	.word	0xeffffffe

0800eb4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eb54:	bf00      	nop
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800eb68:	bf00      	nop
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eb7c:	bf00      	nop
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	460b      	mov	r3, r1
 800eb92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eb94:	bf00      	nop
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eba0:	b5b0      	push	{r4, r5, r7, lr}
 800eba2:	b08e      	sub	sp, #56	; 0x38
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	689a      	ldr	r2, [r3, #8]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	431a      	orrs	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	695b      	ldr	r3, [r3, #20]
 800ebbc:	431a      	orrs	r2, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	69db      	ldr	r3, [r3, #28]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	4bbf      	ldr	r3, [pc, #764]	; (800eecc <UART_SetConfig+0x32c>)
 800ebce:	4013      	ands	r3, r2
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	6812      	ldr	r2, [r2, #0]
 800ebd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ebd6:	430b      	orrs	r3, r1
 800ebd8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	68da      	ldr	r2, [r3, #12]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	430a      	orrs	r2, r1
 800ebee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	699b      	ldr	r3, [r3, #24]
 800ebf4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4ab5      	ldr	r2, [pc, #724]	; (800eed0 <UART_SetConfig+0x330>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d004      	beq.n	800ec0a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a1b      	ldr	r3, [r3, #32]
 800ec04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec06:	4313      	orrs	r3, r2
 800ec08:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	689a      	ldr	r2, [r3, #8]
 800ec10:	4bb0      	ldr	r3, [pc, #704]	; (800eed4 <UART_SetConfig+0x334>)
 800ec12:	4013      	ands	r3, r2
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	6812      	ldr	r2, [r2, #0]
 800ec18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec1a:	430b      	orrs	r3, r1
 800ec1c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec24:	f023 010f 	bic.w	r1, r3, #15
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	430a      	orrs	r2, r1
 800ec32:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4aa7      	ldr	r2, [pc, #668]	; (800eed8 <UART_SetConfig+0x338>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d176      	bne.n	800ed2c <UART_SetConfig+0x18c>
 800ec3e:	4ba7      	ldr	r3, [pc, #668]	; (800eedc <UART_SetConfig+0x33c>)
 800ec40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec46:	2b28      	cmp	r3, #40	; 0x28
 800ec48:	d86c      	bhi.n	800ed24 <UART_SetConfig+0x184>
 800ec4a:	a201      	add	r2, pc, #4	; (adr r2, 800ec50 <UART_SetConfig+0xb0>)
 800ec4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec50:	0800ecf5 	.word	0x0800ecf5
 800ec54:	0800ed25 	.word	0x0800ed25
 800ec58:	0800ed25 	.word	0x0800ed25
 800ec5c:	0800ed25 	.word	0x0800ed25
 800ec60:	0800ed25 	.word	0x0800ed25
 800ec64:	0800ed25 	.word	0x0800ed25
 800ec68:	0800ed25 	.word	0x0800ed25
 800ec6c:	0800ed25 	.word	0x0800ed25
 800ec70:	0800ecfd 	.word	0x0800ecfd
 800ec74:	0800ed25 	.word	0x0800ed25
 800ec78:	0800ed25 	.word	0x0800ed25
 800ec7c:	0800ed25 	.word	0x0800ed25
 800ec80:	0800ed25 	.word	0x0800ed25
 800ec84:	0800ed25 	.word	0x0800ed25
 800ec88:	0800ed25 	.word	0x0800ed25
 800ec8c:	0800ed25 	.word	0x0800ed25
 800ec90:	0800ed05 	.word	0x0800ed05
 800ec94:	0800ed25 	.word	0x0800ed25
 800ec98:	0800ed25 	.word	0x0800ed25
 800ec9c:	0800ed25 	.word	0x0800ed25
 800eca0:	0800ed25 	.word	0x0800ed25
 800eca4:	0800ed25 	.word	0x0800ed25
 800eca8:	0800ed25 	.word	0x0800ed25
 800ecac:	0800ed25 	.word	0x0800ed25
 800ecb0:	0800ed0d 	.word	0x0800ed0d
 800ecb4:	0800ed25 	.word	0x0800ed25
 800ecb8:	0800ed25 	.word	0x0800ed25
 800ecbc:	0800ed25 	.word	0x0800ed25
 800ecc0:	0800ed25 	.word	0x0800ed25
 800ecc4:	0800ed25 	.word	0x0800ed25
 800ecc8:	0800ed25 	.word	0x0800ed25
 800eccc:	0800ed25 	.word	0x0800ed25
 800ecd0:	0800ed15 	.word	0x0800ed15
 800ecd4:	0800ed25 	.word	0x0800ed25
 800ecd8:	0800ed25 	.word	0x0800ed25
 800ecdc:	0800ed25 	.word	0x0800ed25
 800ece0:	0800ed25 	.word	0x0800ed25
 800ece4:	0800ed25 	.word	0x0800ed25
 800ece8:	0800ed25 	.word	0x0800ed25
 800ecec:	0800ed25 	.word	0x0800ed25
 800ecf0:	0800ed1d 	.word	0x0800ed1d
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecfa:	e222      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ecfc:	2304      	movs	r3, #4
 800ecfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed02:	e21e      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed04:	2308      	movs	r3, #8
 800ed06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed0a:	e21a      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed0c:	2310      	movs	r3, #16
 800ed0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed12:	e216      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed14:	2320      	movs	r3, #32
 800ed16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed1a:	e212      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed1c:	2340      	movs	r3, #64	; 0x40
 800ed1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed22:	e20e      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed24:	2380      	movs	r3, #128	; 0x80
 800ed26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed2a:	e20a      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4a6b      	ldr	r2, [pc, #428]	; (800eee0 <UART_SetConfig+0x340>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d130      	bne.n	800ed98 <UART_SetConfig+0x1f8>
 800ed36:	4b69      	ldr	r3, [pc, #420]	; (800eedc <UART_SetConfig+0x33c>)
 800ed38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed3a:	f003 0307 	and.w	r3, r3, #7
 800ed3e:	2b05      	cmp	r3, #5
 800ed40:	d826      	bhi.n	800ed90 <UART_SetConfig+0x1f0>
 800ed42:	a201      	add	r2, pc, #4	; (adr r2, 800ed48 <UART_SetConfig+0x1a8>)
 800ed44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed48:	0800ed61 	.word	0x0800ed61
 800ed4c:	0800ed69 	.word	0x0800ed69
 800ed50:	0800ed71 	.word	0x0800ed71
 800ed54:	0800ed79 	.word	0x0800ed79
 800ed58:	0800ed81 	.word	0x0800ed81
 800ed5c:	0800ed89 	.word	0x0800ed89
 800ed60:	2300      	movs	r3, #0
 800ed62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed66:	e1ec      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed68:	2304      	movs	r3, #4
 800ed6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed6e:	e1e8      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed70:	2308      	movs	r3, #8
 800ed72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed76:	e1e4      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed78:	2310      	movs	r3, #16
 800ed7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed7e:	e1e0      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed80:	2320      	movs	r3, #32
 800ed82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed86:	e1dc      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed88:	2340      	movs	r3, #64	; 0x40
 800ed8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed8e:	e1d8      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed90:	2380      	movs	r3, #128	; 0x80
 800ed92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed96:	e1d4      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a51      	ldr	r2, [pc, #324]	; (800eee4 <UART_SetConfig+0x344>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d130      	bne.n	800ee04 <UART_SetConfig+0x264>
 800eda2:	4b4e      	ldr	r3, [pc, #312]	; (800eedc <UART_SetConfig+0x33c>)
 800eda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda6:	f003 0307 	and.w	r3, r3, #7
 800edaa:	2b05      	cmp	r3, #5
 800edac:	d826      	bhi.n	800edfc <UART_SetConfig+0x25c>
 800edae:	a201      	add	r2, pc, #4	; (adr r2, 800edb4 <UART_SetConfig+0x214>)
 800edb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb4:	0800edcd 	.word	0x0800edcd
 800edb8:	0800edd5 	.word	0x0800edd5
 800edbc:	0800eddd 	.word	0x0800eddd
 800edc0:	0800ede5 	.word	0x0800ede5
 800edc4:	0800eded 	.word	0x0800eded
 800edc8:	0800edf5 	.word	0x0800edf5
 800edcc:	2300      	movs	r3, #0
 800edce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edd2:	e1b6      	b.n	800f142 <UART_SetConfig+0x5a2>
 800edd4:	2304      	movs	r3, #4
 800edd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edda:	e1b2      	b.n	800f142 <UART_SetConfig+0x5a2>
 800eddc:	2308      	movs	r3, #8
 800edde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ede2:	e1ae      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ede4:	2310      	movs	r3, #16
 800ede6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edea:	e1aa      	b.n	800f142 <UART_SetConfig+0x5a2>
 800edec:	2320      	movs	r3, #32
 800edee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edf2:	e1a6      	b.n	800f142 <UART_SetConfig+0x5a2>
 800edf4:	2340      	movs	r3, #64	; 0x40
 800edf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edfa:	e1a2      	b.n	800f142 <UART_SetConfig+0x5a2>
 800edfc:	2380      	movs	r3, #128	; 0x80
 800edfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee02:	e19e      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a37      	ldr	r2, [pc, #220]	; (800eee8 <UART_SetConfig+0x348>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d130      	bne.n	800ee70 <UART_SetConfig+0x2d0>
 800ee0e:	4b33      	ldr	r3, [pc, #204]	; (800eedc <UART_SetConfig+0x33c>)
 800ee10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee12:	f003 0307 	and.w	r3, r3, #7
 800ee16:	2b05      	cmp	r3, #5
 800ee18:	d826      	bhi.n	800ee68 <UART_SetConfig+0x2c8>
 800ee1a:	a201      	add	r2, pc, #4	; (adr r2, 800ee20 <UART_SetConfig+0x280>)
 800ee1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee20:	0800ee39 	.word	0x0800ee39
 800ee24:	0800ee41 	.word	0x0800ee41
 800ee28:	0800ee49 	.word	0x0800ee49
 800ee2c:	0800ee51 	.word	0x0800ee51
 800ee30:	0800ee59 	.word	0x0800ee59
 800ee34:	0800ee61 	.word	0x0800ee61
 800ee38:	2300      	movs	r3, #0
 800ee3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee3e:	e180      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ee40:	2304      	movs	r3, #4
 800ee42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee46:	e17c      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ee48:	2308      	movs	r3, #8
 800ee4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee4e:	e178      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ee50:	2310      	movs	r3, #16
 800ee52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee56:	e174      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ee58:	2320      	movs	r3, #32
 800ee5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee5e:	e170      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ee60:	2340      	movs	r3, #64	; 0x40
 800ee62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee66:	e16c      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ee68:	2380      	movs	r3, #128	; 0x80
 800ee6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee6e:	e168      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a1d      	ldr	r2, [pc, #116]	; (800eeec <UART_SetConfig+0x34c>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d142      	bne.n	800ef00 <UART_SetConfig+0x360>
 800ee7a:	4b18      	ldr	r3, [pc, #96]	; (800eedc <UART_SetConfig+0x33c>)
 800ee7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee7e:	f003 0307 	and.w	r3, r3, #7
 800ee82:	2b05      	cmp	r3, #5
 800ee84:	d838      	bhi.n	800eef8 <UART_SetConfig+0x358>
 800ee86:	a201      	add	r2, pc, #4	; (adr r2, 800ee8c <UART_SetConfig+0x2ec>)
 800ee88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee8c:	0800eea5 	.word	0x0800eea5
 800ee90:	0800eead 	.word	0x0800eead
 800ee94:	0800eeb5 	.word	0x0800eeb5
 800ee98:	0800eebd 	.word	0x0800eebd
 800ee9c:	0800eec5 	.word	0x0800eec5
 800eea0:	0800eef1 	.word	0x0800eef1
 800eea4:	2300      	movs	r3, #0
 800eea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeaa:	e14a      	b.n	800f142 <UART_SetConfig+0x5a2>
 800eeac:	2304      	movs	r3, #4
 800eeae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeb2:	e146      	b.n	800f142 <UART_SetConfig+0x5a2>
 800eeb4:	2308      	movs	r3, #8
 800eeb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeba:	e142      	b.n	800f142 <UART_SetConfig+0x5a2>
 800eebc:	2310      	movs	r3, #16
 800eebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eec2:	e13e      	b.n	800f142 <UART_SetConfig+0x5a2>
 800eec4:	2320      	movs	r3, #32
 800eec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeca:	e13a      	b.n	800f142 <UART_SetConfig+0x5a2>
 800eecc:	cfff69f3 	.word	0xcfff69f3
 800eed0:	58000c00 	.word	0x58000c00
 800eed4:	11fff4ff 	.word	0x11fff4ff
 800eed8:	40011000 	.word	0x40011000
 800eedc:	58024400 	.word	0x58024400
 800eee0:	40004400 	.word	0x40004400
 800eee4:	40004800 	.word	0x40004800
 800eee8:	40004c00 	.word	0x40004c00
 800eeec:	40005000 	.word	0x40005000
 800eef0:	2340      	movs	r3, #64	; 0x40
 800eef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eef6:	e124      	b.n	800f142 <UART_SetConfig+0x5a2>
 800eef8:	2380      	movs	r3, #128	; 0x80
 800eefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eefe:	e120      	b.n	800f142 <UART_SetConfig+0x5a2>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4acc      	ldr	r2, [pc, #816]	; (800f238 <UART_SetConfig+0x698>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d176      	bne.n	800eff8 <UART_SetConfig+0x458>
 800ef0a:	4bcc      	ldr	r3, [pc, #816]	; (800f23c <UART_SetConfig+0x69c>)
 800ef0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef12:	2b28      	cmp	r3, #40	; 0x28
 800ef14:	d86c      	bhi.n	800eff0 <UART_SetConfig+0x450>
 800ef16:	a201      	add	r2, pc, #4	; (adr r2, 800ef1c <UART_SetConfig+0x37c>)
 800ef18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1c:	0800efc1 	.word	0x0800efc1
 800ef20:	0800eff1 	.word	0x0800eff1
 800ef24:	0800eff1 	.word	0x0800eff1
 800ef28:	0800eff1 	.word	0x0800eff1
 800ef2c:	0800eff1 	.word	0x0800eff1
 800ef30:	0800eff1 	.word	0x0800eff1
 800ef34:	0800eff1 	.word	0x0800eff1
 800ef38:	0800eff1 	.word	0x0800eff1
 800ef3c:	0800efc9 	.word	0x0800efc9
 800ef40:	0800eff1 	.word	0x0800eff1
 800ef44:	0800eff1 	.word	0x0800eff1
 800ef48:	0800eff1 	.word	0x0800eff1
 800ef4c:	0800eff1 	.word	0x0800eff1
 800ef50:	0800eff1 	.word	0x0800eff1
 800ef54:	0800eff1 	.word	0x0800eff1
 800ef58:	0800eff1 	.word	0x0800eff1
 800ef5c:	0800efd1 	.word	0x0800efd1
 800ef60:	0800eff1 	.word	0x0800eff1
 800ef64:	0800eff1 	.word	0x0800eff1
 800ef68:	0800eff1 	.word	0x0800eff1
 800ef6c:	0800eff1 	.word	0x0800eff1
 800ef70:	0800eff1 	.word	0x0800eff1
 800ef74:	0800eff1 	.word	0x0800eff1
 800ef78:	0800eff1 	.word	0x0800eff1
 800ef7c:	0800efd9 	.word	0x0800efd9
 800ef80:	0800eff1 	.word	0x0800eff1
 800ef84:	0800eff1 	.word	0x0800eff1
 800ef88:	0800eff1 	.word	0x0800eff1
 800ef8c:	0800eff1 	.word	0x0800eff1
 800ef90:	0800eff1 	.word	0x0800eff1
 800ef94:	0800eff1 	.word	0x0800eff1
 800ef98:	0800eff1 	.word	0x0800eff1
 800ef9c:	0800efe1 	.word	0x0800efe1
 800efa0:	0800eff1 	.word	0x0800eff1
 800efa4:	0800eff1 	.word	0x0800eff1
 800efa8:	0800eff1 	.word	0x0800eff1
 800efac:	0800eff1 	.word	0x0800eff1
 800efb0:	0800eff1 	.word	0x0800eff1
 800efb4:	0800eff1 	.word	0x0800eff1
 800efb8:	0800eff1 	.word	0x0800eff1
 800efbc:	0800efe9 	.word	0x0800efe9
 800efc0:	2301      	movs	r3, #1
 800efc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efc6:	e0bc      	b.n	800f142 <UART_SetConfig+0x5a2>
 800efc8:	2304      	movs	r3, #4
 800efca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efce:	e0b8      	b.n	800f142 <UART_SetConfig+0x5a2>
 800efd0:	2308      	movs	r3, #8
 800efd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efd6:	e0b4      	b.n	800f142 <UART_SetConfig+0x5a2>
 800efd8:	2310      	movs	r3, #16
 800efda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efde:	e0b0      	b.n	800f142 <UART_SetConfig+0x5a2>
 800efe0:	2320      	movs	r3, #32
 800efe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efe6:	e0ac      	b.n	800f142 <UART_SetConfig+0x5a2>
 800efe8:	2340      	movs	r3, #64	; 0x40
 800efea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efee:	e0a8      	b.n	800f142 <UART_SetConfig+0x5a2>
 800eff0:	2380      	movs	r3, #128	; 0x80
 800eff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eff6:	e0a4      	b.n	800f142 <UART_SetConfig+0x5a2>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a90      	ldr	r2, [pc, #576]	; (800f240 <UART_SetConfig+0x6a0>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d130      	bne.n	800f064 <UART_SetConfig+0x4c4>
 800f002:	4b8e      	ldr	r3, [pc, #568]	; (800f23c <UART_SetConfig+0x69c>)
 800f004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f006:	f003 0307 	and.w	r3, r3, #7
 800f00a:	2b05      	cmp	r3, #5
 800f00c:	d826      	bhi.n	800f05c <UART_SetConfig+0x4bc>
 800f00e:	a201      	add	r2, pc, #4	; (adr r2, 800f014 <UART_SetConfig+0x474>)
 800f010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f014:	0800f02d 	.word	0x0800f02d
 800f018:	0800f035 	.word	0x0800f035
 800f01c:	0800f03d 	.word	0x0800f03d
 800f020:	0800f045 	.word	0x0800f045
 800f024:	0800f04d 	.word	0x0800f04d
 800f028:	0800f055 	.word	0x0800f055
 800f02c:	2300      	movs	r3, #0
 800f02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f032:	e086      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f034:	2304      	movs	r3, #4
 800f036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f03a:	e082      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f03c:	2308      	movs	r3, #8
 800f03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f042:	e07e      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f044:	2310      	movs	r3, #16
 800f046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f04a:	e07a      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f04c:	2320      	movs	r3, #32
 800f04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f052:	e076      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f054:	2340      	movs	r3, #64	; 0x40
 800f056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f05a:	e072      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f05c:	2380      	movs	r3, #128	; 0x80
 800f05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f062:	e06e      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a76      	ldr	r2, [pc, #472]	; (800f244 <UART_SetConfig+0x6a4>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d130      	bne.n	800f0d0 <UART_SetConfig+0x530>
 800f06e:	4b73      	ldr	r3, [pc, #460]	; (800f23c <UART_SetConfig+0x69c>)
 800f070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f072:	f003 0307 	and.w	r3, r3, #7
 800f076:	2b05      	cmp	r3, #5
 800f078:	d826      	bhi.n	800f0c8 <UART_SetConfig+0x528>
 800f07a:	a201      	add	r2, pc, #4	; (adr r2, 800f080 <UART_SetConfig+0x4e0>)
 800f07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f080:	0800f099 	.word	0x0800f099
 800f084:	0800f0a1 	.word	0x0800f0a1
 800f088:	0800f0a9 	.word	0x0800f0a9
 800f08c:	0800f0b1 	.word	0x0800f0b1
 800f090:	0800f0b9 	.word	0x0800f0b9
 800f094:	0800f0c1 	.word	0x0800f0c1
 800f098:	2300      	movs	r3, #0
 800f09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f09e:	e050      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f0a0:	2304      	movs	r3, #4
 800f0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0a6:	e04c      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f0a8:	2308      	movs	r3, #8
 800f0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ae:	e048      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f0b0:	2310      	movs	r3, #16
 800f0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0b6:	e044      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f0b8:	2320      	movs	r3, #32
 800f0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0be:	e040      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f0c0:	2340      	movs	r3, #64	; 0x40
 800f0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0c6:	e03c      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f0c8:	2380      	movs	r3, #128	; 0x80
 800f0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ce:	e038      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a5c      	ldr	r2, [pc, #368]	; (800f248 <UART_SetConfig+0x6a8>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d130      	bne.n	800f13c <UART_SetConfig+0x59c>
 800f0da:	4b58      	ldr	r3, [pc, #352]	; (800f23c <UART_SetConfig+0x69c>)
 800f0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0de:	f003 0307 	and.w	r3, r3, #7
 800f0e2:	2b05      	cmp	r3, #5
 800f0e4:	d826      	bhi.n	800f134 <UART_SetConfig+0x594>
 800f0e6:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <UART_SetConfig+0x54c>)
 800f0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ec:	0800f105 	.word	0x0800f105
 800f0f0:	0800f10d 	.word	0x0800f10d
 800f0f4:	0800f115 	.word	0x0800f115
 800f0f8:	0800f11d 	.word	0x0800f11d
 800f0fc:	0800f125 	.word	0x0800f125
 800f100:	0800f12d 	.word	0x0800f12d
 800f104:	2302      	movs	r3, #2
 800f106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f10a:	e01a      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f10c:	2304      	movs	r3, #4
 800f10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f112:	e016      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f114:	2308      	movs	r3, #8
 800f116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f11a:	e012      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f11c:	2310      	movs	r3, #16
 800f11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f122:	e00e      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f124:	2320      	movs	r3, #32
 800f126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f12a:	e00a      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f12c:	2340      	movs	r3, #64	; 0x40
 800f12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f132:	e006      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f134:	2380      	movs	r3, #128	; 0x80
 800f136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f13a:	e002      	b.n	800f142 <UART_SetConfig+0x5a2>
 800f13c:	2380      	movs	r3, #128	; 0x80
 800f13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	4a40      	ldr	r2, [pc, #256]	; (800f248 <UART_SetConfig+0x6a8>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	f040 80ef 	bne.w	800f32c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f14e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f152:	2b20      	cmp	r3, #32
 800f154:	dc46      	bgt.n	800f1e4 <UART_SetConfig+0x644>
 800f156:	2b02      	cmp	r3, #2
 800f158:	f2c0 8081 	blt.w	800f25e <UART_SetConfig+0x6be>
 800f15c:	3b02      	subs	r3, #2
 800f15e:	2b1e      	cmp	r3, #30
 800f160:	d87d      	bhi.n	800f25e <UART_SetConfig+0x6be>
 800f162:	a201      	add	r2, pc, #4	; (adr r2, 800f168 <UART_SetConfig+0x5c8>)
 800f164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f168:	0800f1eb 	.word	0x0800f1eb
 800f16c:	0800f25f 	.word	0x0800f25f
 800f170:	0800f1f3 	.word	0x0800f1f3
 800f174:	0800f25f 	.word	0x0800f25f
 800f178:	0800f25f 	.word	0x0800f25f
 800f17c:	0800f25f 	.word	0x0800f25f
 800f180:	0800f203 	.word	0x0800f203
 800f184:	0800f25f 	.word	0x0800f25f
 800f188:	0800f25f 	.word	0x0800f25f
 800f18c:	0800f25f 	.word	0x0800f25f
 800f190:	0800f25f 	.word	0x0800f25f
 800f194:	0800f25f 	.word	0x0800f25f
 800f198:	0800f25f 	.word	0x0800f25f
 800f19c:	0800f25f 	.word	0x0800f25f
 800f1a0:	0800f213 	.word	0x0800f213
 800f1a4:	0800f25f 	.word	0x0800f25f
 800f1a8:	0800f25f 	.word	0x0800f25f
 800f1ac:	0800f25f 	.word	0x0800f25f
 800f1b0:	0800f25f 	.word	0x0800f25f
 800f1b4:	0800f25f 	.word	0x0800f25f
 800f1b8:	0800f25f 	.word	0x0800f25f
 800f1bc:	0800f25f 	.word	0x0800f25f
 800f1c0:	0800f25f 	.word	0x0800f25f
 800f1c4:	0800f25f 	.word	0x0800f25f
 800f1c8:	0800f25f 	.word	0x0800f25f
 800f1cc:	0800f25f 	.word	0x0800f25f
 800f1d0:	0800f25f 	.word	0x0800f25f
 800f1d4:	0800f25f 	.word	0x0800f25f
 800f1d8:	0800f25f 	.word	0x0800f25f
 800f1dc:	0800f25f 	.word	0x0800f25f
 800f1e0:	0800f251 	.word	0x0800f251
 800f1e4:	2b40      	cmp	r3, #64	; 0x40
 800f1e6:	d036      	beq.n	800f256 <UART_SetConfig+0x6b6>
 800f1e8:	e039      	b.n	800f25e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f1ea:	f7fc fc85 	bl	800baf8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f1ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f1f0:	e03b      	b.n	800f26a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1f2:	f107 0314 	add.w	r3, r7, #20
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fc fc94 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f200:	e033      	b.n	800f26a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f202:	f107 0308 	add.w	r3, r7, #8
 800f206:	4618      	mov	r0, r3
 800f208:	f7fc fde0 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f210:	e02b      	b.n	800f26a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f212:	4b0a      	ldr	r3, [pc, #40]	; (800f23c <UART_SetConfig+0x69c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f003 0320 	and.w	r3, r3, #32
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d009      	beq.n	800f232 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f21e:	4b07      	ldr	r3, [pc, #28]	; (800f23c <UART_SetConfig+0x69c>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	08db      	lsrs	r3, r3, #3
 800f224:	f003 0303 	and.w	r3, r3, #3
 800f228:	4a08      	ldr	r2, [pc, #32]	; (800f24c <UART_SetConfig+0x6ac>)
 800f22a:	fa22 f303 	lsr.w	r3, r2, r3
 800f22e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f230:	e01b      	b.n	800f26a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800f232:	4b06      	ldr	r3, [pc, #24]	; (800f24c <UART_SetConfig+0x6ac>)
 800f234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f236:	e018      	b.n	800f26a <UART_SetConfig+0x6ca>
 800f238:	40011400 	.word	0x40011400
 800f23c:	58024400 	.word	0x58024400
 800f240:	40007800 	.word	0x40007800
 800f244:	40007c00 	.word	0x40007c00
 800f248:	58000c00 	.word	0x58000c00
 800f24c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f250:	4bc4      	ldr	r3, [pc, #784]	; (800f564 <UART_SetConfig+0x9c4>)
 800f252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f254:	e009      	b.n	800f26a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f25a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f25c:	e005      	b.n	800f26a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800f25e:	2300      	movs	r3, #0
 800f260:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f262:	2301      	movs	r3, #1
 800f264:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f000 81da 	beq.w	800f626 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f276:	4abc      	ldr	r2, [pc, #752]	; (800f568 <UART_SetConfig+0x9c8>)
 800f278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f27c:	461a      	mov	r2, r3
 800f27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f280:	fbb3 f3f2 	udiv	r3, r3, r2
 800f284:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	685a      	ldr	r2, [r3, #4]
 800f28a:	4613      	mov	r3, r2
 800f28c:	005b      	lsls	r3, r3, #1
 800f28e:	4413      	add	r3, r2
 800f290:	6a3a      	ldr	r2, [r7, #32]
 800f292:	429a      	cmp	r2, r3
 800f294:	d305      	bcc.n	800f2a2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f29c:	6a3a      	ldr	r2, [r7, #32]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d903      	bls.n	800f2aa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f2a8:	e1bd      	b.n	800f626 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f04f 0100 	mov.w	r1, #0
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b6:	4aac      	ldr	r2, [pc, #688]	; (800f568 <UART_SetConfig+0x9c8>)
 800f2b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	f04f 0300 	mov.w	r3, #0
 800f2c2:	f7f1 f809 	bl	80002d8 <__aeabi_uldivmod>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4610      	mov	r0, r2
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	f04f 0200 	mov.w	r2, #0
 800f2d2:	f04f 0300 	mov.w	r3, #0
 800f2d6:	020b      	lsls	r3, r1, #8
 800f2d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f2dc:	0202      	lsls	r2, r0, #8
 800f2de:	6879      	ldr	r1, [r7, #4]
 800f2e0:	6849      	ldr	r1, [r1, #4]
 800f2e2:	0849      	lsrs	r1, r1, #1
 800f2e4:	4608      	mov	r0, r1
 800f2e6:	f04f 0100 	mov.w	r1, #0
 800f2ea:	1814      	adds	r4, r2, r0
 800f2ec:	eb43 0501 	adc.w	r5, r3, r1
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	f04f 0300 	mov.w	r3, #0
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	4629      	mov	r1, r5
 800f2fe:	f7f0 ffeb 	bl	80002d8 <__aeabi_uldivmod>
 800f302:	4602      	mov	r2, r0
 800f304:	460b      	mov	r3, r1
 800f306:	4613      	mov	r3, r2
 800f308:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f310:	d308      	bcc.n	800f324 <UART_SetConfig+0x784>
 800f312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f318:	d204      	bcs.n	800f324 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f320:	60da      	str	r2, [r3, #12]
 800f322:	e180      	b.n	800f626 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800f324:	2301      	movs	r3, #1
 800f326:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f32a:	e17c      	b.n	800f626 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	69db      	ldr	r3, [r3, #28]
 800f330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f334:	f040 80be 	bne.w	800f4b4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800f338:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f33c:	2b20      	cmp	r3, #32
 800f33e:	dc49      	bgt.n	800f3d4 <UART_SetConfig+0x834>
 800f340:	2b00      	cmp	r3, #0
 800f342:	db7c      	blt.n	800f43e <UART_SetConfig+0x89e>
 800f344:	2b20      	cmp	r3, #32
 800f346:	d87a      	bhi.n	800f43e <UART_SetConfig+0x89e>
 800f348:	a201      	add	r2, pc, #4	; (adr r2, 800f350 <UART_SetConfig+0x7b0>)
 800f34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34e:	bf00      	nop
 800f350:	0800f3db 	.word	0x0800f3db
 800f354:	0800f3e3 	.word	0x0800f3e3
 800f358:	0800f43f 	.word	0x0800f43f
 800f35c:	0800f43f 	.word	0x0800f43f
 800f360:	0800f3eb 	.word	0x0800f3eb
 800f364:	0800f43f 	.word	0x0800f43f
 800f368:	0800f43f 	.word	0x0800f43f
 800f36c:	0800f43f 	.word	0x0800f43f
 800f370:	0800f3fb 	.word	0x0800f3fb
 800f374:	0800f43f 	.word	0x0800f43f
 800f378:	0800f43f 	.word	0x0800f43f
 800f37c:	0800f43f 	.word	0x0800f43f
 800f380:	0800f43f 	.word	0x0800f43f
 800f384:	0800f43f 	.word	0x0800f43f
 800f388:	0800f43f 	.word	0x0800f43f
 800f38c:	0800f43f 	.word	0x0800f43f
 800f390:	0800f40b 	.word	0x0800f40b
 800f394:	0800f43f 	.word	0x0800f43f
 800f398:	0800f43f 	.word	0x0800f43f
 800f39c:	0800f43f 	.word	0x0800f43f
 800f3a0:	0800f43f 	.word	0x0800f43f
 800f3a4:	0800f43f 	.word	0x0800f43f
 800f3a8:	0800f43f 	.word	0x0800f43f
 800f3ac:	0800f43f 	.word	0x0800f43f
 800f3b0:	0800f43f 	.word	0x0800f43f
 800f3b4:	0800f43f 	.word	0x0800f43f
 800f3b8:	0800f43f 	.word	0x0800f43f
 800f3bc:	0800f43f 	.word	0x0800f43f
 800f3c0:	0800f43f 	.word	0x0800f43f
 800f3c4:	0800f43f 	.word	0x0800f43f
 800f3c8:	0800f43f 	.word	0x0800f43f
 800f3cc:	0800f43f 	.word	0x0800f43f
 800f3d0:	0800f431 	.word	0x0800f431
 800f3d4:	2b40      	cmp	r3, #64	; 0x40
 800f3d6:	d02e      	beq.n	800f436 <UART_SetConfig+0x896>
 800f3d8:	e031      	b.n	800f43e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3da:	f7fa ff4f 	bl	800a27c <HAL_RCC_GetPCLK1Freq>
 800f3de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f3e0:	e033      	b.n	800f44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3e2:	f7fa ff61 	bl	800a2a8 <HAL_RCC_GetPCLK2Freq>
 800f3e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f3e8:	e02f      	b.n	800f44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3ea:	f107 0314 	add.w	r3, r7, #20
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fc fb98 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f3f8:	e027      	b.n	800f44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3fa:	f107 0308 	add.w	r3, r7, #8
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fc fce4 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f408:	e01f      	b.n	800f44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f40a:	4b58      	ldr	r3, [pc, #352]	; (800f56c <UART_SetConfig+0x9cc>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f003 0320 	and.w	r3, r3, #32
 800f412:	2b00      	cmp	r3, #0
 800f414:	d009      	beq.n	800f42a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f416:	4b55      	ldr	r3, [pc, #340]	; (800f56c <UART_SetConfig+0x9cc>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	08db      	lsrs	r3, r3, #3
 800f41c:	f003 0303 	and.w	r3, r3, #3
 800f420:	4a53      	ldr	r2, [pc, #332]	; (800f570 <UART_SetConfig+0x9d0>)
 800f422:	fa22 f303 	lsr.w	r3, r2, r3
 800f426:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f428:	e00f      	b.n	800f44a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f42a:	4b51      	ldr	r3, [pc, #324]	; (800f570 <UART_SetConfig+0x9d0>)
 800f42c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f42e:	e00c      	b.n	800f44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f430:	4b4c      	ldr	r3, [pc, #304]	; (800f564 <UART_SetConfig+0x9c4>)
 800f432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f434:	e009      	b.n	800f44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f43a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f43c:	e005      	b.n	800f44a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f43e:	2300      	movs	r3, #0
 800f440:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f442:	2301      	movs	r3, #1
 800f444:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f000 80ea 	beq.w	800f626 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f456:	4a44      	ldr	r2, [pc, #272]	; (800f568 <UART_SetConfig+0x9c8>)
 800f458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f45c:	461a      	mov	r2, r3
 800f45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f460:	fbb3 f3f2 	udiv	r3, r3, r2
 800f464:	005a      	lsls	r2, r3, #1
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	085b      	lsrs	r3, r3, #1
 800f46c:	441a      	add	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	fbb2 f3f3 	udiv	r3, r2, r3
 800f476:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	2b0f      	cmp	r3, #15
 800f47c:	d916      	bls.n	800f4ac <UART_SetConfig+0x90c>
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f484:	d212      	bcs.n	800f4ac <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f488:	b29b      	uxth	r3, r3
 800f48a:	f023 030f 	bic.w	r3, r3, #15
 800f48e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f492:	085b      	lsrs	r3, r3, #1
 800f494:	b29b      	uxth	r3, r3
 800f496:	f003 0307 	and.w	r3, r3, #7
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f4a8:	60da      	str	r2, [r3, #12]
 800f4aa:	e0bc      	b.n	800f626 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f4b2:	e0b8      	b.n	800f626 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f4b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f4b8:	2b20      	cmp	r3, #32
 800f4ba:	dc4b      	bgt.n	800f554 <UART_SetConfig+0x9b4>
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f2c0 8087 	blt.w	800f5d0 <UART_SetConfig+0xa30>
 800f4c2:	2b20      	cmp	r3, #32
 800f4c4:	f200 8084 	bhi.w	800f5d0 <UART_SetConfig+0xa30>
 800f4c8:	a201      	add	r2, pc, #4	; (adr r2, 800f4d0 <UART_SetConfig+0x930>)
 800f4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ce:	bf00      	nop
 800f4d0:	0800f55b 	.word	0x0800f55b
 800f4d4:	0800f575 	.word	0x0800f575
 800f4d8:	0800f5d1 	.word	0x0800f5d1
 800f4dc:	0800f5d1 	.word	0x0800f5d1
 800f4e0:	0800f57d 	.word	0x0800f57d
 800f4e4:	0800f5d1 	.word	0x0800f5d1
 800f4e8:	0800f5d1 	.word	0x0800f5d1
 800f4ec:	0800f5d1 	.word	0x0800f5d1
 800f4f0:	0800f58d 	.word	0x0800f58d
 800f4f4:	0800f5d1 	.word	0x0800f5d1
 800f4f8:	0800f5d1 	.word	0x0800f5d1
 800f4fc:	0800f5d1 	.word	0x0800f5d1
 800f500:	0800f5d1 	.word	0x0800f5d1
 800f504:	0800f5d1 	.word	0x0800f5d1
 800f508:	0800f5d1 	.word	0x0800f5d1
 800f50c:	0800f5d1 	.word	0x0800f5d1
 800f510:	0800f59d 	.word	0x0800f59d
 800f514:	0800f5d1 	.word	0x0800f5d1
 800f518:	0800f5d1 	.word	0x0800f5d1
 800f51c:	0800f5d1 	.word	0x0800f5d1
 800f520:	0800f5d1 	.word	0x0800f5d1
 800f524:	0800f5d1 	.word	0x0800f5d1
 800f528:	0800f5d1 	.word	0x0800f5d1
 800f52c:	0800f5d1 	.word	0x0800f5d1
 800f530:	0800f5d1 	.word	0x0800f5d1
 800f534:	0800f5d1 	.word	0x0800f5d1
 800f538:	0800f5d1 	.word	0x0800f5d1
 800f53c:	0800f5d1 	.word	0x0800f5d1
 800f540:	0800f5d1 	.word	0x0800f5d1
 800f544:	0800f5d1 	.word	0x0800f5d1
 800f548:	0800f5d1 	.word	0x0800f5d1
 800f54c:	0800f5d1 	.word	0x0800f5d1
 800f550:	0800f5c3 	.word	0x0800f5c3
 800f554:	2b40      	cmp	r3, #64	; 0x40
 800f556:	d037      	beq.n	800f5c8 <UART_SetConfig+0xa28>
 800f558:	e03a      	b.n	800f5d0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f55a:	f7fa fe8f 	bl	800a27c <HAL_RCC_GetPCLK1Freq>
 800f55e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f560:	e03c      	b.n	800f5dc <UART_SetConfig+0xa3c>
 800f562:	bf00      	nop
 800f564:	003d0900 	.word	0x003d0900
 800f568:	08011ec8 	.word	0x08011ec8
 800f56c:	58024400 	.word	0x58024400
 800f570:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f574:	f7fa fe98 	bl	800a2a8 <HAL_RCC_GetPCLK2Freq>
 800f578:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f57a:	e02f      	b.n	800f5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f57c:	f107 0314 	add.w	r3, r7, #20
 800f580:	4618      	mov	r0, r3
 800f582:	f7fc facf 	bl	800bb24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f58a:	e027      	b.n	800f5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f58c:	f107 0308 	add.w	r3, r7, #8
 800f590:	4618      	mov	r0, r3
 800f592:	f7fc fc1b 	bl	800bdcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f59a:	e01f      	b.n	800f5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f59c:	4b2c      	ldr	r3, [pc, #176]	; (800f650 <UART_SetConfig+0xab0>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f003 0320 	and.w	r3, r3, #32
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d009      	beq.n	800f5bc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5a8:	4b29      	ldr	r3, [pc, #164]	; (800f650 <UART_SetConfig+0xab0>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	08db      	lsrs	r3, r3, #3
 800f5ae:	f003 0303 	and.w	r3, r3, #3
 800f5b2:	4a28      	ldr	r2, [pc, #160]	; (800f654 <UART_SetConfig+0xab4>)
 800f5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800f5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5ba:	e00f      	b.n	800f5dc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f5bc:	4b25      	ldr	r3, [pc, #148]	; (800f654 <UART_SetConfig+0xab4>)
 800f5be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5c0:	e00c      	b.n	800f5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5c2:	4b25      	ldr	r3, [pc, #148]	; (800f658 <UART_SetConfig+0xab8>)
 800f5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5c6:	e009      	b.n	800f5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5ce:	e005      	b.n	800f5dc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f5da:	bf00      	nop
    }

    if (pclk != 0U)
 800f5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d021      	beq.n	800f626 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e6:	4a1d      	ldr	r2, [pc, #116]	; (800f65c <UART_SetConfig+0xabc>)
 800f5e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	085b      	lsrs	r3, r3, #1
 800f5fa:	441a      	add	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	fbb2 f3f3 	udiv	r3, r2, r3
 800f604:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f608:	2b0f      	cmp	r3, #15
 800f60a:	d909      	bls.n	800f620 <UART_SetConfig+0xa80>
 800f60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f612:	d205      	bcs.n	800f620 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	b29a      	uxth	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	60da      	str	r2, [r3, #12]
 800f61e:	e002      	b.n	800f626 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f620:	2301      	movs	r3, #1
 800f622:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2201      	movs	r2, #1
 800f62a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2201      	movs	r2, #1
 800f632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2200      	movs	r2, #0
 800f63a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f642:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f646:	4618      	mov	r0, r3
 800f648:	3738      	adds	r7, #56	; 0x38
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bdb0      	pop	{r4, r5, r7, pc}
 800f64e:	bf00      	nop
 800f650:	58024400 	.word	0x58024400
 800f654:	03d09000 	.word	0x03d09000
 800f658:	003d0900 	.word	0x003d0900
 800f65c:	08011ec8 	.word	0x08011ec8

0800f660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f66c:	f003 0301 	and.w	r3, r3, #1
 800f670:	2b00      	cmp	r3, #0
 800f672:	d00a      	beq.n	800f68a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	430a      	orrs	r2, r1
 800f688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f68e:	f003 0302 	and.w	r3, r3, #2
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00a      	beq.n	800f6ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	430a      	orrs	r2, r1
 800f6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b0:	f003 0304 	and.w	r3, r3, #4
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00a      	beq.n	800f6ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	430a      	orrs	r2, r1
 800f6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d2:	f003 0308 	and.w	r3, r3, #8
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00a      	beq.n	800f6f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	430a      	orrs	r2, r1
 800f6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6f4:	f003 0310 	and.w	r3, r3, #16
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00a      	beq.n	800f712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	430a      	orrs	r2, r1
 800f710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f716:	f003 0320 	and.w	r3, r3, #32
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00a      	beq.n	800f734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	689b      	ldr	r3, [r3, #8]
 800f724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	430a      	orrs	r2, r1
 800f732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d01a      	beq.n	800f776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	430a      	orrs	r2, r1
 800f754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f75a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f75e:	d10a      	bne.n	800f776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	430a      	orrs	r2, r1
 800f774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d00a      	beq.n	800f798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	430a      	orrs	r2, r1
 800f796:	605a      	str	r2, [r3, #4]
  }
}
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af02      	add	r7, sp, #8
 800f7aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7b4:	f7f4 ff14 	bl	80045e0 <HAL_GetTick>
 800f7b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f003 0308 	and.w	r3, r3, #8
 800f7c4:	2b08      	cmp	r3, #8
 800f7c6:	d10e      	bne.n	800f7e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 f82f 	bl	800f83a <UART_WaitOnFlagUntilTimeout>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d001      	beq.n	800f7e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f7e2:	2303      	movs	r3, #3
 800f7e4:	e025      	b.n	800f832 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f003 0304 	and.w	r3, r3, #4
 800f7f0:	2b04      	cmp	r3, #4
 800f7f2:	d10e      	bne.n	800f812 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f7f8:	9300      	str	r3, [sp, #0]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 f819 	bl	800f83a <UART_WaitOnFlagUntilTimeout>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d001      	beq.n	800f812 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f80e:	2303      	movs	r3, #3
 800f810:	e00f      	b.n	800f832 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2220      	movs	r2, #32
 800f816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2220      	movs	r2, #32
 800f81e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f830:	2300      	movs	r3, #0
}
 800f832:	4618      	mov	r0, r3
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b09c      	sub	sp, #112	; 0x70
 800f83e:	af00      	add	r7, sp, #0
 800f840:	60f8      	str	r0, [r7, #12]
 800f842:	60b9      	str	r1, [r7, #8]
 800f844:	603b      	str	r3, [r7, #0]
 800f846:	4613      	mov	r3, r2
 800f848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f84a:	e0a9      	b.n	800f9a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f84c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f852:	f000 80a5 	beq.w	800f9a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f856:	f7f4 fec3 	bl	80045e0 <HAL_GetTick>
 800f85a:	4602      	mov	r2, r0
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	1ad3      	subs	r3, r2, r3
 800f860:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f862:	429a      	cmp	r2, r3
 800f864:	d302      	bcc.n	800f86c <UART_WaitOnFlagUntilTimeout+0x32>
 800f866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d140      	bne.n	800f8ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f874:	e853 3f00 	ldrex	r3, [r3]
 800f878:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f87c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f880:	667b      	str	r3, [r7, #100]	; 0x64
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	461a      	mov	r2, r3
 800f888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f88a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f88c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f88e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f890:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f892:	e841 2300 	strex	r3, r2, [r1]
 800f896:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d1e6      	bne.n	800f86c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	3308      	adds	r3, #8
 800f8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a8:	e853 3f00 	ldrex	r3, [r3]
 800f8ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b0:	f023 0301 	bic.w	r3, r3, #1
 800f8b4:	663b      	str	r3, [r7, #96]	; 0x60
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	3308      	adds	r3, #8
 800f8bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8be:	64ba      	str	r2, [r7, #72]	; 0x48
 800f8c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8c6:	e841 2300 	strex	r3, r2, [r1]
 800f8ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1e5      	bne.n	800f89e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2220      	movs	r2, #32
 800f8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2220      	movs	r2, #32
 800f8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f8ea:	2303      	movs	r3, #3
 800f8ec:	e069      	b.n	800f9c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f003 0304 	and.w	r3, r3, #4
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d051      	beq.n	800f9a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	69db      	ldr	r3, [r3, #28]
 800f902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f90a:	d149      	bne.n	800f9a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f914:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91e:	e853 3f00 	ldrex	r3, [r3]
 800f922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f926:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f92a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	461a      	mov	r2, r3
 800f932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f934:	637b      	str	r3, [r7, #52]	; 0x34
 800f936:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f93a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f93c:	e841 2300 	strex	r3, r2, [r1]
 800f940:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1e6      	bne.n	800f916 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	3308      	adds	r3, #8
 800f94e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	e853 3f00 	ldrex	r3, [r3]
 800f956:	613b      	str	r3, [r7, #16]
   return(result);
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	f023 0301 	bic.w	r3, r3, #1
 800f95e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	3308      	adds	r3, #8
 800f966:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f968:	623a      	str	r2, [r7, #32]
 800f96a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96c:	69f9      	ldr	r1, [r7, #28]
 800f96e:	6a3a      	ldr	r2, [r7, #32]
 800f970:	e841 2300 	strex	r3, r2, [r1]
 800f974:	61bb      	str	r3, [r7, #24]
   return(result);
 800f976:	69bb      	ldr	r3, [r7, #24]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1e5      	bne.n	800f948 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2220      	movs	r2, #32
 800f980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2220      	movs	r2, #32
 800f988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2220      	movs	r2, #32
 800f990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2200      	movs	r2, #0
 800f998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f99c:	2303      	movs	r3, #3
 800f99e:	e010      	b.n	800f9c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	69da      	ldr	r2, [r3, #28]
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	68ba      	ldr	r2, [r7, #8]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	bf0c      	ite	eq
 800f9b0:	2301      	moveq	r3, #1
 800f9b2:	2300      	movne	r3, #0
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	79fb      	ldrb	r3, [r7, #7]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	f43f af46 	beq.w	800f84c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9c0:	2300      	movs	r3, #0
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3770      	adds	r7, #112	; 0x70
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
	...

0800f9cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b096      	sub	sp, #88	; 0x58
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	88fa      	ldrh	r2, [r7, #6]
 800f9e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2222      	movs	r2, #34	; 0x22
 800f9f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d02c      	beq.n	800fa5a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa04:	4a42      	ldr	r2, [pc, #264]	; (800fb10 <UART_Start_Receive_DMA+0x144>)
 800fa06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa0c:	4a41      	ldr	r2, [pc, #260]	; (800fb14 <UART_Start_Receive_DMA+0x148>)
 800fa0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa14:	4a40      	ldr	r2, [pc, #256]	; (800fb18 <UART_Start_Receive_DMA+0x14c>)
 800fa16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	3324      	adds	r3, #36	; 0x24
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa30:	461a      	mov	r2, r3
 800fa32:	88fb      	ldrh	r3, [r7, #6]
 800fa34:	f7f6 fa2c 	bl	8005e90 <HAL_DMA_Start_IT>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00d      	beq.n	800fa5a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2210      	movs	r2, #16
 800fa42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2220      	movs	r2, #32
 800fa52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e055      	b.n	800fb06 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	691b      	ldr	r3, [r3, #16]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d018      	beq.n	800fa9c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa72:	e853 3f00 	ldrex	r3, [r3]
 800fa76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa7e:	657b      	str	r3, [r7, #84]	; 0x54
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	461a      	mov	r2, r3
 800fa86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa88:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa8a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa90:	e841 2300 	strex	r3, r2, [r1]
 800fa94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fa96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d1e6      	bne.n	800fa6a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	3308      	adds	r3, #8
 800faa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa6:	e853 3f00 	ldrex	r3, [r3]
 800faaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800faac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faae:	f043 0301 	orr.w	r3, r3, #1
 800fab2:	653b      	str	r3, [r7, #80]	; 0x50
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	3308      	adds	r3, #8
 800faba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fabc:	637a      	str	r2, [r7, #52]	; 0x34
 800fabe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fac4:	e841 2300 	strex	r3, r2, [r1]
 800fac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800faca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800facc:	2b00      	cmp	r3, #0
 800face:	d1e5      	bne.n	800fa9c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	3308      	adds	r3, #8
 800fad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	e853 3f00 	ldrex	r3, [r3]
 800fade:	613b      	str	r3, [r7, #16]
   return(result);
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	3308      	adds	r3, #8
 800faee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800faf0:	623a      	str	r2, [r7, #32]
 800faf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf4:	69f9      	ldr	r1, [r7, #28]
 800faf6:	6a3a      	ldr	r2, [r7, #32]
 800faf8:	e841 2300 	strex	r3, r2, [r1]
 800fafc:	61bb      	str	r3, [r7, #24]
   return(result);
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d1e5      	bne.n	800fad0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800fb04:	2300      	movs	r3, #0
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3758      	adds	r7, #88	; 0x58
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	0800fc6d 	.word	0x0800fc6d
 800fb14:	0800fd8f 	.word	0x0800fd8f
 800fb18:	0800fdc7 	.word	0x0800fdc7

0800fb1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b08f      	sub	sp, #60	; 0x3c
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2a:	6a3b      	ldr	r3, [r7, #32]
 800fb2c:	e853 3f00 	ldrex	r3, [r3]
 800fb30:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fb38:	637b      	str	r3, [r7, #52]	; 0x34
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb44:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb4a:	e841 2300 	strex	r3, r2, [r1]
 800fb4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1e6      	bne.n	800fb24 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3308      	adds	r3, #8
 800fb5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	e853 3f00 	ldrex	r3, [r3]
 800fb64:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fb6c:	633b      	str	r3, [r7, #48]	; 0x30
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	3308      	adds	r3, #8
 800fb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb76:	61ba      	str	r2, [r7, #24]
 800fb78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7a:	6979      	ldr	r1, [r7, #20]
 800fb7c:	69ba      	ldr	r2, [r7, #24]
 800fb7e:	e841 2300 	strex	r3, r2, [r1]
 800fb82:	613b      	str	r3, [r7, #16]
   return(result);
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1e5      	bne.n	800fb56 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2220      	movs	r2, #32
 800fb8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800fb92:	bf00      	nop
 800fb94:	373c      	adds	r7, #60	; 0x3c
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr
	...

0800fba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b095      	sub	sp, #84	; 0x54
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb0:	e853 3f00 	ldrex	r3, [r3]
 800fbb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fbbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbc6:	643b      	str	r3, [r7, #64]	; 0x40
 800fbc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbce:	e841 2300 	strex	r3, r2, [r1]
 800fbd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d1e6      	bne.n	800fba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	3308      	adds	r3, #8
 800fbe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe2:	6a3b      	ldr	r3, [r7, #32]
 800fbe4:	e853 3f00 	ldrex	r3, [r3]
 800fbe8:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbea:	69fa      	ldr	r2, [r7, #28]
 800fbec:	4b1e      	ldr	r3, [pc, #120]	; (800fc68 <UART_EndRxTransfer+0xc8>)
 800fbee:	4013      	ands	r3, r2
 800fbf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	3308      	adds	r3, #8
 800fbf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fbfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fbfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc02:	e841 2300 	strex	r3, r2, [r1]
 800fc06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1e5      	bne.n	800fbda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d118      	bne.n	800fc48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	e853 3f00 	ldrex	r3, [r3]
 800fc22:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	f023 0310 	bic.w	r3, r3, #16
 800fc2a:	647b      	str	r3, [r7, #68]	; 0x44
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	461a      	mov	r2, r3
 800fc32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc34:	61bb      	str	r3, [r7, #24]
 800fc36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc38:	6979      	ldr	r1, [r7, #20]
 800fc3a:	69ba      	ldr	r2, [r7, #24]
 800fc3c:	e841 2300 	strex	r3, r2, [r1]
 800fc40:	613b      	str	r3, [r7, #16]
   return(result);
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d1e6      	bne.n	800fc16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2220      	movs	r2, #32
 800fc4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fc5c:	bf00      	nop
 800fc5e:	3754      	adds	r7, #84	; 0x54
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	effffffe 	.word	0xeffffffe

0800fc6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b09c      	sub	sp, #112	; 0x70
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc78:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	69db      	ldr	r3, [r3, #28]
 800fc7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc82:	d071      	beq.n	800fd68 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fc84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc86:	2200      	movs	r2, #0
 800fc88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc94:	e853 3f00 	ldrex	r3, [r3]
 800fc98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fca0:	66bb      	str	r3, [r7, #104]	; 0x68
 800fca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcb2:	e841 2300 	strex	r3, r2, [r1]
 800fcb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fcb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1e6      	bne.n	800fc8c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3308      	adds	r3, #8
 800fcc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc8:	e853 3f00 	ldrex	r3, [r3]
 800fccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd0:	f023 0301 	bic.w	r3, r3, #1
 800fcd4:	667b      	str	r3, [r7, #100]	; 0x64
 800fcd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	3308      	adds	r3, #8
 800fcdc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fcde:	647a      	str	r2, [r7, #68]	; 0x44
 800fce0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fce6:	e841 2300 	strex	r3, r2, [r1]
 800fcea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fcec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1e5      	bne.n	800fcbe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	3308      	adds	r3, #8
 800fcf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfc:	e853 3f00 	ldrex	r3, [r3]
 800fd00:	623b      	str	r3, [r7, #32]
   return(result);
 800fd02:	6a3b      	ldr	r3, [r7, #32]
 800fd04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd08:	663b      	str	r3, [r7, #96]	; 0x60
 800fd0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3308      	adds	r3, #8
 800fd10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd12:	633a      	str	r2, [r7, #48]	; 0x30
 800fd14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd1a:	e841 2300 	strex	r3, r2, [r1]
 800fd1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d1e5      	bne.n	800fcf2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd28:	2220      	movs	r2, #32
 800fd2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d118      	bne.n	800fd68 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	e853 3f00 	ldrex	r3, [r3]
 800fd42:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f023 0310 	bic.w	r3, r3, #16
 800fd4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	461a      	mov	r2, r3
 800fd52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd54:	61fb      	str	r3, [r7, #28]
 800fd56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd58:	69b9      	ldr	r1, [r7, #24]
 800fd5a:	69fa      	ldr	r2, [r7, #28]
 800fd5c:	e841 2300 	strex	r3, r2, [r1]
 800fd60:	617b      	str	r3, [r7, #20]
   return(result);
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1e6      	bne.n	800fd36 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d107      	bne.n	800fd80 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd76:	4619      	mov	r1, r3
 800fd78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fd7a:	f7fe ff05 	bl	800eb88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fd7e:	e002      	b.n	800fd86 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800fd80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fd82:	f7f3 fbc1 	bl	8003508 <HAL_UART_RxCpltCallback>
}
 800fd86:	bf00      	nop
 800fd88:	3770      	adds	r7, #112	; 0x70
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b084      	sub	sp, #16
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd9a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d109      	bne.n	800fdb8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdaa:	085b      	lsrs	r3, r3, #1
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	4619      	mov	r1, r3
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f7fe fee9 	bl	800eb88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdb6:	e002      	b.n	800fdbe <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fdb8:	68f8      	ldr	r0, [r7, #12]
 800fdba:	f7fe fed1 	bl	800eb60 <HAL_UART_RxHalfCpltCallback>
}
 800fdbe:	bf00      	nop
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b086      	sub	sp, #24
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdd2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdda:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fde2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdee:	2b80      	cmp	r3, #128	; 0x80
 800fdf0:	d109      	bne.n	800fe06 <UART_DMAError+0x40>
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	2b21      	cmp	r3, #33	; 0x21
 800fdf6:	d106      	bne.n	800fe06 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fe00:	6978      	ldr	r0, [r7, #20]
 800fe02:	f7ff fe8b 	bl	800fb1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe10:	2b40      	cmp	r3, #64	; 0x40
 800fe12:	d109      	bne.n	800fe28 <UART_DMAError+0x62>
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2b22      	cmp	r3, #34	; 0x22
 800fe18:	d106      	bne.n	800fe28 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fe22:	6978      	ldr	r0, [r7, #20]
 800fe24:	f7ff febc 	bl	800fba0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe2e:	f043 0210 	orr.w	r2, r3, #16
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe38:	6978      	ldr	r0, [r7, #20]
 800fe3a:	f7fe fe9b 	bl	800eb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe3e:	bf00      	nop
 800fe40:	3718      	adds	r7, #24
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b084      	sub	sp, #16
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f7fe fe85 	bl	800eb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe6a:	bf00      	nop
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}

0800fe72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe72:	b580      	push	{r7, lr}
 800fe74:	b088      	sub	sp, #32
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	e853 3f00 	ldrex	r3, [r3]
 800fe86:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe8e:	61fb      	str	r3, [r7, #28]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	461a      	mov	r2, r3
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	61bb      	str	r3, [r7, #24]
 800fe9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe9c:	6979      	ldr	r1, [r7, #20]
 800fe9e:	69ba      	ldr	r2, [r7, #24]
 800fea0:	e841 2300 	strex	r3, r2, [r1]
 800fea4:	613b      	str	r3, [r7, #16]
   return(result);
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1e6      	bne.n	800fe7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2220      	movs	r2, #32
 800feb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f7fe fe46 	bl	800eb4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fec0:	bf00      	nop
 800fec2:	3720      	adds	r7, #32
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fed0:	bf00      	nop
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b085      	sub	sp, #20
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d101      	bne.n	800ff1a <HAL_UARTEx_DisableFifoMode+0x16>
 800ff16:	2302      	movs	r3, #2
 800ff18:	e027      	b.n	800ff6a <HAL_UARTEx_DisableFifoMode+0x66>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2224      	movs	r2, #36	; 0x24
 800ff26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f022 0201 	bic.w	r2, r2, #1
 800ff40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2220      	movs	r2, #32
 800ff5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff68:	2300      	movs	r3, #0
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3714      	adds	r7, #20
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr

0800ff76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff76:	b580      	push	{r7, lr}
 800ff78:	b084      	sub	sp, #16
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
 800ff7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d101      	bne.n	800ff8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff8a:	2302      	movs	r3, #2
 800ff8c:	e02d      	b.n	800ffea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2201      	movs	r2, #1
 800ff92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2224      	movs	r2, #36	; 0x24
 800ff9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f022 0201 	bic.w	r2, r2, #1
 800ffb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	689b      	ldr	r3, [r3, #8]
 800ffbc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	683a      	ldr	r2, [r7, #0]
 800ffc6:	430a      	orrs	r2, r1
 800ffc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 f850 	bl	8010070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2220      	movs	r2, #32
 800ffdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ffe8:	2300      	movs	r3, #0
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3710      	adds	r7, #16
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}

0800fff2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fff2:	b580      	push	{r7, lr}
 800fff4:	b084      	sub	sp, #16
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
 800fffa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010002:	2b01      	cmp	r3, #1
 8010004:	d101      	bne.n	801000a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010006:	2302      	movs	r3, #2
 8010008:	e02d      	b.n	8010066 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2201      	movs	r2, #1
 801000e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2224      	movs	r2, #36	; 0x24
 8010016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f022 0201 	bic.w	r2, r2, #1
 8010030:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	683a      	ldr	r2, [r7, #0]
 8010042:	430a      	orrs	r2, r1
 8010044:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 f812 	bl	8010070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2220      	movs	r2, #32
 8010058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
	...

08010070 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010070:	b480      	push	{r7}
 8010072:	b085      	sub	sp, #20
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801007c:	2b00      	cmp	r3, #0
 801007e:	d108      	bne.n	8010092 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2201      	movs	r2, #1
 8010084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010090:	e031      	b.n	80100f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010092:	2310      	movs	r3, #16
 8010094:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010096:	2310      	movs	r3, #16
 8010098:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	689b      	ldr	r3, [r3, #8]
 80100a0:	0e5b      	lsrs	r3, r3, #25
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	f003 0307 	and.w	r3, r3, #7
 80100a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	689b      	ldr	r3, [r3, #8]
 80100b0:	0f5b      	lsrs	r3, r3, #29
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	f003 0307 	and.w	r3, r3, #7
 80100b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100ba:	7bbb      	ldrb	r3, [r7, #14]
 80100bc:	7b3a      	ldrb	r2, [r7, #12]
 80100be:	4911      	ldr	r1, [pc, #68]	; (8010104 <UARTEx_SetNbDataToProcess+0x94>)
 80100c0:	5c8a      	ldrb	r2, [r1, r2]
 80100c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80100c6:	7b3a      	ldrb	r2, [r7, #12]
 80100c8:	490f      	ldr	r1, [pc, #60]	; (8010108 <UARTEx_SetNbDataToProcess+0x98>)
 80100ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100d8:	7bfb      	ldrb	r3, [r7, #15]
 80100da:	7b7a      	ldrb	r2, [r7, #13]
 80100dc:	4909      	ldr	r1, [pc, #36]	; (8010104 <UARTEx_SetNbDataToProcess+0x94>)
 80100de:	5c8a      	ldrb	r2, [r1, r2]
 80100e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100e4:	7b7a      	ldrb	r2, [r7, #13]
 80100e6:	4908      	ldr	r1, [pc, #32]	; (8010108 <UARTEx_SetNbDataToProcess+0x98>)
 80100e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80100ee:	b29a      	uxth	r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80100f6:	bf00      	nop
 80100f8:	3714      	adds	r7, #20
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr
 8010102:	bf00      	nop
 8010104:	08011ee0 	.word	0x08011ee0
 8010108:	08011ee8 	.word	0x08011ee8

0801010c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801010c:	b084      	sub	sp, #16
 801010e:	b580      	push	{r7, lr}
 8010110:	b084      	sub	sp, #16
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	f107 001c 	add.w	r0, r7, #28
 801011a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801011e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010120:	2b01      	cmp	r3, #1
 8010122:	d120      	bne.n	8010166 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010128:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	68da      	ldr	r2, [r3, #12]
 8010134:	4b2a      	ldr	r3, [pc, #168]	; (80101e0 <USB_CoreInit+0xd4>)
 8010136:	4013      	ands	r3, r2
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801014a:	2b01      	cmp	r3, #1
 801014c:	d105      	bne.n	801015a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 faa8 	bl	80106b0 <USB_CoreReset>
 8010160:	4603      	mov	r3, r0
 8010162:	73fb      	strb	r3, [r7, #15]
 8010164:	e01a      	b.n	801019c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f000 fa9c 	bl	80106b0 <USB_CoreReset>
 8010178:	4603      	mov	r3, r0
 801017a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801017c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801017e:	2b00      	cmp	r3, #0
 8010180:	d106      	bne.n	8010190 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010186:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	639a      	str	r2, [r3, #56]	; 0x38
 801018e:	e005      	b.n	801019c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801019c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019e:	2b01      	cmp	r3, #1
 80101a0:	d116      	bne.n	80101d0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80101b0:	4b0c      	ldr	r3, [pc, #48]	; (80101e4 <USB_CoreInit+0xd8>)
 80101b2:	4313      	orrs	r3, r2
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	f043 0206 	orr.w	r2, r3, #6
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	689b      	ldr	r3, [r3, #8]
 80101c8:	f043 0220 	orr.w	r2, r3, #32
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80101d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3710      	adds	r7, #16
 80101d6:	46bd      	mov	sp, r7
 80101d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80101dc:	b004      	add	sp, #16
 80101de:	4770      	bx	lr
 80101e0:	ffbdffbf 	.word	0xffbdffbf
 80101e4:	03ee0000 	.word	0x03ee0000

080101e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	689b      	ldr	r3, [r3, #8]
 80101f4:	f023 0201 	bic.w	r2, r3, #1
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr

0801020a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b084      	sub	sp, #16
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	460b      	mov	r3, r1
 8010214:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010216:	2300      	movs	r3, #0
 8010218:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	68db      	ldr	r3, [r3, #12]
 801021e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010226:	78fb      	ldrb	r3, [r7, #3]
 8010228:	2b01      	cmp	r3, #1
 801022a:	d115      	bne.n	8010258 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010238:	2001      	movs	r0, #1
 801023a:	f7f4 f9dd 	bl	80045f8 <HAL_Delay>
      ms++;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	3301      	adds	r3, #1
 8010242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 fa25 	bl	8010694 <USB_GetMode>
 801024a:	4603      	mov	r3, r0
 801024c:	2b01      	cmp	r3, #1
 801024e:	d01e      	beq.n	801028e <USB_SetCurrentMode+0x84>
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2b31      	cmp	r3, #49	; 0x31
 8010254:	d9f0      	bls.n	8010238 <USB_SetCurrentMode+0x2e>
 8010256:	e01a      	b.n	801028e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010258:	78fb      	ldrb	r3, [r7, #3]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d115      	bne.n	801028a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801026a:	2001      	movs	r0, #1
 801026c:	f7f4 f9c4 	bl	80045f8 <HAL_Delay>
      ms++;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	3301      	adds	r3, #1
 8010274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 fa0c 	bl	8010694 <USB_GetMode>
 801027c:	4603      	mov	r3, r0
 801027e:	2b00      	cmp	r3, #0
 8010280:	d005      	beq.n	801028e <USB_SetCurrentMode+0x84>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2b31      	cmp	r3, #49	; 0x31
 8010286:	d9f0      	bls.n	801026a <USB_SetCurrentMode+0x60>
 8010288:	e001      	b.n	801028e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801028a:	2301      	movs	r3, #1
 801028c:	e005      	b.n	801029a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2b32      	cmp	r3, #50	; 0x32
 8010292:	d101      	bne.n	8010298 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010294:	2301      	movs	r3, #1
 8010296:	e000      	b.n	801029a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010298:	2300      	movs	r3, #0
}
 801029a:	4618      	mov	r0, r3
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
	...

080102a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80102a4:	b084      	sub	sp, #16
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b086      	sub	sp, #24
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
 80102ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80102b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80102b6:	2300      	movs	r3, #0
 80102b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80102be:	2300      	movs	r3, #0
 80102c0:	613b      	str	r3, [r7, #16]
 80102c2:	e009      	b.n	80102d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	3340      	adds	r3, #64	; 0x40
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4413      	add	r3, r2
 80102ce:	2200      	movs	r2, #0
 80102d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	3301      	adds	r3, #1
 80102d6:	613b      	str	r3, [r7, #16]
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	2b0e      	cmp	r3, #14
 80102dc:	d9f2      	bls.n	80102c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80102de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d11c      	bne.n	801031e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102f2:	f043 0302 	orr.w	r3, r3, #2
 80102f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	601a      	str	r2, [r3, #0]
 801031c:	e005      	b.n	801032a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010322:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010330:	461a      	mov	r2, r3
 8010332:	2300      	movs	r3, #0
 8010334:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801033c:	4619      	mov	r1, r3
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010344:	461a      	mov	r2, r3
 8010346:	680b      	ldr	r3, [r1, #0]
 8010348:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801034a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034c:	2b01      	cmp	r3, #1
 801034e:	d10c      	bne.n	801036a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010352:	2b00      	cmp	r3, #0
 8010354:	d104      	bne.n	8010360 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010356:	2100      	movs	r1, #0
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f000 f961 	bl	8010620 <USB_SetDevSpeed>
 801035e:	e008      	b.n	8010372 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010360:	2101      	movs	r1, #1
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f000 f95c 	bl	8010620 <USB_SetDevSpeed>
 8010368:	e003      	b.n	8010372 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801036a:	2103      	movs	r1, #3
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 f957 	bl	8010620 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010372:	2110      	movs	r1, #16
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 f8f3 	bl	8010560 <USB_FlushTxFifo>
 801037a:	4603      	mov	r3, r0
 801037c:	2b00      	cmp	r3, #0
 801037e:	d001      	beq.n	8010384 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010380:	2301      	movs	r3, #1
 8010382:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f000 f91d 	bl	80105c4 <USB_FlushRxFifo>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010390:	2301      	movs	r3, #1
 8010392:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801039a:	461a      	mov	r2, r3
 801039c:	2300      	movs	r3, #0
 801039e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103a6:	461a      	mov	r2, r3
 80103a8:	2300      	movs	r3, #0
 80103aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103b2:	461a      	mov	r2, r3
 80103b4:	2300      	movs	r3, #0
 80103b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80103b8:	2300      	movs	r3, #0
 80103ba:	613b      	str	r3, [r7, #16]
 80103bc:	e043      	b.n	8010446 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	015a      	lsls	r2, r3, #5
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	4413      	add	r3, r2
 80103c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80103d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80103d4:	d118      	bne.n	8010408 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10a      	bne.n	80103f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	015a      	lsls	r2, r3, #5
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	4413      	add	r3, r2
 80103e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e8:	461a      	mov	r2, r3
 80103ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80103ee:	6013      	str	r3, [r2, #0]
 80103f0:	e013      	b.n	801041a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	015a      	lsls	r2, r3, #5
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	4413      	add	r3, r2
 80103fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103fe:	461a      	mov	r2, r3
 8010400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010404:	6013      	str	r3, [r2, #0]
 8010406:	e008      	b.n	801041a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	015a      	lsls	r2, r3, #5
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4413      	add	r3, r2
 8010410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010414:	461a      	mov	r2, r3
 8010416:	2300      	movs	r3, #0
 8010418:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	015a      	lsls	r2, r3, #5
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	4413      	add	r3, r2
 8010422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010426:	461a      	mov	r2, r3
 8010428:	2300      	movs	r3, #0
 801042a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	015a      	lsls	r2, r3, #5
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	4413      	add	r3, r2
 8010434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010438:	461a      	mov	r2, r3
 801043a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801043e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	3301      	adds	r3, #1
 8010444:	613b      	str	r3, [r7, #16]
 8010446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010448:	693a      	ldr	r2, [r7, #16]
 801044a:	429a      	cmp	r2, r3
 801044c:	d3b7      	bcc.n	80103be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801044e:	2300      	movs	r3, #0
 8010450:	613b      	str	r3, [r7, #16]
 8010452:	e043      	b.n	80104dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010454:	693b      	ldr	r3, [r7, #16]
 8010456:	015a      	lsls	r2, r3, #5
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	4413      	add	r3, r2
 801045c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801046a:	d118      	bne.n	801049e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d10a      	bne.n	8010488 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	015a      	lsls	r2, r3, #5
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	4413      	add	r3, r2
 801047a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801047e:	461a      	mov	r2, r3
 8010480:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010484:	6013      	str	r3, [r2, #0]
 8010486:	e013      	b.n	80104b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	015a      	lsls	r2, r3, #5
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	4413      	add	r3, r2
 8010490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010494:	461a      	mov	r2, r3
 8010496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801049a:	6013      	str	r3, [r2, #0]
 801049c:	e008      	b.n	80104b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	015a      	lsls	r2, r3, #5
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	4413      	add	r3, r2
 80104a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104aa:	461a      	mov	r2, r3
 80104ac:	2300      	movs	r3, #0
 80104ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	015a      	lsls	r2, r3, #5
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	4413      	add	r3, r2
 80104b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104bc:	461a      	mov	r2, r3
 80104be:	2300      	movs	r3, #0
 80104c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	015a      	lsls	r2, r3, #5
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	4413      	add	r3, r2
 80104ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ce:	461a      	mov	r2, r3
 80104d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80104d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	3301      	adds	r3, #1
 80104da:	613b      	str	r3, [r7, #16]
 80104dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104de:	693a      	ldr	r2, [r7, #16]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d3b7      	bcc.n	8010454 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104ea:	691b      	ldr	r3, [r3, #16]
 80104ec:	68fa      	ldr	r2, [r7, #12]
 80104ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80104f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010504:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010508:	2b00      	cmp	r3, #0
 801050a:	d105      	bne.n	8010518 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	699b      	ldr	r3, [r3, #24]
 8010510:	f043 0210 	orr.w	r2, r3, #16
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	699a      	ldr	r2, [r3, #24]
 801051c:	4b0e      	ldr	r3, [pc, #56]	; (8010558 <USB_DevInit+0x2b4>)
 801051e:	4313      	orrs	r3, r2
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010526:	2b00      	cmp	r3, #0
 8010528:	d005      	beq.n	8010536 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	699b      	ldr	r3, [r3, #24]
 801052e:	f043 0208 	orr.w	r2, r3, #8
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010538:	2b01      	cmp	r3, #1
 801053a:	d105      	bne.n	8010548 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	699a      	ldr	r2, [r3, #24]
 8010540:	4b06      	ldr	r3, [pc, #24]	; (801055c <USB_DevInit+0x2b8>)
 8010542:	4313      	orrs	r3, r2
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010548:	7dfb      	ldrb	r3, [r7, #23]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3718      	adds	r7, #24
 801054e:	46bd      	mov	sp, r7
 8010550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010554:	b004      	add	sp, #16
 8010556:	4770      	bx	lr
 8010558:	803c3800 	.word	0x803c3800
 801055c:	40000004 	.word	0x40000004

08010560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010560:	b480      	push	{r7}
 8010562:	b085      	sub	sp, #20
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801056a:	2300      	movs	r3, #0
 801056c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	3301      	adds	r3, #1
 8010572:	60fb      	str	r3, [r7, #12]
 8010574:	4a12      	ldr	r2, [pc, #72]	; (80105c0 <USB_FlushTxFifo+0x60>)
 8010576:	4293      	cmp	r3, r2
 8010578:	d901      	bls.n	801057e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801057a:	2303      	movs	r3, #3
 801057c:	e01a      	b.n	80105b4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	691b      	ldr	r3, [r3, #16]
 8010582:	2b00      	cmp	r3, #0
 8010584:	daf3      	bge.n	801056e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010586:	2300      	movs	r3, #0
 8010588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	019b      	lsls	r3, r3, #6
 801058e:	f043 0220 	orr.w	r2, r3, #32
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	3301      	adds	r3, #1
 801059a:	60fb      	str	r3, [r7, #12]
 801059c:	4a08      	ldr	r2, [pc, #32]	; (80105c0 <USB_FlushTxFifo+0x60>)
 801059e:	4293      	cmp	r3, r2
 80105a0:	d901      	bls.n	80105a6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80105a2:	2303      	movs	r3, #3
 80105a4:	e006      	b.n	80105b4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	691b      	ldr	r3, [r3, #16]
 80105aa:	f003 0320 	and.w	r3, r3, #32
 80105ae:	2b20      	cmp	r3, #32
 80105b0:	d0f1      	beq.n	8010596 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80105b2:	2300      	movs	r3, #0
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3714      	adds	r7, #20
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr
 80105c0:	00030d40 	.word	0x00030d40

080105c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80105cc:	2300      	movs	r3, #0
 80105ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	3301      	adds	r3, #1
 80105d4:	60fb      	str	r3, [r7, #12]
 80105d6:	4a11      	ldr	r2, [pc, #68]	; (801061c <USB_FlushRxFifo+0x58>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d901      	bls.n	80105e0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80105dc:	2303      	movs	r3, #3
 80105de:	e017      	b.n	8010610 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	691b      	ldr	r3, [r3, #16]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	daf3      	bge.n	80105d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80105e8:	2300      	movs	r3, #0
 80105ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2210      	movs	r2, #16
 80105f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	3301      	adds	r3, #1
 80105f6:	60fb      	str	r3, [r7, #12]
 80105f8:	4a08      	ldr	r2, [pc, #32]	; (801061c <USB_FlushRxFifo+0x58>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d901      	bls.n	8010602 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80105fe:	2303      	movs	r3, #3
 8010600:	e006      	b.n	8010610 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	691b      	ldr	r3, [r3, #16]
 8010606:	f003 0310 	and.w	r3, r3, #16
 801060a:	2b10      	cmp	r3, #16
 801060c:	d0f1      	beq.n	80105f2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	3714      	adds	r7, #20
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr
 801061c:	00030d40 	.word	0x00030d40

08010620 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010620:	b480      	push	{r7}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	460b      	mov	r3, r1
 801062a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	78fb      	ldrb	r3, [r7, #3]
 801063a:	68f9      	ldr	r1, [r7, #12]
 801063c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010640:	4313      	orrs	r3, r2
 8010642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010644:	2300      	movs	r3, #0
}
 8010646:	4618      	mov	r0, r3
 8010648:	3714      	adds	r7, #20
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr

08010652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010652:	b480      	push	{r7}
 8010654:	b085      	sub	sp, #20
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	68fa      	ldr	r2, [r7, #12]
 8010668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801066c:	f023 0303 	bic.w	r3, r3, #3
 8010670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010680:	f043 0302 	orr.w	r3, r3, #2
 8010684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010686:	2300      	movs	r3, #0
}
 8010688:	4618      	mov	r0, r3
 801068a:	3714      	adds	r7, #20
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr

08010694 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	695b      	ldr	r3, [r3, #20]
 80106a0:	f003 0301 	and.w	r3, r3, #1
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80106b8:	2300      	movs	r3, #0
 80106ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	3301      	adds	r3, #1
 80106c0:	60fb      	str	r3, [r7, #12]
 80106c2:	4a13      	ldr	r2, [pc, #76]	; (8010710 <USB_CoreReset+0x60>)
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d901      	bls.n	80106cc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80106c8:	2303      	movs	r3, #3
 80106ca:	e01a      	b.n	8010702 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	691b      	ldr	r3, [r3, #16]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	daf3      	bge.n	80106bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80106d4:	2300      	movs	r3, #0
 80106d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	f043 0201 	orr.w	r2, r3, #1
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	3301      	adds	r3, #1
 80106e8:	60fb      	str	r3, [r7, #12]
 80106ea:	4a09      	ldr	r2, [pc, #36]	; (8010710 <USB_CoreReset+0x60>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d901      	bls.n	80106f4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80106f0:	2303      	movs	r3, #3
 80106f2:	e006      	b.n	8010702 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	691b      	ldr	r3, [r3, #16]
 80106f8:	f003 0301 	and.w	r3, r3, #1
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	d0f1      	beq.n	80106e4 <USB_CoreReset+0x34>

  return HAL_OK;
 8010700:	2300      	movs	r3, #0
}
 8010702:	4618      	mov	r0, r3
 8010704:	3714      	adds	r7, #20
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	00030d40 	.word	0x00030d40

08010714 <__errno>:
 8010714:	4b01      	ldr	r3, [pc, #4]	; (801071c <__errno+0x8>)
 8010716:	6818      	ldr	r0, [r3, #0]
 8010718:	4770      	bx	lr
 801071a:	bf00      	nop
 801071c:	24000010 	.word	0x24000010

08010720 <__libc_init_array>:
 8010720:	b570      	push	{r4, r5, r6, lr}
 8010722:	4d0d      	ldr	r5, [pc, #52]	; (8010758 <__libc_init_array+0x38>)
 8010724:	4c0d      	ldr	r4, [pc, #52]	; (801075c <__libc_init_array+0x3c>)
 8010726:	1b64      	subs	r4, r4, r5
 8010728:	10a4      	asrs	r4, r4, #2
 801072a:	2600      	movs	r6, #0
 801072c:	42a6      	cmp	r6, r4
 801072e:	d109      	bne.n	8010744 <__libc_init_array+0x24>
 8010730:	4d0b      	ldr	r5, [pc, #44]	; (8010760 <__libc_init_array+0x40>)
 8010732:	4c0c      	ldr	r4, [pc, #48]	; (8010764 <__libc_init_array+0x44>)
 8010734:	f001 fbae 	bl	8011e94 <_init>
 8010738:	1b64      	subs	r4, r4, r5
 801073a:	10a4      	asrs	r4, r4, #2
 801073c:	2600      	movs	r6, #0
 801073e:	42a6      	cmp	r6, r4
 8010740:	d105      	bne.n	801074e <__libc_init_array+0x2e>
 8010742:	bd70      	pop	{r4, r5, r6, pc}
 8010744:	f855 3b04 	ldr.w	r3, [r5], #4
 8010748:	4798      	blx	r3
 801074a:	3601      	adds	r6, #1
 801074c:	e7ee      	b.n	801072c <__libc_init_array+0xc>
 801074e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010752:	4798      	blx	r3
 8010754:	3601      	adds	r6, #1
 8010756:	e7f2      	b.n	801073e <__libc_init_array+0x1e>
 8010758:	080139f8 	.word	0x080139f8
 801075c:	080139f8 	.word	0x080139f8
 8010760:	080139f8 	.word	0x080139f8
 8010764:	080139fc 	.word	0x080139fc

08010768 <memset>:
 8010768:	4402      	add	r2, r0
 801076a:	4603      	mov	r3, r0
 801076c:	4293      	cmp	r3, r2
 801076e:	d100      	bne.n	8010772 <memset+0xa>
 8010770:	4770      	bx	lr
 8010772:	f803 1b01 	strb.w	r1, [r3], #1
 8010776:	e7f9      	b.n	801076c <memset+0x4>

08010778 <checkint>:
 8010778:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801077c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010780:	429a      	cmp	r2, r3
 8010782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010784:	dd2b      	ble.n	80107de <checkint+0x66>
 8010786:	f240 4333 	movw	r3, #1075	; 0x433
 801078a:	429a      	cmp	r2, r3
 801078c:	dc25      	bgt.n	80107da <checkint+0x62>
 801078e:	1a9b      	subs	r3, r3, r2
 8010790:	f1a3 0620 	sub.w	r6, r3, #32
 8010794:	f04f 32ff 	mov.w	r2, #4294967295
 8010798:	fa02 f606 	lsl.w	r6, r2, r6
 801079c:	fa02 f403 	lsl.w	r4, r2, r3
 80107a0:	f1c3 0520 	rsb	r5, r3, #32
 80107a4:	4334      	orrs	r4, r6
 80107a6:	fa22 f505 	lsr.w	r5, r2, r5
 80107aa:	432c      	orrs	r4, r5
 80107ac:	409a      	lsls	r2, r3
 80107ae:	ea20 0602 	bic.w	r6, r0, r2
 80107b2:	ea21 0704 	bic.w	r7, r1, r4
 80107b6:	ea56 0207 	orrs.w	r2, r6, r7
 80107ba:	f1a3 0420 	sub.w	r4, r3, #32
 80107be:	f1c3 0220 	rsb	r2, r3, #32
 80107c2:	d10c      	bne.n	80107de <checkint+0x66>
 80107c4:	40d8      	lsrs	r0, r3
 80107c6:	fa01 f302 	lsl.w	r3, r1, r2
 80107ca:	4318      	orrs	r0, r3
 80107cc:	40e1      	lsrs	r1, r4
 80107ce:	4308      	orrs	r0, r1
 80107d0:	f000 0301 	and.w	r3, r0, #1
 80107d4:	f1c3 0002 	rsb	r0, r3, #2
 80107d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107da:	2002      	movs	r0, #2
 80107dc:	e7fc      	b.n	80107d8 <checkint+0x60>
 80107de:	2000      	movs	r0, #0
 80107e0:	e7fa      	b.n	80107d8 <checkint+0x60>
 80107e2:	0000      	movs	r0, r0
 80107e4:	0000      	movs	r0, r0
	...

080107e8 <pow>:
 80107e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ec:	ed2d 8b0a 	vpush	{d8-d12}
 80107f0:	b09b      	sub	sp, #108	; 0x6c
 80107f2:	ed8d 0b02 	vstr	d0, [sp, #8]
 80107f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80107fa:	ed8d 1b00 	vstr	d1, [sp]
 80107fe:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8010802:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010806:	f109 30ff 	add.w	r0, r9, #4294967295
 801080a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 801080e:	4288      	cmp	r0, r1
 8010810:	46cc      	mov	ip, r9
 8010812:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8010816:	d806      	bhi.n	8010826 <pow+0x3e>
 8010818:	f3c8 010a 	ubfx	r1, r8, #0, #11
 801081c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8010820:	297f      	cmp	r1, #127	; 0x7f
 8010822:	f240 81ab 	bls.w	8010b7c <pow+0x394>
 8010826:	19b1      	adds	r1, r6, r6
 8010828:	9104      	str	r1, [sp, #16]
 801082a:	eb47 0107 	adc.w	r1, r7, r7
 801082e:	9105      	str	r1, [sp, #20]
 8010830:	9904      	ldr	r1, [sp, #16]
 8010832:	f111 31ff 	adds.w	r1, r1, #4294967295
 8010836:	460a      	mov	r2, r1
 8010838:	9905      	ldr	r1, [sp, #20]
 801083a:	f141 31ff 	adc.w	r1, r1, #4294967295
 801083e:	460b      	mov	r3, r1
 8010840:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8010844:	f06f 0001 	mvn.w	r0, #1
 8010848:	4299      	cmp	r1, r3
 801084a:	bf08      	it	eq
 801084c:	4290      	cmpeq	r0, r2
 801084e:	d260      	bcs.n	8010912 <pow+0x12a>
 8010850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010854:	4313      	orrs	r3, r2
 8010856:	d11a      	bne.n	801088e <pow+0xa6>
 8010858:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 801085c:	1923      	adds	r3, r4, r4
 801085e:	930c      	str	r3, [sp, #48]	; 0x30
 8010860:	eb42 0302 	adc.w	r3, r2, r2
 8010864:	930d      	str	r3, [sp, #52]	; 0x34
 8010866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801086a:	4bcf      	ldr	r3, [pc, #828]	; (8010ba8 <pow+0x3c0>)
 801086c:	2200      	movs	r2, #0
 801086e:	428b      	cmp	r3, r1
 8010870:	bf08      	it	eq
 8010872:	4282      	cmpeq	r2, r0
 8010874:	f080 8265 	bcs.w	8010d42 <pow+0x55a>
 8010878:	ed9d 7b02 	vldr	d7, [sp, #8]
 801087c:	ed9d 6b00 	vldr	d6, [sp]
 8010880:	ee37 0b06 	vadd.f64	d0, d7, d6
 8010884:	b01b      	add	sp, #108	; 0x6c
 8010886:	ecbd 8b0a 	vpop	{d8-d12}
 801088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801088e:	49c7      	ldr	r1, [pc, #796]	; (8010bac <pow+0x3c4>)
 8010890:	2000      	movs	r0, #0
 8010892:	428d      	cmp	r5, r1
 8010894:	bf08      	it	eq
 8010896:	4284      	cmpeq	r4, r0
 8010898:	d10b      	bne.n	80108b2 <pow+0xca>
 801089a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801089e:	19b3      	adds	r3, r6, r6
 80108a0:	930e      	str	r3, [sp, #56]	; 0x38
 80108a2:	eb42 0302 	adc.w	r3, r2, r2
 80108a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80108a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80108ac:	4bbe      	ldr	r3, [pc, #760]	; (8010ba8 <pow+0x3c0>)
 80108ae:	2200      	movs	r2, #0
 80108b0:	e7dd      	b.n	801086e <pow+0x86>
 80108b2:	1921      	adds	r1, r4, r4
 80108b4:	9106      	str	r1, [sp, #24]
 80108b6:	eb45 0105 	adc.w	r1, r5, r5
 80108ba:	9107      	str	r1, [sp, #28]
 80108bc:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80108c0:	49bb      	ldr	r1, [pc, #748]	; (8010bb0 <pow+0x3c8>)
 80108c2:	2000      	movs	r0, #0
 80108c4:	42a1      	cmp	r1, r4
 80108c6:	bf08      	it	eq
 80108c8:	4298      	cmpeq	r0, r3
 80108ca:	d3d5      	bcc.n	8010878 <pow+0x90>
 80108cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80108d0:	428c      	cmp	r4, r1
 80108d2:	bf08      	it	eq
 80108d4:	4283      	cmpeq	r3, r0
 80108d6:	d1cf      	bne.n	8010878 <pow+0x90>
 80108d8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80108dc:	49b5      	ldr	r1, [pc, #724]	; (8010bb4 <pow+0x3cc>)
 80108de:	2000      	movs	r0, #0
 80108e0:	428c      	cmp	r4, r1
 80108e2:	bf08      	it	eq
 80108e4:	4283      	cmpeq	r3, r0
 80108e6:	f000 822c 	beq.w	8010d42 <pow+0x55a>
 80108ea:	49b3      	ldr	r1, [pc, #716]	; (8010bb8 <pow+0x3d0>)
 80108ec:	f04f 30ff 	mov.w	r0, #4294967295
 80108f0:	42a1      	cmp	r1, r4
 80108f2:	bf08      	it	eq
 80108f4:	4298      	cmpeq	r0, r3
 80108f6:	ea6f 0307 	mvn.w	r3, r7
 80108fa:	bf34      	ite	cc
 80108fc:	2201      	movcc	r2, #1
 80108fe:	2200      	movcs	r2, #0
 8010900:	0fdb      	lsrs	r3, r3, #31
 8010902:	429a      	cmp	r2, r3
 8010904:	f040 821a 	bne.w	8010d3c <pow+0x554>
 8010908:	ed9d 7b00 	vldr	d7, [sp]
 801090c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8010910:	e7b8      	b.n	8010884 <pow+0x9c>
 8010912:	1923      	adds	r3, r4, r4
 8010914:	9308      	str	r3, [sp, #32]
 8010916:	eb45 0305 	adc.w	r3, r5, r5
 801091a:	9309      	str	r3, [sp, #36]	; 0x24
 801091c:	9b08      	ldr	r3, [sp, #32]
 801091e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8010922:	9310      	str	r3, [sp, #64]	; 0x40
 8010924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010926:	f143 33ff 	adc.w	r3, r3, #4294967295
 801092a:	9311      	str	r3, [sp, #68]	; 0x44
 801092c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010930:	4299      	cmp	r1, r3
 8010932:	bf08      	it	eq
 8010934:	4290      	cmpeq	r0, r2
 8010936:	d22d      	bcs.n	8010994 <pow+0x1ac>
 8010938:	ed9d 7b02 	vldr	d7, [sp, #8]
 801093c:	2c00      	cmp	r4, #0
 801093e:	f175 0300 	sbcs.w	r3, r5, #0
 8010942:	ee27 0b07 	vmul.f64	d0, d7, d7
 8010946:	da16      	bge.n	8010976 <pow+0x18e>
 8010948:	4630      	mov	r0, r6
 801094a:	4639      	mov	r1, r7
 801094c:	f7ff ff14 	bl	8010778 <checkint>
 8010950:	2801      	cmp	r0, #1
 8010952:	d110      	bne.n	8010976 <pow+0x18e>
 8010954:	eeb1 0b40 	vneg.f64	d0, d0
 8010958:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801095c:	4323      	orrs	r3, r4
 801095e:	d10c      	bne.n	801097a <pow+0x192>
 8010960:	2e00      	cmp	r6, #0
 8010962:	f177 0300 	sbcs.w	r3, r7, #0
 8010966:	da8d      	bge.n	8010884 <pow+0x9c>
 8010968:	b01b      	add	sp, #108	; 0x6c
 801096a:	ecbd 8b0a 	vpop	{d8-d12}
 801096e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010972:	f001 b841 	b.w	80119f8 <__math_divzero>
 8010976:	2000      	movs	r0, #0
 8010978:	e7ee      	b.n	8010958 <pow+0x170>
 801097a:	2e00      	cmp	r6, #0
 801097c:	f177 0300 	sbcs.w	r3, r7, #0
 8010980:	da80      	bge.n	8010884 <pow+0x9c>
 8010982:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010986:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801098a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801098e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8010992:	e777      	b.n	8010884 <pow+0x9c>
 8010994:	2c00      	cmp	r4, #0
 8010996:	f175 0300 	sbcs.w	r3, r5, #0
 801099a:	da35      	bge.n	8010a08 <pow+0x220>
 801099c:	4630      	mov	r0, r6
 801099e:	4639      	mov	r1, r7
 80109a0:	f7ff feea 	bl	8010778 <checkint>
 80109a4:	b940      	cbnz	r0, 80109b8 <pow+0x1d0>
 80109a6:	ed9d 0b02 	vldr	d0, [sp, #8]
 80109aa:	b01b      	add	sp, #108	; 0x6c
 80109ac:	ecbd 8b0a 	vpop	{d8-d12}
 80109b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b4:	f001 b838 	b.w	8011a28 <__math_invalid>
 80109b8:	2801      	cmp	r0, #1
 80109ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80109be:	bf14      	ite	ne
 80109c0:	2000      	movne	r0, #0
 80109c2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80109c6:	461d      	mov	r5, r3
 80109c8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 80109cc:	f3c8 030a 	ubfx	r3, r8, #0, #11
 80109d0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 80109d4:	2a7f      	cmp	r2, #127	; 0x7f
 80109d6:	d933      	bls.n	8010a40 <pow+0x258>
 80109d8:	4974      	ldr	r1, [pc, #464]	; (8010bac <pow+0x3c4>)
 80109da:	2000      	movs	r0, #0
 80109dc:	428d      	cmp	r5, r1
 80109de:	bf08      	it	eq
 80109e0:	4284      	cmpeq	r4, r0
 80109e2:	f000 81ae 	beq.w	8010d42 <pow+0x55a>
 80109e6:	f240 32bd 	movw	r2, #957	; 0x3bd
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d80e      	bhi.n	8010a0c <pow+0x224>
 80109ee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80109f2:	ed9d 7b00 	vldr	d7, [sp]
 80109f6:	42a9      	cmp	r1, r5
 80109f8:	bf08      	it	eq
 80109fa:	42a0      	cmpeq	r0, r4
 80109fc:	bf34      	ite	cc
 80109fe:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8010a02:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8010a06:	e73d      	b.n	8010884 <pow+0x9c>
 8010a08:	2000      	movs	r0, #0
 8010a0a:	e7df      	b.n	80109cc <pow+0x1e4>
 8010a0c:	42a9      	cmp	r1, r5
 8010a0e:	bf08      	it	eq
 8010a10:	42a0      	cmpeq	r0, r4
 8010a12:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010a16:	bf2c      	ite	cs
 8010a18:	2301      	movcs	r3, #1
 8010a1a:	2300      	movcc	r3, #0
 8010a1c:	4590      	cmp	r8, r2
 8010a1e:	bf8c      	ite	hi
 8010a20:	f04f 0800 	movhi.w	r8, #0
 8010a24:	f04f 0801 	movls.w	r8, #1
 8010a28:	4543      	cmp	r3, r8
 8010a2a:	f04f 0000 	mov.w	r0, #0
 8010a2e:	f000 80af 	beq.w	8010b90 <pow+0x3a8>
 8010a32:	b01b      	add	sp, #108	; 0x6c
 8010a34:	ecbd 8b0a 	vpop	{d8-d12}
 8010a38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a3c:	f000 bfd4 	b.w	80119e8 <__math_oflow>
 8010a40:	f1bc 0f00 	cmp.w	ip, #0
 8010a44:	d10e      	bne.n	8010a64 <pow+0x27c>
 8010a46:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010ba0 <pow+0x3b8>
 8010a4a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010a4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010a52:	ec57 6b17 	vmov	r6, r7, d7
 8010a56:	4b59      	ldr	r3, [pc, #356]	; (8010bbc <pow+0x3d4>)
 8010a58:	2100      	movs	r1, #0
 8010a5a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010a5e:	1874      	adds	r4, r6, r1
 8010a60:	eb42 0503 	adc.w	r5, r2, r3
 8010a64:	2300      	movs	r3, #0
 8010a66:	18e3      	adds	r3, r4, r3
 8010a68:	4b55      	ldr	r3, [pc, #340]	; (8010bc0 <pow+0x3d8>)
 8010a6a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010a6e:	eb45 0303 	adc.w	r3, r5, r3
 8010a72:	1519      	asrs	r1, r3, #20
 8010a74:	ee03 1a10 	vmov	s6, r1
 8010a78:	0d1e      	lsrs	r6, r3, #20
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010a80:	0536      	lsls	r6, r6, #20
 8010a82:	1a63      	subs	r3, r4, r1
 8010a84:	9312      	str	r3, [sp, #72]	; 0x48
 8010a86:	eb65 0306 	sbc.w	r3, r5, r6
 8010a8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8010a8c:	4b4d      	ldr	r3, [pc, #308]	; (8010bc4 <pow+0x3dc>)
 8010a8e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8010a92:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010a96:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8010a9a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010a9e:	ed93 7b00 	vldr	d7, [r3]
 8010aa2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8010aa6:	ed93 4b02 	vldr	d4, [r3, #8]
 8010aaa:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8010aae:	eea3 5b07 	vfma.f64	d5, d3, d7
 8010ab2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8010ab6:	ee36 9b05 	vadd.f64	d9, d6, d5
 8010aba:	ee35 5b49 	vsub.f64	d5, d5, d9
 8010abe:	eea3 7b04 	vfma.f64	d7, d3, d4
 8010ac2:	ed93 4b04 	vldr	d4, [r3, #16]
 8010ac6:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010aca:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010ace:	ee26 4b04 	vmul.f64	d4, d6, d4
 8010ad2:	ed93 3b08 	vldr	d3, [r3, #32]
 8010ad6:	ee26 0b04 	vmul.f64	d0, d6, d4
 8010ada:	eeb0 8b40 	vmov.f64	d8, d0
 8010ade:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8010ae2:	ed93 4b06 	vldr	d4, [r3, #24]
 8010ae6:	ee26 ab00 	vmul.f64	d10, d6, d0
 8010aea:	ee39 1b00 	vadd.f64	d1, d9, d0
 8010aee:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8010af2:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010af6:	ee39 9b41 	vsub.f64	d9, d9, d1
 8010afa:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8010afe:	ee37 8b08 	vadd.f64	d8, d7, d8
 8010b02:	ee39 9b00 	vadd.f64	d9, d9, d0
 8010b06:	eea6 3b02 	vfma.f64	d3, d6, d2
 8010b0a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010b0e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8010b12:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8010b16:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8010b1a:	ed9d 6b00 	vldr	d6, [sp]
 8010b1e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8010b22:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010b26:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8010b2a:	ee31 7b09 	vadd.f64	d7, d1, d9
 8010b2e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010b32:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010b36:	eeb0 3b46 	vmov.f64	d3, d6
 8010b3a:	ee31 1b47 	vsub.f64	d1, d1, d7
 8010b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b42:	ee31 9b09 	vadd.f64	d9, d1, d9
 8010b46:	ed9d 6b00 	vldr	d6, [sp]
 8010b4a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8010b4e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8010b52:	193c      	adds	r4, r7, r4
 8010b54:	2c3e      	cmp	r4, #62	; 0x3e
 8010b56:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8010b5a:	eea6 3b09 	vfma.f64	d3, d6, d9
 8010b5e:	d934      	bls.n	8010bca <pow+0x3e2>
 8010b60:	428c      	cmp	r4, r1
 8010b62:	da0d      	bge.n	8010b80 <pow+0x398>
 8010b64:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b6c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010b70:	2800      	cmp	r0, #0
 8010b72:	f43f ae87 	beq.w	8010884 <pow+0x9c>
 8010b76:	eeb1 0b40 	vneg.f64	d0, d0
 8010b7a:	e683      	b.n	8010884 <pow+0x9c>
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	e771      	b.n	8010a64 <pow+0x27c>
 8010b80:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8010b84:	d920      	bls.n	8010bc8 <pow+0x3e0>
 8010b86:	2a00      	cmp	r2, #0
 8010b88:	f173 0300 	sbcs.w	r3, r3, #0
 8010b8c:	f6bf af51 	bge.w	8010a32 <pow+0x24a>
 8010b90:	b01b      	add	sp, #108	; 0x6c
 8010b92:	ecbd 8b0a 	vpop	{d8-d12}
 8010b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9a:	f000 bf1d 	b.w	80119d8 <__math_uflow>
 8010b9e:	bf00      	nop
 8010ba0:	00000000 	.word	0x00000000
 8010ba4:	43300000 	.word	0x43300000
 8010ba8:	fff00000 	.word	0xfff00000
 8010bac:	3ff00000 	.word	0x3ff00000
 8010bb0:	ffe00000 	.word	0xffe00000
 8010bb4:	7fe00000 	.word	0x7fe00000
 8010bb8:	7fdfffff 	.word	0x7fdfffff
 8010bbc:	fcc00000 	.word	0xfcc00000
 8010bc0:	c0196aab 	.word	0xc0196aab
 8010bc4:	08011ef0 	.word	0x08011ef0
 8010bc8:	460f      	mov	r7, r1
 8010bca:	4e65      	ldr	r6, [pc, #404]	; (8010d60 <pow+0x578>)
 8010bcc:	ed9d 4b02 	vldr	d4, [sp, #8]
 8010bd0:	ed96 6b02 	vldr	d6, [r6, #8]
 8010bd4:	ed96 7b00 	vldr	d7, [r6]
 8010bd8:	eeb0 5b46 	vmov.f64	d5, d6
 8010bdc:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010be0:	ed8d 5b00 	vstr	d5, [sp]
 8010be4:	ee35 6b46 	vsub.f64	d6, d5, d6
 8010be8:	eeb0 5b44 	vmov.f64	d5, d4
 8010bec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bf0:	ed96 7b04 	vldr	d7, [r6, #16]
 8010bf4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8010bf8:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010bfc:	eeb0 7b45 	vmov.f64	d7, d5
 8010c00:	ed96 5b06 	vldr	d5, [r6, #24]
 8010c04:	1849      	adds	r1, r1, r1
 8010c06:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8010c0a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8010c0e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010c12:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8010c16:	ee33 3b07 	vadd.f64	d3, d3, d7
 8010c1a:	ee23 6b03 	vmul.f64	d6, d3, d3
 8010c1e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8010c22:	ed96 5b08 	vldr	d5, [r6, #32]
 8010c26:	ee33 7b07 	vadd.f64	d7, d3, d7
 8010c2a:	1814      	adds	r4, r2, r0
 8010c2c:	0365      	lsls	r5, r4, #13
 8010c2e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8010c32:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010c36:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010c3a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8010c3e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010c42:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8010c46:	2000      	movs	r0, #0
 8010c48:	eb10 0a04 	adds.w	sl, r0, r4
 8010c4c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010c50:	eb45 0b0c 	adc.w	fp, r5, ip
 8010c54:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010c58:	2f00      	cmp	r7, #0
 8010c5a:	d16a      	bne.n	8010d32 <pow+0x54a>
 8010c5c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8010c60:	4639      	mov	r1, r7
 8010c62:	ea50 0301 	orrs.w	r3, r0, r1
 8010c66:	f04f 0300 	mov.w	r3, #0
 8010c6a:	d115      	bne.n	8010c98 <pow+0x4b0>
 8010c6c:	eb1a 0303 	adds.w	r3, sl, r3
 8010c70:	ee0b 3a10 	vmov	s22, r3
 8010c74:	4b3b      	ldr	r3, [pc, #236]	; (8010d64 <pow+0x57c>)
 8010c76:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8010d48 <pow+0x560>
 8010c7a:	eb4b 0303 	adc.w	r3, fp, r3
 8010c7e:	ee0b 3a90 	vmov	s23, r3
 8010c82:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8010c86:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8010c8a:	b01b      	add	sp, #108	; 0x6c
 8010c8c:	ecbd 8b0a 	vpop	{d8-d12}
 8010c90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c94:	f000 bee0 	b.w	8011a58 <__math_check_oflow>
 8010c98:	eb1a 0303 	adds.w	r3, sl, r3
 8010c9c:	930a      	str	r3, [sp, #40]	; 0x28
 8010c9e:	4b32      	ldr	r3, [pc, #200]	; (8010d68 <pow+0x580>)
 8010ca0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8010ca8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010caa:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010cae:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010cb2:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010cb6:	eeb0 3bc7 	vabs.f64	d3, d7
 8010cba:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8010d50 <pow+0x568>
 8010cc6:	d52b      	bpl.n	8010d20 <pow+0x538>
 8010cc8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010ccc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010cd8:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010cdc:	bf48      	it	mi
 8010cde:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010ce2:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010ce6:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010cea:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010cee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010cf2:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010cf6:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010cfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d02:	d105      	bne.n	8010d10 <pow+0x528>
 8010d04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d06:	463a      	mov	r2, r7
 8010d08:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010d0c:	ec43 2b17 	vmov	d7, r2, r3
 8010d10:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8010d14:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8010d18:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010d1c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8010d20:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010d24:	b01b      	add	sp, #108	; 0x6c
 8010d26:	ecbd 8b0a 	vpop	{d8-d12}
 8010d2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2e:	f000 be8a 	b.w	8011a46 <__math_check_uflow>
 8010d32:	ec4b ab10 	vmov	d0, sl, fp
 8010d36:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010d3a:	e5a3      	b.n	8010884 <pow+0x9c>
 8010d3c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8010d58 <pow+0x570>
 8010d40:	e5a0      	b.n	8010884 <pow+0x9c>
 8010d42:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010d46:	e59d      	b.n	8010884 <pow+0x9c>
 8010d48:	00000000 	.word	0x00000000
 8010d4c:	7f000000 	.word	0x7f000000
 8010d50:	00000000 	.word	0x00000000
 8010d54:	00100000 	.word	0x00100000
	...
 8010d60:	080130f0 	.word	0x080130f0
 8010d64:	c0f00000 	.word	0xc0f00000
 8010d68:	3fe00000 	.word	0x3fe00000
 8010d6c:	00000000 	.word	0x00000000

08010d70 <cos>:
 8010d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d72:	eeb0 7b40 	vmov.f64	d7, d0
 8010d76:	ee17 3a90 	vmov	r3, s15
 8010d7a:	4a1f      	ldr	r2, [pc, #124]	; (8010df8 <cos+0x88>)
 8010d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d80:	4293      	cmp	r3, r2
 8010d82:	dc04      	bgt.n	8010d8e <cos+0x1e>
 8010d84:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010df0 <cos+0x80>
 8010d88:	f000 fac6 	bl	8011318 <__kernel_cos>
 8010d8c:	e004      	b.n	8010d98 <cos+0x28>
 8010d8e:	4a1b      	ldr	r2, [pc, #108]	; (8010dfc <cos+0x8c>)
 8010d90:	4293      	cmp	r3, r2
 8010d92:	dd04      	ble.n	8010d9e <cos+0x2e>
 8010d94:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010d98:	b005      	add	sp, #20
 8010d9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d9e:	4668      	mov	r0, sp
 8010da0:	f000 f976 	bl	8011090 <__ieee754_rem_pio2>
 8010da4:	f000 0003 	and.w	r0, r0, #3
 8010da8:	2801      	cmp	r0, #1
 8010daa:	d007      	beq.n	8010dbc <cos+0x4c>
 8010dac:	2802      	cmp	r0, #2
 8010dae:	d00e      	beq.n	8010dce <cos+0x5e>
 8010db0:	b9a0      	cbnz	r0, 8010ddc <cos+0x6c>
 8010db2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010db6:	ed9d 0b00 	vldr	d0, [sp]
 8010dba:	e7e5      	b.n	8010d88 <cos+0x18>
 8010dbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dc0:	ed9d 0b00 	vldr	d0, [sp]
 8010dc4:	f000 fd94 	bl	80118f0 <__kernel_sin>
 8010dc8:	eeb1 0b40 	vneg.f64	d0, d0
 8010dcc:	e7e4      	b.n	8010d98 <cos+0x28>
 8010dce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dd2:	ed9d 0b00 	vldr	d0, [sp]
 8010dd6:	f000 fa9f 	bl	8011318 <__kernel_cos>
 8010dda:	e7f5      	b.n	8010dc8 <cos+0x58>
 8010ddc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010de0:	ed9d 0b00 	vldr	d0, [sp]
 8010de4:	2001      	movs	r0, #1
 8010de6:	f000 fd83 	bl	80118f0 <__kernel_sin>
 8010dea:	e7d5      	b.n	8010d98 <cos+0x28>
 8010dec:	f3af 8000 	nop.w
	...
 8010df8:	3fe921fb 	.word	0x3fe921fb
 8010dfc:	7fefffff 	.word	0x7fefffff

08010e00 <sin>:
 8010e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e02:	eeb0 7b40 	vmov.f64	d7, d0
 8010e06:	ee17 3a90 	vmov	r3, s15
 8010e0a:	4a1f      	ldr	r2, [pc, #124]	; (8010e88 <sin+0x88>)
 8010e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e10:	4293      	cmp	r3, r2
 8010e12:	dc05      	bgt.n	8010e20 <sin+0x20>
 8010e14:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010e80 <sin+0x80>
 8010e18:	2000      	movs	r0, #0
 8010e1a:	f000 fd69 	bl	80118f0 <__kernel_sin>
 8010e1e:	e004      	b.n	8010e2a <sin+0x2a>
 8010e20:	4a1a      	ldr	r2, [pc, #104]	; (8010e8c <sin+0x8c>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	dd04      	ble.n	8010e30 <sin+0x30>
 8010e26:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010e2a:	b005      	add	sp, #20
 8010e2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e30:	4668      	mov	r0, sp
 8010e32:	f000 f92d 	bl	8011090 <__ieee754_rem_pio2>
 8010e36:	f000 0003 	and.w	r0, r0, #3
 8010e3a:	2801      	cmp	r0, #1
 8010e3c:	d008      	beq.n	8010e50 <sin+0x50>
 8010e3e:	2802      	cmp	r0, #2
 8010e40:	d00d      	beq.n	8010e5e <sin+0x5e>
 8010e42:	b9b0      	cbnz	r0, 8010e72 <sin+0x72>
 8010e44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e48:	ed9d 0b00 	vldr	d0, [sp]
 8010e4c:	2001      	movs	r0, #1
 8010e4e:	e7e4      	b.n	8010e1a <sin+0x1a>
 8010e50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e54:	ed9d 0b00 	vldr	d0, [sp]
 8010e58:	f000 fa5e 	bl	8011318 <__kernel_cos>
 8010e5c:	e7e5      	b.n	8010e2a <sin+0x2a>
 8010e5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e62:	ed9d 0b00 	vldr	d0, [sp]
 8010e66:	2001      	movs	r0, #1
 8010e68:	f000 fd42 	bl	80118f0 <__kernel_sin>
 8010e6c:	eeb1 0b40 	vneg.f64	d0, d0
 8010e70:	e7db      	b.n	8010e2a <sin+0x2a>
 8010e72:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e76:	ed9d 0b00 	vldr	d0, [sp]
 8010e7a:	f000 fa4d 	bl	8011318 <__kernel_cos>
 8010e7e:	e7f5      	b.n	8010e6c <sin+0x6c>
	...
 8010e88:	3fe921fb 	.word	0x3fe921fb
 8010e8c:	7fefffff 	.word	0x7fefffff

08010e90 <atan2>:
 8010e90:	f000 b82e 	b.w	8010ef0 <__ieee754_atan2>
 8010e94:	0000      	movs	r0, r0
	...

08010e98 <sqrt>:
 8010e98:	b508      	push	{r3, lr}
 8010e9a:	ed2d 8b04 	vpush	{d8-d9}
 8010e9e:	eeb0 8b40 	vmov.f64	d8, d0
 8010ea2:	f000 fa35 	bl	8011310 <__ieee754_sqrt>
 8010ea6:	4b10      	ldr	r3, [pc, #64]	; (8010ee8 <sqrt+0x50>)
 8010ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8010eac:	3301      	adds	r3, #1
 8010eae:	d011      	beq.n	8010ed4 <sqrt+0x3c>
 8010eb0:	eeb4 8b48 	vcmp.f64	d8, d8
 8010eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb8:	d60c      	bvs.n	8010ed4 <sqrt+0x3c>
 8010eba:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8010ee0 <sqrt+0x48>
 8010ebe:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec6:	d505      	bpl.n	8010ed4 <sqrt+0x3c>
 8010ec8:	f7ff fc24 	bl	8010714 <__errno>
 8010ecc:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010ed0:	2321      	movs	r3, #33	; 0x21
 8010ed2:	6003      	str	r3, [r0, #0]
 8010ed4:	ecbd 8b04 	vpop	{d8-d9}
 8010ed8:	bd08      	pop	{r3, pc}
 8010eda:	bf00      	nop
 8010edc:	f3af 8000 	nop.w
	...
 8010ee8:	24000074 	.word	0x24000074
 8010eec:	00000000 	.word	0x00000000

08010ef0 <__ieee754_atan2>:
 8010ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ef2:	ee11 6a10 	vmov	r6, s2
 8010ef6:	ee11 0a90 	vmov	r0, s3
 8010efa:	4273      	negs	r3, r6
 8010efc:	4f60      	ldr	r7, [pc, #384]	; (8011080 <__ieee754_atan2+0x190>)
 8010efe:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8010f02:	4333      	orrs	r3, r6
 8010f04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010f08:	42bb      	cmp	r3, r7
 8010f0a:	ed8d 0b00 	vstr	d0, [sp]
 8010f0e:	d80b      	bhi.n	8010f28 <__ieee754_atan2+0x38>
 8010f10:	e9dd c500 	ldrd	ip, r5, [sp]
 8010f14:	f1cc 0100 	rsb	r1, ip, #0
 8010f18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010f1c:	ea41 010c 	orr.w	r1, r1, ip
 8010f20:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8010f24:	42b9      	cmp	r1, r7
 8010f26:	d906      	bls.n	8010f36 <__ieee754_atan2+0x46>
 8010f28:	ed9d 7b00 	vldr	d7, [sp]
 8010f2c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8010f30:	ed8d 7b00 	vstr	d7, [sp]
 8010f34:	e054      	b.n	8010fe0 <__ieee754_atan2+0xf0>
 8010f36:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8010f3a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8010f3e:	4331      	orrs	r1, r6
 8010f40:	d104      	bne.n	8010f4c <__ieee754_atan2+0x5c>
 8010f42:	b003      	add	sp, #12
 8010f44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f48:	f000 bd9a 	b.w	8011a80 <atan>
 8010f4c:	1784      	asrs	r4, r0, #30
 8010f4e:	f004 0402 	and.w	r4, r4, #2
 8010f52:	ea53 010c 	orrs.w	r1, r3, ip
 8010f56:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8010f5a:	d109      	bne.n	8010f70 <__ieee754_atan2+0x80>
 8010f5c:	2c02      	cmp	r4, #2
 8010f5e:	d069      	beq.n	8011034 <__ieee754_atan2+0x144>
 8010f60:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8011048 <__ieee754_atan2+0x158>
 8010f64:	ed9d 6b00 	vldr	d6, [sp]
 8010f68:	2c03      	cmp	r4, #3
 8010f6a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8010f6e:	e7df      	b.n	8010f30 <__ieee754_atan2+0x40>
 8010f70:	ea52 0106 	orrs.w	r1, r2, r6
 8010f74:	d107      	bne.n	8010f86 <__ieee754_atan2+0x96>
 8010f76:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8011050 <__ieee754_atan2+0x160>
 8010f7a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8011058 <__ieee754_atan2+0x168>
 8010f7e:	2d00      	cmp	r5, #0
 8010f80:	fe26 7b07 	vselge.f64	d7, d6, d7
 8010f84:	e7d4      	b.n	8010f30 <__ieee754_atan2+0x40>
 8010f86:	42ba      	cmp	r2, r7
 8010f88:	d10f      	bne.n	8010faa <__ieee754_atan2+0xba>
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	f104 34ff 	add.w	r4, r4, #4294967295
 8010f90:	d107      	bne.n	8010fa2 <__ieee754_atan2+0xb2>
 8010f92:	2c02      	cmp	r4, #2
 8010f94:	d851      	bhi.n	801103a <__ieee754_atan2+0x14a>
 8010f96:	4b3b      	ldr	r3, [pc, #236]	; (8011084 <__ieee754_atan2+0x194>)
 8010f98:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010f9c:	ed94 7b00 	vldr	d7, [r4]
 8010fa0:	e7c6      	b.n	8010f30 <__ieee754_atan2+0x40>
 8010fa2:	2c02      	cmp	r4, #2
 8010fa4:	d84c      	bhi.n	8011040 <__ieee754_atan2+0x150>
 8010fa6:	4b38      	ldr	r3, [pc, #224]	; (8011088 <__ieee754_atan2+0x198>)
 8010fa8:	e7f6      	b.n	8010f98 <__ieee754_atan2+0xa8>
 8010faa:	42bb      	cmp	r3, r7
 8010fac:	d0e3      	beq.n	8010f76 <__ieee754_atan2+0x86>
 8010fae:	1a9b      	subs	r3, r3, r2
 8010fb0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010fb4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010fb8:	da16      	bge.n	8010fe8 <__ieee754_atan2+0xf8>
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	da01      	bge.n	8010fc2 <__ieee754_atan2+0xd2>
 8010fbe:	323c      	adds	r2, #60	; 0x3c
 8010fc0:	db17      	blt.n	8010ff2 <__ieee754_atan2+0x102>
 8010fc2:	ed9d 7b00 	vldr	d7, [sp]
 8010fc6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8010fca:	f000 fe53 	bl	8011c74 <fabs>
 8010fce:	f000 fd57 	bl	8011a80 <atan>
 8010fd2:	ed8d 0b00 	vstr	d0, [sp]
 8010fd6:	2c01      	cmp	r4, #1
 8010fd8:	d00e      	beq.n	8010ff8 <__ieee754_atan2+0x108>
 8010fda:	2c02      	cmp	r4, #2
 8010fdc:	d014      	beq.n	8011008 <__ieee754_atan2+0x118>
 8010fde:	b9f4      	cbnz	r4, 801101e <__ieee754_atan2+0x12e>
 8010fe0:	ed9d 0b00 	vldr	d0, [sp]
 8010fe4:	b003      	add	sp, #12
 8010fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fe8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8011050 <__ieee754_atan2+0x160>
 8010fec:	ed8d 7b00 	vstr	d7, [sp]
 8010ff0:	e7f1      	b.n	8010fd6 <__ieee754_atan2+0xe6>
 8010ff2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8011060 <__ieee754_atan2+0x170>
 8010ff6:	e7f9      	b.n	8010fec <__ieee754_atan2+0xfc>
 8010ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ffc:	9901      	ldr	r1, [sp, #4]
 8010ffe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011002:	e9cd 2300 	strd	r2, r3, [sp]
 8011006:	e7eb      	b.n	8010fe0 <__ieee754_atan2+0xf0>
 8011008:	ed9d 6b00 	vldr	d6, [sp]
 801100c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011068 <__ieee754_atan2+0x178>
 8011010:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011014:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8011070 <__ieee754_atan2+0x180>
 8011018:	ee36 7b47 	vsub.f64	d7, d6, d7
 801101c:	e788      	b.n	8010f30 <__ieee754_atan2+0x40>
 801101e:	ed9d 6b00 	vldr	d6, [sp]
 8011022:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8011068 <__ieee754_atan2+0x178>
 8011026:	ee36 7b47 	vsub.f64	d7, d6, d7
 801102a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8011070 <__ieee754_atan2+0x180>
 801102e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011032:	e77d      	b.n	8010f30 <__ieee754_atan2+0x40>
 8011034:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011070 <__ieee754_atan2+0x180>
 8011038:	e77a      	b.n	8010f30 <__ieee754_atan2+0x40>
 801103a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011078 <__ieee754_atan2+0x188>
 801103e:	e777      	b.n	8010f30 <__ieee754_atan2+0x40>
 8011040:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8011060 <__ieee754_atan2+0x170>
 8011044:	e774      	b.n	8010f30 <__ieee754_atan2+0x40>
 8011046:	bf00      	nop
 8011048:	54442d18 	.word	0x54442d18
 801104c:	c00921fb 	.word	0xc00921fb
 8011050:	54442d18 	.word	0x54442d18
 8011054:	3ff921fb 	.word	0x3ff921fb
 8011058:	54442d18 	.word	0x54442d18
 801105c:	bff921fb 	.word	0xbff921fb
	...
 8011068:	33145c07 	.word	0x33145c07
 801106c:	3ca1a626 	.word	0x3ca1a626
 8011070:	54442d18 	.word	0x54442d18
 8011074:	400921fb 	.word	0x400921fb
 8011078:	54442d18 	.word	0x54442d18
 801107c:	3fe921fb 	.word	0x3fe921fb
 8011080:	7ff00000 	.word	0x7ff00000
 8011084:	08012f38 	.word	0x08012f38
 8011088:	08012f50 	.word	0x08012f50
 801108c:	00000000 	.word	0x00000000

08011090 <__ieee754_rem_pio2>:
 8011090:	b570      	push	{r4, r5, r6, lr}
 8011092:	eeb0 7b40 	vmov.f64	d7, d0
 8011096:	ee17 5a90 	vmov	r5, s15
 801109a:	4b97      	ldr	r3, [pc, #604]	; (80112f8 <__ieee754_rem_pio2+0x268>)
 801109c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110a0:	429e      	cmp	r6, r3
 80110a2:	b088      	sub	sp, #32
 80110a4:	4604      	mov	r4, r0
 80110a6:	dc07      	bgt.n	80110b8 <__ieee754_rem_pio2+0x28>
 80110a8:	2200      	movs	r2, #0
 80110aa:	2300      	movs	r3, #0
 80110ac:	ed84 0b00 	vstr	d0, [r4]
 80110b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80110b4:	2000      	movs	r0, #0
 80110b6:	e01b      	b.n	80110f0 <__ieee754_rem_pio2+0x60>
 80110b8:	4b90      	ldr	r3, [pc, #576]	; (80112fc <__ieee754_rem_pio2+0x26c>)
 80110ba:	429e      	cmp	r6, r3
 80110bc:	dc3b      	bgt.n	8011136 <__ieee754_rem_pio2+0xa6>
 80110be:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80110c2:	2d00      	cmp	r5, #0
 80110c4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80112b8 <__ieee754_rem_pio2+0x228>
 80110c8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80110cc:	dd19      	ble.n	8011102 <__ieee754_rem_pio2+0x72>
 80110ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 80110d2:	429e      	cmp	r6, r3
 80110d4:	d00e      	beq.n	80110f4 <__ieee754_rem_pio2+0x64>
 80110d6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80112c0 <__ieee754_rem_pio2+0x230>
 80110da:	ee37 5b46 	vsub.f64	d5, d7, d6
 80110de:	ee37 7b45 	vsub.f64	d7, d7, d5
 80110e2:	ed84 5b00 	vstr	d5, [r4]
 80110e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80110ee:	2001      	movs	r0, #1
 80110f0:	b008      	add	sp, #32
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
 80110f4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80112c8 <__ieee754_rem_pio2+0x238>
 80110f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110fc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80112d0 <__ieee754_rem_pio2+0x240>
 8011100:	e7eb      	b.n	80110da <__ieee754_rem_pio2+0x4a>
 8011102:	429e      	cmp	r6, r3
 8011104:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011108:	d00e      	beq.n	8011128 <__ieee754_rem_pio2+0x98>
 801110a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80112c0 <__ieee754_rem_pio2+0x230>
 801110e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011112:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011116:	ed84 5b00 	vstr	d5, [r4]
 801111a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801111e:	f04f 30ff 	mov.w	r0, #4294967295
 8011122:	ed84 7b02 	vstr	d7, [r4, #8]
 8011126:	e7e3      	b.n	80110f0 <__ieee754_rem_pio2+0x60>
 8011128:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80112c8 <__ieee754_rem_pio2+0x238>
 801112c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011130:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80112d0 <__ieee754_rem_pio2+0x240>
 8011134:	e7eb      	b.n	801110e <__ieee754_rem_pio2+0x7e>
 8011136:	4b72      	ldr	r3, [pc, #456]	; (8011300 <__ieee754_rem_pio2+0x270>)
 8011138:	429e      	cmp	r6, r3
 801113a:	dc6e      	bgt.n	801121a <__ieee754_rem_pio2+0x18a>
 801113c:	f000 fd9a 	bl	8011c74 <fabs>
 8011140:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011144:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80112d8 <__ieee754_rem_pio2+0x248>
 8011148:	eea0 7b06 	vfma.f64	d7, d0, d6
 801114c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011150:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011154:	ee17 0a90 	vmov	r0, s15
 8011158:	eeb1 4b45 	vneg.f64	d4, d5
 801115c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80112b8 <__ieee754_rem_pio2+0x228>
 8011160:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011164:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80112c0 <__ieee754_rem_pio2+0x230>
 8011168:	281f      	cmp	r0, #31
 801116a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801116e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011172:	dc08      	bgt.n	8011186 <__ieee754_rem_pio2+0xf6>
 8011174:	4b63      	ldr	r3, [pc, #396]	; (8011304 <__ieee754_rem_pio2+0x274>)
 8011176:	1e42      	subs	r2, r0, #1
 8011178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801117c:	42b3      	cmp	r3, r6
 801117e:	d002      	beq.n	8011186 <__ieee754_rem_pio2+0xf6>
 8011180:	ed84 6b00 	vstr	d6, [r4]
 8011184:	e024      	b.n	80111d0 <__ieee754_rem_pio2+0x140>
 8011186:	ee16 3a90 	vmov	r3, s13
 801118a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801118e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011192:	2b10      	cmp	r3, #16
 8011194:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011198:	ddf2      	ble.n	8011180 <__ieee754_rem_pio2+0xf0>
 801119a:	eeb0 6b40 	vmov.f64	d6, d0
 801119e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80112c8 <__ieee754_rem_pio2+0x238>
 80111a2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80111a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80111aa:	eea4 7b03 	vfma.f64	d7, d4, d3
 80111ae:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80112d0 <__ieee754_rem_pio2+0x240>
 80111b2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80111b6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80111ba:	ee13 3a90 	vmov	r3, s7
 80111be:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80111c2:	1ad3      	subs	r3, r2, r3
 80111c4:	2b31      	cmp	r3, #49	; 0x31
 80111c6:	dc17      	bgt.n	80111f8 <__ieee754_rem_pio2+0x168>
 80111c8:	eeb0 0b46 	vmov.f64	d0, d6
 80111cc:	ed84 3b00 	vstr	d3, [r4]
 80111d0:	ed94 6b00 	vldr	d6, [r4]
 80111d4:	2d00      	cmp	r5, #0
 80111d6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80111da:	ee30 7b47 	vsub.f64	d7, d0, d7
 80111de:	ed84 7b02 	vstr	d7, [r4, #8]
 80111e2:	da85      	bge.n	80110f0 <__ieee754_rem_pio2+0x60>
 80111e4:	eeb1 6b46 	vneg.f64	d6, d6
 80111e8:	ed84 6b00 	vstr	d6, [r4]
 80111ec:	eeb1 7b47 	vneg.f64	d7, d7
 80111f0:	4240      	negs	r0, r0
 80111f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80111f6:	e77b      	b.n	80110f0 <__ieee754_rem_pio2+0x60>
 80111f8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80112e0 <__ieee754_rem_pio2+0x250>
 80111fc:	eeb0 0b46 	vmov.f64	d0, d6
 8011200:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011204:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011208:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80112e8 <__ieee754_rem_pio2+0x258>
 801120c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011210:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011214:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011218:	e7b2      	b.n	8011180 <__ieee754_rem_pio2+0xf0>
 801121a:	4b3b      	ldr	r3, [pc, #236]	; (8011308 <__ieee754_rem_pio2+0x278>)
 801121c:	429e      	cmp	r6, r3
 801121e:	dd06      	ble.n	801122e <__ieee754_rem_pio2+0x19e>
 8011220:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011224:	ed80 7b02 	vstr	d7, [r0, #8]
 8011228:	ed80 7b00 	vstr	d7, [r0]
 801122c:	e742      	b.n	80110b4 <__ieee754_rem_pio2+0x24>
 801122e:	1532      	asrs	r2, r6, #20
 8011230:	ee10 0a10 	vmov	r0, s0
 8011234:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011238:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801123c:	ec41 0b17 	vmov	d7, r0, r1
 8011240:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011244:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80112f0 <__ieee754_rem_pio2+0x260>
 8011248:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801124c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011250:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011254:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011258:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801125c:	a902      	add	r1, sp, #8
 801125e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011262:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011266:	ed8d 6b04 	vstr	d6, [sp, #16]
 801126a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801126e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011272:	2603      	movs	r6, #3
 8011274:	4608      	mov	r0, r1
 8011276:	ed91 7b04 	vldr	d7, [r1, #16]
 801127a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011282:	4633      	mov	r3, r6
 8011284:	f1a1 0108 	sub.w	r1, r1, #8
 8011288:	f106 36ff 	add.w	r6, r6, #4294967295
 801128c:	d0f3      	beq.n	8011276 <__ieee754_rem_pio2+0x1e6>
 801128e:	491f      	ldr	r1, [pc, #124]	; (801130c <__ieee754_rem_pio2+0x27c>)
 8011290:	9101      	str	r1, [sp, #4]
 8011292:	2102      	movs	r1, #2
 8011294:	9100      	str	r1, [sp, #0]
 8011296:	4621      	mov	r1, r4
 8011298:	f000 f8aa 	bl	80113f0 <__kernel_rem_pio2>
 801129c:	2d00      	cmp	r5, #0
 801129e:	f6bf af27 	bge.w	80110f0 <__ieee754_rem_pio2+0x60>
 80112a2:	ed94 7b00 	vldr	d7, [r4]
 80112a6:	eeb1 7b47 	vneg.f64	d7, d7
 80112aa:	ed84 7b00 	vstr	d7, [r4]
 80112ae:	ed94 7b02 	vldr	d7, [r4, #8]
 80112b2:	e79b      	b.n	80111ec <__ieee754_rem_pio2+0x15c>
 80112b4:	f3af 8000 	nop.w
 80112b8:	54400000 	.word	0x54400000
 80112bc:	3ff921fb 	.word	0x3ff921fb
 80112c0:	1a626331 	.word	0x1a626331
 80112c4:	3dd0b461 	.word	0x3dd0b461
 80112c8:	1a600000 	.word	0x1a600000
 80112cc:	3dd0b461 	.word	0x3dd0b461
 80112d0:	2e037073 	.word	0x2e037073
 80112d4:	3ba3198a 	.word	0x3ba3198a
 80112d8:	6dc9c883 	.word	0x6dc9c883
 80112dc:	3fe45f30 	.word	0x3fe45f30
 80112e0:	2e000000 	.word	0x2e000000
 80112e4:	3ba3198a 	.word	0x3ba3198a
 80112e8:	252049c1 	.word	0x252049c1
 80112ec:	397b839a 	.word	0x397b839a
 80112f0:	00000000 	.word	0x00000000
 80112f4:	41700000 	.word	0x41700000
 80112f8:	3fe921fb 	.word	0x3fe921fb
 80112fc:	4002d97b 	.word	0x4002d97b
 8011300:	413921fb 	.word	0x413921fb
 8011304:	08012f68 	.word	0x08012f68
 8011308:	7fefffff 	.word	0x7fefffff
 801130c:	08012fe8 	.word	0x08012fe8

08011310 <__ieee754_sqrt>:
 8011310:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011314:	4770      	bx	lr
	...

08011318 <__kernel_cos>:
 8011318:	ee10 1a90 	vmov	r1, s1
 801131c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011324:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011328:	da05      	bge.n	8011336 <__kernel_cos+0x1e>
 801132a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801132e:	ee17 3a90 	vmov	r3, s15
 8011332:	2b00      	cmp	r3, #0
 8011334:	d03d      	beq.n	80113b2 <__kernel_cos+0x9a>
 8011336:	ee20 3b00 	vmul.f64	d3, d0, d0
 801133a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80113b8 <__kernel_cos+0xa0>
 801133e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80113c0 <__kernel_cos+0xa8>
 8011342:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011346:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80113c8 <__kernel_cos+0xb0>
 801134a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801134e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80113d0 <__kernel_cos+0xb8>
 8011352:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011356:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80113d8 <__kernel_cos+0xc0>
 801135a:	4b23      	ldr	r3, [pc, #140]	; (80113e8 <__kernel_cos+0xd0>)
 801135c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011360:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80113e0 <__kernel_cos+0xc8>
 8011364:	4299      	cmp	r1, r3
 8011366:	eea7 6b03 	vfma.f64	d6, d7, d3
 801136a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801136e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011372:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011376:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801137a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801137e:	dc04      	bgt.n	801138a <__kernel_cos+0x72>
 8011380:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011384:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011388:	4770      	bx	lr
 801138a:	4b18      	ldr	r3, [pc, #96]	; (80113ec <__kernel_cos+0xd4>)
 801138c:	4299      	cmp	r1, r3
 801138e:	dc0d      	bgt.n	80113ac <__kernel_cos+0x94>
 8011390:	2200      	movs	r2, #0
 8011392:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011396:	ec43 2b15 	vmov	d5, r2, r3
 801139a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801139e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80113a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80113a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80113aa:	4770      	bx	lr
 80113ac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80113b0:	e7f3      	b.n	801139a <__kernel_cos+0x82>
 80113b2:	eeb0 0b44 	vmov.f64	d0, d4
 80113b6:	4770      	bx	lr
 80113b8:	be8838d4 	.word	0xbe8838d4
 80113bc:	bda8fae9 	.word	0xbda8fae9
 80113c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80113c4:	3e21ee9e 	.word	0x3e21ee9e
 80113c8:	809c52ad 	.word	0x809c52ad
 80113cc:	be927e4f 	.word	0xbe927e4f
 80113d0:	19cb1590 	.word	0x19cb1590
 80113d4:	3efa01a0 	.word	0x3efa01a0
 80113d8:	16c15177 	.word	0x16c15177
 80113dc:	bf56c16c 	.word	0xbf56c16c
 80113e0:	5555554c 	.word	0x5555554c
 80113e4:	3fa55555 	.word	0x3fa55555
 80113e8:	3fd33332 	.word	0x3fd33332
 80113ec:	3fe90000 	.word	0x3fe90000

080113f0 <__kernel_rem_pio2>:
 80113f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f4:	ed2d 8b06 	vpush	{d8-d10}
 80113f8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80113fc:	469b      	mov	fp, r3
 80113fe:	460f      	mov	r7, r1
 8011400:	4bcf      	ldr	r3, [pc, #828]	; (8011740 <__kernel_rem_pio2+0x350>)
 8011402:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8011404:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8011408:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801140c:	9000      	str	r0, [sp, #0]
 801140e:	f112 0f14 	cmn.w	r2, #20
 8011412:	bfa8      	it	ge
 8011414:	2318      	movge	r3, #24
 8011416:	f10b 31ff 	add.w	r1, fp, #4294967295
 801141a:	bfb8      	it	lt
 801141c:	2300      	movlt	r3, #0
 801141e:	f06f 0417 	mvn.w	r4, #23
 8011422:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8011728 <__kernel_rem_pio2+0x338>
 8011426:	bfa4      	itt	ge
 8011428:	f1a2 0a03 	subge.w	sl, r2, #3
 801142c:	fb9a f3f3 	sdivge	r3, sl, r3
 8011430:	fb03 4404 	mla	r4, r3, r4, r4
 8011434:	1a5d      	subs	r5, r3, r1
 8011436:	4414      	add	r4, r2
 8011438:	eb09 0601 	add.w	r6, r9, r1
 801143c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8011440:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8011444:	2200      	movs	r2, #0
 8011446:	42b2      	cmp	r2, r6
 8011448:	dd12      	ble.n	8011470 <__kernel_rem_pio2+0x80>
 801144a:	aa18      	add	r2, sp, #96	; 0x60
 801144c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8011450:	460e      	mov	r6, r1
 8011452:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8011456:	f1cb 0a01 	rsb	sl, fp, #1
 801145a:	eb0a 0006 	add.w	r0, sl, r6
 801145e:	4581      	cmp	r9, r0
 8011460:	db25      	blt.n	80114ae <__kernel_rem_pio2+0xbe>
 8011462:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8011728 <__kernel_rem_pio2+0x338>
 8011466:	f8dd e000 	ldr.w	lr, [sp]
 801146a:	4615      	mov	r5, r2
 801146c:	2000      	movs	r0, #0
 801146e:	e015      	b.n	801149c <__kernel_rem_pio2+0xac>
 8011470:	42d5      	cmn	r5, r2
 8011472:	d409      	bmi.n	8011488 <__kernel_rem_pio2+0x98>
 8011474:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8011478:	ee07 0a90 	vmov	s15, r0
 801147c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011480:	eca8 7b02 	vstmia	r8!, {d7}
 8011484:	3201      	adds	r2, #1
 8011486:	e7de      	b.n	8011446 <__kernel_rem_pio2+0x56>
 8011488:	eeb0 7b46 	vmov.f64	d7, d6
 801148c:	e7f8      	b.n	8011480 <__kernel_rem_pio2+0x90>
 801148e:	ecbe 5b02 	vldmia	lr!, {d5}
 8011492:	ed95 6b00 	vldr	d6, [r5]
 8011496:	3001      	adds	r0, #1
 8011498:	eea5 7b06 	vfma.f64	d7, d5, d6
 801149c:	4288      	cmp	r0, r1
 801149e:	f1a5 0508 	sub.w	r5, r5, #8
 80114a2:	ddf4      	ble.n	801148e <__kernel_rem_pio2+0x9e>
 80114a4:	eca8 7b02 	vstmia	r8!, {d7}
 80114a8:	3208      	adds	r2, #8
 80114aa:	3601      	adds	r6, #1
 80114ac:	e7d5      	b.n	801145a <__kernel_rem_pio2+0x6a>
 80114ae:	aa04      	add	r2, sp, #16
 80114b0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8011730 <__kernel_rem_pio2+0x340>
 80114b4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8011738 <__kernel_rem_pio2+0x348>
 80114b8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80114bc:	9201      	str	r2, [sp, #4]
 80114be:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80114c2:	464e      	mov	r6, r9
 80114c4:	ab90      	add	r3, sp, #576	; 0x240
 80114c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80114ca:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80114ce:	ab04      	add	r3, sp, #16
 80114d0:	4618      	mov	r0, r3
 80114d2:	4632      	mov	r2, r6
 80114d4:	2a00      	cmp	r2, #0
 80114d6:	dc4e      	bgt.n	8011576 <__kernel_rem_pio2+0x186>
 80114d8:	4620      	mov	r0, r4
 80114da:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80114de:	f000 fc47 	bl	8011d70 <scalbn>
 80114e2:	eeb0 8b40 	vmov.f64	d8, d0
 80114e6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80114ea:	ee28 0b00 	vmul.f64	d0, d8, d0
 80114ee:	f000 fbcb 	bl	8011c88 <floor>
 80114f2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80114f6:	eea0 8b47 	vfms.f64	d8, d0, d7
 80114fa:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80114fe:	2c00      	cmp	r4, #0
 8011500:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011504:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8011508:	ee38 8b40 	vsub.f64	d8, d8, d0
 801150c:	ee17 8a90 	vmov	r8, s15
 8011510:	dd46      	ble.n	80115a0 <__kernel_rem_pio2+0x1b0>
 8011512:	1e70      	subs	r0, r6, #1
 8011514:	aa04      	add	r2, sp, #16
 8011516:	f1c4 0c18 	rsb	ip, r4, #24
 801151a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 801151e:	fa45 f20c 	asr.w	r2, r5, ip
 8011522:	4490      	add	r8, r2
 8011524:	fa02 f20c 	lsl.w	r2, r2, ip
 8011528:	1aad      	subs	r5, r5, r2
 801152a:	aa04      	add	r2, sp, #16
 801152c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8011530:	f1c4 0217 	rsb	r2, r4, #23
 8011534:	4115      	asrs	r5, r2
 8011536:	2d00      	cmp	r5, #0
 8011538:	dd41      	ble.n	80115be <__kernel_rem_pio2+0x1ce>
 801153a:	f04f 0c00 	mov.w	ip, #0
 801153e:	f108 0801 	add.w	r8, r8, #1
 8011542:	4660      	mov	r0, ip
 8011544:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011548:	4566      	cmp	r6, ip
 801154a:	dc69      	bgt.n	8011620 <__kernel_rem_pio2+0x230>
 801154c:	2c00      	cmp	r4, #0
 801154e:	dd03      	ble.n	8011558 <__kernel_rem_pio2+0x168>
 8011550:	2c01      	cmp	r4, #1
 8011552:	d076      	beq.n	8011642 <__kernel_rem_pio2+0x252>
 8011554:	2c02      	cmp	r4, #2
 8011556:	d07f      	beq.n	8011658 <__kernel_rem_pio2+0x268>
 8011558:	2d02      	cmp	r5, #2
 801155a:	d130      	bne.n	80115be <__kernel_rem_pio2+0x1ce>
 801155c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011560:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011564:	b358      	cbz	r0, 80115be <__kernel_rem_pio2+0x1ce>
 8011566:	4620      	mov	r0, r4
 8011568:	9102      	str	r1, [sp, #8]
 801156a:	f000 fc01 	bl	8011d70 <scalbn>
 801156e:	9902      	ldr	r1, [sp, #8]
 8011570:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011574:	e023      	b.n	80115be <__kernel_rem_pio2+0x1ce>
 8011576:	ee20 7b09 	vmul.f64	d7, d0, d9
 801157a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801157e:	3a01      	subs	r2, #1
 8011580:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011584:	ad68      	add	r5, sp, #416	; 0x1a0
 8011586:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801158a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801158e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8011592:	eca0 0a01 	vstmia	r0!, {s0}
 8011596:	ed95 0b00 	vldr	d0, [r5]
 801159a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801159e:	e799      	b.n	80114d4 <__kernel_rem_pio2+0xe4>
 80115a0:	d105      	bne.n	80115ae <__kernel_rem_pio2+0x1be>
 80115a2:	1e72      	subs	r2, r6, #1
 80115a4:	a804      	add	r0, sp, #16
 80115a6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80115aa:	15ed      	asrs	r5, r5, #23
 80115ac:	e7c3      	b.n	8011536 <__kernel_rem_pio2+0x146>
 80115ae:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80115b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80115b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ba:	da2f      	bge.n	801161c <__kernel_rem_pio2+0x22c>
 80115bc:	2500      	movs	r5, #0
 80115be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c6:	f040 8087 	bne.w	80116d8 <__kernel_rem_pio2+0x2e8>
 80115ca:	1e73      	subs	r3, r6, #1
 80115cc:	4618      	mov	r0, r3
 80115ce:	f04f 0c00 	mov.w	ip, #0
 80115d2:	4548      	cmp	r0, r9
 80115d4:	da47      	bge.n	8011666 <__kernel_rem_pio2+0x276>
 80115d6:	f1bc 0f00 	cmp.w	ip, #0
 80115da:	d070      	beq.n	80116be <__kernel_rem_pio2+0x2ce>
 80115dc:	aa04      	add	r2, sp, #16
 80115de:	3c18      	subs	r4, #24
 80115e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80115e4:	2a00      	cmp	r2, #0
 80115e6:	d075      	beq.n	80116d4 <__kernel_rem_pio2+0x2e4>
 80115e8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80115ec:	4620      	mov	r0, r4
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	f000 fbbe 	bl	8011d70 <scalbn>
 80115f4:	9b00      	ldr	r3, [sp, #0]
 80115f6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011730 <__kernel_rem_pio2+0x340>
 80115fa:	461a      	mov	r2, r3
 80115fc:	2a00      	cmp	r2, #0
 80115fe:	f280 80ac 	bge.w	801175a <__kernel_rem_pio2+0x36a>
 8011602:	4619      	mov	r1, r3
 8011604:	2000      	movs	r0, #0
 8011606:	2900      	cmp	r1, #0
 8011608:	f2c0 80cd 	blt.w	80117a6 <__kernel_rem_pio2+0x3b6>
 801160c:	aa68      	add	r2, sp, #416	; 0x1a0
 801160e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8011612:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8011728 <__kernel_rem_pio2+0x338>
 8011616:	4e4b      	ldr	r6, [pc, #300]	; (8011744 <__kernel_rem_pio2+0x354>)
 8011618:	2200      	movs	r2, #0
 801161a:	e0b8      	b.n	801178e <__kernel_rem_pio2+0x39e>
 801161c:	2502      	movs	r5, #2
 801161e:	e78c      	b.n	801153a <__kernel_rem_pio2+0x14a>
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	b948      	cbnz	r0, 8011638 <__kernel_rem_pio2+0x248>
 8011624:	b11a      	cbz	r2, 801162e <__kernel_rem_pio2+0x23e>
 8011626:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801162a:	601a      	str	r2, [r3, #0]
 801162c:	2201      	movs	r2, #1
 801162e:	f10c 0c01 	add.w	ip, ip, #1
 8011632:	3304      	adds	r3, #4
 8011634:	4610      	mov	r0, r2
 8011636:	e787      	b.n	8011548 <__kernel_rem_pio2+0x158>
 8011638:	ebae 0202 	sub.w	r2, lr, r2
 801163c:	601a      	str	r2, [r3, #0]
 801163e:	4602      	mov	r2, r0
 8011640:	e7f5      	b.n	801162e <__kernel_rem_pio2+0x23e>
 8011642:	1e72      	subs	r2, r6, #1
 8011644:	ab04      	add	r3, sp, #16
 8011646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801164a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801164e:	f10d 0c10 	add.w	ip, sp, #16
 8011652:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8011656:	e77f      	b.n	8011558 <__kernel_rem_pio2+0x168>
 8011658:	1e72      	subs	r2, r6, #1
 801165a:	ab04      	add	r3, sp, #16
 801165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011660:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011664:	e7f3      	b.n	801164e <__kernel_rem_pio2+0x25e>
 8011666:	aa04      	add	r2, sp, #16
 8011668:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801166c:	3801      	subs	r0, #1
 801166e:	ea4c 0c02 	orr.w	ip, ip, r2
 8011672:	e7ae      	b.n	80115d2 <__kernel_rem_pio2+0x1e2>
 8011674:	3001      	adds	r0, #1
 8011676:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801167a:	2a00      	cmp	r2, #0
 801167c:	d0fa      	beq.n	8011674 <__kernel_rem_pio2+0x284>
 801167e:	eb06 020b 	add.w	r2, r6, fp
 8011682:	ad18      	add	r5, sp, #96	; 0x60
 8011684:	1c73      	adds	r3, r6, #1
 8011686:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801168a:	4406      	add	r6, r0
 801168c:	429e      	cmp	r6, r3
 801168e:	f6ff af19 	blt.w	80114c4 <__kernel_rem_pio2+0xd4>
 8011692:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8011696:	9d00      	ldr	r5, [sp, #0]
 8011698:	ee07 0a90 	vmov	s15, r0
 801169c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80116a0:	2000      	movs	r0, #0
 80116a2:	eca2 7b02 	vstmia	r2!, {d7}
 80116a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011728 <__kernel_rem_pio2+0x338>
 80116aa:	4694      	mov	ip, r2
 80116ac:	4288      	cmp	r0, r1
 80116ae:	dd09      	ble.n	80116c4 <__kernel_rem_pio2+0x2d4>
 80116b0:	a868      	add	r0, sp, #416	; 0x1a0
 80116b2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80116b6:	ed80 7b00 	vstr	d7, [r0]
 80116ba:	3301      	adds	r3, #1
 80116bc:	e7e6      	b.n	801168c <__kernel_rem_pio2+0x29c>
 80116be:	9b01      	ldr	r3, [sp, #4]
 80116c0:	2001      	movs	r0, #1
 80116c2:	e7d8      	b.n	8011676 <__kernel_rem_pio2+0x286>
 80116c4:	ecb5 5b02 	vldmia	r5!, {d5}
 80116c8:	ed3c 6b02 	vldmdb	ip!, {d6}
 80116cc:	3001      	adds	r0, #1
 80116ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80116d2:	e7eb      	b.n	80116ac <__kernel_rem_pio2+0x2bc>
 80116d4:	3b01      	subs	r3, #1
 80116d6:	e781      	b.n	80115dc <__kernel_rem_pio2+0x1ec>
 80116d8:	4260      	negs	r0, r4
 80116da:	eeb0 0b48 	vmov.f64	d0, d8
 80116de:	f000 fb47 	bl	8011d70 <scalbn>
 80116e2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011738 <__kernel_rem_pio2+0x348>
 80116e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80116ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ee:	db2b      	blt.n	8011748 <__kernel_rem_pio2+0x358>
 80116f0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011730 <__kernel_rem_pio2+0x340>
 80116f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80116f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80116fc:	aa04      	add	r2, sp, #16
 80116fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011702:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011706:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801170a:	a904      	add	r1, sp, #16
 801170c:	ee10 3a10 	vmov	r3, s0
 8011710:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011714:	ee17 2a10 	vmov	r2, s14
 8011718:	1c73      	adds	r3, r6, #1
 801171a:	3418      	adds	r4, #24
 801171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011720:	e762      	b.n	80115e8 <__kernel_rem_pio2+0x1f8>
 8011722:	bf00      	nop
 8011724:	f3af 8000 	nop.w
	...
 8011734:	3e700000 	.word	0x3e700000
 8011738:	00000000 	.word	0x00000000
 801173c:	41700000 	.word	0x41700000
 8011740:	080139a0 	.word	0x080139a0
 8011744:	08013960 	.word	0x08013960
 8011748:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801174c:	aa04      	add	r2, sp, #16
 801174e:	ee10 3a10 	vmov	r3, s0
 8011752:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011756:	4633      	mov	r3, r6
 8011758:	e746      	b.n	80115e8 <__kernel_rem_pio2+0x1f8>
 801175a:	a804      	add	r0, sp, #16
 801175c:	a968      	add	r1, sp, #416	; 0x1a0
 801175e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011762:	9000      	str	r0, [sp, #0]
 8011764:	ee07 0a90 	vmov	s15, r0
 8011768:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801176c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011770:	3a01      	subs	r2, #1
 8011772:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011776:	ee20 0b06 	vmul.f64	d0, d0, d6
 801177a:	ed81 7b00 	vstr	d7, [r1]
 801177e:	e73d      	b.n	80115fc <__kernel_rem_pio2+0x20c>
 8011780:	ecb6 5b02 	vldmia	r6!, {d5}
 8011784:	ecb4 6b02 	vldmia	r4!, {d6}
 8011788:	3201      	adds	r2, #1
 801178a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801178e:	454a      	cmp	r2, r9
 8011790:	dc01      	bgt.n	8011796 <__kernel_rem_pio2+0x3a6>
 8011792:	4290      	cmp	r0, r2
 8011794:	daf4      	bge.n	8011780 <__kernel_rem_pio2+0x390>
 8011796:	aa40      	add	r2, sp, #256	; 0x100
 8011798:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801179c:	ed82 7b00 	vstr	d7, [r2]
 80117a0:	3901      	subs	r1, #1
 80117a2:	3001      	adds	r0, #1
 80117a4:	e72f      	b.n	8011606 <__kernel_rem_pio2+0x216>
 80117a6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80117a8:	2a02      	cmp	r2, #2
 80117aa:	dc0a      	bgt.n	80117c2 <__kernel_rem_pio2+0x3d2>
 80117ac:	2a00      	cmp	r2, #0
 80117ae:	dc5a      	bgt.n	8011866 <__kernel_rem_pio2+0x476>
 80117b0:	d039      	beq.n	8011826 <__kernel_rem_pio2+0x436>
 80117b2:	f008 0007 	and.w	r0, r8, #7
 80117b6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80117ba:	ecbd 8b06 	vpop	{d8-d10}
 80117be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80117c4:	2a03      	cmp	r2, #3
 80117c6:	d1f4      	bne.n	80117b2 <__kernel_rem_pio2+0x3c2>
 80117c8:	aa40      	add	r2, sp, #256	; 0x100
 80117ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80117ce:	4611      	mov	r1, r2
 80117d0:	4618      	mov	r0, r3
 80117d2:	2800      	cmp	r0, #0
 80117d4:	f1a1 0108 	sub.w	r1, r1, #8
 80117d8:	dc52      	bgt.n	8011880 <__kernel_rem_pio2+0x490>
 80117da:	4619      	mov	r1, r3
 80117dc:	2901      	cmp	r1, #1
 80117de:	f1a2 0208 	sub.w	r2, r2, #8
 80117e2:	dc5d      	bgt.n	80118a0 <__kernel_rem_pio2+0x4b0>
 80117e4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80118e8 <__kernel_rem_pio2+0x4f8>
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	dc69      	bgt.n	80118c0 <__kernel_rem_pio2+0x4d0>
 80117ec:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80117f0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80117f4:	2d00      	cmp	r5, #0
 80117f6:	d16c      	bne.n	80118d2 <__kernel_rem_pio2+0x4e2>
 80117f8:	ed87 5b00 	vstr	d5, [r7]
 80117fc:	ed87 6b02 	vstr	d6, [r7, #8]
 8011800:	ed87 7b04 	vstr	d7, [r7, #16]
 8011804:	e7d5      	b.n	80117b2 <__kernel_rem_pio2+0x3c2>
 8011806:	aa40      	add	r2, sp, #256	; 0x100
 8011808:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801180c:	ed92 6b00 	vldr	d6, [r2]
 8011810:	3b01      	subs	r3, #1
 8011812:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011816:	2b00      	cmp	r3, #0
 8011818:	daf5      	bge.n	8011806 <__kernel_rem_pio2+0x416>
 801181a:	b10d      	cbz	r5, 8011820 <__kernel_rem_pio2+0x430>
 801181c:	eeb1 7b47 	vneg.f64	d7, d7
 8011820:	ed87 7b00 	vstr	d7, [r7]
 8011824:	e7c5      	b.n	80117b2 <__kernel_rem_pio2+0x3c2>
 8011826:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80118e8 <__kernel_rem_pio2+0x4f8>
 801182a:	e7f4      	b.n	8011816 <__kernel_rem_pio2+0x426>
 801182c:	a940      	add	r1, sp, #256	; 0x100
 801182e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011832:	ed91 7b00 	vldr	d7, [r1]
 8011836:	3a01      	subs	r2, #1
 8011838:	ee36 6b07 	vadd.f64	d6, d6, d7
 801183c:	2a00      	cmp	r2, #0
 801183e:	daf5      	bge.n	801182c <__kernel_rem_pio2+0x43c>
 8011840:	b1ad      	cbz	r5, 801186e <__kernel_rem_pio2+0x47e>
 8011842:	eeb1 7b46 	vneg.f64	d7, d6
 8011846:	ed87 7b00 	vstr	d7, [r7]
 801184a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 801184e:	a942      	add	r1, sp, #264	; 0x108
 8011850:	2201      	movs	r2, #1
 8011852:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011856:	4293      	cmp	r3, r2
 8011858:	da0c      	bge.n	8011874 <__kernel_rem_pio2+0x484>
 801185a:	b10d      	cbz	r5, 8011860 <__kernel_rem_pio2+0x470>
 801185c:	eeb1 7b47 	vneg.f64	d7, d7
 8011860:	ed87 7b02 	vstr	d7, [r7, #8]
 8011864:	e7a5      	b.n	80117b2 <__kernel_rem_pio2+0x3c2>
 8011866:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80118e8 <__kernel_rem_pio2+0x4f8>
 801186a:	461a      	mov	r2, r3
 801186c:	e7e6      	b.n	801183c <__kernel_rem_pio2+0x44c>
 801186e:	eeb0 7b46 	vmov.f64	d7, d6
 8011872:	e7e8      	b.n	8011846 <__kernel_rem_pio2+0x456>
 8011874:	ecb1 6b02 	vldmia	r1!, {d6}
 8011878:	3201      	adds	r2, #1
 801187a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801187e:	e7ea      	b.n	8011856 <__kernel_rem_pio2+0x466>
 8011880:	ed91 7b00 	vldr	d7, [r1]
 8011884:	ed91 5b02 	vldr	d5, [r1, #8]
 8011888:	3801      	subs	r0, #1
 801188a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801188e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011892:	ed81 6b00 	vstr	d6, [r1]
 8011896:	ee37 7b05 	vadd.f64	d7, d7, d5
 801189a:	ed81 7b02 	vstr	d7, [r1, #8]
 801189e:	e798      	b.n	80117d2 <__kernel_rem_pio2+0x3e2>
 80118a0:	ed92 7b00 	vldr	d7, [r2]
 80118a4:	ed92 5b02 	vldr	d5, [r2, #8]
 80118a8:	3901      	subs	r1, #1
 80118aa:	ee37 6b05 	vadd.f64	d6, d7, d5
 80118ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118b2:	ed82 6b00 	vstr	d6, [r2]
 80118b6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118ba:	ed82 7b02 	vstr	d7, [r2, #8]
 80118be:	e78d      	b.n	80117dc <__kernel_rem_pio2+0x3ec>
 80118c0:	aa40      	add	r2, sp, #256	; 0x100
 80118c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80118c6:	ed92 6b00 	vldr	d6, [r2]
 80118ca:	3b01      	subs	r3, #1
 80118cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118d0:	e78a      	b.n	80117e8 <__kernel_rem_pio2+0x3f8>
 80118d2:	eeb1 5b45 	vneg.f64	d5, d5
 80118d6:	eeb1 6b46 	vneg.f64	d6, d6
 80118da:	ed87 5b00 	vstr	d5, [r7]
 80118de:	eeb1 7b47 	vneg.f64	d7, d7
 80118e2:	ed87 6b02 	vstr	d6, [r7, #8]
 80118e6:	e78b      	b.n	8011800 <__kernel_rem_pio2+0x410>
	...

080118f0 <__kernel_sin>:
 80118f0:	ee10 3a90 	vmov	r3, s1
 80118f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80118f8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80118fc:	da04      	bge.n	8011908 <__kernel_sin+0x18>
 80118fe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011902:	ee17 3a90 	vmov	r3, s15
 8011906:	b35b      	cbz	r3, 8011960 <__kernel_sin+0x70>
 8011908:	ee20 6b00 	vmul.f64	d6, d0, d0
 801190c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011910:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011968 <__kernel_sin+0x78>
 8011914:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011970 <__kernel_sin+0x80>
 8011918:	eea6 4b07 	vfma.f64	d4, d6, d7
 801191c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011978 <__kernel_sin+0x88>
 8011920:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011924:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011980 <__kernel_sin+0x90>
 8011928:	eea7 4b06 	vfma.f64	d4, d7, d6
 801192c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011988 <__kernel_sin+0x98>
 8011930:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011934:	b930      	cbnz	r0, 8011944 <__kernel_sin+0x54>
 8011936:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011990 <__kernel_sin+0xa0>
 801193a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801193e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011942:	4770      	bx	lr
 8011944:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011948:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801194c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011950:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011954:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011998 <__kernel_sin+0xa8>
 8011958:	eea5 1b07 	vfma.f64	d1, d5, d7
 801195c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	f3af 8000 	nop.w
 8011968:	5acfd57c 	.word	0x5acfd57c
 801196c:	3de5d93a 	.word	0x3de5d93a
 8011970:	8a2b9ceb 	.word	0x8a2b9ceb
 8011974:	be5ae5e6 	.word	0xbe5ae5e6
 8011978:	57b1fe7d 	.word	0x57b1fe7d
 801197c:	3ec71de3 	.word	0x3ec71de3
 8011980:	19c161d5 	.word	0x19c161d5
 8011984:	bf2a01a0 	.word	0xbf2a01a0
 8011988:	1110f8a6 	.word	0x1110f8a6
 801198c:	3f811111 	.word	0x3f811111
 8011990:	55555549 	.word	0x55555549
 8011994:	bfc55555 	.word	0xbfc55555
 8011998:	55555549 	.word	0x55555549
 801199c:	3fc55555 	.word	0x3fc55555

080119a0 <with_errno>:
 80119a0:	b513      	push	{r0, r1, r4, lr}
 80119a2:	4604      	mov	r4, r0
 80119a4:	ed8d 0b00 	vstr	d0, [sp]
 80119a8:	f7fe feb4 	bl	8010714 <__errno>
 80119ac:	ed9d 0b00 	vldr	d0, [sp]
 80119b0:	6004      	str	r4, [r0, #0]
 80119b2:	b002      	add	sp, #8
 80119b4:	bd10      	pop	{r4, pc}

080119b6 <xflow>:
 80119b6:	b082      	sub	sp, #8
 80119b8:	b158      	cbz	r0, 80119d2 <xflow+0x1c>
 80119ba:	eeb1 7b40 	vneg.f64	d7, d0
 80119be:	ed8d 7b00 	vstr	d7, [sp]
 80119c2:	ed9d 7b00 	vldr	d7, [sp]
 80119c6:	2022      	movs	r0, #34	; 0x22
 80119c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80119cc:	b002      	add	sp, #8
 80119ce:	f7ff bfe7 	b.w	80119a0 <with_errno>
 80119d2:	eeb0 7b40 	vmov.f64	d7, d0
 80119d6:	e7f2      	b.n	80119be <xflow+0x8>

080119d8 <__math_uflow>:
 80119d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80119e0 <__math_uflow+0x8>
 80119dc:	f7ff bfeb 	b.w	80119b6 <xflow>
 80119e0:	00000000 	.word	0x00000000
 80119e4:	10000000 	.word	0x10000000

080119e8 <__math_oflow>:
 80119e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80119f0 <__math_oflow+0x8>
 80119ec:	f7ff bfe3 	b.w	80119b6 <xflow>
 80119f0:	00000000 	.word	0x00000000
 80119f4:	70000000 	.word	0x70000000

080119f8 <__math_divzero>:
 80119f8:	b082      	sub	sp, #8
 80119fa:	2800      	cmp	r0, #0
 80119fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a00:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011a04:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011a08:	ed8d 7b00 	vstr	d7, [sp]
 8011a0c:	ed9d 0b00 	vldr	d0, [sp]
 8011a10:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011a20 <__math_divzero+0x28>
 8011a14:	2022      	movs	r0, #34	; 0x22
 8011a16:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011a1a:	b002      	add	sp, #8
 8011a1c:	f7ff bfc0 	b.w	80119a0 <with_errno>
	...

08011a28 <__math_invalid>:
 8011a28:	eeb0 7b40 	vmov.f64	d7, d0
 8011a2c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a34:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011a38:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011a3c:	d602      	bvs.n	8011a44 <__math_invalid+0x1c>
 8011a3e:	2021      	movs	r0, #33	; 0x21
 8011a40:	f7ff bfae 	b.w	80119a0 <with_errno>
 8011a44:	4770      	bx	lr

08011a46 <__math_check_uflow>:
 8011a46:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4e:	d102      	bne.n	8011a56 <__math_check_uflow+0x10>
 8011a50:	2022      	movs	r0, #34	; 0x22
 8011a52:	f7ff bfa5 	b.w	80119a0 <with_errno>
 8011a56:	4770      	bx	lr

08011a58 <__math_check_oflow>:
 8011a58:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011a78 <__math_check_oflow+0x20>
 8011a5c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011a60:	eeb4 7b46 	vcmp.f64	d7, d6
 8011a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a68:	dd02      	ble.n	8011a70 <__math_check_oflow+0x18>
 8011a6a:	2022      	movs	r0, #34	; 0x22
 8011a6c:	f7ff bf98 	b.w	80119a0 <with_errno>
 8011a70:	4770      	bx	lr
 8011a72:	bf00      	nop
 8011a74:	f3af 8000 	nop.w
 8011a78:	ffffffff 	.word	0xffffffff
 8011a7c:	7fefffff 	.word	0x7fefffff

08011a80 <atan>:
 8011a80:	b538      	push	{r3, r4, r5, lr}
 8011a82:	eeb0 7b40 	vmov.f64	d7, d0
 8011a86:	ee17 5a90 	vmov	r5, s15
 8011a8a:	4b73      	ldr	r3, [pc, #460]	; (8011c58 <atan+0x1d8>)
 8011a8c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011a90:	429c      	cmp	r4, r3
 8011a92:	dd13      	ble.n	8011abc <atan+0x3c>
 8011a94:	4b71      	ldr	r3, [pc, #452]	; (8011c5c <atan+0x1dc>)
 8011a96:	429c      	cmp	r4, r3
 8011a98:	dc03      	bgt.n	8011aa2 <atan+0x22>
 8011a9a:	d107      	bne.n	8011aac <atan+0x2c>
 8011a9c:	ee10 3a10 	vmov	r3, s0
 8011aa0:	b123      	cbz	r3, 8011aac <atan+0x2c>
 8011aa2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011aa6:	eeb0 0b47 	vmov.f64	d0, d7
 8011aaa:	bd38      	pop	{r3, r4, r5, pc}
 8011aac:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011be8 <atan+0x168>
 8011ab0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011bf0 <atan+0x170>
 8011ab4:	2d00      	cmp	r5, #0
 8011ab6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8011aba:	e7f4      	b.n	8011aa6 <atan+0x26>
 8011abc:	4b68      	ldr	r3, [pc, #416]	; (8011c60 <atan+0x1e0>)
 8011abe:	429c      	cmp	r4, r3
 8011ac0:	dc11      	bgt.n	8011ae6 <atan+0x66>
 8011ac2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011ac6:	429c      	cmp	r4, r3
 8011ac8:	dc0a      	bgt.n	8011ae0 <atan+0x60>
 8011aca:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8011ace:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8011bf8 <atan+0x178>
 8011ad2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8011ad6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ade:	dce2      	bgt.n	8011aa6 <atan+0x26>
 8011ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae4:	e013      	b.n	8011b0e <atan+0x8e>
 8011ae6:	f000 f8c5 	bl	8011c74 <fabs>
 8011aea:	4b5e      	ldr	r3, [pc, #376]	; (8011c64 <atan+0x1e4>)
 8011aec:	429c      	cmp	r4, r3
 8011aee:	dc4f      	bgt.n	8011b90 <atan+0x110>
 8011af0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011af4:	429c      	cmp	r4, r3
 8011af6:	dc41      	bgt.n	8011b7c <atan+0xfc>
 8011af8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011afc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011b00:	2300      	movs	r3, #0
 8011b02:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011b06:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b0a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011b0e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c00 <atan+0x180>
 8011b12:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011b16:	ee24 5b04 	vmul.f64	d5, d4, d4
 8011b1a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011c08 <atan+0x188>
 8011b1e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8011b22:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011c10 <atan+0x190>
 8011b26:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011b2a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011c18 <atan+0x198>
 8011b2e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011b32:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011c20 <atan+0x1a0>
 8011b36:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011b3a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011c28 <atan+0x1a8>
 8011b3e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011c30 <atan+0x1b0>
 8011b42:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011b46:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c38 <atan+0x1b8>
 8011b4a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8011b4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c40 <atan+0x1c0>
 8011b52:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011b56:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011c48 <atan+0x1c8>
 8011b5a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8011b5e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c50 <atan+0x1d0>
 8011b62:	1c5a      	adds	r2, r3, #1
 8011b64:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011b68:	ee26 6b05 	vmul.f64	d6, d6, d5
 8011b6c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011b70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011b74:	d121      	bne.n	8011bba <atan+0x13a>
 8011b76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011b7a:	e794      	b.n	8011aa6 <atan+0x26>
 8011b7c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011b80:	2301      	movs	r3, #1
 8011b82:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011b86:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b8a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011b8e:	e7be      	b.n	8011b0e <atan+0x8e>
 8011b90:	4b35      	ldr	r3, [pc, #212]	; (8011c68 <atan+0x1e8>)
 8011b92:	429c      	cmp	r4, r3
 8011b94:	da0b      	bge.n	8011bae <atan+0x12e>
 8011b96:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011b9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011b9e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8011ba2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011ba6:	2302      	movs	r3, #2
 8011ba8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011bac:	e7af      	b.n	8011b0e <atan+0x8e>
 8011bae:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011bb2:	2303      	movs	r3, #3
 8011bb4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011bb8:	e7a9      	b.n	8011b0e <atan+0x8e>
 8011bba:	4a2c      	ldr	r2, [pc, #176]	; (8011c6c <atan+0x1ec>)
 8011bbc:	492c      	ldr	r1, [pc, #176]	; (8011c70 <atan+0x1f0>)
 8011bbe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011bc2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011bc6:	ed93 5b00 	vldr	d5, [r3]
 8011bca:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011bce:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011bd2:	ed92 6b00 	vldr	d6, [r2]
 8011bd6:	2d00      	cmp	r5, #0
 8011bd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011bdc:	bfb8      	it	lt
 8011bde:	eeb1 7b47 	vneglt.f64	d7, d7
 8011be2:	e760      	b.n	8011aa6 <atan+0x26>
 8011be4:	f3af 8000 	nop.w
 8011be8:	54442d18 	.word	0x54442d18
 8011bec:	3ff921fb 	.word	0x3ff921fb
 8011bf0:	54442d18 	.word	0x54442d18
 8011bf4:	bff921fb 	.word	0xbff921fb
 8011bf8:	8800759c 	.word	0x8800759c
 8011bfc:	7e37e43c 	.word	0x7e37e43c
 8011c00:	e322da11 	.word	0xe322da11
 8011c04:	3f90ad3a 	.word	0x3f90ad3a
 8011c08:	24760deb 	.word	0x24760deb
 8011c0c:	3fa97b4b 	.word	0x3fa97b4b
 8011c10:	a0d03d51 	.word	0xa0d03d51
 8011c14:	3fb10d66 	.word	0x3fb10d66
 8011c18:	c54c206e 	.word	0xc54c206e
 8011c1c:	3fb745cd 	.word	0x3fb745cd
 8011c20:	920083ff 	.word	0x920083ff
 8011c24:	3fc24924 	.word	0x3fc24924
 8011c28:	5555550d 	.word	0x5555550d
 8011c2c:	3fd55555 	.word	0x3fd55555
 8011c30:	52defd9a 	.word	0x52defd9a
 8011c34:	bfadde2d 	.word	0xbfadde2d
 8011c38:	2c6a6c2f 	.word	0x2c6a6c2f
 8011c3c:	bfa2b444 	.word	0xbfa2b444
 8011c40:	af749a6d 	.word	0xaf749a6d
 8011c44:	bfb3b0f2 	.word	0xbfb3b0f2
 8011c48:	fe231671 	.word	0xfe231671
 8011c4c:	bfbc71c6 	.word	0xbfbc71c6
 8011c50:	9998ebc4 	.word	0x9998ebc4
 8011c54:	bfc99999 	.word	0xbfc99999
 8011c58:	440fffff 	.word	0x440fffff
 8011c5c:	7ff00000 	.word	0x7ff00000
 8011c60:	3fdbffff 	.word	0x3fdbffff
 8011c64:	3ff2ffff 	.word	0x3ff2ffff
 8011c68:	40038000 	.word	0x40038000
 8011c6c:	080139b0 	.word	0x080139b0
 8011c70:	080139d0 	.word	0x080139d0

08011c74 <fabs>:
 8011c74:	ec51 0b10 	vmov	r0, r1, d0
 8011c78:	ee10 2a10 	vmov	r2, s0
 8011c7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c80:	ec43 2b10 	vmov	d0, r2, r3
 8011c84:	4770      	bx	lr
	...

08011c88 <floor>:
 8011c88:	ee10 1a90 	vmov	r1, s1
 8011c8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011c90:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011c94:	2b13      	cmp	r3, #19
 8011c96:	b530      	push	{r4, r5, lr}
 8011c98:	ee10 0a10 	vmov	r0, s0
 8011c9c:	ee10 5a10 	vmov	r5, s0
 8011ca0:	dc31      	bgt.n	8011d06 <floor+0x7e>
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	da15      	bge.n	8011cd2 <floor+0x4a>
 8011ca6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011d60 <floor+0xd8>
 8011caa:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011cae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb6:	dd07      	ble.n	8011cc8 <floor+0x40>
 8011cb8:	2900      	cmp	r1, #0
 8011cba:	da4e      	bge.n	8011d5a <floor+0xd2>
 8011cbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011cc0:	4318      	orrs	r0, r3
 8011cc2:	d001      	beq.n	8011cc8 <floor+0x40>
 8011cc4:	4928      	ldr	r1, [pc, #160]	; (8011d68 <floor+0xe0>)
 8011cc6:	2000      	movs	r0, #0
 8011cc8:	460b      	mov	r3, r1
 8011cca:	4602      	mov	r2, r0
 8011ccc:	ec43 2b10 	vmov	d0, r2, r3
 8011cd0:	e020      	b.n	8011d14 <floor+0x8c>
 8011cd2:	4a26      	ldr	r2, [pc, #152]	; (8011d6c <floor+0xe4>)
 8011cd4:	411a      	asrs	r2, r3
 8011cd6:	ea01 0402 	and.w	r4, r1, r2
 8011cda:	4304      	orrs	r4, r0
 8011cdc:	d01a      	beq.n	8011d14 <floor+0x8c>
 8011cde:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011d60 <floor+0xd8>
 8011ce2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011ce6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cee:	ddeb      	ble.n	8011cc8 <floor+0x40>
 8011cf0:	2900      	cmp	r1, #0
 8011cf2:	bfbe      	ittt	lt
 8011cf4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011cf8:	fa40 f303 	asrlt.w	r3, r0, r3
 8011cfc:	18c9      	addlt	r1, r1, r3
 8011cfe:	ea21 0102 	bic.w	r1, r1, r2
 8011d02:	2000      	movs	r0, #0
 8011d04:	e7e0      	b.n	8011cc8 <floor+0x40>
 8011d06:	2b33      	cmp	r3, #51	; 0x33
 8011d08:	dd05      	ble.n	8011d16 <floor+0x8e>
 8011d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d0e:	d101      	bne.n	8011d14 <floor+0x8c>
 8011d10:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011d14:	bd30      	pop	{r4, r5, pc}
 8011d16:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d1e:	40e2      	lsrs	r2, r4
 8011d20:	4202      	tst	r2, r0
 8011d22:	d0f7      	beq.n	8011d14 <floor+0x8c>
 8011d24:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011d60 <floor+0xd8>
 8011d28:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011d2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d34:	ddc8      	ble.n	8011cc8 <floor+0x40>
 8011d36:	2900      	cmp	r1, #0
 8011d38:	da02      	bge.n	8011d40 <floor+0xb8>
 8011d3a:	2b14      	cmp	r3, #20
 8011d3c:	d103      	bne.n	8011d46 <floor+0xbe>
 8011d3e:	3101      	adds	r1, #1
 8011d40:	ea20 0002 	bic.w	r0, r0, r2
 8011d44:	e7c0      	b.n	8011cc8 <floor+0x40>
 8011d46:	2401      	movs	r4, #1
 8011d48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011d4c:	fa04 f303 	lsl.w	r3, r4, r3
 8011d50:	4418      	add	r0, r3
 8011d52:	42a8      	cmp	r0, r5
 8011d54:	bf38      	it	cc
 8011d56:	1909      	addcc	r1, r1, r4
 8011d58:	e7f2      	b.n	8011d40 <floor+0xb8>
 8011d5a:	2000      	movs	r0, #0
 8011d5c:	4601      	mov	r1, r0
 8011d5e:	e7b3      	b.n	8011cc8 <floor+0x40>
 8011d60:	8800759c 	.word	0x8800759c
 8011d64:	7e37e43c 	.word	0x7e37e43c
 8011d68:	bff00000 	.word	0xbff00000
 8011d6c:	000fffff 	.word	0x000fffff

08011d70 <scalbn>:
 8011d70:	b082      	sub	sp, #8
 8011d72:	ed8d 0b00 	vstr	d0, [sp]
 8011d76:	9b01      	ldr	r3, [sp, #4]
 8011d78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011d7c:	b9a2      	cbnz	r2, 8011da8 <scalbn+0x38>
 8011d7e:	9a00      	ldr	r2, [sp, #0]
 8011d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011d84:	4313      	orrs	r3, r2
 8011d86:	d03a      	beq.n	8011dfe <scalbn+0x8e>
 8011d88:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011e60 <scalbn+0xf0>
 8011d8c:	4b40      	ldr	r3, [pc, #256]	; (8011e90 <scalbn+0x120>)
 8011d8e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011d92:	4298      	cmp	r0, r3
 8011d94:	ed8d 7b00 	vstr	d7, [sp]
 8011d98:	da11      	bge.n	8011dbe <scalbn+0x4e>
 8011d9a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011e68 <scalbn+0xf8>
 8011d9e:	ed9d 6b00 	vldr	d6, [sp]
 8011da2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011da6:	e007      	b.n	8011db8 <scalbn+0x48>
 8011da8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011dac:	428a      	cmp	r2, r1
 8011dae:	d10a      	bne.n	8011dc6 <scalbn+0x56>
 8011db0:	ed9d 7b00 	vldr	d7, [sp]
 8011db4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011db8:	ed8d 7b00 	vstr	d7, [sp]
 8011dbc:	e01f      	b.n	8011dfe <scalbn+0x8e>
 8011dbe:	9b01      	ldr	r3, [sp, #4]
 8011dc0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011dc4:	3a36      	subs	r2, #54	; 0x36
 8011dc6:	4402      	add	r2, r0
 8011dc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011dcc:	428a      	cmp	r2, r1
 8011dce:	dd0a      	ble.n	8011de6 <scalbn+0x76>
 8011dd0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011e70 <scalbn+0x100>
 8011dd4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011e78 <scalbn+0x108>
 8011dd8:	eeb0 6b47 	vmov.f64	d6, d7
 8011ddc:	9b01      	ldr	r3, [sp, #4]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011de4:	e7dd      	b.n	8011da2 <scalbn+0x32>
 8011de6:	2a00      	cmp	r2, #0
 8011de8:	dd0d      	ble.n	8011e06 <scalbn+0x96>
 8011dea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011dee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011df2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011df6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011dfa:	e9cd 0100 	strd	r0, r1, [sp]
 8011dfe:	ed9d 0b00 	vldr	d0, [sp]
 8011e02:	b002      	add	sp, #8
 8011e04:	4770      	bx	lr
 8011e06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011e0a:	da18      	bge.n	8011e3e <scalbn+0xce>
 8011e0c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011e10:	4298      	cmp	r0, r3
 8011e12:	9b01      	ldr	r3, [sp, #4]
 8011e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e18:	dd09      	ble.n	8011e2e <scalbn+0xbe>
 8011e1a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011e70 <scalbn+0x100>
 8011e1e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011e78 <scalbn+0x108>
 8011e22:	eeb0 6b47 	vmov.f64	d6, d7
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8011e2c:	e7b9      	b.n	8011da2 <scalbn+0x32>
 8011e2e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011e68 <scalbn+0xf8>
 8011e32:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011e80 <scalbn+0x110>
 8011e36:	eeb0 6b47 	vmov.f64	d6, d7
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	e7f4      	b.n	8011e28 <scalbn+0xb8>
 8011e3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011e46:	3236      	adds	r2, #54	; 0x36
 8011e48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011e4c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011e50:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8011e88 <scalbn+0x118>
 8011e54:	ec41 0b17 	vmov	d7, r0, r1
 8011e58:	e7a3      	b.n	8011da2 <scalbn+0x32>
 8011e5a:	bf00      	nop
 8011e5c:	f3af 8000 	nop.w
 8011e60:	00000000 	.word	0x00000000
 8011e64:	43500000 	.word	0x43500000
 8011e68:	c2f8f359 	.word	0xc2f8f359
 8011e6c:	01a56e1f 	.word	0x01a56e1f
 8011e70:	8800759c 	.word	0x8800759c
 8011e74:	7e37e43c 	.word	0x7e37e43c
 8011e78:	8800759c 	.word	0x8800759c
 8011e7c:	fe37e43c 	.word	0xfe37e43c
 8011e80:	c2f8f359 	.word	0xc2f8f359
 8011e84:	81a56e1f 	.word	0x81a56e1f
 8011e88:	00000000 	.word	0x00000000
 8011e8c:	3c900000 	.word	0x3c900000
 8011e90:	ffff3cb0 	.word	0xffff3cb0

08011e94 <_init>:
 8011e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e96:	bf00      	nop
 8011e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e9a:	bc08      	pop	{r3}
 8011e9c:	469e      	mov	lr, r3
 8011e9e:	4770      	bx	lr

08011ea0 <_fini>:
 8011ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ea2:	bf00      	nop
 8011ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ea6:	bc08      	pop	{r3}
 8011ea8:	469e      	mov	lr, r3
 8011eaa:	4770      	bx	lr
