
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c74  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b40  08011f10  08011f10  00021f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013a50  08013a50  00023a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013a58  08013a58  00023a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013a5c  08013a5c  00023a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08013a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  08013ad8  00030078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  08013b38  000300d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000117c  24000138  08013b98  00030138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240012b4  08013b98  000312b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039ec5  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000556d  00000000  00000000  0006a02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d40  00000000  00000000  0006f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b88  00000000  00000000  000712d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d5ef  00000000  00000000  00072e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027796  00000000  00000000  000b044f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001852cf  00000000  00000000  000d7be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025ceb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000832c  00000000  00000000  0025cf08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000138 	.word	0x24000138
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08011ef4 	.word	0x08011ef4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400013c 	.word	0x2400013c
 80002d4:	08011ef4 	.word	0x08011ef4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <updateChess>:
#include "QEI.h"
#include <math.h>

static chess_state chesss[NUM_CHESS];

void updateChess(int32_t row, int32_t column){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	chess_state * chess = &chesss[0];
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <updateChess+0x7c>)
 80005dc:	60fb      	str	r3, [r7, #12]
	chess->x_chess = find_x(row);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f836 	bl	8000650 <find_x>
 80005e4:	eeb0 7b40 	vmov.f64	d7, d0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	ed83 7b02 	vstr	d7, [r3, #8]
	chess->y_chess = find_y(column);
 80005ee:	6838      	ldr	r0, [r7, #0]
 80005f0:	f000 f86e 	bl	80006d0 <find_y>
 80005f4:	eeb0 7b40 	vmov.f64	d7, d0
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	ed83 7b04 	vstr	d7, [r3, #16]
	chess->r = find_radius(chess->x_chess, chess->y_chess);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	ed93 7b02 	vldr	d7, [r3, #8]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	ed93 6b04 	vldr	d6, [r3, #16]
 800060a:	eeb0 1b46 	vmov.f64	d1, d6
 800060e:	eeb0 0b47 	vmov.f64	d0, d7
 8000612:	f000 f89d 	bl	8000750 <find_radius>
 8000616:	eeb0 7b40 	vmov.f64	d7, d0
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	chess->degree_chess = find_degree(chess->x_chess, chess->y_chess);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	ed93 7b02 	vldr	d7, [r3, #8]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	ed93 6b04 	vldr	d6, [r3, #16]
 800062c:	eeb0 1b46 	vmov.f64	d1, d6
 8000630:	eeb0 0b47 	vmov.f64	d0, d7
 8000634:	f000 f8b4 	bl	80007a0 <find_degree>
 8000638:	eeb0 7b40 	vmov.f64	d7, d0
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	ed83 7b00 	vstr	d7, [r3]
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	24000158 	.word	0x24000158

08000650 <find_x>:

double find_x(int32_t row){
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if(row <= 4){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b04      	cmp	r3, #4
 800065c:	dc15      	bgt.n	800068a <find_x+0x3a>
		return (-((5 - row)*L)/8.00) + (s/2.00);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f1c3 0305 	rsb	r3, r3, #5
 8000664:	ee07 3a90 	vmov	s15, r3
 8000668:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800066c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80006c8 <find_x+0x78>
 8000670:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000674:	eeb1 6b47 	vneg.f64	d6, d7
 8000678:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 800067c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000680:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000684:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000688:	e015      	b.n	80006b6 <find_x+0x66>
	}
	else if(row >= 5){
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b04      	cmp	r3, #4
 800068e:	dd12      	ble.n	80006b6 <find_x+0x66>
		return (((row - 4)*L)/8.00) - (s/2.00);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3b04      	subs	r3, #4
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800069c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80006c8 <find_x+0x78>
 80006a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006a4:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80006a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ac:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 80006b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80006b4:	e7ff      	b.n	80006b6 <find_x+0x66>
	}
}
 80006b6:	eeb0 0b47 	vmov.f64	d0, d7
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	f3af 8000 	nop.w
 80006c8:	00000000 	.word	0x00000000
 80006cc:	40790000 	.word	0x40790000

080006d0 <find_y>:

double find_y(int32_t column){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if(column <= 4){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b04      	cmp	r3, #4
 80006dc:	dc15      	bgt.n	800070a <find_y+0x3a>
		return (-((5 - column)*L)/8.00) + (s/2.00);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f1c3 0305 	rsb	r3, r3, #5
 80006e4:	ee07 3a90 	vmov	s15, r3
 80006e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006ec:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000748 <find_y+0x78>
 80006f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006f4:	eeb1 6b47 	vneg.f64	d6, d7
 80006f8:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80006fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000700:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000704:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000708:	e015      	b.n	8000736 <find_y+0x66>
	}
	else if(column >= 5){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b04      	cmp	r3, #4
 800070e:	dd12      	ble.n	8000736 <find_y+0x66>
		return (((column - 4)*L)/8.00) - (s/2.00);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b04      	subs	r3, #4
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000748 <find_y+0x78>
 8000720:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000724:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8000728:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800072c:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000730:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000734:	e7ff      	b.n	8000736 <find_y+0x66>
	}
}
 8000736:	eeb0 0b47 	vmov.f64	d0, d7
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	f3af 8000 	nop.w
 8000748:	00000000 	.word	0x00000000
 800074c:	40790000 	.word	0x40790000

08000750 <find_radius>:

double find_radius(double x, double y){
 8000750:	b580      	push	{r7, lr}
 8000752:	ed2d 8b02 	vpush	{d8}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	ed87 0b02 	vstr	d0, [r7, #8]
 800075e:	ed87 1b00 	vstr	d1, [r7]
	return sqrt(pow(x, 2) + pow(y, 2));
 8000762:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000766:	ed97 0b02 	vldr	d0, [r7, #8]
 800076a:	f010 f86d 	bl	8010848 <pow>
 800076e:	eeb0 8b40 	vmov.f64	d8, d0
 8000772:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000776:	ed97 0b00 	vldr	d0, [r7]
 800077a:	f010 f865 	bl	8010848 <pow>
 800077e:	eeb0 7b40 	vmov.f64	d7, d0
 8000782:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000786:	eeb0 0b47 	vmov.f64	d0, d7
 800078a:	f010 fbb5 	bl	8010ef8 <sqrt>
 800078e:	eeb0 7b40 	vmov.f64	d7, d0
}
 8000792:	eeb0 0b47 	vmov.f64	d0, d7
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	ecbd 8b02 	vpop	{d8}
 800079e:	bd80      	pop	{r7, pc}

080007a0 <find_degree>:

//ref 0 degree
double find_degree(double x, double y){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80007aa:	ed87 1b00 	vstr	d1, [r7]
	double d = atan2(y, x) * (180.00/M_PI);
 80007ae:	ed97 1b02 	vldr	d1, [r7, #8]
 80007b2:	ed97 0b00 	vldr	d0, [r7]
 80007b6:	f010 fb9b 	bl	8010ef0 <atan2>
 80007ba:	eeb0 7b40 	vmov.f64	d7, d0
 80007be:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000830 <find_degree+0x90>
 80007c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007c6:	ed87 7b04 	vstr	d7, [r7, #16]
	if(x < 0 && y < 0){return 360.00 + d;}
 80007ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80007ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d6:	d50d      	bpl.n	80007f4 <find_degree+0x54>
 80007d8:	ed97 7b00 	vldr	d7, [r7]
 80007dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e4:	d506      	bpl.n	80007f4 <find_degree+0x54>
 80007e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80007ea:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000838 <find_degree+0x98>
 80007ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007f2:	e016      	b.n	8000822 <find_degree+0x82>
	else if(x >= 0 && y < 0){return 360.00 + d;}
 80007f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80007f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000800:	db0d      	blt.n	800081e <find_degree+0x7e>
 8000802:	ed97 7b00 	vldr	d7, [r7]
 8000806:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080e:	d506      	bpl.n	800081e <find_degree+0x7e>
 8000810:	ed97 7b04 	vldr	d7, [r7, #16]
 8000814:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000838 <find_degree+0x98>
 8000818:	ee37 7b06 	vadd.f64	d7, d7, d6
 800081c:	e001      	b.n	8000822 <find_degree+0x82>
	else{return d;}
 800081e:	ed97 7b04 	vldr	d7, [r7, #16]
//    double d = atan(y/x)*(180.00/M_PI);
//    if(x >= 0 && y >= 0){return d;}
//    else if(x < 0 && y >= 0){return 180.00 + d;}
//    else if(x < 0 && y < 0){return 180.00 + d;}
//    else if(x >= 0 && y < 0){return 360.00 + d;}
}
 8000822:	eeb0 0b47 	vmov.f64	d0, d7
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	f3af 8000 	nop.w
 8000830:	1a63c1f8 	.word	0x1a63c1f8
 8000834:	404ca5dc 	.word	0x404ca5dc
 8000838:	00000000 	.word	0x00000000
 800083c:	40768000 	.word	0x40768000

08000840 <get_degree_chess>:

double get_degree_chess(){ //ref
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
	chess_state * chess = &chesss[0];
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <get_degree_chess+0x24>)
 8000848:	607b      	str	r3, [r7, #4]
	return chess->degree_chess;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000850:	ec43 2b17 	vmov	d7, r2, r3
}
 8000854:	eeb0 0b47 	vmov.f64	d0, d7
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	24000158 	.word	0x24000158

08000868 <get_radius_circle>:

double get_radius_circle(){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
	chess_state * chess = &chesss[0];
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <get_radius_circle+0x24>)
 8000870:	607b      	str	r3, [r7, #4]
	return chess->r;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000878:	ec43 2b17 	vmov	d7, r2, r3
}
 800087c:	eeb0 0b47 	vmov.f64	d0, d7
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	24000158 	.word	0x24000158

08000890 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 8000890:	b480      	push	{r7}
 8000892:	b08b      	sub	sp, #44	; 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	61f8      	str	r0, [r7, #28]
 8000898:	ed87 0a06 	vstr	s0, [r7, #24]
 800089c:	edc7 0a05 	vstr	s1, [r7, #20]
 80008a0:	ed87 1a04 	vstr	s2, [r7, #16]
 80008a4:	edc7 1a03 	vstr	s3, [r7, #12]
 80008a8:	ed87 2a02 	vstr	s4, [r7, #8]
 80008ac:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	222c      	movs	r2, #44	; 0x2c
 80008b4:	fb02 f303 	mul.w	r3, r2, r3
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <setupPID+0x64>)
 80008ba:	4413      	add	r3, r2
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	69fa      	ldr	r2, [r7, #28]
 80008c2:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	611a      	str	r2, [r3, #16]
}
 80008e8:	bf00      	nop
 80008ea:	372c      	adds	r7, #44	; 0x2c
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	240001c8 	.word	0x240001c8

080008f8 <calculator>:


float calculator(int num, int input, float setpoint){
 80008f8:	b480      	push	{r7}
 80008fa:	b08b      	sub	sp, #44	; 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	222c      	movs	r2, #44	; 0x2c
 800090a:	fb02 f303 	mul.w	r3, r2, r3
 800090e:	4a50      	ldr	r2, [pc, #320]	; (8000a50 <calculator+0x158>)
 8000910:	4413      	add	r3, r2
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	ee07 3a90 	vmov	s15, r3
 800091a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800091e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 800092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800093c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	edd3 7a01 	vldr	s15, [r3, #4]
 800094c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	ed93 7a03 	vldr	s14, [r3, #12]
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800096c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000970:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800097a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000a54 <calculator+0x15c>
 800097e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	dd02      	ble.n	800098e <calculator+0x96>
		pid->integral = 4095;
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <calculator+0x160>)
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000994:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000a5c <calculator+0x164>
 8000998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800099c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a0:	d502      	bpl.n	80009a8 <calculator+0xb0>
		pid->integral = -4095;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	4a2e      	ldr	r2, [pc, #184]	; (8000a60 <calculator+0x168>)
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80009b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80009be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009c2:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80009cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80009d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d4:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 80009d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80009dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80009e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80009e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	ed93 7a07 	vldr	s14, [r3, #28]
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80009fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a06:	dd04      	ble.n	8000a12 <calculator+0x11a>
		pid->output = pid->Vmax;}
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	61da      	str	r2, [r3, #28]
 8000a10:	e00e      	b.n	8000a30 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	ed93 7a07 	vldr	s14, [r3, #28]
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a26:	d503      	bpl.n	8000a30 <calculator+0x138>
		pid->output = pid->Vmin;}
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	621a      	str	r2, [r3, #32]

	return pid->output;
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	ee07 3a90 	vmov	s15, r3
}
 8000a40:	eeb0 0a67 	vmov.f32	s0, s15
 8000a44:	372c      	adds	r7, #44	; 0x2c
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	240001c8 	.word	0x240001c8
 8000a54:	457ff000 	.word	0x457ff000
 8000a58:	457ff000 	.word	0x457ff000
 8000a5c:	c57ff000 	.word	0xc57ff000
 8000a60:	c57ff000 	.word	0xc57ff000

08000a64 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare use for encoder field

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	4802      	ldr	r0, [pc, #8]	; (8000a78 <enable_Encoder_OE+0x14>)
 8000a70:	f008 fae2 	bl	8009038 <HAL_GPIO_WritePin>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	58020400 	.word	0x58020400

08000a7c <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <Encoder_Start+0x4c>)
 8000a94:	4413      	add	r3, r2
 8000a96:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	68b8      	ldr	r0, [r7, #8]
 8000a9c:	f00c fa6c 	bl	800cf78 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 8000ab2:	f7ff ffd7 	bl	8000a64 <enable_Encoder_OE>
	Set_Encoder_Zero(num, OFFSET);
 8000ab6:	f247 5130 	movw	r1, #30000	; 0x7530
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f000 f822 	bl	8000b04 <Set_Encoder_Zero>
}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	240002a4 	.word	0x240002a4

08000acc <Get_Value_Encoder>:

uint32_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <Get_Value_Encoder+0x34>)
 8000ae0:	4413      	add	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	240002a4 	.word	0x240002a4

08000b04 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num, int value){
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	encoder_state * encoder = &encoders[num];
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <Set_Encoder_Zero+0x30>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, value);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	240002a4 	.word	0x240002a4

08000b38 <Stepper_Setup>:
#include "TASKSPACE.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2258      	movs	r2, #88	; 0x58
 8000b4a:	fb02 f303 	mul.w	r3, r2, r3
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <Stepper_Setup+0x54>)
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	8c3a      	ldrh	r2, [r7, #32]
 8000b70:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	return SERR_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	371c      	adds	r7, #28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	240002e0 	.word	0x240002e0

08000b90 <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d02d      	beq.n	8000bfc <Stepper_SetStepTimer+0x6c>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d028      	beq.n	8000bfc <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <Stepper_SetStepTimer+0x78>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc2:	d30b      	bcc.n	8000bdc <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <Stepper_SetStepTimer+0x7c>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	0bdb      	lsrs	r3, r3, #15
 8000bce:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	0852      	lsrs	r2, r2, #1
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	2400101c 	.word	0x2400101c
 8000c0c:	80008001 	.word	0x80008001

08000c10 <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2258      	movs	r2, #88	; 0x58
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <Stepper_DefaultState+0x60>)
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2201      	movs	r2, #1
 8000c32:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000c3a:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	699a      	ldr	r2, [r3, #24]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f247 5230 	movw	r2, #30000	; 0x7530
 8000c4a:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff ff9f 	bl	8000b90 <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	f00b ff41 	bl	800cae4 <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 8000c62:	f000 f99f 	bl	8000fa4 <enable_Stepper_OE>

	return SERR_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	240002e0 	.word	0x240002e0

08000c74 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, float_t value){
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2258      	movs	r2, #88	; 0x58
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <Stepper_SetMinPosition+0x30>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	621a      	str	r2, [r3, #32]
	return SERR_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	240002e0 	.word	0x240002e0

08000ca8 <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, float_t value){
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2258      	movs	r2, #88	; 0x58
 8000cb8:	fb02 f303 	mul.w	r3, r2, r3
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <Stepper_SetMaxPosition+0x30>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	240002e0 	.word	0x240002e0

08000cdc <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2258      	movs	r2, #88	; 0x58
 8000cec:	fb02 f303 	mul.w	r3, r2, r3
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <Stepper_SetMinSpeed+0x30>)
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	619a      	str	r2, [r3, #24]
	return SERR_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	240002e0 	.word	0x240002e0

08000d10 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2258      	movs	r2, #88	; 0x58
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <Stepper_SetMaxSpeed+0x30>)
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	61da      	str	r2, [r3, #28]
	return SERR_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	240002e0 	.word	0x240002e0

08000d44 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, float_t value){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	ed87 0a00 	vstr	s0, [r7]
	//value is mm or degree unit
	stepper_state * stepper = &steppers[num];
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2258      	movs	r2, #88	; 0x58
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	4a34      	ldr	r2, [pc, #208]	; (8000e2c <Stepper_SetTraget+0xe8>)
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b80      	cmp	r3, #128	; 0x80
 8000d68:	d05b      	beq.n	8000e22 <Stepper_SetTraget+0xde>
		if(value<stepper->minPosition){
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d70:	ed97 7a00 	vldr	s14, [r7]
 8000d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	d517      	bpl.n	8000dae <Stepper_SetTraget+0x6a>
			stepper->targetPosition_real = stepper->minPosition;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6a1a      	ldr	r2, [r3, #32]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->minPosition)*100.00) + OFFSET;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d8c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000e30 <Stepper_SetTraget+0xec>
 8000d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d94:	eeb0 0a67 	vmov.f32	s0, s15
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 facd 	bl	8001338 <joint_to_encoder>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	f247 5330 	movw	r3, #30000	; 0x7530
 8000da4:	4413      	add	r3, r2
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000daa:	2304      	movs	r3, #4
 8000dac:	e03a      	b.n	8000e24 <Stepper_SetTraget+0xe0>
		}
		else if (value>stepper->maxPosition) {
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000db4:	ed97 7a00 	vldr	s14, [r7]
 8000db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	dd17      	ble.n	8000df2 <Stepper_SetTraget+0xae>
			stepper->targetPosition_real = stepper->maxPosition;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->maxPosition)*100.00) + OFFSET;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000dd0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000e30 <Stepper_SetTraget+0xec>
 8000dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 faab 	bl	8001338 <joint_to_encoder>
 8000de2:	4602      	mov	r2, r0
 8000de4:	f247 5330 	movw	r3, #30000	; 0x7530
 8000de8:	4413      	add	r3, r2
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000dee:	2304      	movs	r3, #4
 8000df0:	e018      	b.n	8000e24 <Stepper_SetTraget+0xe0>
		}
		else {
			stepper->targetPosition_real = value; //input mm or degree unit
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, value*100.00) + OFFSET; //convert to encoder count
 8000df8:	edd7 7a00 	vldr	s15, [r7]
 8000dfc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000e30 <Stepper_SetTraget+0xec>
 8000e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e04:	eeb0 0a67 	vmov.f32	s0, s15
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fa95 	bl	8001338 <joint_to_encoder>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	f247 5330 	movw	r3, #30000	; 0x7530
 8000e14:	4413      	add	r3, r2
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	6353      	str	r3, [r2, #52]	; 0x34
			stepper->status = SS_STARTING;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
	}
	return SERR_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	240002e0 	.word	0x240002e0
 8000e30:	42c80000 	.word	0x42c80000

08000e34 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2258      	movs	r2, #88	; 0x58
 8000e42:	fb02 f303 	mul.w	r3, r2, r3
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <Stepper_SetSpeed+0x54>)
 8000e48:	4413      	add	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	da04      	bge.n	8000e60 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	699a      	ldr	r2, [r3, #24]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5e:	e00c      	b.n	8000e7a <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	dd04      	ble.n	8000e74 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	69da      	ldr	r2, [r3, #28]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e72:	e002      	b.n	8000e7a <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	240002e0 	.word	0x240002e0

08000e8c <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681c      	ldr	r4, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe15 	bl	8000acc <Get_Value_Encoder>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f7ff fd1d 	bl	80008f8 <calculator>
 8000ebe:	eef0 7a40 	vmov.f32	s15, s0
 8000ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec6:	ee17 3a90 	vmov	r3, s15
 8000eca:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bfb8      	it	lt
 8000ed6:	425b      	neglt	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4610      	mov	r0, r2
 8000edc:	f7ff ffaa 	bl	8000e34 <Stepper_SetSpeed>
	if(input>0){
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	dd2c      	ble.n	8000f40 <Stepper_Direction+0xb4>
		if(stepper->number == 1){
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d109      	bne.n	8000f02 <Stepper_Direction+0x76>
			stepper->status = SS_RUNNING_BACKWARD;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	8a1b      	ldrh	r3, [r3, #16]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 2){
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d10b      	bne.n	8000f22 <Stepper_Direction+0x96>
			stepper->status = SS_RUNNING_FORWARD;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	8a1b      	ldrh	r3, [r3, #16]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	0412      	lsls	r2, r2, #16
 8000f20:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 3){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d138      	bne.n	8000f9c <Stepper_Direction+0x110>
			stepper->status = SS_RUNNING_FORWARD;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	8a1b      	ldrh	r3, [r3, #16]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
			stepper->status = SS_RUNNING_BACKWARD;
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
		}
	}
}
 8000f3e:	e02d      	b.n	8000f9c <Stepper_Direction+0x110>
		if(stepper->number == 1){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10b      	bne.n	8000f60 <Stepper_Direction+0xd4>
			stepper->status = SS_RUNNING_FORWARD;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	8a1b      	ldrh	r3, [r3, #16]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0412      	lsls	r2, r2, #16
 8000f5e:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d109      	bne.n	8000f7c <Stepper_Direction+0xf0>
			stepper->status = SS_RUNNING_BACKWARD;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	8a1b      	ldrh	r3, [r3, #16]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d10b      	bne.n	8000f9c <Stepper_Direction+0x110>
			stepper->status = SS_RUNNING_BACKWARD;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	8a1b      	ldrh	r3, [r3, #16]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	619a      	str	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fae:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <enable_Stepper_OE+0x14>)
 8000fb0:	f008 f842 	bl	8009038 <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58020400 	.word	0x58020400

08000fbc <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2258      	movs	r2, #88	; 0x58
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	4a23      	ldr	r2, [pc, #140]	; (800105c <Stepper_runStep+0xa0>)
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
	Stepper_currentPosition(num);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f904 	bl	80011e0 <Stepper_currentPosition>
	Stepper_currentPosition_real(num);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f91b 	bl	8001214 <Stepper_currentPosition_real>
	if(stepper->status != SS_STOPPED){
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b80      	cmp	r3, #128	; 0x80
 8000fe8:	d02b      	beq.n	8001042 <Stepper_runStep+0x86>
//		enable_Stepper_OE();
		if(stepper->home_status == 0){
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d12d      	bne.n	8001052 <Stepper_runStep+0x96>
			if(stepper->targetPosition - 4 <= stepper->currentPosition && stepper->currentPosition <= stepper->targetPosition + 4){
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffa:	1f1a      	subs	r2, r3, #4
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001000:	429a      	cmp	r2, r3
 8001002:	dc0f      	bgt.n	8001024 <Stepper_runStep+0x68>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100c:	3304      	adds	r3, #4
 800100e:	429a      	cmp	r2, r3
 8001010:	dc08      	bgt.n	8001024 <Stepper_runStep+0x68>
				HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f00b fe6f 	bl	800cd00 <HAL_TIM_PWM_Stop>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8001022:	e016      	b.n	8001052 <Stepper_runStep+0x96>
				Stepper_Direction(stepper);
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff ff31 	bl	8000e8c <Stepper_Direction>
				Stepper_SetStepTimer(stepper);
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f7ff fdb0 	bl	8000b90 <Stepper_SetStepTimer>
				HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f00b fd52 	bl	800cae4 <HAL_TIM_PWM_Start>
}
 8001040:	e007      	b.n	8001052 <Stepper_runStep+0x96>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f00b fe57 	bl	800cd00 <HAL_TIM_PWM_Stop>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	240002e0 	.word	0x240002e0

08001060 <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2258      	movs	r2, #88	; 0x58
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <Stepper_StartStop+0x40>)
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d104      	bne.n	800108a <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2204      	movs	r2, #4
 8001084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8001088:	e003      	b.n	8001092 <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	240002e0 	.word	0x240002e0

080010a4 <Stepper_updateHome>:
stepper_status Stepper_status(int num){
	stepper_state * stepper = &steppers[num];
	return stepper->status;
}

void Stepper_updateHome(int num, int value){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2258      	movs	r2, #88	; 0x58
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <Stepper_updateHome+0x84>)
 80010b8:	4413      	add	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 1){
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d12b      	bne.n	8001120 <Stepper_updateHome+0x7c>
		if(num == 1){
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d108      	bne.n	80010e0 <Stepper_updateHome+0x3c>
			Set_Encoder_Zero(num, OFFSET1);
 80010ce:	f248 5116 	movw	r1, #34070	; 0x8516
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fd16 	bl	8000b04 <Set_Encoder_Zero>
			Stepper_StartStop(1, 0);
 80010d8:	2100      	movs	r1, #0
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff ffc0 	bl	8001060 <Stepper_StartStop>
		}
		if(num == 2){
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d108      	bne.n	80010f8 <Stepper_updateHome+0x54>
			Set_Encoder_Zero(num, OFFSET2);
 80010e6:	f245 71ee 	movw	r1, #22510	; 0x57ee
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fd0a 	bl	8000b04 <Set_Encoder_Zero>
			Stepper_StartStop(2, 0);
 80010f0:	2100      	movs	r1, #0
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff ffb4 	bl	8001060 <Stepper_StartStop>
		}
		if(num == 3){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d108      	bne.n	8001110 <Stepper_updateHome+0x6c>
			Set_Encoder_Zero(num, OFFSET3);
 80010fe:	f247 5130 	movw	r1, #30000	; 0x7530
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fcfe 	bl	8000b04 <Set_Encoder_Zero>
			Stepper_StartStop(3, 0);
 8001108:	2100      	movs	r1, #0
 800110a:	2003      	movs	r0, #3
 800110c:	f7ff ffa8 	bl	8001060 <Stepper_StartStop>
////			Stepper_StartStop(1, 1);
////			Stepper_StartStop(2, 1);
////			Stepper_StartStop(3, 1);
////		}
//		Set_Encoder_Zero(num, OFFSET);
		stepper->home_status = value;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b25a      	sxtb	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Stepper_DefaultState(num);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fd78 	bl	8000c10 <Stepper_DefaultState>
//		stepper -> status = SS_STARTING;
	}
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	240002e0 	.word	0x240002e0

0800112c <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper-> home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2258      	movs	r2, #88	; 0x58
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	4a26      	ldr	r2, [pc, #152]	; (80011dc <Stepper_SetHome+0xb0>)
 8001142:	4413      	add	r3, r2
 8001144:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	4619      	mov	r1, r3
 8001150:	4610      	mov	r0, r2
 8001152:	f00b fcc7 	bl	800cae4 <HAL_TIM_PWM_Start>
	if(on){
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d03b      	beq.n	80011d4 <Stepper_SetHome+0xa8>
		if(num == 3){
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d11d      	bne.n	800119e <Stepper_SetHome+0x72>
			stepper-> home_status = 1;
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2219      	movs	r2, #25
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	8a1b      	ldrh	r3, [r3, #16]
 8001190:	b29b      	uxth	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0412      	lsls	r2, r2, #16
 800119a:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
			stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
		}
	}
}
 800119c:	e01a      	b.n	80011d4 <Stepper_SetHome+0xa8>
			stepper-> home_status = 1;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2219      	movs	r2, #25
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
			stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	8a1b      	ldrh	r3, [r3, #16]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	619a      	str	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	240002e0 	.word	0x240002e0

080011e0 <Stepper_currentPosition>:

int32_t Stepper_currentPosition(int num){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	//update current real encoder of robot
	stepper_state * stepper = &steppers[num];
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2258      	movs	r2, #88	; 0x58
 80011ec:	fb02 f303 	mul.w	r3, r2, r3
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <Stepper_currentPosition+0x30>)
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition = Get_Value_Encoder(num);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fc68 	bl	8000acc <Get_Value_Encoder>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
	return stepper->currentPosition;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	240002e0 	.word	0x240002e0

08001214 <Stepper_currentPosition_real>:

float_t Stepper_currentPosition_real(int num){
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	//update current real position of robot
	stepper_state * stepper = &steppers[num];
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2258      	movs	r2, #88	; 0x58
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <Stepper_currentPosition_real+0x50>)
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
//	stepper->currentPosition_real = encoder_to_joint(num, abs(Stepper_currentPosition(num)-OFFSET))/100.00;
	stepper->currentPosition_real = encoder_to_joint(num, Stepper_currentPosition(num)-OFFSET)/100.00;
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffd8 	bl	80011e0 <Stepper_currentPosition>
 8001230:	4602      	mov	r2, r0
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <Stepper_currentPosition_real+0x54>)
 8001234:	4413      	add	r3, r2
 8001236:	4619      	mov	r1, r3
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f819 	bl	8001270 <encoder_to_joint>
 800123e:	eeb0 7a40 	vmov.f32	s14, s0
 8001242:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800126c <Stepper_currentPosition_real+0x58>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	return stepper->currentPosition_real;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	ee07 3a90 	vmov	s15, r3
}
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240002e0 	.word	0x240002e0
 8001268:	ffff8ad0 	.word	0xffff8ad0
 800126c:	42c80000 	.word	0x42c80000

08001270 <encoder_to_joint>:
	stepper_state * stepper = &steppers[num];
	return stepper->targetPosition_real;
}

// convert encoder to degree and scalar
float_t encoder_to_joint(int num, int32_t value){
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	//convert to mm or degree
	float_t ans;
	if(num == 1){
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d111      	bne.n	80012a4 <encoder_to_joint+0x34>
		ans = value*ENCODER1_TO_ANGLE;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800128a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001310 <encoder_to_joint+0xa0>
 800128e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001292:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001318 <encoder_to_joint+0xa8>
 8001296:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800129a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800129e:	edc7 7a03 	vstr	s15, [r7, #12]
 80012a2:	e028      	b.n	80012f6 <encoder_to_joint+0x86>
	}
	else if(num == 2){
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d111      	bne.n	80012ce <encoder_to_joint+0x5e>
		ans = value*ENCODER2_TO_ANGLE;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012b4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001310 <encoder_to_joint+0xa0>
 80012b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012bc:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001320 <encoder_to_joint+0xb0>
 80012c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012c8:	edc7 7a03 	vstr	s15, [r7, #12]
 80012cc:	e013      	b.n	80012f6 <encoder_to_joint+0x86>
	}
	else if(num == 3){
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d110      	bne.n	80012f6 <encoder_to_joint+0x86>
		ans = value*ENCODER3_TO_SCALAR;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012de:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001328 <encoder_to_joint+0xb8>
 80012e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012e6:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001330 <encoder_to_joint+0xc0>
 80012ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012f2:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ans;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	ee07 3a90 	vmov	s15, r3
}
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	f3af 8000 	nop.w
 8001310:	00000000 	.word	0x00000000
 8001314:	40e19400 	.word	0x40e19400
 8001318:	00000000 	.word	0x00000000
 800131c:	40bf8700 	.word	0x40bf8700
 8001320:	00000000 	.word	0x00000000
 8001324:	40ce0480 	.word	0x40ce0480
 8001328:	00000000 	.word	0x00000000
 800132c:	40c4cd00 	.word	0x40c4cd00
 8001330:	00000000 	.word	0x00000000
 8001334:	40d21880 	.word	0x40d21880

08001338 <joint_to_encoder>:

// convert degree and scalar to encoder
int32_t joint_to_encoder(int num, float_t value){
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	ed87 0a00 	vstr	s0, [r7]
	//convert to encoder count
	int32_t ans;
	if(num == 1){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d111      	bne.n	800136e <joint_to_encoder+0x36>
		ans = value*ANGLE_TO_ENCODER1;
 800134a:	edd7 7a00 	vldr	s15, [r7]
 800134e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001352:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80013d0 <joint_to_encoder+0x98>
 8001356:	ee27 6b06 	vmul.f64	d6, d7, d6
 800135a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80013d8 <joint_to_encoder+0xa0>
 800135e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001362:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001366:	ee17 3a90 	vmov	r3, s15
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	e028      	b.n	80013c0 <joint_to_encoder+0x88>
	}
	else if(num == 2){
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d111      	bne.n	8001398 <joint_to_encoder+0x60>
		ans = value*ANGLE_TO_ENCODER2;
 8001374:	edd7 7a00 	vldr	s15, [r7]
 8001378:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800137c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80013e0 <joint_to_encoder+0xa8>
 8001380:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001384:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80013d8 <joint_to_encoder+0xa0>
 8001388:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800138c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001390:	ee17 3a90 	vmov	r3, s15
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e013      	b.n	80013c0 <joint_to_encoder+0x88>
	}
	else if(num == 3){
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b03      	cmp	r3, #3
 800139c:	d110      	bne.n	80013c0 <joint_to_encoder+0x88>
		ans = value*SCALAR_TO_ENCODER3;
 800139e:	edd7 7a00 	vldr	s15, [r7]
 80013a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80013e8 <joint_to_encoder+0xb0>
 80013aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013ae:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80013f0 <joint_to_encoder+0xb8>
 80013b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013ba:	ee17 3a90 	vmov	r3, s15
 80013be:	60fb      	str	r3, [r7, #12]
	}
	return ans;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40bf8700 	.word	0x40bf8700
 80013d8:	00000000 	.word	0x00000000
 80013dc:	40e19400 	.word	0x40e19400
 80013e0:	00000000 	.word	0x00000000
 80013e4:	40ce0480 	.word	0x40ce0480
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40d21880 	.word	0x40d21880
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40c4cd00 	.word	0x40c4cd00

080013f8 <to_degree>:

double to_degree(double value){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0b00 	vstr	d0, [r7]
	return value * 180.0 / M_PI;
 8001402:	ed97 7b00 	vldr	d7, [r7]
 8001406:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001428 <to_degree+0x30>
 800140a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800140e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001430 <to_degree+0x38>
 8001412:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001416:	eeb0 7b45 	vmov.f64	d7, d5
}
 800141a:	eeb0 0b47 	vmov.f64	d0, d7
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	00000000 	.word	0x00000000
 800142c:	40668000 	.word	0x40668000
 8001430:	54442d18 	.word	0x54442d18
 8001434:	400921fb 	.word	0x400921fb

08001438 <to_radian>:

double to_radian(double value){
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0b00 	vstr	d0, [r7]
	return value * M_PI / 180.0;
 8001442:	ed97 7b00 	vldr	d7, [r7]
 8001446:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001468 <to_radian+0x30>
 800144a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800144e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001470 <to_radian+0x38>
 8001452:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001456:	eeb0 7b45 	vmov.f64	d7, d5
}
 800145a:	eeb0 0b47 	vmov.f64	d0, d7
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	54442d18 	.word	0x54442d18
 800146c:	400921fb 	.word	0x400921fb
 8001470:	00000000 	.word	0x00000000
 8001474:	40668000 	.word	0x40668000

08001478 <Serial_Setup>:
#include "TRAJECTORY.h"
#include "TRAJECTORY_CIRCLE.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2258      	movs	r2, #88	; 0x58
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <Serial_Setup+0x3c>)
 800148c:	4413      	add	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6858      	ldr	r0, [r3, #4]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3335      	adds	r3, #53	; 0x35
 80014a4:	220e      	movs	r2, #14
 80014a6:	4619      	mov	r1, r3
 80014a8:	f00c ff8c 	bl	800e3c4 <HAL_UART_Receive_DMA>
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	240006bc 	.word	0x240006bc

080014b8 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	e00b      	b.n	80014e2 <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	3326      	adds	r3, #38	; 0x26
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	4413      	add	r3, r2
 80014da:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3301      	adds	r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80014e8:	3304      	adds	r3, #4
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	ddec      	ble.n	80014ca <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	b2db      	uxtb	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <Servo_gripperChess>:
//
//	}
//	return
//}

void Servo_gripperChess(int num, uint16_t value){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2258      	movs	r2, #88	; 0x58
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <Servo_gripperChess+0x6c>)
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2202      	movs	r2, #2
 800155a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2202      	movs	r2, #2
 8001562:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2214      	movs	r2, #20
 800156a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ffc7 	bl	8001504 <SHIFT_TO_LSB>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ffcb 	bl	800151e <SHIFT_TO_MSB>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f87a 	bl	800168c <iWrite>
	sendIPacket(serial);
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 f8c6 	bl	800172a <sendIPacket>
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	240006bc 	.word	0x240006bc

080015ac <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2258      	movs	r2, #88	; 0x58
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <Servo_tragetPos+0x6c>)
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2202      	movs	r2, #2
 80015ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2202      	movs	r2, #2
 80015d2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2220      	movs	r2, #32
 80015da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff8f 	bl	8001504 <SHIFT_TO_LSB>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff93 	bl	800151e <SHIFT_TO_MSB>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f842 	bl	800168c <iWrite>
	sendIPacket(serial);
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f88e 	bl	800172a <sendIPacket>
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	240006bc 	.word	0x240006bc

0800161c <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2258      	movs	r2, #88	; 0x58
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	4a15      	ldr	r2, [pc, #84]	; (8001688 <Servo_StartStop+0x6c>)
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2202      	movs	r2, #2
 800163a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2202      	movs	r2, #2
 8001642:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2211      	movs	r2, #17
 800164a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff57 	bl	8001504 <SHIFT_TO_LSB>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff5b 	bl	800151e <SHIFT_TO_MSB>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f80a 	bl	800168c <iWrite>
	sendIPacket(serial);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 f856 	bl	800172a <sendIPacket>
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	240006bc 	.word	0x240006bc

0800168c <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	22fd      	movs	r2, #253	; 0xfd
 80016a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80016aa:	3303      	adds	r3, #3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 80016cc:	2305      	movs	r3, #5
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e00e      	b.n	80016f0 <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3b05      	subs	r3, #5
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	3326      	adds	r3, #38	; 0x26
 80016e6:	460a      	mov	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3301      	adds	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80016f6:	3304      	adds	r3, #4
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dde9      	ble.n	80016d2 <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff feda 	bl	80014b8 <Cal_sum>
 8001704:	4603      	mov	r3, r0
 8001706:	4619      	mov	r1, r3
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	3326      	adds	r3, #38	; 0x26
 8001710:	460a      	mov	r2, r1
 8001712:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <sendIPacket>:

void sendIPacket(serial_state * serial){
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6858      	ldr	r0, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001742:	b29a      	uxth	r2, r3
 8001744:	230a      	movs	r3, #10
 8001746:	f00c fda7 	bl	800e298 <HAL_UART_Transmit>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2258      	movs	r2, #88	; 0x58
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <data_in+0x2c>)
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	240006bc 	.word	0x240006bc

08001784 <selectPacket>:

void selectPacket(int num){
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2258      	movs	r2, #88	; 0x58
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	4abc      	ldr	r2, [pc, #752]	; (8001a88 <selectPacket+0x304>)
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 8266 	beq.w	8001c72 <selectPacket+0x4ee>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ac:	2bff      	cmp	r3, #255	; 0xff
 80017ae:	f040 8257 	bne.w	8001c60 <selectPacket+0x4dc>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80017b8:	2bfd      	cmp	r3, #253	; 0xfd
 80017ba:	f040 8251 	bne.w	8001c60 <selectPacket+0x4dc>
			switch (serial->rPacket[3]) {
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	f000 824d 	beq.w	8001c64 <selectPacket+0x4e0>
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	f300 824c 	bgt.w	8001c68 <selectPacket+0x4e4>
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d002      	beq.n	80017da <selectPacket+0x56>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d009      	beq.n	80017ec <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 80017d8:	e246      	b.n	8001c68 <selectPacket+0x4e4>
				switch (serial->rPacket[4]) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017e0:	2b15      	cmp	r3, #21
 80017e2:	d001      	beq.n	80017e8 <selectPacket+0x64>
 80017e4:	2b16      	cmp	r3, #22
					break;
 80017e6:	e000      	b.n	80017ea <selectPacket+0x66>
					break;
 80017e8:	bf00      	nop
				break;
 80017ea:	e23e      	b.n	8001c6a <selectPacket+0x4e6>
					switch (serial->rPacket[4]) {
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017f2:	3b02      	subs	r3, #2
 80017f4:	2b15      	cmp	r3, #21
 80017f6:	f200 8231 	bhi.w	8001c5c <selectPacket+0x4d8>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <selectPacket+0x7c>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001c5d 	.word	0x08001c5d
 8001804:	08001859 	.word	0x08001859
 8001808:	080018c1 	.word	0x080018c1
 800180c:	08001929 	.word	0x08001929
 8001810:	0800198b 	.word	0x0800198b
 8001814:	08001c5d 	.word	0x08001c5d
 8001818:	08001c5d 	.word	0x08001c5d
 800181c:	08001c5d 	.word	0x08001c5d
 8001820:	08001c5d 	.word	0x08001c5d
 8001824:	08001c5d 	.word	0x08001c5d
 8001828:	08001c5d 	.word	0x08001c5d
 800182c:	08001c5d 	.word	0x08001c5d
 8001830:	08001c5d 	.word	0x08001c5d
 8001834:	08001c5d 	.word	0x08001c5d
 8001838:	080019ed 	.word	0x080019ed
 800183c:	08001a3d 	.word	0x08001a3d
 8001840:	08001a91 	.word	0x08001a91
 8001844:	08001b4f 	.word	0x08001b4f
 8001848:	08001c3b 	.word	0x08001c3b
 800184c:	08001c5d 	.word	0x08001c5d
 8001850:	08001c5d 	.word	0x08001c5d
 8001854:	08001bc5 	.word	0x08001bc5
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001866:	4413      	add	r3, r2
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff f9fd 	bl	8000c74 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001888:	4413      	add	r3, r2
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	2002      	movs	r0, #2
 8001898:	f7ff f9ec 	bl	8000c74 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80018aa:	4413      	add	r3, r2
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	2003      	movs	r0, #3
 80018ba:	f7ff f9db 	bl	8000c74 <Stepper_SetMinPosition>
						break;
 80018be:	e1ce      	b.n	8001c5e <selectPacket+0x4da>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80018ce:	4413      	add	r3, r2
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	2001      	movs	r0, #1
 80018de:	f7ff f9e3 	bl	8000ca8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80018f0:	4413      	add	r3, r2
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	eeb0 0a67 	vmov.f32	s0, s15
 80018fe:	2002      	movs	r0, #2
 8001900:	f7ff f9d2 	bl	8000ca8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001912:	4413      	add	r3, r2
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	2003      	movs	r0, #3
 8001922:	f7ff f9c1 	bl	8000ca8 <Stepper_SetMaxPosition>
						break;
 8001926:	e19a      	b.n	8001c5e <selectPacket+0x4da>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800192e:	b29b      	uxth	r3, r3
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800193a:	b29b      	uxth	r3, r3
 800193c:	4413      	add	r3, r2
 800193e:	b29b      	uxth	r3, r3
 8001940:	4619      	mov	r1, r3
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff f9ca 	bl	8000cdc <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194e:	b29b      	uxth	r3, r3
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195a:	b29b      	uxth	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	4619      	mov	r1, r3
 8001962:	2002      	movs	r0, #2
 8001964:	f7ff f9ba 	bl	8000cdc <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800196e:	b29b      	uxth	r3, r3
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800197a:	b29b      	uxth	r3, r3
 800197c:	4413      	add	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	4619      	mov	r1, r3
 8001982:	2003      	movs	r0, #3
 8001984:	f7ff f9aa 	bl	8000cdc <Stepper_SetMinSpeed>
						break;
 8001988:	e169      	b.n	8001c5e <selectPacket+0x4da>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001990:	b29b      	uxth	r3, r3
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800199c:	b29b      	uxth	r3, r3
 800199e:	4413      	add	r3, r2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff f9b3 	bl	8000d10 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4413      	add	r3, r2
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	2002      	movs	r0, #2
 80019c6:	f7ff f9a3 	bl	8000d10 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4413      	add	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	2003      	movs	r0, #3
 80019e6:	f7ff f993 	bl	8000d10 <Stepper_SetMaxSpeed>
						break;
 80019ea:	e138      	b.n	8001c5e <selectPacket+0x4da>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80019fa:	4413      	add	r3, r2
 80019fc:	461a      	mov	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fb93 	bl	800112c <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001a14:	4413      	add	r3, r2
 8001a16:	461a      	mov	r2, r3
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f7ff fb86 	bl	800112c <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001a2e:	4413      	add	r3, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	2003      	movs	r0, #3
 8001a36:	f7ff fb79 	bl	800112c <Stepper_SetHome>
						break;
 8001a3a:	e110      	b.n	8001c5e <selectPacket+0x4da>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a42:	4619      	mov	r1, r3
 8001a44:	2001      	movs	r0, #1
 8001a46:	f7ff fb0b 	bl	8001060 <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a50:	4619      	mov	r1, r3
 8001a52:	2002      	movs	r0, #2
 8001a54:	f7ff fb04 	bl	8001060 <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a5e:	4619      	mov	r1, r3
 8001a60:	2003      	movs	r0, #3
 8001a62:	f7ff fafd 	bl	8001060 <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7ff fdcb 	bl	800161c <Servo_StartStop>
						break;
 8001a86:	e0ea      	b.n	8001c5e <selectPacket+0x4da>
 8001a88:	240006bc 	.word	0x240006bc
 8001a8c:	42c80000 	.word	0x42c80000
						Stepper_SetTraget(1, ((float_t)(int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]))/100.00);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	ee07 3a90 	vmov	s15, r3
 8001aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab2:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 8001a8c <selectPacket+0x308>
 8001ab6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aba:	eeb0 0a47 	vmov.f32	s0, s14
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff f940 	bl	8000d44 <Stepper_SetTraget>
						Stepper_SetTraget(2, ((float_t)(int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]))/100.00);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae6:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 8001a8c <selectPacket+0x308>
 8001aea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aee:	eeb0 0a47 	vmov.f32	s0, s14
 8001af2:	2002      	movs	r0, #2
 8001af4:	f7ff f926 	bl	8000d44 <Stepper_SetTraget>
						Stepper_SetTraget(3, ((float_t)(int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]))/100.00);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 8001a8c <selectPacket+0x308>
 8001b1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b22:	eeb0 0a47 	vmov.f32	s0, s14
 8001b26:	2003      	movs	r0, #3
 8001b28:	f7ff f90c 	bl	8000d44 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4619      	mov	r1, r3
 8001b46:	2002      	movs	r0, #2
 8001b48:	f7ff fd30 	bl	80015ac <Servo_tragetPos>
						break;
 8001b4c:	e087      	b.n	8001c5e <selectPacket+0x4da>
						updateJoint((int16_t)((serial->rPacket[12]<<8) + serial->rPacket[11]), (int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]), (int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]), (int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]));
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	461c      	mov	r4, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	f000 f85f 	bl	8001c80 <updateJoint>
						break;
 8001bc2:	e04c      	b.n	8001c5e <selectPacket+0x4da>
						update_circle((int16_t)((serial->rPacket[12]<<8) + serial->rPacket[11]), (int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]), (int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]), (int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]));
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	461c      	mov	r4, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	4622      	mov	r2, r4
 8001c34:	f000 f928 	bl	8001e88 <update_circle>
						break;
 8001c38:	e011      	b.n	8001c5e <selectPacket+0x4da>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7ff fc71 	bl	800153c <Servo_gripperChess>
						break;
 8001c5a:	e000      	b.n	8001c5e <selectPacket+0x4da>
						break;
 8001c5c:	bf00      	nop
					break;
 8001c5e:	e004      	b.n	8001c6a <selectPacket+0x4e6>
			}
		}
 8001c60:	bf00      	nop
 8001c62:	e002      	b.n	8001c6a <selectPacket+0x4e6>
						break;
 8001c64:	bf00      	nop
 8001c66:	e000      	b.n	8001c6a <selectPacket+0x4e6>
						break;
 8001c68:	bf00      	nop
		serial->state = 0;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	0000      	movs	r0, r0
	...

08001c80 <updateJoint>:
//
//double to_radian(double value){
//	return value * M_PI / 180.0;
//}

void updateJoint(int32_t roll, int32_t x, int32_t y, int32_t z){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b096      	sub	sp, #88	; 0x58
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
	taskspace_state * taskspace = &taskspaces[0];
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <updateJoint+0x200>)
 8001c90:	657b      	str	r3, [r7, #84]	; 0x54

//	receive real position convert degree to radian and use scalar
	taskspace->qi1 = to_radian((double)Stepper_currentPosition_real(1));
 8001c92:	2001      	movs	r0, #1
 8001c94:	f7ff fabe 	bl	8001214 <Stepper_currentPosition_real>
 8001c98:	eef0 7a40 	vmov.f32	s15, s0
 8001c9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca4:	f7ff fbc8 	bl	8001438 <to_radian>
 8001ca8:	eeb0 7b40 	vmov.f64	d7, d0
 8001cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cae:	ed83 7b08 	vstr	d7, [r3, #32]
	taskspace->qi2 = to_radian((double)Stepper_currentPosition_real(2));
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f7ff faae 	bl	8001214 <Stepper_currentPosition_real>
 8001cb8:	eef0 7a40 	vmov.f32	s15, s0
 8001cbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cc0:	eeb0 0b47 	vmov.f64	d0, d7
 8001cc4:	f7ff fbb8 	bl	8001438 <to_radian>
 8001cc8:	eeb0 7b40 	vmov.f64	d7, d0
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cce:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	taskspace->qi3 = (double)Stepper_currentPosition_real(3);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f7ff fa9e 	bl	8001214 <Stepper_currentPosition_real>
 8001cd8:	eef0 7a40 	vmov.f32	s15, s0
 8001cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	taskspace->qi4 = to_radian((double)0.0);
 8001ce6:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8001e70 <updateJoint+0x1f0>
 8001cea:	f7ff fba5 	bl	8001438 <to_radian>
 8001cee:	eeb0 7b40 	vmov.f64	d7, d0
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	double qi_all[4] = {taskspace->qi1, taskspace->qi2, taskspace->qi3, taskspace->qi4};
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001cfe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d04:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d08:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001d1c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

//	cartesian
	// keep data
	taskspace->d1 = (double)(roll/100.00); //divider 100 to scale down
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d2a:	ed9f 5b53 	vldr	d5, [pc, #332]	; 8001e78 <updateJoint+0x1f8>
 8001d2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d34:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	taskspace->d2 = (double)(x/100.00);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d42:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8001e78 <updateJoint+0x1f8>
 8001d46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4c:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	taskspace->d3 = (double)(y/100.00);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d5a:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001e78 <updateJoint+0x1f8>
 8001d5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d64:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	taskspace->d4 = (double)(z/100.00);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d72:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001e78 <updateJoint+0x1f8>
 8001d76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7c:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	double delta[4] = {taskspace->d1, taskspace->d2, taskspace->d3, taskspace->d4};
 8001d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d82:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001d86:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001d90:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d96:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001d9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001da4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	// convert xyz roll to q
	cartesianJog(qi_all, delta);
 8001da8:	f107 0210 	add.w	r2, r7, #16
 8001dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f8c0 	bl	8001f38 <cartesianJog>

	// get q from cartesian
	taskspace->q1 = get_cartesian_q1();
 8001db8:	f000 f9e8 	bl	800218c <get_cartesian_q1>
 8001dbc:	eeb0 7b40 	vmov.f64	d7, d0
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc2:	ed83 7b00 	vstr	d7, [r3]
	taskspace->q2 = get_cartesian_q2();
 8001dc6:	f000 f9f5 	bl	80021b4 <get_cartesian_q2>
 8001dca:	eeb0 7b40 	vmov.f64	d7, d0
 8001dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd0:	ed83 7b02 	vstr	d7, [r3, #8]
	taskspace->q3 = get_cartesian_q3();
 8001dd4:	f000 fa02 	bl	80021dc <get_cartesian_q3>
 8001dd8:	eeb0 7b40 	vmov.f64	d7, d0
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dde:	ed83 7b04 	vstr	d7, [r3, #16]
	taskspace->q4 = get_cartesian_q4();
 8001de2:	f000 fa0f 	bl	8002204 <get_cartesian_q4>
 8001de6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dec:	ed83 7b06 	vstr	d7, [r3, #24]
	// check q from cartesian by FK
//	double q[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
//	forwardKinematic(q);

	// set q to run stepper
	Stepper_SetTraget(1, to_degree(taskspace->q1));
 8001df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df2:	ed93 7b00 	vldr	d7, [r3]
 8001df6:	eeb0 0b47 	vmov.f64	d0, d7
 8001dfa:	f7ff fafd 	bl	80013f8 <to_degree>
 8001dfe:	eeb0 7b40 	vmov.f64	d7, d0
 8001e02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e06:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7fe ff9a 	bl	8000d44 <Stepper_SetTraget>
	Stepper_SetTraget(2, to_degree(taskspace->q2));
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	ed93 7b02 	vldr	d7, [r3, #8]
 8001e16:	eeb0 0b47 	vmov.f64	d0, d7
 8001e1a:	f7ff faed 	bl	80013f8 <to_degree>
 8001e1e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e26:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f7fe ff8a 	bl	8000d44 <Stepper_SetTraget>
	Stepper_SetTraget(3, taskspace->q3);
 8001e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e32:	ed93 7b04 	vldr	d7, [r3, #16]
 8001e36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f7fe ff80 	bl	8000d44 <Stepper_SetTraget>
	Servo_tragetPos(2, to_degree(taskspace->q4));
 8001e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e46:	ed93 7b06 	vldr	d7, [r3, #24]
 8001e4a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e4e:	f7ff fad3 	bl	80013f8 <to_degree>
 8001e52:	eeb0 7b40 	vmov.f64	d7, d0
 8001e56:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e5a:	ee17 3a90 	vmov	r3, s15
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4619      	mov	r1, r3
 8001e62:	2002      	movs	r0, #2
 8001e64:	f7ff fba2 	bl	80015ac <Servo_tragetPos>
//	taskspace->q3 = (double)Stepper_targetPosition_real(3);
//	taskspace->q4 = to_radian((double)0.0);
//	double qq[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
//	forwardKinematic(qq);

}
 8001e68:	bf00      	nop
 8001e6a:	3758      	adds	r7, #88	; 0x58
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
	...
 8001e7c:	40590000 	.word	0x40590000
 8001e80:	24000498 	.word	0x24000498
 8001e84:	00000000 	.word	0x00000000

08001e88 <update_circle>:

volatile int on_robot = 0;

static trajectory_circle_state trajectory_circles[NUM_TRAJECTORY_CIRCLE];

void update_circle(int32_t row, int32_t column, int32_t w, int32_t t){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
	trajectory_circle_state * trajectory_circle = &trajectory_circles[0];
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <update_circle+0xa0>)
 8001e98:	617b      	str	r3, [r7, #20]

	updateChess(row, column);
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7fe fb97 	bl	80005d0 <updateChess>

	trajectory_circle->x_circle = 200.00;
 8001ea2:	6979      	ldr	r1, [r7, #20]
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <update_circle+0xa4>)
 8001eaa:	e9c1 2300 	strd	r2, r3, [r1]
	trajectory_circle->y_circle = 200.00;
 8001eae:	6979      	ldr	r1, [r7, #20]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <update_circle+0xa4>)
 8001eb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	trajectory_circle->r_circle = get_radius_circle();
 8001eba:	f7fe fcd5 	bl	8000868 <get_radius_circle>
 8001ebe:	eeb0 7b40 	vmov.f64	d7, d0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	ed83 7b08 	vstr	d7, [r3, #32]
	trajectory_circle->w_circle = w/100.00;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ed2:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8001f18 <update_circle+0x90>
 8001ed6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	trajectory_circle->t_circle = t/10000.00;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001eea:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001f20 <update_circle+0x98>
 8001eee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	trajectory_circle->d_circle = get_degree_chess();
 8001ef8:	f7fe fca2 	bl	8000840 <get_degree_chess>
 8001efc:	eeb0 7b40 	vmov.f64	d7, d0
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	on_robot = 1;
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <update_circle+0xa8>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	f3af 8000 	nop.w
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	40590000 	.word	0x40590000
 8001f20:	00000000 	.word	0x00000000
 8001f24:	40c38800 	.word	0x40c38800
 8001f28:	24000510 	.word	0x24000510
 8001f2c:	40690000 	.word	0x40690000
 8001f30:	24000508 	.word	0x24000508
 8001f34:	00000000 	.word	0x00000000

08001f38 <cartesianJog>:
 */

static cartesian_state cartesians[NUM_CARTESIAN];

void cartesianJog(const double qi[4], const double deltak[4])
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	ed2d 8b04 	vpush	{d8-d9}
 8001f3e:	b08e      	sub	sp, #56	; 0x38
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	cartesian_state * cartesian = &cartesians[0];
 8001f46:	4b90      	ldr	r3, [pc, #576]	; (8002188 <cartesianJog+0x250>)
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
	double b_qf_tmp;
	double c_qf_tmp;
	double d_qf_tmp;
	double qf_tmp;
	double qf_tmp_tmp;
	qf_tmp = sin(qi[1]);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3308      	adds	r3, #8
 8001f4e:	ed93 7b00 	vldr	d7, [r3]
 8001f52:	eeb0 0b47 	vmov.f64	d0, d7
 8001f56:	f00e ff83 	bl	8010e60 <sin>
 8001f5a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	qf_tmp_tmp = qi[0] + qi[1];
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	ed93 6b00 	vldr	d6, [r3]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3308      	adds	r3, #8
 8001f68:	ed93 7b00 	vldr	d7, [r3]
 8001f6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f70:	ed87 7b08 	vstr	d7, [r7, #32]
	b_qf_tmp = cos(qf_tmp_tmp);
 8001f74:	ed97 0b08 	vldr	d0, [r7, #32]
 8001f78:	f00e ff2a 	bl	8010dd0 <cos>
 8001f7c:	ed87 0b06 	vstr	d0, [r7, #24]
	qf_tmp_tmp = sin(qf_tmp_tmp);
 8001f80:	ed97 0b08 	vldr	d0, [r7, #32]
 8001f84:	f00e ff6c 	bl	8010e60 <sin>
 8001f88:	ed87 0b08 	vstr	d0, [r7, #32]
	c_qf_tmp = cos(qi[0]);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	ed93 7b00 	vldr	d7, [r3]
 8001f92:	eeb0 0b47 	vmov.f64	d0, d7
 8001f96:	f00e ff1b 	bl	8010dd0 <cos>
 8001f9a:	ed87 0b04 	vstr	d0, [r7, #16]
	d_qf_tmp = sin(qi[0]);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	ed93 7b00 	vldr	d7, [r3]
 8001fa4:	eeb0 0b47 	vmov.f64	d0, d7
 8001fa8:	f00e ff5a 	bl	8010e60 <sin>
 8001fac:	ed87 0b02 	vstr	d0, [r7, #8]

	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] *
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	ed93 6b00 	vldr	d6, [r3]
 8001fb8:	ed97 7b06 	vldr	d7, [r7, #24]
 8001fbc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	3310      	adds	r3, #16
 8001fc4:	ed93 5b00 	vldr	d5, [r3]
 8001fc8:	ed97 7b08 	vldr	d7, [r7, #32]
 8001fcc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	ed93 7b00 	vldr	d7, [r3]
 8001fda:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8002160 <cartesianJog+0x228>
 8001fde:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001fe2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001fe6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fea:	ee36 5b07 	vadd.f64	d5, d6, d7
	           qf_tmp) / (248.0 * qf_tmp);
 8001fee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ff2:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8002160 <cartesianJog+0x228>
 8001ff6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ffa:	ee85 7b06 	vdiv.f64	d7, d5, d6
	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] *
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	ed83 7b00 	vstr	d7, [r3]
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3308      	adds	r3, #8
 8002008:	ed93 6b00 	vldr	d6, [r3]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	3308      	adds	r3, #8
 8002010:	ed93 7b00 	vldr	d7, [r3]
 8002014:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8002168 <cartesianJog+0x230>
 8002018:	ee27 5b05 	vmul.f64	d5, d7, d5
 800201c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002020:	ed9f 4b53 	vldr	d4, [pc, #332]	; 8002170 <cartesianJog+0x238>
 8002024:	ee27 7b04 	vmul.f64	d7, d7, d4
 8002028:	ed9f 3b53 	vldr	d3, [pc, #332]	; 8002178 <cartesianJog+0x240>
 800202c:	ee87 4b03 	vdiv.f64	d4, d7, d3
            248.0 * c_qf_tmp) / (7.038012412301149E+15 * qf_tmp)) -
 8002030:	ed97 7b04 	vldr	d7, [r7, #16]
 8002034:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8002160 <cartesianJog+0x228>
 8002038:	ee27 7b03 	vmul.f64	d7, d7, d3
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 800203c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8002040:	ee25 4b07 	vmul.f64	d4, d5, d7
            248.0 * c_qf_tmp) / (7.038012412301149E+15 * qf_tmp)) -
 8002044:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002048:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8002180 <cartesianJog+0x248>
 800204c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002050:	ee84 7b05 	vdiv.f64	d7, d4, d5
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 8002054:	ee36 8b47 	vsub.f64	d8, d6, d7
    6.8719476736E+10 * deltak[2] * (41297.0 * qf_tmp_tmp / 100.0 + 248.0 *
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	3310      	adds	r3, #16
 800205c:	ed93 7b00 	vldr	d7, [r3]
 8002060:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8002168 <cartesianJog+0x230>
 8002064:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002068:	ed97 7b08 	vldr	d7, [r7, #32]
 800206c:	ed9f 5b40 	vldr	d5, [pc, #256]	; 8002170 <cartesianJog+0x238>
 8002070:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002074:	ed9f 4b40 	vldr	d4, [pc, #256]	; 8002178 <cartesianJog+0x240>
 8002078:	ee87 5b04 	vdiv.f64	d5, d7, d4
 800207c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002080:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8002160 <cartesianJog+0x228>
 8002084:	ee27 7b04 	vmul.f64	d7, d7, d4
 8002088:	ee35 7b07 	vadd.f64	d7, d5, d7
 800208c:	ee26 9b07 	vmul.f64	d9, d6, d7
    d_qf_tmp) / (7.038012412301149E+15 * sin(qi[1]));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3308      	adds	r3, #8
 8002094:	ed93 7b00 	vldr	d7, [r3]
 8002098:	eeb0 0b47 	vmov.f64	d0, d7
 800209c:	f00e fee0 	bl	8010e60 <sin>
 80020a0:	eeb0 7b40 	vmov.f64	d7, d0
 80020a4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002180 <cartesianJog+0x248>
 80020a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020ac:	ee89 7b06 	vdiv.f64	d7, d9, d6
            248.0 * c_qf_tmp) / (7.038012412301149E+15 * qf_tmp)) -
 80020b0:	ee38 7b47 	vsub.f64	d7, d8, d7
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 80020b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b6:	ed83 7b02 	vstr	d7, [r3, #8]
	cartesian->q3 = qi[2] - deltak[3];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3310      	adds	r3, #16
 80020be:	ed93 6b00 	vldr	d6, [r3]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3318      	adds	r3, #24
 80020c6:	ed93 7b00 	vldr	d7, [r3]
 80020ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	ed83 7b04 	vstr	d7, [r3, #16]
	cartesian->q4 = (((100.0 * deltak[1] * c_qf_tmp + 41297.0 * deltak[0] * qf_tmp) +
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	3308      	adds	r3, #8
 80020d8:	ed93 7b00 	vldr	d7, [r3]
 80020dc:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8002178 <cartesianJog+0x240>
 80020e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80020e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	ed93 7b00 	vldr	d7, [r3]
 80020f2:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8002170 <cartesianJog+0x238>
 80020f6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80020fa:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80020fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002102:	ee36 6b07 	vadd.f64	d6, d6, d7
            100.0 * deltak[2] * d_qf_tmp) + 41297.0 * qi[3] * qf_tmp) / (41297.0
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3310      	adds	r3, #16
 800210a:	ed93 7b00 	vldr	d7, [r3]
 800210e:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8002178 <cartesianJog+0x240>
 8002112:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002116:	ed97 7b02 	vldr	d7, [r7, #8]
 800211a:	ee25 7b07 	vmul.f64	d7, d5, d7
	cartesian->q4 = (((100.0 * deltak[1] * c_qf_tmp + 41297.0 * deltak[0] * qf_tmp) +
 800211e:	ee36 6b07 	vadd.f64	d6, d6, d7
            100.0 * deltak[2] * d_qf_tmp) + 41297.0 * qi[3] * qf_tmp) / (41297.0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3318      	adds	r3, #24
 8002126:	ed93 7b00 	vldr	d7, [r3]
 800212a:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8002170 <cartesianJog+0x238>
 800212e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002132:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002136:	ee25 7b07 	vmul.f64	d7, d5, d7
 800213a:	ee36 5b07 	vadd.f64	d5, d6, d7
    * qf_tmp);
 800213e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002142:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8002170 <cartesianJog+0x238>
 8002146:	ee27 6b06 	vmul.f64	d6, d7, d6
            100.0 * deltak[2] * d_qf_tmp) + 41297.0 * qi[3] * qf_tmp) / (41297.0
 800214a:	ee85 7b06 	vdiv.f64	d7, d5, d6
	cartesian->q4 = (((100.0 * deltak[1] * c_qf_tmp + 41297.0 * deltak[0] * qf_tmp) +
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	3738      	adds	r7, #56	; 0x38
 8002158:	46bd      	mov	sp, r7
 800215a:	ecbd 8b04 	vpop	{d8-d9}
 800215e:	bd80      	pop	{r7, pc}
 8002160:	00000000 	.word	0x00000000
 8002164:	406f0000 	.word	0x406f0000
 8002168:	00000000 	.word	0x00000000
 800216c:	42300000 	.word	0x42300000
 8002170:	00000000 	.word	0x00000000
 8002174:	40e42a20 	.word	0x40e42a20
 8002178:	00000000 	.word	0x00000000
 800217c:	40590000 	.word	0x40590000
 8002180:	f5c28f5d 	.word	0xf5c28f5d
 8002184:	43390108 	.word	0x43390108
 8002188:	24000670 	.word	0x24000670

0800218c <get_cartesian_q1>:

double get_cartesian_q1(){
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <get_cartesian_q1+0x24>)
 8002194:	607b      	str	r3, [r7, #4]
	return cartesian->q1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	ec43 2b17 	vmov	d7, r2, r3
}
 80021a0:	eeb0 0b47 	vmov.f64	d0, d7
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	24000670 	.word	0x24000670

080021b4 <get_cartesian_q2>:

double get_cartesian_q2(){
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <get_cartesian_q2+0x24>)
 80021bc:	607b      	str	r3, [r7, #4]
	return cartesian->q2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80021c8:	eeb0 0b47 	vmov.f64	d0, d7
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	24000670 	.word	0x24000670

080021dc <get_cartesian_q3>:

double get_cartesian_q3(){
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <get_cartesian_q3+0x24>)
 80021e4:	607b      	str	r3, [r7, #4]
	return cartesian->q3;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80021f0:	eeb0 0b47 	vmov.f64	d0, d7
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	24000670 	.word	0x24000670

08002204 <get_cartesian_q4>:

double get_cartesian_q4(){
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <get_cartesian_q4+0x24>)
 800220c:	607b      	str	r3, [r7, #4]
	return cartesian->q4;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002214:	ec43 2b17 	vmov	d7, r2, r3
}
 8002218:	eeb0 0b47 	vmov.f64	d0, d7
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	24000670 	.word	0x24000670
 800222c:	00000000 	.word	0x00000000

08002230 <forwardKinematic>:
#include <math.h>

static fk_state fks[NUM_FK];

void forwardKinematic(const double q[4])
{
 8002230:	b580      	push	{r7, lr}
 8002232:	ed2d 8b02 	vpush	{d8}
 8002236:	b08c      	sub	sp, #48	; 0x30
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[0];
 800223c:	4b52      	ldr	r3, [pc, #328]	; (8002388 <forwardKinematic+0x158>)
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
	double Rota_idx_1;
	double Rota_tmp;
	double Rota_tmp_tmp_tmp;
	double eulShaped_idx_2;
	Rota_tmp_tmp_tmp = q[0] + q[1];
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	ed93 6b00 	vldr	d6, [r3]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3308      	adds	r3, #8
 800224a:	ed93 7b00 	vldr	d7, [r3]
 800224e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002252:	ed87 7b06 	vstr	d7, [r7, #24]
	Rota_idx_1 = Rota_tmp_tmp_tmp + q[3];
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3318      	adds	r3, #24
 800225a:	ed93 7b00 	vldr	d7, [r3]
 800225e:	ed97 6b06 	vldr	d6, [r7, #24]
 8002262:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002266:	ed87 7b04 	vstr	d7, [r7, #16]
	Rota_tmp = cos(Rota_idx_1);
 800226a:	ed97 0b04 	vldr	d0, [r7, #16]
 800226e:	f00e fdaf 	bl	8010dd0 <cos>
 8002272:	ed87 0b02 	vstr	d0, [r7, #8]
	Rota_idx_1 = sin(Rota_idx_1);
 8002276:	ed97 0b04 	vldr	d0, [r7, #16]
 800227a:	f00e fdf1 	bl	8010e60 <sin>
 800227e:	ed87 0b04 	vstr	d0, [r7, #16]
	eulShaped_idx_2 = atan2(Rota_idx_1, Rota_tmp);
 8002282:	ed97 1b02 	vldr	d1, [r7, #8]
 8002286:	ed97 0b04 	vldr	d0, [r7, #16]
 800228a:	f00e fe31 	bl	8010ef0 <atan2>
 800228e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	if (sqrt(Rota_tmp * Rota_tmp + Rota_idx_1 * Rota_idx_1) <
 8002292:	ed97 7b02 	vldr	d7, [r7, #8]
 8002296:	ee27 6b07 	vmul.f64	d6, d7, d7
 800229a:	ed97 7b04 	vldr	d7, [r7, #16]
 800229e:	ee27 7b07 	vmul.f64	d7, d7, d7
 80022a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022a6:	eeb0 0b47 	vmov.f64	d0, d7
 80022aa:	f00e fe25 	bl	8010ef8 <sqrt>
 80022ae:	eeb0 7b40 	vmov.f64	d7, d0
 80022b2:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002368 <forwardKinematic+0x138>
 80022b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	d505      	bpl.n	80022cc <forwardKinematic+0x9c>
			2.2204460492503131E-15) {
		eulShaped_idx_2 = 0.0;
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	fk->roll = eulShaped_idx_2; //radian
 80022cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022d2:	e9c1 2300 	strd	r2, r3, [r1]
	fk->X = 412.97 * cos(Rota_tmp_tmp_tmp) + 248.0 * cos(q[0]); //mm
 80022d6:	ed97 0b06 	vldr	d0, [r7, #24]
 80022da:	f00e fd79 	bl	8010dd0 <cos>
 80022de:	eeb0 7b40 	vmov.f64	d7, d0
 80022e2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002370 <forwardKinematic+0x140>
 80022e6:	ee27 8b06 	vmul.f64	d8, d7, d6
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	ed93 7b00 	vldr	d7, [r3]
 80022f0:	eeb0 0b47 	vmov.f64	d0, d7
 80022f4:	f00e fd6c 	bl	8010dd0 <cos>
 80022f8:	eeb0 7b40 	vmov.f64	d7, d0
 80022fc:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002378 <forwardKinematic+0x148>
 8002300:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002304:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	ed83 7b02 	vstr	d7, [r3, #8]
	fk->Y = 412.97 * sin(Rota_tmp_tmp_tmp) + 248.0 * sin(q[0]); //mm
 800230e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002312:	f00e fda5 	bl	8010e60 <sin>
 8002316:	eeb0 7b40 	vmov.f64	d7, d0
 800231a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002370 <forwardKinematic+0x140>
 800231e:	ee27 8b06 	vmul.f64	d8, d7, d6
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	ed93 7b00 	vldr	d7, [r3]
 8002328:	eeb0 0b47 	vmov.f64	d0, d7
 800232c:	f00e fd98 	bl	8010e60 <sin>
 8002330:	eeb0 7b40 	vmov.f64	d7, d0
 8002334:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002378 <forwardKinematic+0x148>
 8002338:	ee27 7b06 	vmul.f64	d7, d7, d6
 800233c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	ed83 7b04 	vstr	d7, [r3, #16]
	fk->Z = 217.04 - q[2]; //mm
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3310      	adds	r3, #16
 800234a:	ed93 7b00 	vldr	d7, [r3]
 800234e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002380 <forwardKinematic+0x150>
 8002352:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	ed83 7b06 	vstr	d7, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	3730      	adds	r7, #48	; 0x30
 8002360:	46bd      	mov	sp, r7
 8002362:	ecbd 8b02 	vpop	{d8}
 8002366:	bd80      	pop	{r7, pc}
 8002368:	00000000 	.word	0x00000000
 800236c:	3ce40000 	.word	0x3ce40000
 8002370:	1eb851ec 	.word	0x1eb851ec
 8002374:	4079cf85 	.word	0x4079cf85
 8002378:	00000000 	.word	0x00000000
 800237c:	406f0000 	.word	0x406f0000
 8002380:	ae147ae1 	.word	0xae147ae1
 8002384:	406b2147 	.word	0x406b2147
 8002388:	24000690 	.word	0x24000690
 800238c:	00000000 	.word	0x00000000

08002390 <update_FK_real>:

void update_FK_real(){
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
	double qi_all[4] = {to_radian((double)Stepper_currentPosition_real(1)), to_radian((double)Stepper_currentPosition_real(2)), (double)Stepper_currentPosition_real(3), to_radian((double)0.0)};
 8002396:	2001      	movs	r0, #1
 8002398:	f7fe ff3c 	bl	8001214 <Stepper_currentPosition_real>
 800239c:	eef0 7a40 	vmov.f32	s15, s0
 80023a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023a4:	eeb0 0b47 	vmov.f64	d0, d7
 80023a8:	f7ff f846 	bl	8001438 <to_radian>
 80023ac:	eeb0 7b40 	vmov.f64	d7, d0
 80023b0:	ed87 7b00 	vstr	d7, [r7]
 80023b4:	2002      	movs	r0, #2
 80023b6:	f7fe ff2d 	bl	8001214 <Stepper_currentPosition_real>
 80023ba:	eef0 7a40 	vmov.f32	s15, s0
 80023be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023c2:	eeb0 0b47 	vmov.f64	d0, d7
 80023c6:	f7ff f837 	bl	8001438 <to_radian>
 80023ca:	eeb0 7b40 	vmov.f64	d7, d0
 80023ce:	ed87 7b02 	vstr	d7, [r7, #8]
 80023d2:	2003      	movs	r0, #3
 80023d4:	f7fe ff1e 	bl	8001214 <Stepper_currentPosition_real>
 80023d8:	eef0 7a40 	vmov.f32	s15, s0
 80023dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023e0:	ed87 7b04 	vstr	d7, [r7, #16]
 80023e4:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8002408 <update_FK_real+0x78>
 80023e8:	f7ff f826 	bl	8001438 <to_radian>
 80023ec:	eeb0 7b40 	vmov.f64	d7, d0
 80023f0:	ed87 7b06 	vstr	d7, [r7, #24]
	forwardKinematic(qi_all);
 80023f4:	463b      	mov	r3, r7
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ff1a 	bl	8002230 <forwardKinematic>
}
 80023fc:	bf00      	nop
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	f3af 8000 	nop.w
	...

08002410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002416:	f002 f88d 	bl	8004534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800241a:	f000 f943 	bl	80026a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800241e:	f000 ff33 	bl	8003288 <MX_GPIO_Init>
  MX_BDMA_Init();
 8002422:	f000 fee9 	bl	80031f8 <MX_BDMA_Init>
  MX_DMA_Init();
 8002426:	f000 ff07 	bl	8003238 <MX_DMA_Init>
  MX_ETH_Init();
 800242a:	f000 fa27 	bl	800287c <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800242e:	f000 feb1 	bl	8003194 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8002432:	f000 fb1f 	bl	8002a74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002436:	f000 fb71 	bl	8002b1c <MX_TIM3_Init>
  MX_TIM4_Init();
 800243a:	f000 fbc5 	bl	8002bc8 <MX_TIM4_Init>
  MX_TIM1_Init();
 800243e:	f000 fabf 	bl	80029c0 <MX_TIM1_Init>
  MX_SPI3_Init();
 8002442:	f000 fa67 	bl	8002914 <MX_SPI3_Init>
  MX_ADC3_Init();
 8002446:	f000 f9b3 	bl	80027b0 <MX_ADC3_Init>
  MX_TIM5_Init();
 800244a:	f000 fc13 	bl	8002c74 <MX_TIM5_Init>
  MX_UART7_Init();
 800244e:	f000 fe53 	bl	80030f8 <MX_UART7_Init>
  MX_TIM12_Init();
 8002452:	f000 fc5d 	bl	8002d10 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002456:	f000 fcbf 	bl	8002dd8 <MX_TIM13_Init>
  MX_TIM16_Init();
 800245a:	f000 fd0b 	bl	8002e74 <MX_TIM16_Init>
  MX_TIM17_Init();
 800245e:	f000 fd83 	bl	8002f68 <MX_TIM17_Init>
  MX_UART5_Init();
 8002462:	f000 fdfb 	bl	800305c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 8002466:	f007 ff09 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 800246a:	4603      	mov	r3, r0
 800246c:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <main+0x218>)
 800246e:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8002470:	f007 ff04 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b6d      	ldr	r3, [pc, #436]	; (800262c <main+0x21c>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	4a6c      	ldr	r2, [pc, #432]	; (8002630 <main+0x220>)
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	4a6b      	ldr	r2, [pc, #428]	; (8002634 <main+0x224>)
 8002486:	6013      	str	r3, [r2, #0]
  //htim17 stepper 2
  //htim13 stepper 3
  //htim12 stepper 4

  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 8002488:	2300      	movs	r3, #0
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2320      	movs	r3, #32
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	4b69      	ldr	r3, [pc, #420]	; (8002638 <main+0x228>)
 8002492:	2200      	movs	r2, #0
 8002494:	4969      	ldr	r1, [pc, #420]	; (800263c <main+0x22c>)
 8002496:	2001      	movs	r0, #1
 8002498:	f7fe fb4e 	bl	8000b38 <Stepper_Setup>
  Stepper_SetMinPosition(1, -360.00);
 800249c:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8002640 <main+0x230>
 80024a0:	2001      	movs	r0, #1
 80024a2:	f7fe fbe7 	bl	8000c74 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 360.00);
 80024a6:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002644 <main+0x234>
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7fe fbfc 	bl	8000ca8 <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2310      	movs	r3, #16
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4b5f      	ldr	r3, [pc, #380]	; (8002638 <main+0x228>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	4962      	ldr	r1, [pc, #392]	; (8002648 <main+0x238>)
 80024be:	2002      	movs	r0, #2
 80024c0:	f7fe fb3a 	bl	8000b38 <Stepper_Setup>
  Stepper_SetMinPosition(2, -360.00);
 80024c4:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8002640 <main+0x230>
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7fe fbd3 	bl	8000c74 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 360.00);
 80024ce:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8002644 <main+0x234>
 80024d2:	2002      	movs	r0, #2
 80024d4:	f7fe fbe8 	bl	8000ca8 <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 80024d8:	2301      	movs	r3, #1
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	4b5a      	ldr	r3, [pc, #360]	; (800264c <main+0x23c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	495a      	ldr	r1, [pc, #360]	; (8002650 <main+0x240>)
 80024e8:	2003      	movs	r0, #3
 80024ea:	f7fe fb25 	bl	8000b38 <Stepper_Setup>
  Stepper_SetMinPosition(3, -106.00);
 80024ee:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8002654 <main+0x244>
 80024f2:	2003      	movs	r0, #3
 80024f4:	f7fe fbbe 	bl	8000c74 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 106.00);
 80024f8:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8002658 <main+0x248>
 80024fc:	2003      	movs	r0, #3
 80024fe:	f7fe fbd3 	bl	8000ca8 <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 8002502:	2301      	movs	r3, #1
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <main+0x228>)
 800250e:	2204      	movs	r2, #4
 8002510:	4952      	ldr	r1, [pc, #328]	; (800265c <main+0x24c>)
 8002512:	2004      	movs	r0, #4
 8002514:	f7fe fb10 	bl	8000b38 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 8002518:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8002660 <main+0x250>
 800251c:	2004      	movs	r0, #4
 800251e:	f7fe fba9 	bl	8000c74 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 150.00);
 8002522:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8002664 <main+0x254>
 8002526:	2004      	movs	r0, #4
 8002528:	f7fe fbbe 	bl	8000ca8 <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 800252c:	2001      	movs	r0, #1
 800252e:	f7fe fb6f 	bl	8000c10 <Stepper_DefaultState>
  Stepper_DefaultState(2);
 8002532:	2002      	movs	r0, #2
 8002534:	f7fe fb6c 	bl	8000c10 <Stepper_DefaultState>
  Stepper_DefaultState(3);
 8002538:	2003      	movs	r0, #3
 800253a:	f7fe fb69 	bl	8000c10 <Stepper_DefaultState>
  Stepper_DefaultState(4);
 800253e:	2004      	movs	r0, #4
 8002540:	f7fe fb66 	bl	8000c10 <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 8002544:	4839      	ldr	r0, [pc, #228]	; (800262c <main+0x21c>)
 8002546:	f00a f9f3 	bl	800c930 <HAL_TIM_Base_Start_IT>

  //PID STEPPER Setup
  setupPID(1, 0.001, -50, 50, 0.5, 0, 0);
 800254a:	eddf 2a45 	vldr	s5, [pc, #276]	; 8002660 <main+0x250>
 800254e:	ed9f 2a44 	vldr	s4, [pc, #272]	; 8002660 <main+0x250>
 8002552:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002556:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8002668 <main+0x258>
 800255a:	eddf 0a44 	vldr	s1, [pc, #272]	; 800266c <main+0x25c>
 800255e:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8002670 <main+0x260>
 8002562:	2001      	movs	r0, #1
 8002564:	f7fe f994 	bl	8000890 <setupPID>
  setupPID(2, 0.001, -35, 35, 0.5, 0, 0);
 8002568:	eddf 2a3d 	vldr	s5, [pc, #244]	; 8002660 <main+0x250>
 800256c:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8002660 <main+0x250>
 8002570:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002574:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8002674 <main+0x264>
 8002578:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002678 <main+0x268>
 800257c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8002670 <main+0x260>
 8002580:	2002      	movs	r0, #2
 8002582:	f7fe f985 	bl	8000890 <setupPID>
  setupPID(3, 0.05, -800, 800, 1.0, 0, 0);
 8002586:	eddf 2a36 	vldr	s5, [pc, #216]	; 8002660 <main+0x250>
 800258a:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8002660 <main+0x250>
 800258e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002592:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 800267c <main+0x26c>
 8002596:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8002680 <main+0x270>
 800259a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8002684 <main+0x274>
 800259e:	2003      	movs	r0, #3
 80025a0:	f7fe f976 	bl	8000890 <setupPID>

  //PID Field Setup
  setupPID(4, 0.05, -20, 20, 1.0, 0, 0);
 80025a4:	eddf 2a2e 	vldr	s5, [pc, #184]	; 8002660 <main+0x250>
 80025a8:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8002660 <main+0x250>
 80025ac:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80025b0:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80025b4:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 80025b8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002684 <main+0x274>
 80025bc:	2004      	movs	r0, #4
 80025be:	f7fe f967 	bl	8000890 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 80025c2:	223c      	movs	r2, #60	; 0x3c
 80025c4:	4930      	ldr	r1, [pc, #192]	; (8002688 <main+0x278>)
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7fe fa58 	bl	8000a7c <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 80025cc:	223c      	movs	r2, #60	; 0x3c
 80025ce:	492f      	ldr	r1, [pc, #188]	; (800268c <main+0x27c>)
 80025d0:	2002      	movs	r0, #2
 80025d2:	f7fe fa53 	bl	8000a7c <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 80025d6:	223c      	movs	r2, #60	; 0x3c
 80025d8:	492d      	ldr	r1, [pc, #180]	; (8002690 <main+0x280>)
 80025da:	2003      	movs	r0, #3
 80025dc:	f7fe fa4e 	bl	8000a7c <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 80025e0:	223c      	movs	r2, #60	; 0x3c
 80025e2:	492c      	ldr	r1, [pc, #176]	; (8002694 <main+0x284>)
 80025e4:	2004      	movs	r0, #4
 80025e6:	f7fe fa49 	bl	8000a7c <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 80025ea:	492b      	ldr	r1, [pc, #172]	; (8002698 <main+0x288>)
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7fe ff43 	bl	8001478 <Serial_Setup>
  Serial_Setup(2, &huart7);
 80025f2:	492a      	ldr	r1, [pc, #168]	; (800269c <main+0x28c>)
 80025f4:	2002      	movs	r0, #2
 80025f6:	f7fe ff3f 	bl	8001478 <Serial_Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(state){
 80025fa:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <main+0x290>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00d      	beq.n	800261e <main+0x20e>
		  update_FK_real();
 8002602:	f7ff fec5 	bl	8002390 <update_FK_real>
//		  Feedback_XYZ(1, get_fk_X(), get_fk_Y(), get_fk_Z(), get_fk_roll());
//		  Feedback_JOINT(1, , q2, q3, q4);
//		  updateJoint(0,0,0,0);
		  Stepper_runStep(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f7fe fcd8 	bl	8000fbc <Stepper_runStep>
		  Stepper_runStep(2);
 800260c:	2002      	movs	r0, #2
 800260e:	f7fe fcd5 	bl	8000fbc <Stepper_runStep>
		  Stepper_runStep(3);
 8002612:	2003      	movs	r0, #3
 8002614:	f7fe fcd2 	bl	8000fbc <Stepper_runStep>
//		  Stepper_runStep(4);
		  state = 0;
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <main+0x290>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
//		  a1 = HAL_GPIO_ReadPin(PROXIMITY1_GPIO_Port, PROXIMITY1_Pin);
//		  a2 = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
//		  a3 = HAL_GPIO_ReadPin(PROXIMITY3_GPIO_Port, PROXIMITY3_Pin);
	  }
	  selectPacket(1);
 800261e:	2001      	movs	r0, #1
 8002620:	f7ff f8b0 	bl	8001784 <selectPacket>
	  if(state){
 8002624:	e7e9      	b.n	80025fa <main+0x1ea>
 8002626:	bf00      	nop
 8002628:	2400101c 	.word	0x2400101c
 800262c:	24000d6c 	.word	0x24000d6c
 8002630:	000f4240 	.word	0x000f4240
 8002634:	24000fcc 	.word	0x24000fcc
 8002638:	58021400 	.word	0x58021400
 800263c:	240011ec 	.word	0x240011ec
 8002640:	c3b40000 	.word	0xc3b40000
 8002644:	43b40000 	.word	0x43b40000
 8002648:	24000ca8 	.word	0x24000ca8
 800264c:	58021000 	.word	0x58021000
 8002650:	24000f80 	.word	0x24000f80
 8002654:	c2d40000 	.word	0xc2d40000
 8002658:	42d40000 	.word	0x42d40000
 800265c:	240010e4 	.word	0x240010e4
 8002660:	00000000 	.word	0x00000000
 8002664:	43160000 	.word	0x43160000
 8002668:	42480000 	.word	0x42480000
 800266c:	c2480000 	.word	0xc2480000
 8002670:	3a83126f 	.word	0x3a83126f
 8002674:	420c0000 	.word	0x420c0000
 8002678:	c20c0000 	.word	0xc20c0000
 800267c:	44480000 	.word	0x44480000
 8002680:	c4480000 	.word	0xc4480000
 8002684:	3d4ccccd 	.word	0x3d4ccccd
 8002688:	24000fd0 	.word	0x24000fd0
 800268c:	24000db8 	.word	0x24000db8
 8002690:	24000854 	.word	0x24000854
 8002694:	24001020 	.word	0x24001020
 8002698:	24000e8c 	.word	0x24000e8c
 800269c:	240007c4 	.word	0x240007c4
 80026a0:	240006b0 	.word	0x240006b0

080026a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b09c      	sub	sp, #112	; 0x70
 80026a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	224c      	movs	r2, #76	; 0x4c
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00e f888 	bl	80107c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	2220      	movs	r2, #32
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f00e f882 	bl	80107c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80026c4:	2002      	movs	r0, #2
 80026c6:	f006 fe33 	bl	8009330 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <SystemClock_Config+0x100>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	4a34      	ldr	r2, [pc, #208]	; (80027a4 <SystemClock_Config+0x100>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80026da:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <SystemClock_Config+0x100>)
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <SystemClock_Config+0x104>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026ec:	4a2e      	ldr	r2, [pc, #184]	; (80027a8 <SystemClock_Config+0x104>)
 80026ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <SystemClock_Config+0x104>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002700:	bf00      	nop
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <SystemClock_Config+0x104>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270e:	d1f8      	bne.n	8002702 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <SystemClock_Config+0x108>)
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	4a25      	ldr	r2, [pc, #148]	; (80027ac <SystemClock_Config+0x108>)
 8002716:	f023 0303 	bic.w	r3, r3, #3
 800271a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800271c:	2322      	movs	r3, #34	; 0x22
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002720:	2301      	movs	r3, #1
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002724:	2340      	movs	r3, #64	; 0x40
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002728:	2301      	movs	r3, #1
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800272c:	2302      	movs	r3, #2
 800272e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002730:	2300      	movs	r3, #0
 8002732:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002734:	2304      	movs	r3, #4
 8002736:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002738:	2319      	movs	r3, #25
 800273a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800273c:	2302      	movs	r3, #2
 800273e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002740:	2304      	movs	r3, #4
 8002742:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002744:	2302      	movs	r3, #2
 8002746:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002748:	230c      	movs	r3, #12
 800274a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800274c:	2300      	movs	r3, #0
 800274e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002758:	4618      	mov	r0, r3
 800275a:	f006 fe33 	bl	80093c4 <HAL_RCC_OscConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002764:	f000 ff4e 	bl	8003604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002768:	233f      	movs	r3, #63	; 0x3f
 800276a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276c:	2303      	movs	r3, #3
 800276e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002774:	2308      	movs	r3, #8
 8002776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800277c:	2340      	movs	r3, #64	; 0x40
 800277e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002784:	2300      	movs	r3, #0
 8002786:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2102      	movs	r1, #2
 800278c:	4618      	mov	r0, r3
 800278e:	f007 fa45 	bl	8009c1c <HAL_RCC_ClockConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002798:	f000 ff34 	bl	8003604 <Error_Handler>
  }
}
 800279c:	bf00      	nop
 800279e:	3770      	adds	r7, #112	; 0x70
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	58000400 	.word	0x58000400
 80027a8:	58024800 	.word	0x58024800
 80027ac:	58024400 	.word	0x58024400

080027b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
 80027c4:	615a      	str	r2, [r3, #20]
 80027c6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <MX_ADC3_Init+0xc0>)
 80027ca:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <MX_ADC3_Init+0xc4>)
 80027cc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <MX_ADC3_Init+0xc0>)
 80027d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <MX_ADC3_Init+0xc0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <MX_ADC3_Init+0xc0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <MX_ADC3_Init+0xc0>)
 80027e4:	2204      	movs	r2, #4
 80027e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <MX_ADC3_Init+0xc0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <MX_ADC3_Init+0xc0>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <MX_ADC3_Init+0xc0>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <MX_ADC3_Init+0xc0>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <MX_ADC3_Init+0xc0>)
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <MX_ADC3_Init+0xc0>)
 8002808:	2200      	movs	r2, #0
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <MX_ADC3_Init+0xc0>)
 800280e:	2200      	movs	r2, #0
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <MX_ADC3_Init+0xc0>)
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <MX_ADC3_Init+0xc0>)
 800281a:	2200      	movs	r2, #0
 800281c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <MX_ADC3_Init+0xc0>)
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002826:	4812      	ldr	r0, [pc, #72]	; (8002870 <MX_ADC3_Init+0xc0>)
 8002828:	f002 f8fc 	bl	8004a24 <HAL_ADC_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002832:	f000 fee7 	bl	8003604 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_ADC3_Init+0xc8>)
 8002838:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800283a:	2306      	movs	r3, #6
 800283c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002842:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002846:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002848:	2304      	movs	r3, #4
 800284a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <MX_ADC3_Init+0xc0>)
 800285a:	f002 fa83 	bl	8004d64 <HAL_ADC_ConfigChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8002864:	f000 fece 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002868:	bf00      	nop
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	24000f1c 	.word	0x24000f1c
 8002874:	58026000 	.word	0x58026000
 8002878:	04300002 	.word	0x04300002

0800287c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <MX_ETH_Init+0x80>)
 8002882:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <MX_ETH_Init+0x84>)
 8002884:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <MX_ETH_Init+0x88>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_ETH_Init+0x88>)
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <MX_ETH_Init+0x88>)
 8002894:	22e1      	movs	r2, #225	; 0xe1
 8002896:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <MX_ETH_Init+0x88>)
 800289a:	2200      	movs	r2, #0
 800289c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <MX_ETH_Init+0x88>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_ETH_Init+0x88>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80028aa:	4b14      	ldr	r3, [pc, #80]	; (80028fc <MX_ETH_Init+0x80>)
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <MX_ETH_Init+0x88>)
 80028ae:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <MX_ETH_Init+0x80>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <MX_ETH_Init+0x80>)
 80028b8:	4a13      	ldr	r2, [pc, #76]	; (8002908 <MX_ETH_Init+0x8c>)
 80028ba:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <MX_ETH_Init+0x80>)
 80028be:	4a13      	ldr	r2, [pc, #76]	; (800290c <MX_ETH_Init+0x90>)
 80028c0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_ETH_Init+0x80>)
 80028c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028c8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80028ca:	480c      	ldr	r0, [pc, #48]	; (80028fc <MX_ETH_Init+0x80>)
 80028cc:	f005 fdee 	bl	80084ac <HAL_ETH_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80028d6:	f000 fe95 	bl	8003604 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80028da:	2234      	movs	r2, #52	; 0x34
 80028dc:	2100      	movs	r1, #0
 80028de:	480c      	ldr	r0, [pc, #48]	; (8002910 <MX_ETH_Init+0x94>)
 80028e0:	f00d ff72 	bl	80107c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <MX_ETH_Init+0x94>)
 80028e6:	2221      	movs	r2, #33	; 0x21
 80028e8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_ETH_Init+0x94>)
 80028ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028f0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <MX_ETH_Init+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	24001130 	.word	0x24001130
 8002900:	40028000 	.word	0x40028000
 8002904:	240006b4 	.word	0x240006b4
 8002908:	240000d8 	.word	0x240000d8
 800290c:	24000078 	.word	0x24000078
 8002910:	240011b8 	.word	0x240011b8

08002914 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <MX_SPI3_Init+0xa4>)
 800291a:	4a28      	ldr	r2, [pc, #160]	; (80029bc <MX_SPI3_Init+0xa8>)
 800291c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002920:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002924:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <MX_SPI3_Init+0xa4>)
 800292e:	2203      	movs	r2, #3
 8002930:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <MX_SPI3_Init+0xa4>)
 800293a:	2200      	movs	r2, #0
 800293c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002940:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002944:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002948:	2200      	movs	r2, #0
 800294a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800294c:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <MX_SPI3_Init+0xa4>)
 800294e:	2200      	movs	r2, #0
 8002950:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002954:	2200      	movs	r2, #0
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <MX_SPI3_Init+0xa4>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002960:	2200      	movs	r2, #0
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800296a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <MX_SPI3_Init+0xa4>)
 800296e:	2200      	movs	r2, #0
 8002970:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002974:	2200      	movs	r2, #0
 8002976:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_SPI3_Init+0xa4>)
 800297a:	2200      	movs	r2, #0
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002980:	2200      	movs	r2, #0
 8002982:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002986:	2200      	movs	r2, #0
 8002988:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_SPI3_Init+0xa4>)
 800298c:	2200      	movs	r2, #0
 800298e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002992:	2200      	movs	r2, #0
 8002994:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_SPI3_Init+0xa4>)
 8002998:	2200      	movs	r2, #0
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_SPI3_Init+0xa4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_SPI3_Init+0xa4>)
 80029a4:	f009 fe4c 	bl	800c640 <HAL_SPI_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80029ae:	f000 fe29 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	24000e04 	.word	0x24000e04
 80029bc:	40003c00 	.word	0x40003c00

080029c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029c6:	f107 030c 	add.w	r3, r7, #12
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f00d fefa 	bl	80107c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d4:	463b      	mov	r3, r7
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <MX_TIM1_Init+0xac>)
 80029e0:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <MX_TIM1_Init+0xb0>)
 80029e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <MX_TIM1_Init+0xac>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <MX_TIM1_Init+0xac>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <MX_TIM1_Init+0xac>)
 80029f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <MX_TIM1_Init+0xac>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <MX_TIM1_Init+0xac>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <MX_TIM1_Init+0xac>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a12:	2301      	movs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a22:	2301      	movs	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a2e:	f107 030c 	add.w	r3, r7, #12
 8002a32:	4619      	mov	r1, r3
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <MX_TIM1_Init+0xac>)
 8002a36:	f00a f9f9 	bl	800ce2c <HAL_TIM_Encoder_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002a40:	f000 fde0 	bl	8003604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a50:	463b      	mov	r3, r7
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_TIM1_Init+0xac>)
 8002a56:	f00b faa5 	bl	800dfa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002a60:	f000 fdd0 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a64:	bf00      	nop
 8002a66:	3730      	adds	r7, #48	; 0x30
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	24000fd0 	.word	0x24000fd0
 8002a70:	40010000 	.word	0x40010000

08002a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	2224      	movs	r2, #36	; 0x24
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f00d fea0 	bl	80107c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a88:	463b      	mov	r3, r7
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a92:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <MX_TIM2_Init+0xa4>)
 8002a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <MX_TIM2_Init+0xa4>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <MX_TIM2_Init+0xa4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <MX_TIM2_Init+0xa4>)
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <MX_TIM2_Init+0xa4>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <MX_TIM2_Init+0xa4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	480c      	ldr	r0, [pc, #48]	; (8002b18 <MX_TIM2_Init+0xa4>)
 8002ae6:	f00a f9a1 	bl	800ce2c <HAL_TIM_Encoder_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002af0:	f000 fd88 	bl	8003604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af4:	2300      	movs	r3, #0
 8002af6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002afc:	463b      	mov	r3, r7
 8002afe:	4619      	mov	r1, r3
 8002b00:	4805      	ldr	r0, [pc, #20]	; (8002b18 <MX_TIM2_Init+0xa4>)
 8002b02:	f00b fa4f 	bl	800dfa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002b0c:	f000 fd7a 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b10:	bf00      	nop
 8002b12:	3730      	adds	r7, #48	; 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	24001020 	.word	0x24001020

08002b1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	; 0x30
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	2224      	movs	r2, #36	; 0x24
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f00d fe4c 	bl	80107c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b30:	463b      	mov	r3, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <MX_TIM3_Init+0xa4>)
 8002b3c:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <MX_TIM3_Init+0xa8>)
 8002b3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <MX_TIM3_Init+0xa4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <MX_TIM3_Init+0xa4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <MX_TIM3_Init+0xa4>)
 8002b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <MX_TIM3_Init+0xa4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <MX_TIM3_Init+0xa4>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b60:	2303      	movs	r3, #3
 8002b62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	4619      	mov	r1, r3
 8002b8a:	480d      	ldr	r0, [pc, #52]	; (8002bc0 <MX_TIM3_Init+0xa4>)
 8002b8c:	f00a f94e 	bl	800ce2c <HAL_TIM_Encoder_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002b96:	f000 fd35 	bl	8003604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <MX_TIM3_Init+0xa4>)
 8002ba8:	f00b f9fc 	bl	800dfa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002bb2:	f000 fd27 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bb6:	bf00      	nop
 8002bb8:	3730      	adds	r7, #48	; 0x30
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	24000db8 	.word	0x24000db8
 8002bc4:	40000400 	.word	0x40000400

08002bc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bce:	f107 030c 	add.w	r3, r7, #12
 8002bd2:	2224      	movs	r2, #36	; 0x24
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f00d fdf6 	bl	80107c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bdc:	463b      	mov	r3, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002be6:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <MX_TIM4_Init+0xa4>)
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <MX_TIM4_Init+0xa8>)
 8002bea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002bec:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <MX_TIM4_Init+0xa4>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <MX_TIM4_Init+0xa4>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002bf8:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <MX_TIM4_Init+0xa4>)
 8002bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bfe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MX_TIM4_Init+0xa4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <MX_TIM4_Init+0xa4>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c14:	2301      	movs	r3, #1
 8002c16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c24:	2301      	movs	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	4619      	mov	r1, r3
 8002c36:	480d      	ldr	r0, [pc, #52]	; (8002c6c <MX_TIM4_Init+0xa4>)
 8002c38:	f00a f8f8 	bl	800ce2c <HAL_TIM_Encoder_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002c42:	f000 fcdf 	bl	8003604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c4e:	463b      	mov	r3, r7
 8002c50:	4619      	mov	r1, r3
 8002c52:	4806      	ldr	r0, [pc, #24]	; (8002c6c <MX_TIM4_Init+0xa4>)
 8002c54:	f00b f9a6 	bl	800dfa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002c5e:	f000 fcd1 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c62:	bf00      	nop
 8002c64:	3730      	adds	r7, #48	; 0x30
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	24000854 	.word	0x24000854
 8002c70:	40000800 	.word	0x40000800

08002c74 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7a:	f107 0310 	add.w	r3, r7, #16
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002c94:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <MX_TIM5_Init+0x98>)
 8002c96:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002ca6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002caa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cac:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002cb8:	4813      	ldr	r0, [pc, #76]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cba:	f009 fde2 	bl	800c882 <HAL_TIM_Base_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002cc4:	f000 fc9e 	bl	8003604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ccc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cd6:	f00a fc11 	bl	800d4fc <HAL_TIM_ConfigClockSource>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002ce0:	f000 fc90 	bl	8003604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cf2:	f00b f957 	bl	800dfa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002cfc:	f000 fc82 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d00:	bf00      	nop
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	24000d6c 	.word	0x24000d6c
 8002d0c:	40000c00 	.word	0x40000c00

08002d10 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d16:	f107 0320 	add.w	r3, r7, #32
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	615a      	str	r2, [r3, #20]
 8002d34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <MX_TIM12_Init+0xc4>)
 8002d3a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002d3c:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d42:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002d4a:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002d4e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d50:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002d5c:	481c      	ldr	r0, [pc, #112]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002d5e:	f009 fd90 	bl	800c882 <HAL_TIM_Base_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002d68:	f000 fc4c 	bl	8003604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d70:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002d72:	f107 0320 	add.w	r3, r7, #32
 8002d76:	4619      	mov	r1, r3
 8002d78:	4815      	ldr	r0, [pc, #84]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002d7a:	f00a fbbf 	bl	800d4fc <HAL_TIM_ConfigClockSource>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002d84:	f000 fc3e 	bl	8003604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002d88:	4811      	ldr	r0, [pc, #68]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002d8a:	f009 fe49 	bl	800ca20 <HAL_TIM_PWM_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002d94:	f000 fc36 	bl	8003604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d98:	2360      	movs	r3, #96	; 0x60
 8002d9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002d9c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2204      	movs	r2, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	4807      	ldr	r0, [pc, #28]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002db2:	f00a fa8f 	bl	800d2d4 <HAL_TIM_PWM_ConfigChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002dbc:	f000 fc22 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002dc0:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <MX_TIM12_Init+0xc0>)
 8002dc2:	f001 f80d 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 8002dc6:	bf00      	nop
 8002dc8:	3730      	adds	r7, #48	; 0x30
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	240010e4 	.word	0x240010e4
 8002dd4:	40001800 	.word	0x40001800

08002dd8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
 8002dec:	615a      	str	r2, [r3, #20]
 8002dee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002df2:	4a1f      	ldr	r2, [pc, #124]	; (8002e70 <MX_TIM13_Init+0x98>)
 8002df4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002e04:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002e08:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002e16:	4815      	ldr	r0, [pc, #84]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002e18:	f009 fd33 	bl	800c882 <HAL_TIM_Base_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002e22:	f000 fbef 	bl	8003604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002e26:	4811      	ldr	r0, [pc, #68]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002e28:	f009 fdfa 	bl	800ca20 <HAL_TIM_PWM_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002e32:	f000 fbe7 	bl	8003604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e36:	2360      	movs	r3, #96	; 0x60
 8002e38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002e3a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002e3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e48:	1d3b      	adds	r3, r7, #4
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4807      	ldr	r0, [pc, #28]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002e50:	f00a fa40 	bl	800d2d4 <HAL_TIM_PWM_ConfigChannel>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002e5a:	f000 fbd3 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002e5e:	4803      	ldr	r0, [pc, #12]	; (8002e6c <MX_TIM13_Init+0x94>)
 8002e60:	f000 ffbe 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 8002e64:	bf00      	nop
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	24000f80 	.word	0x24000f80
 8002e70:	40001c00 	.word	0x40001c00

08002e74 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b092      	sub	sp, #72	; 0x48
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	60da      	str	r2, [r3, #12]
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	615a      	str	r2, [r3, #20]
 8002e8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e8e:	463b      	mov	r3, r7
 8002e90:	222c      	movs	r2, #44	; 0x2c
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f00d fc97 	bl	80107c8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002e9a:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002e9c:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <MX_TIM16_Init+0xf0>)
 8002e9e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002ea0:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea6:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 8002eac:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002eae:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002eb2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002ec6:	4826      	ldr	r0, [pc, #152]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002ec8:	f009 fcdb 	bl	800c882 <HAL_TIM_Base_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002ed2:	f000 fb97 	bl	8003604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002ed6:	4822      	ldr	r0, [pc, #136]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002ed8:	f009 fda2 	bl	800ca20 <HAL_TIM_PWM_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002ee2:	f000 fb8f 	bl	8003604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ee6:	2360      	movs	r3, #96	; 0x60
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002eea:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4814      	ldr	r0, [pc, #80]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002f0e:	f00a f9e1 	bl	800d2d4 <HAL_TIM_PWM_ConfigChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002f18:	f000 fb74 	bl	8003604 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002f3e:	463b      	mov	r3, r7
 8002f40:	4619      	mov	r1, r3
 8002f42:	4807      	ldr	r0, [pc, #28]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002f44:	f00b f8bc 	bl	800e0c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002f4e:	f000 fb59 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002f52:	4803      	ldr	r0, [pc, #12]	; (8002f60 <MX_TIM16_Init+0xec>)
 8002f54:	f000 ff44 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 8002f58:	bf00      	nop
 8002f5a:	3748      	adds	r7, #72	; 0x48
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	240011ec 	.word	0x240011ec
 8002f64:	40014400 	.word	0x40014400

08002f68 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b092      	sub	sp, #72	; 0x48
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	60da      	str	r2, [r3, #12]
 8002f7c:	611a      	str	r2, [r3, #16]
 8002f7e:	615a      	str	r2, [r3, #20]
 8002f80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f82:	463b      	mov	r3, r7
 8002f84:	222c      	movs	r2, #44	; 0x2c
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f00d fc1d 	bl	80107c8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <MX_TIM17_Init+0xec>)
 8002f90:	4a31      	ldr	r2, [pc, #196]	; (8003058 <MX_TIM17_Init+0xf0>)
 8002f92:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002f94:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <MX_TIM17_Init+0xec>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <MX_TIM17_Init+0xec>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <MX_TIM17_Init+0xec>)
 8002fa2:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002fa6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <MX_TIM17_Init+0xec>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002fae:	4b29      	ldr	r3, [pc, #164]	; (8003054 <MX_TIM17_Init+0xec>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fb4:	4b27      	ldr	r3, [pc, #156]	; (8003054 <MX_TIM17_Init+0xec>)
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002fba:	4826      	ldr	r0, [pc, #152]	; (8003054 <MX_TIM17_Init+0xec>)
 8002fbc:	f009 fc61 	bl	800c882 <HAL_TIM_Base_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002fc6:	f000 fb1d 	bl	8003604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002fca:	4822      	ldr	r0, [pc, #136]	; (8003054 <MX_TIM17_Init+0xec>)
 8002fcc:	f009 fd28 	bl	800ca20 <HAL_TIM_PWM_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002fd6:	f000 fb15 	bl	8003604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fda:	2360      	movs	r3, #96	; 0x60
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002fde:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002fe2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	4619      	mov	r1, r3
 8003000:	4814      	ldr	r0, [pc, #80]	; (8003054 <MX_TIM17_Init+0xec>)
 8003002:	f00a f967 	bl	800d2d4 <HAL_TIM_PWM_ConfigChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 800300c:	f000 fafa 	bl	8003604 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003028:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003032:	463b      	mov	r3, r7
 8003034:	4619      	mov	r1, r3
 8003036:	4807      	ldr	r0, [pc, #28]	; (8003054 <MX_TIM17_Init+0xec>)
 8003038:	f00b f842 	bl	800e0c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8003042:	f000 fadf 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003046:	4803      	ldr	r0, [pc, #12]	; (8003054 <MX_TIM17_Init+0xec>)
 8003048:	f000 feca 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 800304c:	bf00      	nop
 800304e:	3748      	adds	r7, #72	; 0x48
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	24000ca8 	.word	0x24000ca8
 8003058:	40014800 	.word	0x40014800

0800305c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <MX_UART5_Init+0x90>)
 8003062:	4a23      	ldr	r2, [pc, #140]	; (80030f0 <MX_UART5_Init+0x94>)
 8003064:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8003066:	4b21      	ldr	r3, [pc, #132]	; (80030ec <MX_UART5_Init+0x90>)
 8003068:	4a22      	ldr	r2, [pc, #136]	; (80030f4 <MX_UART5_Init+0x98>)
 800306a:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800306c:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <MX_UART5_Init+0x90>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <MX_UART5_Init+0x90>)
 8003074:	2200      	movs	r2, #0
 8003076:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003078:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <MX_UART5_Init+0x90>)
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <MX_UART5_Init+0x90>)
 8003080:	220c      	movs	r2, #12
 8003082:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <MX_UART5_Init+0x90>)
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800308a:	4b18      	ldr	r3, [pc, #96]	; (80030ec <MX_UART5_Init+0x90>)
 800308c:	2200      	movs	r2, #0
 800308e:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <MX_UART5_Init+0x90>)
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <MX_UART5_Init+0x90>)
 8003098:	2200      	movs	r2, #0
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <MX_UART5_Init+0x90>)
 800309e:	2200      	movs	r2, #0
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80030a2:	4812      	ldr	r0, [pc, #72]	; (80030ec <MX_UART5_Init+0x90>)
 80030a4:	f00b f8a8 	bl	800e1f8 <HAL_UART_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 80030ae:	f000 faa9 	bl	8003604 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b2:	2100      	movs	r1, #0
 80030b4:	480d      	ldr	r0, [pc, #52]	; (80030ec <MX_UART5_Init+0x90>)
 80030b6:	f00c ff8e 	bl	800ffd6 <HAL_UARTEx_SetTxFifoThreshold>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_UART5_Init+0x68>
  {
    Error_Handler();
 80030c0:	f000 faa0 	bl	8003604 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030c4:	2100      	movs	r1, #0
 80030c6:	4809      	ldr	r0, [pc, #36]	; (80030ec <MX_UART5_Init+0x90>)
 80030c8:	f00c ffc3 	bl	8010052 <HAL_UARTEx_SetRxFifoThreshold>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 80030d2:	f000 fa97 	bl	8003604 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80030d6:	4805      	ldr	r0, [pc, #20]	; (80030ec <MX_UART5_Init+0x90>)
 80030d8:	f00c ff44 	bl	800ff64 <HAL_UARTEx_DisableFifoMode>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 80030e2:	f000 fa8f 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	24000e8c 	.word	0x24000e8c
 80030f0:	40005000 	.word	0x40005000
 80030f4:	000f4240 	.word	0x000f4240

080030f8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80030fc:	4b22      	ldr	r3, [pc, #136]	; (8003188 <MX_UART7_Init+0x90>)
 80030fe:	4a23      	ldr	r2, [pc, #140]	; (800318c <MX_UART7_Init+0x94>)
 8003100:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8003102:	4b21      	ldr	r3, [pc, #132]	; (8003188 <MX_UART7_Init+0x90>)
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <MX_UART7_Init+0x98>)
 8003106:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <MX_UART7_Init+0x90>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800310e:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <MX_UART7_Init+0x90>)
 8003110:	2200      	movs	r2, #0
 8003112:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003114:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <MX_UART7_Init+0x90>)
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <MX_UART7_Init+0x90>)
 800311c:	220c      	movs	r2, #12
 800311e:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <MX_UART7_Init+0x90>)
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <MX_UART7_Init+0x90>)
 8003128:	2200      	movs	r2, #0
 800312a:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <MX_UART7_Init+0x90>)
 800312e:	2200      	movs	r2, #0
 8003130:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <MX_UART7_Init+0x90>)
 8003134:	2200      	movs	r2, #0
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <MX_UART7_Init+0x90>)
 800313a:	2200      	movs	r2, #0
 800313c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800313e:	4812      	ldr	r0, [pc, #72]	; (8003188 <MX_UART7_Init+0x90>)
 8003140:	f00b f85a 	bl	800e1f8 <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_UART7_Init+0x56>
  {
    Error_Handler();
 800314a:	f000 fa5b 	bl	8003604 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800314e:	2100      	movs	r1, #0
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <MX_UART7_Init+0x90>)
 8003152:	f00c ff40 	bl	800ffd6 <HAL_UARTEx_SetTxFifoThreshold>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 800315c:	f000 fa52 	bl	8003604 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003160:	2100      	movs	r1, #0
 8003162:	4809      	ldr	r0, [pc, #36]	; (8003188 <MX_UART7_Init+0x90>)
 8003164:	f00c ff75 	bl	8010052 <HAL_UARTEx_SetRxFifoThreshold>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 800316e:	f000 fa49 	bl	8003604 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_UART7_Init+0x90>)
 8003174:	f00c fef6 	bl	800ff64 <HAL_UARTEx_DisableFifoMode>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 800317e:	f000 fa41 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	240007c4 	.word	0x240007c4
 800318c:	40007800 	.word	0x40007800
 8003190:	000f4240 	.word	0x000f4240

08003194 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800319a:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800319c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031a0:	2209      	movs	r2, #9
 80031a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031a6:	2202      	movs	r2, #2
 80031a8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031b2:	2202      	movs	r2, #2
 80031b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80031da:	4805      	ldr	r0, [pc, #20]	; (80031f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031dc:	f005 ff5f 	bl	800909e <HAL_PCD_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80031e6:	f000 fa0d 	bl	8003604 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	240008a0 	.word	0x240008a0
 80031f4:	40080000 	.word	0x40080000

080031f8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <MX_BDMA_Init+0x3c>)
 8003200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003204:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <MX_BDMA_Init+0x3c>)
 8003206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800320a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <MX_BDMA_Init+0x3c>)
 8003210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	2100      	movs	r1, #0
 8003220:	2081      	movs	r0, #129	; 0x81
 8003222:	f002 fad4 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8003226:	2081      	movs	r0, #129	; 0x81
 8003228:	f002 faeb 	bl	8005802 <HAL_NVIC_EnableIRQ>

}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58024400 	.word	0x58024400

08003238 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <MX_DMA_Init+0x4c>)
 8003240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003244:	4a0f      	ldr	r2, [pc, #60]	; (8003284 <MX_DMA_Init+0x4c>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800324e:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <MX_DMA_Init+0x4c>)
 8003250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800325c:	2200      	movs	r2, #0
 800325e:	2100      	movs	r1, #0
 8003260:	200b      	movs	r0, #11
 8003262:	f002 fab4 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003266:	200b      	movs	r0, #11
 8003268:	f002 facb 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800326c:	2200      	movs	r2, #0
 800326e:	2100      	movs	r1, #0
 8003270:	200c      	movs	r0, #12
 8003272:	f002 faac 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003276:	200c      	movs	r0, #12
 8003278:	f002 fac3 	bl	8005802 <HAL_NVIC_EnableIRQ>

}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	58024400 	.word	0x58024400

08003288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08e      	sub	sp, #56	; 0x38
 800328c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800329e:	4bab      	ldr	r3, [pc, #684]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a4:	4aa9      	ldr	r2, [pc, #676]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ae:	4ba7      	ldr	r3, [pc, #668]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	623b      	str	r3, [r7, #32]
 80032ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032bc:	4ba3      	ldr	r3, [pc, #652]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c2:	4aa2      	ldr	r2, [pc, #648]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032c4:	f043 0320 	orr.w	r3, r3, #32
 80032c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032cc:	4b9f      	ldr	r3, [pc, #636]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032da:	4b9c      	ldr	r3, [pc, #624]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e0:	4a9a      	ldr	r2, [pc, #616]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ea:	4b98      	ldr	r3, [pc, #608]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	4b94      	ldr	r3, [pc, #592]	; (800354c <MX_GPIO_Init+0x2c4>)
 80032fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032fe:	4a93      	ldr	r2, [pc, #588]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003308:	4b90      	ldr	r3, [pc, #576]	; (800354c <MX_GPIO_Init+0x2c4>)
 800330a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003316:	4b8d      	ldr	r3, [pc, #564]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800331c:	4a8b      	ldr	r2, [pc, #556]	; (800354c <MX_GPIO_Init+0x2c4>)
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003326:	4b89      	ldr	r3, [pc, #548]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003334:	4b85      	ldr	r3, [pc, #532]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800333a:	4a84      	ldr	r2, [pc, #528]	; (800354c <MX_GPIO_Init+0x2c4>)
 800333c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003344:	4b81      	ldr	r3, [pc, #516]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003352:	4b7e      	ldr	r3, [pc, #504]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003358:	4a7c      	ldr	r2, [pc, #496]	; (800354c <MX_GPIO_Init+0x2c4>)
 800335a:	f043 0310 	orr.w	r3, r3, #16
 800335e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003362:	4b7a      	ldr	r3, [pc, #488]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003370:	4b76      	ldr	r3, [pc, #472]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003376:	4a75      	ldr	r2, [pc, #468]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003378:	f043 0308 	orr.w	r3, r3, #8
 800337c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003380:	4b72      	ldr	r3, [pc, #456]	; (800354c <MX_GPIO_Init+0x2c4>)
 8003382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 800338e:	2200      	movs	r2, #0
 8003390:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8003394:	486e      	ldr	r0, [pc, #440]	; (8003550 <MX_GPIO_Init+0x2c8>)
 8003396:	f005 fe4f 	bl	8009038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 800339a:	2200      	movs	r2, #0
 800339c:	f644 4101 	movw	r1, #19457	; 0x4c01
 80033a0:	486c      	ldr	r0, [pc, #432]	; (8003554 <MX_GPIO_Init+0x2cc>)
 80033a2:	f005 fe49 	bl	8009038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80033a6:	2200      	movs	r2, #0
 80033a8:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80033ac:	486a      	ldr	r0, [pc, #424]	; (8003558 <MX_GPIO_Init+0x2d0>)
 80033ae:	f005 fe43 	bl	8009038 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80033b8:	4868      	ldr	r0, [pc, #416]	; (800355c <MX_GPIO_Init+0x2d4>)
 80033ba:	f005 fe3d 	bl	8009038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80033be:	2200      	movs	r2, #0
 80033c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033c4:	4866      	ldr	r0, [pc, #408]	; (8003560 <MX_GPIO_Init+0x2d8>)
 80033c6:	f005 fe37 	bl	8009038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033dc:	4619      	mov	r1, r3
 80033de:	4861      	ldr	r0, [pc, #388]	; (8003564 <MX_GPIO_Init+0x2dc>)
 80033e0:	f005 fc7a 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|DIR4_Pin;
 80033e4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ea:	2301      	movs	r3, #1
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ee:	2301      	movs	r3, #1
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033fa:	4619      	mov	r1, r3
 80033fc:	4854      	ldr	r0, [pc, #336]	; (8003550 <MX_GPIO_Init+0x2c8>)
 80033fe:	f005 fc6b 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003408:	2301      	movs	r3, #1
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003418:	4619      	mov	r1, r3
 800341a:	484d      	ldr	r0, [pc, #308]	; (8003550 <MX_GPIO_Init+0x2c8>)
 800341c:	f005 fc5c 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 8003420:	f644 4301 	movw	r3, #19457	; 0x4c01
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003426:	2301      	movs	r3, #1
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	2300      	movs	r3, #0
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003436:	4619      	mov	r1, r3
 8003438:	4846      	ldr	r0, [pc, #280]	; (8003554 <MX_GPIO_Init+0x2cc>)
 800343a:	f005 fc4d 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800343e:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003444:	2301      	movs	r3, #1
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003454:	4619      	mov	r1, r3
 8003456:	4840      	ldr	r0, [pc, #256]	; (8003558 <MX_GPIO_Init+0x2d0>)
 8003458:	f005 fc3e 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR3_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin;
 800345c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003462:	2301      	movs	r3, #1
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003466:	2301      	movs	r3, #1
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR3_GPIO_Port, &GPIO_InitStruct);
 800346e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003472:	4619      	mov	r1, r3
 8003474:	4839      	ldr	r0, [pc, #228]	; (800355c <MX_GPIO_Init+0x2d4>)
 8003476:	f005 fc2f 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800347a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800348c:	2307      	movs	r3, #7
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003494:	4619      	mov	r1, r3
 8003496:	4832      	ldr	r0, [pc, #200]	; (8003560 <MX_GPIO_Init+0x2d8>)
 8003498:	f005 fc1e 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800349c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a2:	2301      	movs	r3, #1
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2300      	movs	r3, #0
 80034ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80034ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b2:	4619      	mov	r1, r3
 80034b4:	482a      	ldr	r0, [pc, #168]	; (8003560 <MX_GPIO_Init+0x2d8>)
 80034b6:	f005 fc0f 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034ba:	2304      	movs	r3, #4
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034cc:	4619      	mov	r1, r3
 80034ce:	4822      	ldr	r0, [pc, #136]	; (8003558 <MX_GPIO_Init+0x2d0>)
 80034d0:	f005 fc02 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034d4:	2308      	movs	r3, #8
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e6:	4619      	mov	r1, r3
 80034e8:	481d      	ldr	r0, [pc, #116]	; (8003560 <MX_GPIO_Init+0x2d8>)
 80034ea:	f005 fbf5 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 80034ee:	23f0      	movs	r3, #240	; 0xf0
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003500:	4619      	mov	r1, r3
 8003502:	4817      	ldr	r0, [pc, #92]	; (8003560 <MX_GPIO_Init+0x2d8>)
 8003504:	f005 fbe8 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003508:	2302      	movs	r3, #2
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350c:	2301      	movs	r3, #1
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	2300      	movs	r3, #0
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351c:	4619      	mov	r1, r3
 800351e:	480f      	ldr	r0, [pc, #60]	; (800355c <MX_GPIO_Init+0x2d4>)
 8003520:	f005 fbda 	bl	8008cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003524:	2200      	movs	r2, #0
 8003526:	2100      	movs	r1, #0
 8003528:	200a      	movs	r0, #10
 800352a:	f002 f950 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800352e:	200a      	movs	r0, #10
 8003530:	f002 f967 	bl	8005802 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003534:	2200      	movs	r2, #0
 8003536:	2100      	movs	r1, #0
 8003538:	2017      	movs	r0, #23
 800353a:	f002 f948 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800353e:	2017      	movs	r0, #23
 8003540:	f002 f95f 	bl	8005802 <HAL_NVIC_EnableIRQ>

}
 8003544:	bf00      	nop
 8003546:	3738      	adds	r7, #56	; 0x38
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	58024400 	.word	0x58024400
 8003550:	58021400 	.word	0x58021400
 8003554:	58020400 	.word	0x58020400
 8003558:	58021800 	.word	0x58021800
 800355c:	58021000 	.word	0x58021000
 8003560:	58020c00 	.word	0x58020c00
 8003564:	58020800 	.word	0x58020800

08003568 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a08      	ldr	r2, [pc, #32]	; (8003594 <HAL_UART_RxCpltCallback+0x2c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d102      	bne.n	800357e <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 8003578:	2001      	movs	r0, #1
 800357a:	f7fe f8eb 	bl	8001754 <data_in>
	}
	if(huart==&huart7){
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a05      	ldr	r2, [pc, #20]	; (8003598 <HAL_UART_RxCpltCallback+0x30>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d102      	bne.n	800358c <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 8003586:	2002      	movs	r0, #2
 8003588:	f7fe f8e4 	bl	8001754 <data_in>
	}
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	24000e8c 	.word	0x24000e8c
 8003598:	240007c4 	.word	0x240007c4

0800359c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a06      	ldr	r2, [pc, #24]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d102      	bne.n	80035b2 <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
	}
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	24000d6c 	.word	0x24000d6c
 80035c4:	240006b0 	.word	0x240006b0

080035c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d103      	bne.n	80035e0 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 0);
 80035d8:	2100      	movs	r1, #0
 80035da:	2001      	movs	r0, #1
 80035dc:	f7fd fd62 	bl	80010a4 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d103      	bne.n	80035ee <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 0);
 80035e6:	2100      	movs	r1, #0
 80035e8:	2002      	movs	r0, #2
 80035ea:	f7fd fd5b 	bl	80010a4 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d103      	bne.n	80035fc <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 0);
 80035f4:	2100      	movs	r1, #0
 80035f6:	2003      	movs	r0, #3
 80035f8:	f7fd fd54 	bl	80010a4 <Stepper_updateHome>
    }
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003608:	b672      	cpsid	i
}
 800360a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800360c:	e7fe      	b.n	800360c <Error_Handler+0x8>
	...

08003610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_MspInit+0x30>)
 8003618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800361c:	4a08      	ldr	r2, [pc, #32]	; (8003640 <HAL_MspInit+0x30>)
 800361e:	f043 0302 	orr.w	r3, r3, #2
 8003622:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_MspInit+0x30>)
 8003628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	58024400 	.word	0x58024400

08003644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b0ba      	sub	sp, #232	; 0xe8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800365c:	f107 0318 	add.w	r3, r7, #24
 8003660:	22bc      	movs	r2, #188	; 0xbc
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f00d f8af 	bl	80107c8 <memset>
  if(hadc->Instance==ADC3)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a50      	ldr	r2, [pc, #320]	; (80037b0 <HAL_ADC_MspInit+0x16c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	f040 8099 	bne.w	80037a8 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003676:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800367a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 800367c:	2304      	movs	r3, #4
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8003680:	230a      	movs	r3, #10
 8003682:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003684:	2302      	movs	r3, #2
 8003686:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003688:	2302      	movs	r3, #2
 800368a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 800368c:	2304      	movs	r3, #4
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003690:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003694:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800369a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80036a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a8:	f107 0318 	add.w	r3, r7, #24
 80036ac:	4618      	mov	r0, r3
 80036ae:	f006 fe41 	bl	800a334 <HAL_RCCEx_PeriphCLKConfig>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80036b8:	f7ff ffa4 	bl	8003604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80036bc:	4b3d      	ldr	r3, [pc, #244]	; (80037b4 <HAL_ADC_MspInit+0x170>)
 80036be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c2:	4a3c      	ldr	r2, [pc, #240]	; (80037b4 <HAL_ADC_MspInit+0x170>)
 80036c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036cc:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <HAL_ADC_MspInit+0x170>)
 80036ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036da:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <HAL_ADC_MspInit+0x170>)
 80036dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e0:	4a34      	ldr	r2, [pc, #208]	; (80037b4 <HAL_ADC_MspInit+0x170>)
 80036e2:	f043 0320 	orr.w	r3, r3, #32
 80036e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ea:	4b32      	ldr	r3, [pc, #200]	; (80037b4 <HAL_ADC_MspInit+0x170>)
 80036ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f8:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_ADC_MspInit+0x170>)
 80036fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036fe:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <HAL_ADC_MspInit+0x170>)
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003708:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <HAL_ADC_MspInit+0x170>)
 800370a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800371a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800371e:	2303      	movs	r3, #3
 8003720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800372a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800372e:	4619      	mov	r1, r3
 8003730:	4821      	ldr	r0, [pc, #132]	; (80037b8 <HAL_ADC_MspInit+0x174>)
 8003732:	f005 fad1 	bl	8008cd8 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003736:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800373a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800373e:	f000 ffcf 	bl	80046e0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003742:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003746:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800374a:	f000 ffc9 	bl	80046e0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_ADC_MspInit+0x178>)
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_ADC_MspInit+0x17c>)
 8003752:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_ADC_MspInit+0x178>)
 8003756:	2211      	movs	r2, #17
 8003758:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_ADC_MspInit+0x178>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_ADC_MspInit+0x178>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_ADC_MspInit+0x178>)
 8003768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800376c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_ADC_MspInit+0x178>)
 8003770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003774:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_ADC_MspInit+0x178>)
 8003778:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800377c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800377e:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <HAL_ADC_MspInit+0x178>)
 8003780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003784:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_ADC_MspInit+0x178>)
 8003788:	2200      	movs	r2, #0
 800378a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800378c:	480b      	ldr	r0, [pc, #44]	; (80037bc <HAL_ADC_MspInit+0x178>)
 800378e:	f002 f853 	bl	8005838 <HAL_DMA_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 8003798:	f7ff ff34 	bl	8003604 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_ADC_MspInit+0x178>)
 80037a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80037a2:	4a06      	ldr	r2, [pc, #24]	; (80037bc <HAL_ADC_MspInit+0x178>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80037a8:	bf00      	nop
 80037aa:	37e8      	adds	r7, #232	; 0xe8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	58026000 	.word	0x58026000
 80037b4:	58024400 	.word	0x58024400
 80037b8:	58021400 	.word	0x58021400
 80037bc:	24000cf4 	.word	0x24000cf4
 80037c0:	58025408 	.word	0x58025408

080037c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08e      	sub	sp, #56	; 0x38
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a59      	ldr	r2, [pc, #356]	; (8003948 <HAL_ETH_MspInit+0x184>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	f040 80ab 	bne.w	800393e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80037e8:	4b58      	ldr	r3, [pc, #352]	; (800394c <HAL_ETH_MspInit+0x188>)
 80037ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037ee:	4a57      	ldr	r2, [pc, #348]	; (800394c <HAL_ETH_MspInit+0x188>)
 80037f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037f8:	4b54      	ldr	r3, [pc, #336]	; (800394c <HAL_ETH_MspInit+0x188>)
 80037fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003806:	4b51      	ldr	r3, [pc, #324]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800380c:	4a4f      	ldr	r2, [pc, #316]	; (800394c <HAL_ETH_MspInit+0x188>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003816:	4b4d      	ldr	r3, [pc, #308]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003818:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003824:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003826:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800382a:	4a48      	ldr	r2, [pc, #288]	; (800394c <HAL_ETH_MspInit+0x188>)
 800382c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003830:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003834:	4b45      	ldr	r3, [pc, #276]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003842:	4b42      	ldr	r3, [pc, #264]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003848:	4a40      	ldr	r2, [pc, #256]	; (800394c <HAL_ETH_MspInit+0x188>)
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003852:	4b3e      	ldr	r3, [pc, #248]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003860:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003866:	4a39      	ldr	r2, [pc, #228]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003870:	4b36      	ldr	r3, [pc, #216]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800387e:	4b33      	ldr	r3, [pc, #204]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003884:	4a31      	ldr	r2, [pc, #196]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800388e:	4b2f      	ldr	r3, [pc, #188]	; (800394c <HAL_ETH_MspInit+0x188>)
 8003890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_ETH_MspInit+0x188>)
 800389e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a2:	4a2a      	ldr	r2, [pc, #168]	; (800394c <HAL_ETH_MspInit+0x188>)
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_ETH_MspInit+0x188>)
 80038ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80038ba:	2332      	movs	r3, #50	; 0x32
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c6:	2300      	movs	r3, #0
 80038c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038ca:	230b      	movs	r3, #11
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d2:	4619      	mov	r1, r3
 80038d4:	481e      	ldr	r0, [pc, #120]	; (8003950 <HAL_ETH_MspInit+0x18c>)
 80038d6:	f005 f9ff 	bl	8008cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80038da:	2386      	movs	r3, #134	; 0x86
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038de:	2302      	movs	r3, #2
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e6:	2300      	movs	r3, #0
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038ea:	230b      	movs	r3, #11
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f2:	4619      	mov	r1, r3
 80038f4:	4817      	ldr	r0, [pc, #92]	; (8003954 <HAL_ETH_MspInit+0x190>)
 80038f6:	f005 f9ef 	bl	8008cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003908:	2300      	movs	r3, #0
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800390c:	230b      	movs	r3, #11
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003914:	4619      	mov	r1, r3
 8003916:	4810      	ldr	r0, [pc, #64]	; (8003958 <HAL_ETH_MspInit+0x194>)
 8003918:	f005 f9de 	bl	8008cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800391c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800392e:	230b      	movs	r3, #11
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003936:	4619      	mov	r1, r3
 8003938:	4808      	ldr	r0, [pc, #32]	; (800395c <HAL_ETH_MspInit+0x198>)
 800393a:	f005 f9cd 	bl	8008cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800393e:	bf00      	nop
 8003940:	3738      	adds	r7, #56	; 0x38
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40028000 	.word	0x40028000
 800394c:	58024400 	.word	0x58024400
 8003950:	58020800 	.word	0x58020800
 8003954:	58020000 	.word	0x58020000
 8003958:	58020400 	.word	0x58020400
 800395c:	58021800 	.word	0x58021800

08003960 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0ba      	sub	sp, #232	; 0xe8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003968:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003978:	f107 0318 	add.w	r3, r7, #24
 800397c:	22bc      	movs	r2, #188	; 0xbc
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f00c ff21 	bl	80107c8 <memset>
  if(hspi->Instance==SPI3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a37      	ldr	r2, [pc, #220]	; (8003a68 <HAL_SPI_MspInit+0x108>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d166      	bne.n	8003a5e <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003994:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003996:	2300      	movs	r3, #0
 8003998:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800399a:	f107 0318 	add.w	r3, r7, #24
 800399e:	4618      	mov	r0, r3
 80039a0:	f006 fcc8 	bl	800a334 <HAL_RCCEx_PeriphCLKConfig>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80039aa:	f7ff fe2b 	bl	8003604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80039ae:	4b2f      	ldr	r3, [pc, #188]	; (8003a6c <HAL_SPI_MspInit+0x10c>)
 80039b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b4:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <HAL_SPI_MspInit+0x10c>)
 80039b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039be:	4b2b      	ldr	r3, [pc, #172]	; (8003a6c <HAL_SPI_MspInit+0x10c>)
 80039c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_SPI_MspInit+0x10c>)
 80039ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d2:	4a26      	ldr	r2, [pc, #152]	; (8003a6c <HAL_SPI_MspInit+0x10c>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039dc:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <HAL_SPI_MspInit+0x10c>)
 80039de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_SPI_MspInit+0x10c>)
 80039ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f0:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_SPI_MspInit+0x10c>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039fa:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <HAL_SPI_MspInit+0x10c>)
 80039fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a08:	2310      	movs	r3, #16
 8003a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a20:	2306      	movs	r3, #6
 8003a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4810      	ldr	r0, [pc, #64]	; (8003a70 <HAL_SPI_MspInit+0x110>)
 8003a2e:	f005 f953 	bl	8008cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003a32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a4c:	2306      	movs	r3, #6
 8003a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a56:	4619      	mov	r1, r3
 8003a58:	4806      	ldr	r0, [pc, #24]	; (8003a74 <HAL_SPI_MspInit+0x114>)
 8003a5a:	f005 f93d 	bl	8008cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003a5e:	bf00      	nop
 8003a60:	37e8      	adds	r7, #232	; 0xe8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40003c00 	.word	0x40003c00
 8003a6c:	58024400 	.word	0x58024400
 8003a70:	58020000 	.word	0x58020000
 8003a74:	58020800 	.word	0x58020800

08003a78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b090      	sub	sp, #64	; 0x40
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a78      	ldr	r2, [pc, #480]	; (8003c78 <HAL_TIM_Encoder_MspInit+0x200>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d12f      	bne.n	8003afa <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a9a:	4b78      	ldr	r3, [pc, #480]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aa0:	4a76      	ldr	r2, [pc, #472]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003aaa:	4b74      	ldr	r3, [pc, #464]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ab8:	4b70      	ldr	r3, [pc, #448]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003abe:	4a6f      	ldr	r2, [pc, #444]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003ac0:	f043 0310 	orr.w	r3, r3, #16
 8003ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ac8:	4b6c      	ldr	r3, [pc, #432]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 8003ad6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003adc:	2302      	movs	r3, #2
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003af0:	4619      	mov	r1, r3
 8003af2:	4863      	ldr	r0, [pc, #396]	; (8003c80 <HAL_TIM_Encoder_MspInit+0x208>)
 8003af4:	f005 f8f0 	bl	8008cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003af8:	e0ba      	b.n	8003c70 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b02:	d14d      	bne.n	8003ba0 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b04:	4b5d      	ldr	r3, [pc, #372]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b0a:	4a5c      	ldr	r2, [pc, #368]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b22:	4b56      	ldr	r3, [pc, #344]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b28:	4a54      	ldr	r2, [pc, #336]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b32:	4b52      	ldr	r3, [pc, #328]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b40:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b46:	4a4d      	ldr	r2, [pc, #308]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b50:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 8003b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b76:	4619      	mov	r1, r3
 8003b78:	4842      	ldr	r0, [pc, #264]	; (8003c84 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003b7a:	f005 f8ad 	bl	8008cd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8003b7e:	2308      	movs	r3, #8
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 8003b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b96:	4619      	mov	r1, r3
 8003b98:	483b      	ldr	r0, [pc, #236]	; (8003c88 <HAL_TIM_Encoder_MspInit+0x210>)
 8003b9a:	f005 f89d 	bl	8008cd8 <HAL_GPIO_Init>
}
 8003b9e:	e067      	b.n	8003c70 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a39      	ldr	r2, [pc, #228]	; (8003c8c <HAL_TIM_Encoder_MspInit+0x214>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d12e      	bne.n	8003c08 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003baa:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bb0:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bb2:	f043 0302 	orr.w	r3, r3, #2
 8003bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bba:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bce:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bd8:	4b28      	ldr	r3, [pc, #160]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 8003be6:	2330      	movs	r3, #48	; 0x30
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	2302      	movs	r3, #2
 8003bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4821      	ldr	r0, [pc, #132]	; (8003c88 <HAL_TIM_Encoder_MspInit+0x210>)
 8003c02:	f005 f869 	bl	8008cd8 <HAL_GPIO_Init>
}
 8003c06:	e033      	b.n	8003c70 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <HAL_TIM_Encoder_MspInit+0x218>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d12e      	bne.n	8003c70 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c18:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c36:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003c38:	f043 0308 	orr.w	r3, r3, #8
 8003c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x204>)
 8003c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 8003c4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c54:	2302      	movs	r3, #2
 8003c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c60:	2302      	movs	r3, #2
 8003c62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c68:	4619      	mov	r1, r3
 8003c6a:	480a      	ldr	r0, [pc, #40]	; (8003c94 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003c6c:	f005 f834 	bl	8008cd8 <HAL_GPIO_Init>
}
 8003c70:	bf00      	nop
 8003c72:	3740      	adds	r7, #64	; 0x40
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	58021000 	.word	0x58021000
 8003c84:	58020000 	.word	0x58020000
 8003c88:	58020400 	.word	0x58020400
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	58020c00 	.word	0x58020c00

08003c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a48      	ldr	r2, [pc, #288]	; (8003dc8 <HAL_TIM_Base_MspInit+0x130>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d117      	bne.n	8003cda <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003caa:	4b48      	ldr	r3, [pc, #288]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cb0:	4a46      	ldr	r2, [pc, #280]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003cb2:	f043 0308 	orr.w	r3, r3, #8
 8003cb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cba:	4b44      	ldr	r3, [pc, #272]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	2032      	movs	r0, #50	; 0x32
 8003cce:	f001 fd7e 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003cd2:	2032      	movs	r0, #50	; 0x32
 8003cd4:	f001 fd95 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003cd8:	e072      	b.n	8003dc0 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a3c      	ldr	r2, [pc, #240]	; (8003dd0 <HAL_TIM_Base_MspInit+0x138>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d117      	bne.n	8003d14 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003ce4:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cea:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cf4:	4b35      	ldr	r3, [pc, #212]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003d02:	2200      	movs	r2, #0
 8003d04:	2100      	movs	r1, #0
 8003d06:	202b      	movs	r0, #43	; 0x2b
 8003d08:	f001 fd61 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003d0c:	202b      	movs	r0, #43	; 0x2b
 8003d0e:	f001 fd78 	bl	8005802 <HAL_NVIC_EnableIRQ>
}
 8003d12:	e055      	b.n	8003dc0 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2e      	ldr	r2, [pc, #184]	; (8003dd4 <HAL_TIM_Base_MspInit+0x13c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d117      	bne.n	8003d4e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003d1e:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d24:	4a29      	ldr	r2, [pc, #164]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2100      	movs	r1, #0
 8003d40:	202c      	movs	r0, #44	; 0x2c
 8003d42:	f001 fd44 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003d46:	202c      	movs	r0, #44	; 0x2c
 8003d48:	f001 fd5b 	bl	8005802 <HAL_NVIC_EnableIRQ>
}
 8003d4c:	e038      	b.n	8003dc0 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <HAL_TIM_Base_MspInit+0x140>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d117      	bne.n	8003d88 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003d58:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	2075      	movs	r0, #117	; 0x75
 8003d7c:	f001 fd27 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003d80:	2075      	movs	r0, #117	; 0x75
 8003d82:	f001 fd3e 	bl	8005802 <HAL_NVIC_EnableIRQ>
}
 8003d86:	e01b      	b.n	8003dc0 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_TIM_Base_MspInit+0x144>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d116      	bne.n	8003dc0 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d98:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003d9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_TIM_Base_MspInit+0x134>)
 8003da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003db0:	2200      	movs	r2, #0
 8003db2:	2100      	movs	r1, #0
 8003db4:	2076      	movs	r0, #118	; 0x76
 8003db6:	f001 fd0a 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003dba:	2076      	movs	r0, #118	; 0x76
 8003dbc:	f001 fd21 	bl	8005802 <HAL_NVIC_EnableIRQ>
}
 8003dc0:	bf00      	nop
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	40001800 	.word	0x40001800
 8003dd4:	40001c00 	.word	0x40001c00
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 031c 	add.w	r3, r7, #28
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a4b      	ldr	r2, [pc, #300]	; (8003f2c <HAL_TIM_MspPostInit+0x14c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d120      	bne.n	8003e44 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e02:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e08:	4a49      	ldr	r2, [pc, #292]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003e0a:	f043 0302 	orr.w	r3, r3, #2
 8003e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e12:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8003e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e26:	2302      	movs	r3, #2
 8003e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003e32:	2302      	movs	r3, #2
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 8003e36:	f107 031c 	add.w	r3, r7, #28
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	483d      	ldr	r0, [pc, #244]	; (8003f34 <HAL_TIM_MspPostInit+0x154>)
 8003e3e:	f004 ff4b 	bl	8008cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003e42:	e06f      	b.n	8003f24 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <HAL_TIM_MspPostInit+0x158>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d11f      	bne.n	8003e8e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4e:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e54:	4a36      	ldr	r2, [pc, #216]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e5e:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8003e6c:	2340      	movs	r3, #64	; 0x40
 8003e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e70:	2302      	movs	r3, #2
 8003e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e74:	2301      	movs	r3, #1
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003e7c:	2309      	movs	r3, #9
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8003e80:	f107 031c 	add.w	r3, r7, #28
 8003e84:	4619      	mov	r1, r3
 8003e86:	482d      	ldr	r0, [pc, #180]	; (8003f3c <HAL_TIM_MspPostInit+0x15c>)
 8003e88:	f004 ff26 	bl	8008cd8 <HAL_GPIO_Init>
}
 8003e8c:	e04a      	b.n	8003f24 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2b      	ldr	r2, [pc, #172]	; (8003f40 <HAL_TIM_MspPostInit+0x160>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d120      	bne.n	8003eda <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e9e:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ea8:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 8003eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 8003ecc:	f107 031c 	add.w	r3, r7, #28
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4818      	ldr	r0, [pc, #96]	; (8003f34 <HAL_TIM_MspPostInit+0x154>)
 8003ed4:	f004 ff00 	bl	8008cd8 <HAL_GPIO_Init>
}
 8003ed8:	e024      	b.n	8003f24 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <HAL_TIM_MspPostInit+0x164>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d11f      	bne.n	8003f24 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eea:	4a11      	ldr	r2, [pc, #68]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_TIM_MspPostInit+0x150>)
 8003ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8003f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f10:	2300      	movs	r3, #0
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003f14:	2301      	movs	r3, #1
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 8003f18:	f107 031c 	add.w	r3, r7, #28
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4805      	ldr	r0, [pc, #20]	; (8003f34 <HAL_TIM_MspPostInit+0x154>)
 8003f20:	f004 feda 	bl	8008cd8 <HAL_GPIO_Init>
}
 8003f24:	bf00      	nop
 8003f26:	3730      	adds	r7, #48	; 0x30
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40001800 	.word	0x40001800
 8003f30:	58024400 	.word	0x58024400
 8003f34:	58020400 	.word	0x58020400
 8003f38:	40001c00 	.word	0x40001c00
 8003f3c:	58020000 	.word	0x58020000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800

08003f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0ba      	sub	sp, #232	; 0xe8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f60:	f107 0318 	add.w	r3, r7, #24
 8003f64:	22bc      	movs	r2, #188	; 0xbc
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f00c fc2d 	bl	80107c8 <memset>
  if(huart->Instance==UART5)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a7f      	ldr	r2, [pc, #508]	; (8004170 <HAL_UART_MspInit+0x228>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	f040 80a8 	bne.w	80040ca <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f84:	f107 0318 	add.w	r3, r7, #24
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f006 f9d3 	bl	800a334 <HAL_RCCEx_PeriphCLKConfig>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003f94:	f7ff fb36 	bl	8003604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f98:	4b76      	ldr	r3, [pc, #472]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8003f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f9e:	4a75      	ldr	r2, [pc, #468]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8003fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fa8:	4b72      	ldr	r3, [pc, #456]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8003faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb6:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8003fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fbc:	4a6d      	ldr	r2, [pc, #436]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fc6:	4b6b      	ldr	r3, [pc, #428]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8003fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003fd4:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003fd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003fee:	230e      	movs	r3, #14
 8003ff0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	485f      	ldr	r0, [pc, #380]	; (8004178 <HAL_UART_MspInit+0x230>)
 8003ffc:	f004 fe6c 	bl	8008cd8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8004000:	4b5e      	ldr	r3, [pc, #376]	; (800417c <HAL_UART_MspInit+0x234>)
 8004002:	4a5f      	ldr	r2, [pc, #380]	; (8004180 <HAL_UART_MspInit+0x238>)
 8004004:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8004006:	4b5d      	ldr	r3, [pc, #372]	; (800417c <HAL_UART_MspInit+0x234>)
 8004008:	2241      	movs	r2, #65	; 0x41
 800400a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800400c:	4b5b      	ldr	r3, [pc, #364]	; (800417c <HAL_UART_MspInit+0x234>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004012:	4b5a      	ldr	r3, [pc, #360]	; (800417c <HAL_UART_MspInit+0x234>)
 8004014:	2200      	movs	r2, #0
 8004016:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004018:	4b58      	ldr	r3, [pc, #352]	; (800417c <HAL_UART_MspInit+0x234>)
 800401a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800401e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004020:	4b56      	ldr	r3, [pc, #344]	; (800417c <HAL_UART_MspInit+0x234>)
 8004022:	2200      	movs	r2, #0
 8004024:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004026:	4b55      	ldr	r3, [pc, #340]	; (800417c <HAL_UART_MspInit+0x234>)
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800402c:	4b53      	ldr	r3, [pc, #332]	; (800417c <HAL_UART_MspInit+0x234>)
 800402e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004032:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004034:	4b51      	ldr	r3, [pc, #324]	; (800417c <HAL_UART_MspInit+0x234>)
 8004036:	2200      	movs	r2, #0
 8004038:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800403a:	4b50      	ldr	r3, [pc, #320]	; (800417c <HAL_UART_MspInit+0x234>)
 800403c:	2200      	movs	r2, #0
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004040:	484e      	ldr	r0, [pc, #312]	; (800417c <HAL_UART_MspInit+0x234>)
 8004042:	f001 fbf9 	bl	8005838 <HAL_DMA_Init>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800404c:	f7ff fada 	bl	8003604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a4a      	ldr	r2, [pc, #296]	; (800417c <HAL_UART_MspInit+0x234>)
 8004054:	67da      	str	r2, [r3, #124]	; 0x7c
 8004056:	4a49      	ldr	r2, [pc, #292]	; (800417c <HAL_UART_MspInit+0x234>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 800405c:	4b49      	ldr	r3, [pc, #292]	; (8004184 <HAL_UART_MspInit+0x23c>)
 800405e:	4a4a      	ldr	r2, [pc, #296]	; (8004188 <HAL_UART_MspInit+0x240>)
 8004060:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8004062:	4b48      	ldr	r3, [pc, #288]	; (8004184 <HAL_UART_MspInit+0x23c>)
 8004064:	2242      	movs	r2, #66	; 0x42
 8004066:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004068:	4b46      	ldr	r3, [pc, #280]	; (8004184 <HAL_UART_MspInit+0x23c>)
 800406a:	2240      	movs	r2, #64	; 0x40
 800406c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800406e:	4b45      	ldr	r3, [pc, #276]	; (8004184 <HAL_UART_MspInit+0x23c>)
 8004070:	2200      	movs	r2, #0
 8004072:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <HAL_UART_MspInit+0x23c>)
 8004076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800407a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800407c:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_UART_MspInit+0x23c>)
 800407e:	2200      	movs	r2, #0
 8004080:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004082:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_UART_MspInit+0x23c>)
 8004084:	2200      	movs	r2, #0
 8004086:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8004088:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <HAL_UART_MspInit+0x23c>)
 800408a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800408e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004090:	4b3c      	ldr	r3, [pc, #240]	; (8004184 <HAL_UART_MspInit+0x23c>)
 8004092:	2200      	movs	r2, #0
 8004094:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_UART_MspInit+0x23c>)
 8004098:	2200      	movs	r2, #0
 800409a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800409c:	4839      	ldr	r0, [pc, #228]	; (8004184 <HAL_UART_MspInit+0x23c>)
 800409e:	f001 fbcb 	bl	8005838 <HAL_DMA_Init>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80040a8:	f7ff faac 	bl	8003604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a35      	ldr	r2, [pc, #212]	; (8004184 <HAL_UART_MspInit+0x23c>)
 80040b0:	679a      	str	r2, [r3, #120]	; 0x78
 80040b2:	4a34      	ldr	r2, [pc, #208]	; (8004184 <HAL_UART_MspInit+0x23c>)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80040b8:	2200      	movs	r2, #0
 80040ba:	2100      	movs	r1, #0
 80040bc:	2035      	movs	r0, #53	; 0x35
 80040be:	f001 fb86 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80040c2:	2035      	movs	r0, #53	; 0x35
 80040c4:	f001 fb9d 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80040c8:	e04e      	b.n	8004168 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2f      	ldr	r2, [pc, #188]	; (800418c <HAL_UART_MspInit+0x244>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d149      	bne.n	8004168 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80040d4:	2302      	movs	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040de:	f107 0318 	add.w	r3, r7, #24
 80040e2:	4618      	mov	r0, r3
 80040e4:	f006 f926 	bl	800a334 <HAL_RCCEx_PeriphCLKConfig>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 80040ee:	f7ff fa89 	bl	8003604 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_UART_MspInit+0x22c>)
 80040f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040f8:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <HAL_UART_MspInit+0x22c>)
 80040fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004102:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8004104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004108:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8004112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004116:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8004118:	f043 0320 	orr.w	r3, r3, #32
 800411c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_UART_MspInit+0x22c>)
 8004122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 800412e:	23c0      	movs	r3, #192	; 0xc0
 8004130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004134:	2302      	movs	r3, #2
 8004136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	2300      	movs	r3, #0
 800413c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	2300      	movs	r3, #0
 8004142:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004146:	2307      	movs	r3, #7
 8004148:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800414c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004150:	4619      	mov	r1, r3
 8004152:	480f      	ldr	r0, [pc, #60]	; (8004190 <HAL_UART_MspInit+0x248>)
 8004154:	f004 fdc0 	bl	8008cd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8004158:	2200      	movs	r2, #0
 800415a:	2100      	movs	r1, #0
 800415c:	2052      	movs	r0, #82	; 0x52
 800415e:	f001 fb36 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004162:	2052      	movs	r0, #82	; 0x52
 8004164:	f001 fb4d 	bl	8005802 <HAL_NVIC_EnableIRQ>
}
 8004168:	bf00      	nop
 800416a:	37e8      	adds	r7, #232	; 0xe8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40005000 	.word	0x40005000
 8004174:	58024400 	.word	0x58024400
 8004178:	58020400 	.word	0x58020400
 800417c:	2400106c 	.word	0x2400106c
 8004180:	40020028 	.word	0x40020028
 8004184:	24001238 	.word	0x24001238
 8004188:	40020010 	.word	0x40020010
 800418c:	40007800 	.word	0x40007800
 8004190:	58021400 	.word	0x58021400

08004194 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b0b8      	sub	sp, #224	; 0xe0
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041ac:	f107 0310 	add.w	r3, r7, #16
 80041b0:	22bc      	movs	r2, #188	; 0xbc
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f00c fb07 	bl	80107c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2f      	ldr	r2, [pc, #188]	; (800427c <HAL_PCD_MspInit+0xe8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d156      	bne.n	8004272 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80041c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80041ca:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80041ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041d2:	f107 0310 	add.w	r3, r7, #16
 80041d6:	4618      	mov	r0, r3
 80041d8:	f006 f8ac 	bl	800a334 <HAL_RCCEx_PeriphCLKConfig>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80041e2:	f7ff fa0f 	bl	8003604 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80041e6:	f005 f8dd 	bl	80093a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ea:	4b25      	ldr	r3, [pc, #148]	; (8004280 <HAL_PCD_MspInit+0xec>)
 80041ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f0:	4a23      	ldr	r2, [pc, #140]	; (8004280 <HAL_PCD_MspInit+0xec>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041fa:	4b21      	ldr	r3, [pc, #132]	; (8004280 <HAL_PCD_MspInit+0xec>)
 80041fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8004208:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800420c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004210:	2302      	movs	r3, #2
 8004212:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2300      	movs	r3, #0
 8004218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421c:	2300      	movs	r3, #0
 800421e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004222:	230a      	movs	r3, #10
 8004224:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004228:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800422c:	4619      	mov	r1, r3
 800422e:	4815      	ldr	r0, [pc, #84]	; (8004284 <HAL_PCD_MspInit+0xf0>)
 8004230:	f004 fd52 	bl	8008cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004238:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004248:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800424c:	4619      	mov	r1, r3
 800424e:	480d      	ldr	r0, [pc, #52]	; (8004284 <HAL_PCD_MspInit+0xf0>)
 8004250:	f004 fd42 	bl	8008cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_PCD_MspInit+0xec>)
 8004256:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800425a:	4a09      	ldr	r2, [pc, #36]	; (8004280 <HAL_PCD_MspInit+0xec>)
 800425c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004260:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_PCD_MspInit+0xec>)
 8004266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800426a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004272:	bf00      	nop
 8004274:	37e0      	adds	r7, #224	; 0xe0
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40080000 	.word	0x40080000
 8004280:	58024400 	.word	0x58024400
 8004284:	58020000 	.word	0x58020000

08004288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800428c:	e7fe      	b.n	800428c <NMI_Handler+0x4>

0800428e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800428e:	b480      	push	{r7}
 8004290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004292:	e7fe      	b.n	8004292 <HardFault_Handler+0x4>

08004294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004298:	e7fe      	b.n	8004298 <MemManage_Handler+0x4>

0800429a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800429e:	e7fe      	b.n	800429e <BusFault_Handler+0x4>

080042a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042a4:	e7fe      	b.n	80042a4 <UsageFault_Handler+0x4>

080042a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042d4:	f000 f9a0 	bl	8004618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}

080042dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80042e0:	2010      	movs	r0, #16
 80042e2:	f004 fec2 	bl	800906a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <DMA1_Stream0_IRQHandler+0x10>)
 80042f2:	f002 fdc9 	bl	8006e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	24001238 	.word	0x24001238

08004300 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004304:	4802      	ldr	r0, [pc, #8]	; (8004310 <DMA1_Stream1_IRQHandler+0x10>)
 8004306:	f002 fdbf 	bl	8006e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2400106c 	.word	0x2400106c

08004314 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004318:	2020      	movs	r0, #32
 800431a:	f004 fea6 	bl	800906a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800431e:	2040      	movs	r0, #64	; 0x40
 8004320:	f004 fea3 	bl	800906a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004324:	2080      	movs	r0, #128	; 0x80
 8004326:	f004 fea0 	bl	800906a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004336:	f008 fead 	bl	800d094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	240010e4 	.word	0x240010e4

08004344 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800434a:	f008 fea3 	bl	800d094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	24000f80 	.word	0x24000f80

08004358 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800435c:	4802      	ldr	r0, [pc, #8]	; (8004368 <TIM5_IRQHandler+0x10>)
 800435e:	f008 fe99 	bl	800d094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	24000d6c 	.word	0x24000d6c

0800436c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <UART5_IRQHandler+0x10>)
 8004372:	f00a f87d 	bl	800e470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	24000e8c 	.word	0x24000e8c

08004380 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <UART7_IRQHandler+0x10>)
 8004386:	f00a f873 	bl	800e470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	240007c4 	.word	0x240007c4

08004394 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004398:	4802      	ldr	r0, [pc, #8]	; (80043a4 <TIM16_IRQHandler+0x10>)
 800439a:	f008 fe7b 	bl	800d094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	240011ec 	.word	0x240011ec

080043a8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <TIM17_IRQHandler+0x10>)
 80043ae:	f008 fe71 	bl	800d094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	24000ca8 	.word	0x24000ca8

080043bc <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80043c0:	4802      	ldr	r0, [pc, #8]	; (80043cc <BDMA_Channel0_IRQHandler+0x10>)
 80043c2:	f002 fd61 	bl	8006e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	24000cf4 	.word	0x24000cf4

080043d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043d4:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <SystemInit+0xe4>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	4a36      	ldr	r2, [pc, #216]	; (80044b4 <SystemInit+0xe4>)
 80043dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043e4:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <SystemInit+0xe8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d807      	bhi.n	8004400 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80043f0:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <SystemInit+0xe8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 030f 	bic.w	r3, r3, #15
 80043f8:	4a2f      	ldr	r2, [pc, #188]	; (80044b8 <SystemInit+0xe8>)
 80043fa:	f043 0307 	orr.w	r3, r3, #7
 80043fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004400:	4b2e      	ldr	r3, [pc, #184]	; (80044bc <SystemInit+0xec>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <SystemInit+0xec>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800440c:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <SystemInit+0xec>)
 800440e:	2200      	movs	r2, #0
 8004410:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <SystemInit+0xec>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4929      	ldr	r1, [pc, #164]	; (80044bc <SystemInit+0xec>)
 8004418:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <SystemInit+0xf0>)
 800441a:	4013      	ands	r3, r2
 800441c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800441e:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <SystemInit+0xe8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800442a:	4b23      	ldr	r3, [pc, #140]	; (80044b8 <SystemInit+0xe8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 030f 	bic.w	r3, r3, #15
 8004432:	4a21      	ldr	r2, [pc, #132]	; (80044b8 <SystemInit+0xe8>)
 8004434:	f043 0307 	orr.w	r3, r3, #7
 8004438:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800443a:	4b20      	ldr	r3, [pc, #128]	; (80044bc <SystemInit+0xec>)
 800443c:	2200      	movs	r2, #0
 800443e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004440:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <SystemInit+0xec>)
 8004442:	2200      	movs	r2, #0
 8004444:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <SystemInit+0xec>)
 8004448:	2200      	movs	r2, #0
 800444a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <SystemInit+0xec>)
 800444e:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <SystemInit+0xf4>)
 8004450:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004452:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <SystemInit+0xec>)
 8004454:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <SystemInit+0xf8>)
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004458:	4b18      	ldr	r3, [pc, #96]	; (80044bc <SystemInit+0xec>)
 800445a:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <SystemInit+0xfc>)
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800445e:	4b17      	ldr	r3, [pc, #92]	; (80044bc <SystemInit+0xec>)
 8004460:	2200      	movs	r2, #0
 8004462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <SystemInit+0xec>)
 8004466:	4a19      	ldr	r2, [pc, #100]	; (80044cc <SystemInit+0xfc>)
 8004468:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <SystemInit+0xec>)
 800446c:	2200      	movs	r2, #0
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004470:	4b12      	ldr	r3, [pc, #72]	; (80044bc <SystemInit+0xec>)
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <SystemInit+0xfc>)
 8004474:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <SystemInit+0xec>)
 8004478:	2200      	movs	r2, #0
 800447a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800447c:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <SystemInit+0xec>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0e      	ldr	r2, [pc, #56]	; (80044bc <SystemInit+0xec>)
 8004482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004486:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <SystemInit+0xec>)
 800448a:	2200      	movs	r2, #0
 800448c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <SystemInit+0x100>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <SystemInit+0x104>)
 8004494:	4013      	ands	r3, r2
 8004496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449a:	d202      	bcs.n	80044a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800449c:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <SystemInit+0x108>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <SystemInit+0x10c>)
 80044a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80044a8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00
 80044b8:	52002000 	.word	0x52002000
 80044bc:	58024400 	.word	0x58024400
 80044c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80044c4:	02020200 	.word	0x02020200
 80044c8:	01ff0000 	.word	0x01ff0000
 80044cc:	01010280 	.word	0x01010280
 80044d0:	5c001000 	.word	0x5c001000
 80044d4:	ffff0000 	.word	0xffff0000
 80044d8:	51008108 	.word	0x51008108
 80044dc:	52004000 	.word	0x52004000

080044e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80044e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004518 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80044e4:	f7ff ff74 	bl	80043d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044e8:	480c      	ldr	r0, [pc, #48]	; (800451c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044ea:	490d      	ldr	r1, [pc, #52]	; (8004520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044ec:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044f0:	e002      	b.n	80044f8 <LoopCopyDataInit>

080044f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044f6:	3304      	adds	r3, #4

080044f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044fc:	d3f9      	bcc.n	80044f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044fe:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004500:	4c0a      	ldr	r4, [pc, #40]	; (800452c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004504:	e001      	b.n	800450a <LoopFillZerobss>

08004506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004508:	3204      	adds	r2, #4

0800450a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800450a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800450c:	d3fb      	bcc.n	8004506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800450e:	f00c f937 	bl	8010780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004512:	f7fd ff7d 	bl	8002410 <main>
  bx  lr
 8004516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004518:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800451c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004520:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004524:	08013a60 	.word	0x08013a60
  ldr r2, =_sbss
 8004528:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 800452c:	240012b4 	.word	0x240012b4

08004530 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004530:	e7fe      	b.n	8004530 <ADC3_IRQHandler>
	...

08004534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800453a:	2003      	movs	r0, #3
 800453c:	f001 f93c 	bl	80057b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004540:	f005 fd22 	bl	8009f88 <HAL_RCC_GetSysClockFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <HAL_Init+0x68>)
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	4913      	ldr	r1, [pc, #76]	; (80045a0 <HAL_Init+0x6c>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
 800455c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_Init+0x68>)
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	4a0e      	ldr	r2, [pc, #56]	; (80045a0 <HAL_Init+0x6c>)
 8004568:	5cd3      	ldrb	r3, [r2, r3]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
 8004574:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <HAL_Init+0x70>)
 8004576:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004578:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <HAL_Init+0x74>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800457e:	2000      	movs	r0, #0
 8004580:	f000 f814 	bl	80045ac <HAL_InitTick>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e002      	b.n	8004594 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800458e:	f7ff f83f 	bl	8003610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	58024400 	.word	0x58024400
 80045a0:	08011f10 	.word	0x08011f10
 80045a4:	24000004 	.word	0x24000004
 80045a8:	24000000 	.word	0x24000000

080045ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80045b4:	4b15      	ldr	r3, [pc, #84]	; (800460c <HAL_InitTick+0x60>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e021      	b.n	8004604 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80045c0:	4b13      	ldr	r3, [pc, #76]	; (8004610 <HAL_InitTick+0x64>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <HAL_InitTick+0x60>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	4619      	mov	r1, r3
 80045ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 f921 	bl	800581e <HAL_SYSTICK_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e00e      	b.n	8004604 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	d80a      	bhi.n	8004602 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045ec:	2200      	movs	r2, #0
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	f001 f8eb 	bl	80057ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045f8:	4a06      	ldr	r2, [pc, #24]	; (8004614 <HAL_InitTick+0x68>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	2400000c 	.word	0x2400000c
 8004610:	24000000 	.word	0x24000000
 8004614:	24000008 	.word	0x24000008

08004618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_IncTick+0x20>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_IncTick+0x24>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4413      	add	r3, r2
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <HAL_IncTick+0x24>)
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	2400000c 	.word	0x2400000c
 800463c:	240012b0 	.word	0x240012b0

08004640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return uwTick;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_GetTick+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	240012b0 	.word	0x240012b0

08004658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004660:	f7ff ffee 	bl	8004640 <HAL_GetTick>
 8004664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d005      	beq.n	800467e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_Delay+0x44>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800467e:	bf00      	nop
 8004680:	f7ff ffde 	bl	8004640 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	429a      	cmp	r2, r3
 800468e:	d8f7      	bhi.n	8004680 <HAL_Delay+0x28>
  {
  }
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	2400000c 	.word	0x2400000c

080046a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <HAL_GetREVID+0x14>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	0c1b      	lsrs	r3, r3, #16
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	5c001000 	.word	0x5c001000

080046b8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80046c8:	4904      	ldr	r1, [pc, #16]	; (80046dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	58000400 	.word	0x58000400

080046e0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	401a      	ands	r2, r3
 80046f4:	4904      	ldr	r1, [pc, #16]	; (8004708 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	58000400 	.word	0x58000400

0800470c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3360      	adds	r3, #96	; 0x60
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	431a      	orrs	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	611a      	str	r2, [r3, #16]
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b087      	sub	sp, #28
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3360      	adds	r3, #96	; 0x60
 80047f6:	461a      	mov	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	431a      	orrs	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	601a      	str	r2, [r3, #0]
  }
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3330      	adds	r3, #48	; 0x30
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	0a1b      	lsrs	r3, r3, #8
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	4413      	add	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	211f      	movs	r1, #31
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	401a      	ands	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	0e9b      	lsrs	r3, r3, #26
 8004854:	f003 011f 	and.w	r1, r3, #31
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	431a      	orrs	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3314      	adds	r3, #20
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	0e5b      	lsrs	r3, r3, #25
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	4413      	add	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	0d1b      	lsrs	r3, r3, #20
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2107      	movs	r1, #7
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	401a      	ands	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	0d1b      	lsrs	r3, r3, #20
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	fa01 f303 	lsl.w	r3, r1, r3
 80048b8:	431a      	orrs	r2, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e4:	43db      	mvns	r3, r3
 80048e6:	401a      	ands	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f003 0318 	and.w	r3, r3, #24
 80048ee:	4908      	ldr	r1, [pc, #32]	; (8004910 <LL_ADC_SetChannelSingleDiff+0x44>)
 80048f0:	40d9      	lsrs	r1, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	400b      	ands	r3, r1
 80048f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048fa:	431a      	orrs	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	000fffff 	.word	0x000fffff

08004914 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004922:	4013      	ands	r3, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6093      	str	r3, [r2, #8]
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	5fffffc0 	.word	0x5fffffc0

08004938 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800494c:	d101      	bne.n	8004952 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <LL_ADC_EnableInternalRegulator+0x24>)
 800496e:	4013      	ands	r3, r2
 8004970:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	6fffffc0 	.word	0x6fffffc0

08004988 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800499c:	d101      	bne.n	80049a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <LL_ADC_IsEnabled+0x18>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <LL_ADC_IsEnabled+0x1a>
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d101      	bne.n	80049ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d101      	bne.n	8004a14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a24:	b590      	push	{r4, r7, lr}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e18e      	b.n	8004d5c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7fe fdf9 	bl	8003644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ff67 	bl	8004938 <LL_ADC_IsDeepPowerDownEnabled>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff ff4d 	bl	8004914 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ff82 	bl	8004988 <LL_ADC_IsInternalRegulatorEnabled>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d114      	bne.n	8004ab4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff ff66 	bl	8004960 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a94:	4b9a      	ldr	r3, [pc, #616]	; (8004d00 <HAL_ADC_Init+0x2dc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	099b      	lsrs	r3, r3, #6
 8004a9a:	4a9a      	ldr	r2, [pc, #616]	; (8004d04 <HAL_ADC_Init+0x2e0>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	099b      	lsrs	r3, r3, #6
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004aa6:	e002      	b.n	8004aae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f9      	bne.n	8004aa8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff65 	bl	8004988 <LL_ADC_IsInternalRegulatorEnabled>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10d      	bne.n	8004ae0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	f043 0210 	orr.w	r2, r3, #16
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	f043 0201 	orr.w	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff ff76 	bl	80049d6 <LL_ADC_REG_IsConversionOngoing>
 8004aea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 8128 	bne.w	8004d4a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f040 8124 	bne.w	8004d4a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004b0a:	f043 0202 	orr.w	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff ff4a 	bl	80049b0 <LL_ADC_IsEnabled>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d136      	bne.n	8004b90 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a78      	ldr	r2, [pc, #480]	; (8004d08 <HAL_ADC_Init+0x2e4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_ADC_Init+0x112>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a76      	ldr	r2, [pc, #472]	; (8004d0c <HAL_ADC_Init+0x2e8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10e      	bne.n	8004b54 <HAL_ADC_Init+0x130>
 8004b36:	4874      	ldr	r0, [pc, #464]	; (8004d08 <HAL_ADC_Init+0x2e4>)
 8004b38:	f7ff ff3a 	bl	80049b0 <LL_ADC_IsEnabled>
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	4873      	ldr	r0, [pc, #460]	; (8004d0c <HAL_ADC_Init+0x2e8>)
 8004b40:	f7ff ff36 	bl	80049b0 <LL_ADC_IsEnabled>
 8004b44:	4603      	mov	r3, r0
 8004b46:	4323      	orrs	r3, r4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e008      	b.n	8004b66 <HAL_ADC_Init+0x142>
 8004b54:	486e      	ldr	r0, [pc, #440]	; (8004d10 <HAL_ADC_Init+0x2ec>)
 8004b56:	f7ff ff2b 	bl	80049b0 <LL_ADC_IsEnabled>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d012      	beq.n	8004b90 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a66      	ldr	r2, [pc, #408]	; (8004d08 <HAL_ADC_Init+0x2e4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <HAL_ADC_Init+0x15a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a64      	ldr	r2, [pc, #400]	; (8004d0c <HAL_ADC_Init+0x2e8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d101      	bne.n	8004b82 <HAL_ADC_Init+0x15e>
 8004b7e:	4a65      	ldr	r2, [pc, #404]	; (8004d14 <HAL_ADC_Init+0x2f0>)
 8004b80:	e000      	b.n	8004b84 <HAL_ADC_Init+0x160>
 8004b82:	4a65      	ldr	r2, [pc, #404]	; (8004d18 <HAL_ADC_Init+0x2f4>)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f7ff fdbe 	bl	800470c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004b90:	f7ff fd86 	bl	80046a0 <HAL_GetREVID>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d914      	bls.n	8004bc8 <HAL_ADC_Init+0x1a4>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d110      	bne.n	8004bc8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7d5b      	ldrb	r3, [r3, #21]
 8004baa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bb0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004bb6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	7f1b      	ldrb	r3, [r3, #28]
 8004bbc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004bbe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bc0:	f043 030c 	orr.w	r3, r3, #12
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e00d      	b.n	8004be4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	7d5b      	ldrb	r3, [r3, #21]
 8004bcc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bd2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004bd8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7f1b      	ldrb	r3, [r3, #28]
 8004bde:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	7f1b      	ldrb	r3, [r3, #28]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d106      	bne.n	8004bfa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	045b      	lsls	r3, r3, #17
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <HAL_ADC_Init+0x2f8>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	69b9      	ldr	r1, [r7, #24]
 8004c26:	430b      	orrs	r3, r1
 8004c28:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fed1 	bl	80049d6 <LL_ADC_REG_IsConversionOngoing>
 8004c34:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fede 	bl	80049fc <LL_ADC_INJ_IsConversionOngoing>
 8004c40:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d14a      	bne.n	8004cde <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d147      	bne.n	8004cde <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	7d1b      	ldrb	r3, [r3, #20]
 8004c52:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <HAL_ADC_Init+0x2fc>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d11b      	bne.n	8004cb2 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <HAL_ADC_Init+0x300>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c8e:	3a01      	subs	r2, #1
 8004c90:	0411      	lsls	r1, r2, #16
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c96:	4311      	orrs	r1, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	611a      	str	r2, [r3, #16]
 8004cb0:	e007      	b.n	8004cc2 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fb93 	bl	8005404 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d120      	bne.n	8004d28 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	f023 010f 	bic.w	r1, r3, #15
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8004cfe:	e01b      	b.n	8004d38 <HAL_ADC_Init+0x314>
 8004d00:	24000000 	.word	0x24000000
 8004d04:	053e2d63 	.word	0x053e2d63
 8004d08:	40022000 	.word	0x40022000
 8004d0c:	40022100 	.word	0x40022100
 8004d10:	58026000 	.word	0x58026000
 8004d14:	40022300 	.word	0x40022300
 8004d18:	58026300 	.word	0x58026300
 8004d1c:	fff0c003 	.word	0xfff0c003
 8004d20:	ffffbffc 	.word	0xffffbffc
 8004d24:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 020f 	bic.w	r2, r2, #15
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	f023 0303 	bic.w	r3, r3, #3
 8004d40:	f043 0201 	orr.w	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
 8004d48:	e007      	b.n	8004d5a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	f043 0210 	orr.w	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3724      	adds	r7, #36	; 0x24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}

08004d64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b0a1      	sub	sp, #132	; 0x84
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a9d      	ldr	r2, [pc, #628]	; (8004ff4 <HAL_ADC_ConfigChannel+0x290>)
 8004d7e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x2a>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e321      	b.n	80053d2 <HAL_ADC_ConfigChannel+0x66e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff fe1b 	bl	80049d6 <LL_ADC_REG_IsConversionOngoing>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f040 8306 	bne.w	80053b4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d108      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x62>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	0e9b      	lsrs	r3, r3, #26
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	e016      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x90>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dce:	fa93 f3a3 	rbit	r3, r3
 8004dd2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dd6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004dd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004dde:	2320      	movs	r3, #32
 8004de0:	e003      	b.n	8004dea <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004de4:	fab3 f383 	clz	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2201      	movs	r2, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	69d1      	ldr	r1, [r2, #28]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7ff fd04 	bl	800481c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fddc 	bl	80049d6 <LL_ADC_REG_IsConversionOngoing>
 8004e1e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fde9 	bl	80049fc <LL_ADC_INJ_IsConversionOngoing>
 8004e2a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f040 80b3 	bne.w	8004f9a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 80af 	bne.w	8004f9a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f7ff fd13 	bl	8004874 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004e4e:	4b6a      	ldr	r3, [pc, #424]	; (8004ff8 <HAL_ADC_ConfigChannel+0x294>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e5a:	d10b      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x110>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	e01d      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x14c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10b      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x136>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	089b      	lsrs	r3, r3, #2
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	e00a      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x14c>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	089b      	lsrs	r3, r3, #2
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d027      	beq.n	8004f0a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6919      	ldr	r1, [r3, #16]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec8:	f7ff fc54 	bl	8004774 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6919      	ldr	r1, [r3, #16]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	7e5b      	ldrb	r3, [r3, #25]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d102      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x17e>
 8004edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ee0:	e000      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0x180>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f7ff fc7e 	bl	80047e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6919      	ldr	r1, [r3, #16]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	7e1b      	ldrb	r3, [r3, #24]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d102      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x19c>
 8004efa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004efe:	e000      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x19e>
 8004f00:	2300      	movs	r3, #0
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7ff fc56 	bl	80047b4 <LL_ADC_SetDataRightShift>
 8004f08:	e047      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	069b      	lsls	r3, r3, #26
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d107      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f2c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	069b      	lsls	r3, r3, #26
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d107      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f50:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	069b      	lsls	r3, r3, #26
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d107      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f74:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	069b      	lsls	r3, r3, #26
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d107      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f98:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fd06 	bl	80049b0 <LL_ADC_IsEnabled>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f040 820d 	bne.w	80053c6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f7ff fc87 	bl	80048cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <HAL_ADC_ConfigChannel+0x290>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	f040 8133 	bne.w	8005230 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d110      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x298>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	0e9b      	lsrs	r3, r3, #26
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2b09      	cmp	r3, #9
 8004fe8:	bf94      	ite	ls
 8004fea:	2301      	movls	r3, #1
 8004fec:	2300      	movhi	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	e01e      	b.n	8005030 <HAL_ADC_ConfigChannel+0x2cc>
 8004ff2:	bf00      	nop
 8004ff4:	47ff0000 	.word	0x47ff0000
 8004ff8:	5c001000 	.word	0x5c001000
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005004:	fa93 f3a3 	rbit	r3, r3
 8005008:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800500a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800500c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800500e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005014:	2320      	movs	r3, #32
 8005016:	e003      	b.n	8005020 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3301      	adds	r3, #1
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2b09      	cmp	r3, #9
 8005028:	bf94      	ite	ls
 800502a:	2301      	movls	r3, #1
 800502c:	2300      	movhi	r3, #0
 800502e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005030:	2b00      	cmp	r3, #0
 8005032:	d079      	beq.n	8005128 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800503c:	2b00      	cmp	r3, #0
 800503e:	d107      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x2ec>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	0e9b      	lsrs	r3, r3, #26
 8005046:	3301      	adds	r3, #1
 8005048:	069b      	lsls	r3, r3, #26
 800504a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800504e:	e015      	b.n	800507c <HAL_ADC_ConfigChannel+0x318>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005058:	fa93 f3a3 	rbit	r3, r3
 800505c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800505e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005060:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005068:	2320      	movs	r3, #32
 800506a:	e003      	b.n	8005074 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800506c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800506e:	fab3 f383 	clz	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	3301      	adds	r3, #1
 8005076:	069b      	lsls	r3, r3, #26
 8005078:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005084:	2b00      	cmp	r3, #0
 8005086:	d109      	bne.n	800509c <HAL_ADC_ConfigChannel+0x338>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0e9b      	lsrs	r3, r3, #26
 800508e:	3301      	adds	r3, #1
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2101      	movs	r1, #1
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	e017      	b.n	80050cc <HAL_ADC_ConfigChannel+0x368>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a4:	fa93 f3a3 	rbit	r3, r3
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80050aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80050ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80050b4:	2320      	movs	r3, #32
 80050b6:	e003      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80050b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ba:	fab3 f383 	clz	r3, r3
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	3301      	adds	r3, #1
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	2101      	movs	r1, #1
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	ea42 0103 	orr.w	r1, r2, r3
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x38e>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	0e9b      	lsrs	r3, r3, #26
 80050e2:	3301      	adds	r3, #1
 80050e4:	f003 021f 	and.w	r2, r3, #31
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	051b      	lsls	r3, r3, #20
 80050f0:	e018      	b.n	8005124 <HAL_ADC_ConfigChannel+0x3c0>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	fa93 f3a3 	rbit	r3, r3
 80050fe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800510a:	2320      	movs	r3, #32
 800510c:	e003      	b.n	8005116 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	fab3 f383 	clz	r3, r3
 8005114:	b2db      	uxtb	r3, r3
 8005116:	3301      	adds	r3, #1
 8005118:	f003 021f 	and.w	r2, r3, #31
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005124:	430b      	orrs	r3, r1
 8005126:	e07e      	b.n	8005226 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x3e0>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	0e9b      	lsrs	r3, r3, #26
 800513a:	3301      	adds	r3, #1
 800513c:	069b      	lsls	r3, r3, #26
 800513e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005142:	e015      	b.n	8005170 <HAL_ADC_ConfigChannel+0x40c>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	fa93 f3a3 	rbit	r3, r3
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800515c:	2320      	movs	r3, #32
 800515e:	e003      	b.n	8005168 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	3301      	adds	r3, #1
 800516a:	069b      	lsls	r3, r3, #26
 800516c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_ADC_ConfigChannel+0x42c>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	0e9b      	lsrs	r3, r3, #26
 8005182:	3301      	adds	r3, #1
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2101      	movs	r1, #1
 800518a:	fa01 f303 	lsl.w	r3, r1, r3
 800518e:	e017      	b.n	80051c0 <HAL_ADC_ConfigChannel+0x45c>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	fa93 f3a3 	rbit	r3, r3
 800519c:	61bb      	str	r3, [r7, #24]
  return result;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80051a8:	2320      	movs	r3, #32
 80051aa:	e003      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	fab3 f383 	clz	r3, r3
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	3301      	adds	r3, #1
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	2101      	movs	r1, #1
 80051bc:	fa01 f303 	lsl.w	r3, r1, r3
 80051c0:	ea42 0103 	orr.w	r1, r2, r3
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10d      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x488>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0e9b      	lsrs	r3, r3, #26
 80051d6:	3301      	adds	r3, #1
 80051d8:	f003 021f 	and.w	r2, r3, #31
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	3b1e      	subs	r3, #30
 80051e4:	051b      	lsls	r3, r3, #20
 80051e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051ea:	e01b      	b.n	8005224 <HAL_ADC_ConfigChannel+0x4c0>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	fa93 f3a3 	rbit	r3, r3
 80051f8:	60fb      	str	r3, [r7, #12]
  return result;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005204:	2320      	movs	r3, #32
 8005206:	e003      	b.n	8005210 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	fab3 f383 	clz	r3, r3
 800520e:	b2db      	uxtb	r3, r3
 8005210:	3301      	adds	r3, #1
 8005212:	f003 021f 	and.w	r2, r3, #31
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	3b1e      	subs	r3, #30
 800521e:	051b      	lsls	r3, r3, #20
 8005220:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005224:	430b      	orrs	r3, r1
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	6892      	ldr	r2, [r2, #8]
 800522a:	4619      	mov	r1, r3
 800522c:	f7ff fb22 	bl	8004874 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f280 80c6 	bge.w	80053c6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a67      	ldr	r2, [pc, #412]	; (80053dc <HAL_ADC_ConfigChannel+0x678>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_ADC_ConfigChannel+0x4ea>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a65      	ldr	r2, [pc, #404]	; (80053e0 <HAL_ADC_ConfigChannel+0x67c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d101      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x4ee>
 800524e:	4b65      	ldr	r3, [pc, #404]	; (80053e4 <HAL_ADC_ConfigChannel+0x680>)
 8005250:	e000      	b.n	8005254 <HAL_ADC_ConfigChannel+0x4f0>
 8005252:	4b65      	ldr	r3, [pc, #404]	; (80053e8 <HAL_ADC_ConfigChannel+0x684>)
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fa7f 	bl	8004758 <LL_ADC_GetCommonPathInternalCh>
 800525a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a5e      	ldr	r2, [pc, #376]	; (80053dc <HAL_ADC_ConfigChannel+0x678>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <HAL_ADC_ConfigChannel+0x50c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a5d      	ldr	r2, [pc, #372]	; (80053e0 <HAL_ADC_ConfigChannel+0x67c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10e      	bne.n	800528e <HAL_ADC_ConfigChannel+0x52a>
 8005270:	485a      	ldr	r0, [pc, #360]	; (80053dc <HAL_ADC_ConfigChannel+0x678>)
 8005272:	f7ff fb9d 	bl	80049b0 <LL_ADC_IsEnabled>
 8005276:	4604      	mov	r4, r0
 8005278:	4859      	ldr	r0, [pc, #356]	; (80053e0 <HAL_ADC_ConfigChannel+0x67c>)
 800527a:	f7ff fb99 	bl	80049b0 <LL_ADC_IsEnabled>
 800527e:	4603      	mov	r3, r0
 8005280:	4323      	orrs	r3, r4
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e008      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x53c>
 800528e:	4857      	ldr	r0, [pc, #348]	; (80053ec <HAL_ADC_ConfigChannel+0x688>)
 8005290:	f7ff fb8e 	bl	80049b0 <LL_ADC_IsEnabled>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d07d      	beq.n	80053a0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a51      	ldr	r2, [pc, #324]	; (80053f0 <HAL_ADC_ConfigChannel+0x68c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d130      	bne.n	8005310 <HAL_ADC_ConfigChannel+0x5ac>
 80052ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d12b      	bne.n	8005310 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a4b      	ldr	r2, [pc, #300]	; (80053ec <HAL_ADC_ConfigChannel+0x688>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	f040 8081 	bne.w	80053c6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a44      	ldr	r2, [pc, #272]	; (80053dc <HAL_ADC_ConfigChannel+0x678>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <HAL_ADC_ConfigChannel+0x574>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a43      	ldr	r2, [pc, #268]	; (80053e0 <HAL_ADC_ConfigChannel+0x67c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <HAL_ADC_ConfigChannel+0x578>
 80052d8:	4a42      	ldr	r2, [pc, #264]	; (80053e4 <HAL_ADC_ConfigChannel+0x680>)
 80052da:	e000      	b.n	80052de <HAL_ADC_ConfigChannel+0x57a>
 80052dc:	4a42      	ldr	r2, [pc, #264]	; (80053e8 <HAL_ADC_ConfigChannel+0x684>)
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f7ff fa23 	bl	8004732 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052ec:	4b41      	ldr	r3, [pc, #260]	; (80053f4 <HAL_ADC_ConfigChannel+0x690>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	099b      	lsrs	r3, r3, #6
 80052f2:	4a41      	ldr	r2, [pc, #260]	; (80053f8 <HAL_ADC_ConfigChannel+0x694>)
 80052f4:	fba2 2303 	umull	r2, r3, r2, r3
 80052f8:	099b      	lsrs	r3, r3, #6
 80052fa:	3301      	adds	r3, #1
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005300:	e002      	b.n	8005308 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	3b01      	subs	r3, #1
 8005306:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f9      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800530e:	e05a      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a39      	ldr	r2, [pc, #228]	; (80053fc <HAL_ADC_ConfigChannel+0x698>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d11e      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x5f4>
 800531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d119      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a30      	ldr	r2, [pc, #192]	; (80053ec <HAL_ADC_ConfigChannel+0x688>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d14b      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <HAL_ADC_ConfigChannel+0x678>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_ADC_ConfigChannel+0x5de>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a28      	ldr	r2, [pc, #160]	; (80053e0 <HAL_ADC_ConfigChannel+0x67c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x5e2>
 8005342:	4a28      	ldr	r2, [pc, #160]	; (80053e4 <HAL_ADC_ConfigChannel+0x680>)
 8005344:	e000      	b.n	8005348 <HAL_ADC_ConfigChannel+0x5e4>
 8005346:	4a28      	ldr	r2, [pc, #160]	; (80053e8 <HAL_ADC_ConfigChannel+0x684>)
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7ff f9ee 	bl	8004732 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005356:	e036      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a28      	ldr	r2, [pc, #160]	; (8005400 <HAL_ADC_ConfigChannel+0x69c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d131      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x662>
 8005362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d12c      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1e      	ldr	r2, [pc, #120]	; (80053ec <HAL_ADC_ConfigChannel+0x688>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d127      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a18      	ldr	r2, [pc, #96]	; (80053dc <HAL_ADC_ConfigChannel+0x678>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_ADC_ConfigChannel+0x626>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <HAL_ADC_ConfigChannel+0x67c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d101      	bne.n	800538e <HAL_ADC_ConfigChannel+0x62a>
 800538a:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <HAL_ADC_ConfigChannel+0x680>)
 800538c:	e000      	b.n	8005390 <HAL_ADC_ConfigChannel+0x62c>
 800538e:	4a16      	ldr	r2, [pc, #88]	; (80053e8 <HAL_ADC_ConfigChannel+0x684>)
 8005390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005392:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f7ff f9ca 	bl	8004732 <LL_ADC_SetCommonPathInternalCh>
 800539e:	e012      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80053b2:	e008      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80053ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3784      	adds	r7, #132	; 0x84
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd90      	pop	{r4, r7, pc}
 80053da:	bf00      	nop
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40022100 	.word	0x40022100
 80053e4:	40022300 	.word	0x40022300
 80053e8:	58026300 	.word	0x58026300
 80053ec:	58026000 	.word	0x58026000
 80053f0:	cb840000 	.word	0xcb840000
 80053f4:	24000000 	.word	0x24000000
 80053f8:	053e2d63 	.word	0x053e2d63
 80053fc:	c7520000 	.word	0xc7520000
 8005400:	cfb80000 	.word	0xcfb80000

08005404 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a79      	ldr	r2, [pc, #484]	; (80055f8 <ADC_ConfigureBoostMode+0x1f4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <ADC_ConfigureBoostMode+0x1c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a78      	ldr	r2, [pc, #480]	; (80055fc <ADC_ConfigureBoostMode+0x1f8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d109      	bne.n	8005434 <ADC_ConfigureBoostMode+0x30>
 8005420:	4b77      	ldr	r3, [pc, #476]	; (8005600 <ADC_ConfigureBoostMode+0x1fc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf14      	ite	ne
 800542c:	2301      	movne	r3, #1
 800542e:	2300      	moveq	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	e008      	b.n	8005446 <ADC_ConfigureBoostMode+0x42>
 8005434:	4b73      	ldr	r3, [pc, #460]	; (8005604 <ADC_ConfigureBoostMode+0x200>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800543c:	2b00      	cmp	r3, #0
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01c      	beq.n	8005484 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800544a:	f004 ff17 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 800544e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005458:	d010      	beq.n	800547c <ADC_ConfigureBoostMode+0x78>
 800545a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800545e:	d871      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x140>
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005464:	d002      	beq.n	800546c <ADC_ConfigureBoostMode+0x68>
 8005466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800546a:	d16b      	bne.n	8005544 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	60fb      	str	r3, [r7, #12]
        break;
 800547a:	e066      	b.n	800554a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	60fb      	str	r3, [r7, #12]
        break;
 8005482:	e062      	b.n	800554a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005484:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005488:	f005 fe94 	bl	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800548c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005496:	d051      	beq.n	800553c <ADC_ConfigureBoostMode+0x138>
 8005498:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800549c:	d854      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x144>
 800549e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80054a2:	d047      	beq.n	8005534 <ADC_ConfigureBoostMode+0x130>
 80054a4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80054a8:	d84e      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x144>
 80054aa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054ae:	d03d      	beq.n	800552c <ADC_ConfigureBoostMode+0x128>
 80054b0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054b4:	d848      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x144>
 80054b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ba:	d033      	beq.n	8005524 <ADC_ConfigureBoostMode+0x120>
 80054bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c0:	d842      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x144>
 80054c2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054c6:	d029      	beq.n	800551c <ADC_ConfigureBoostMode+0x118>
 80054c8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054cc:	d83c      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x144>
 80054ce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054d2:	d01a      	beq.n	800550a <ADC_ConfigureBoostMode+0x106>
 80054d4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054d8:	d836      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x144>
 80054da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054de:	d014      	beq.n	800550a <ADC_ConfigureBoostMode+0x106>
 80054e0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054e4:	d830      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x144>
 80054e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ea:	d00e      	beq.n	800550a <ADC_ConfigureBoostMode+0x106>
 80054ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f0:	d82a      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x144>
 80054f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054f6:	d008      	beq.n	800550a <ADC_ConfigureBoostMode+0x106>
 80054f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054fc:	d824      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x144>
 80054fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005502:	d002      	beq.n	800550a <ADC_ConfigureBoostMode+0x106>
 8005504:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005508:	d11e      	bne.n	8005548 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	0c9b      	lsrs	r3, r3, #18
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	60fb      	str	r3, [r7, #12]
        break;
 800551a:	e016      	b.n	800554a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	60fb      	str	r3, [r7, #12]
        break;
 8005522:	e012      	b.n	800554a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	60fb      	str	r3, [r7, #12]
        break;
 800552a:	e00e      	b.n	800554a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	099b      	lsrs	r3, r3, #6
 8005530:	60fb      	str	r3, [r7, #12]
        break;
 8005532:	e00a      	b.n	800554a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	09db      	lsrs	r3, r3, #7
 8005538:	60fb      	str	r3, [r7, #12]
        break;
 800553a:	e006      	b.n	800554a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	0a1b      	lsrs	r3, r3, #8
 8005540:	60fb      	str	r3, [r7, #12]
        break;
 8005542:	e002      	b.n	800554a <ADC_ConfigureBoostMode+0x146>
        break;
 8005544:	bf00      	nop
 8005546:	e000      	b.n	800554a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005548:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800554a:	f7ff f8a9 	bl	80046a0 <HAL_GetREVID>
 800554e:	4603      	mov	r3, r0
 8005550:	f241 0203 	movw	r2, #4099	; 0x1003
 8005554:	4293      	cmp	r3, r2
 8005556:	d815      	bhi.n	8005584 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a2b      	ldr	r2, [pc, #172]	; (8005608 <ADC_ConfigureBoostMode+0x204>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d908      	bls.n	8005572 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800556e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005570:	e03e      	b.n	80055f0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005580:	609a      	str	r2, [r3, #8]
}
 8005582:	e035      	b.n	80055f0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a1f      	ldr	r2, [pc, #124]	; (800560c <ADC_ConfigureBoostMode+0x208>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d808      	bhi.n	80055a4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055a0:	609a      	str	r2, [r3, #8]
}
 80055a2:	e025      	b.n	80055f0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <ADC_ConfigureBoostMode+0x20c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d80a      	bhi.n	80055c2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055be:	609a      	str	r2, [r3, #8]
}
 80055c0:	e016      	b.n	80055f0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a13      	ldr	r2, [pc, #76]	; (8005614 <ADC_ConfigureBoostMode+0x210>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d80a      	bhi.n	80055e0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055dc:	609a      	str	r2, [r3, #8]
}
 80055de:	e007      	b.n	80055f0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055ee:	609a      	str	r2, [r3, #8]
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40022000 	.word	0x40022000
 80055fc:	40022100 	.word	0x40022100
 8005600:	40022300 	.word	0x40022300
 8005604:	58026300 	.word	0x58026300
 8005608:	01312d00 	.word	0x01312d00
 800560c:	005f5e10 	.word	0x005f5e10
 8005610:	00bebc20 	.word	0x00bebc20
 8005614:	017d7840 	.word	0x017d7840

08005618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <__NVIC_SetPriorityGrouping+0x40>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005634:	4013      	ands	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <__NVIC_SetPriorityGrouping+0x44>)
 8005642:	4313      	orrs	r3, r2
 8005644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005646:	4a04      	ldr	r2, [pc, #16]	; (8005658 <__NVIC_SetPriorityGrouping+0x40>)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	60d3      	str	r3, [r2, #12]
}
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	e000ed00 	.word	0xe000ed00
 800565c:	05fa0000 	.word	0x05fa0000

08005660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <__NVIC_GetPriorityGrouping+0x18>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	f003 0307 	and.w	r3, r3, #7
}
 800566e:	4618      	mov	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	e000ed00 	.word	0xe000ed00

0800567c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	db0b      	blt.n	80056a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	f003 021f 	and.w	r2, r3, #31
 8005694:	4907      	ldr	r1, [pc, #28]	; (80056b4 <__NVIC_EnableIRQ+0x38>)
 8005696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	2001      	movs	r0, #1
 800569e:	fa00 f202 	lsl.w	r2, r0, r2
 80056a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	e000e100 	.word	0xe000e100

080056b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	db0a      	blt.n	80056e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	490c      	ldr	r1, [pc, #48]	; (8005704 <__NVIC_SetPriority+0x4c>)
 80056d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d6:	0112      	lsls	r2, r2, #4
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	440b      	add	r3, r1
 80056dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056e0:	e00a      	b.n	80056f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4908      	ldr	r1, [pc, #32]	; (8005708 <__NVIC_SetPriority+0x50>)
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	3b04      	subs	r3, #4
 80056f0:	0112      	lsls	r2, r2, #4
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	440b      	add	r3, r1
 80056f6:	761a      	strb	r2, [r3, #24]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000e100 	.word	0xe000e100
 8005708:	e000ed00 	.word	0xe000ed00

0800570c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800570c:	b480      	push	{r7}
 800570e:	b089      	sub	sp, #36	; 0x24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f1c3 0307 	rsb	r3, r3, #7
 8005726:	2b04      	cmp	r3, #4
 8005728:	bf28      	it	cs
 800572a:	2304      	movcs	r3, #4
 800572c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3304      	adds	r3, #4
 8005732:	2b06      	cmp	r3, #6
 8005734:	d902      	bls.n	800573c <NVIC_EncodePriority+0x30>
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3b03      	subs	r3, #3
 800573a:	e000      	b.n	800573e <NVIC_EncodePriority+0x32>
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005740:	f04f 32ff 	mov.w	r2, #4294967295
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43da      	mvns	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	401a      	ands	r2, r3
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005754:	f04f 31ff 	mov.w	r1, #4294967295
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	fa01 f303 	lsl.w	r3, r1, r3
 800575e:	43d9      	mvns	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005764:	4313      	orrs	r3, r2
         );
}
 8005766:	4618      	mov	r0, r3
 8005768:	3724      	adds	r7, #36	; 0x24
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3b01      	subs	r3, #1
 8005780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005784:	d301      	bcc.n	800578a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005786:	2301      	movs	r3, #1
 8005788:	e00f      	b.n	80057aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800578a:	4a0a      	ldr	r2, [pc, #40]	; (80057b4 <SysTick_Config+0x40>)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3b01      	subs	r3, #1
 8005790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005792:	210f      	movs	r1, #15
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
 8005798:	f7ff ff8e 	bl	80056b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <SysTick_Config+0x40>)
 800579e:	2200      	movs	r2, #0
 80057a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057a2:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <SysTick_Config+0x40>)
 80057a4:	2207      	movs	r2, #7
 80057a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	e000e010 	.word	0xe000e010

080057b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ff29 	bl	8005618 <__NVIC_SetPriorityGrouping>
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b086      	sub	sp, #24
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	4603      	mov	r3, r0
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057dc:	f7ff ff40 	bl	8005660 <__NVIC_GetPriorityGrouping>
 80057e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	6978      	ldr	r0, [r7, #20]
 80057e8:	f7ff ff90 	bl	800570c <NVIC_EncodePriority>
 80057ec:	4602      	mov	r2, r0
 80057ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057f2:	4611      	mov	r1, r2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ff5f 	bl	80056b8 <__NVIC_SetPriority>
}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	4603      	mov	r3, r0
 800580a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800580c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff ff33 	bl	800567c <__NVIC_EnableIRQ>
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ffa4 	bl	8005774 <SysTick_Config>
 800582c:	4603      	mov	r3, r0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005840:	f7fe fefe 	bl	8004640 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e316      	b.n	8005e7e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a66      	ldr	r2, [pc, #408]	; (80059f0 <HAL_DMA_Init+0x1b8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d04a      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a65      	ldr	r2, [pc, #404]	; (80059f4 <HAL_DMA_Init+0x1bc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d045      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a63      	ldr	r2, [pc, #396]	; (80059f8 <HAL_DMA_Init+0x1c0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d040      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a62      	ldr	r2, [pc, #392]	; (80059fc <HAL_DMA_Init+0x1c4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d03b      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a60      	ldr	r2, [pc, #384]	; (8005a00 <HAL_DMA_Init+0x1c8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d036      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a5f      	ldr	r2, [pc, #380]	; (8005a04 <HAL_DMA_Init+0x1cc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d031      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5d      	ldr	r2, [pc, #372]	; (8005a08 <HAL_DMA_Init+0x1d0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d02c      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a5c      	ldr	r2, [pc, #368]	; (8005a0c <HAL_DMA_Init+0x1d4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d027      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a5a      	ldr	r2, [pc, #360]	; (8005a10 <HAL_DMA_Init+0x1d8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d022      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a59      	ldr	r2, [pc, #356]	; (8005a14 <HAL_DMA_Init+0x1dc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d01d      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a57      	ldr	r2, [pc, #348]	; (8005a18 <HAL_DMA_Init+0x1e0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d018      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a56      	ldr	r2, [pc, #344]	; (8005a1c <HAL_DMA_Init+0x1e4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a54      	ldr	r2, [pc, #336]	; (8005a20 <HAL_DMA_Init+0x1e8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a53      	ldr	r2, [pc, #332]	; (8005a24 <HAL_DMA_Init+0x1ec>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a51      	ldr	r2, [pc, #324]	; (8005a28 <HAL_DMA_Init+0x1f0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a50      	ldr	r2, [pc, #320]	; (8005a2c <HAL_DMA_Init+0x1f4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d101      	bne.n	80058f4 <HAL_DMA_Init+0xbc>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <HAL_DMA_Init+0xbe>
 80058f4:	2300      	movs	r3, #0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 813b 	beq.w	8005b72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a37      	ldr	r2, [pc, #220]	; (80059f0 <HAL_DMA_Init+0x1b8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d04a      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a36      	ldr	r2, [pc, #216]	; (80059f4 <HAL_DMA_Init+0x1bc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d045      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a34      	ldr	r2, [pc, #208]	; (80059f8 <HAL_DMA_Init+0x1c0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d040      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a33      	ldr	r2, [pc, #204]	; (80059fc <HAL_DMA_Init+0x1c4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d03b      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a31      	ldr	r2, [pc, #196]	; (8005a00 <HAL_DMA_Init+0x1c8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d036      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a30      	ldr	r2, [pc, #192]	; (8005a04 <HAL_DMA_Init+0x1cc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d031      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2e      	ldr	r2, [pc, #184]	; (8005a08 <HAL_DMA_Init+0x1d0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d02c      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2d      	ldr	r2, [pc, #180]	; (8005a0c <HAL_DMA_Init+0x1d4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d027      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2b      	ldr	r2, [pc, #172]	; (8005a10 <HAL_DMA_Init+0x1d8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d022      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2a      	ldr	r2, [pc, #168]	; (8005a14 <HAL_DMA_Init+0x1dc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d01d      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a28      	ldr	r2, [pc, #160]	; (8005a18 <HAL_DMA_Init+0x1e0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d018      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <HAL_DMA_Init+0x1e4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d013      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a25      	ldr	r2, [pc, #148]	; (8005a20 <HAL_DMA_Init+0x1e8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00e      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a24      	ldr	r2, [pc, #144]	; (8005a24 <HAL_DMA_Init+0x1ec>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d009      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <HAL_DMA_Init+0x1f0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_DMA_Init+0x174>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <HAL_DMA_Init+0x1f4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d108      	bne.n	80059be <HAL_DMA_Init+0x186>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0201 	bic.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e007      	b.n	80059ce <HAL_DMA_Init+0x196>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059ce:	e02f      	b.n	8005a30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059d0:	f7fe fe36 	bl	8004640 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b05      	cmp	r3, #5
 80059dc:	d928      	bls.n	8005a30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2203      	movs	r2, #3
 80059e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e246      	b.n	8005e7e <HAL_DMA_Init+0x646>
 80059f0:	40020010 	.word	0x40020010
 80059f4:	40020028 	.word	0x40020028
 80059f8:	40020040 	.word	0x40020040
 80059fc:	40020058 	.word	0x40020058
 8005a00:	40020070 	.word	0x40020070
 8005a04:	40020088 	.word	0x40020088
 8005a08:	400200a0 	.word	0x400200a0
 8005a0c:	400200b8 	.word	0x400200b8
 8005a10:	40020410 	.word	0x40020410
 8005a14:	40020428 	.word	0x40020428
 8005a18:	40020440 	.word	0x40020440
 8005a1c:	40020458 	.word	0x40020458
 8005a20:	40020470 	.word	0x40020470
 8005a24:	40020488 	.word	0x40020488
 8005a28:	400204a0 	.word	0x400204a0
 8005a2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1c8      	bne.n	80059d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4b83      	ldr	r3, [pc, #524]	; (8005c58 <HAL_DMA_Init+0x420>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005a56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d107      	bne.n	8005a94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005a94:	4b71      	ldr	r3, [pc, #452]	; (8005c5c <HAL_DMA_Init+0x424>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b71      	ldr	r3, [pc, #452]	; (8005c60 <HAL_DMA_Init+0x428>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa0:	d328      	bcc.n	8005af4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b28      	cmp	r3, #40	; 0x28
 8005aa8:	d903      	bls.n	8005ab2 <HAL_DMA_Init+0x27a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab0:	d917      	bls.n	8005ae2 <HAL_DMA_Init+0x2aa>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab8:	d903      	bls.n	8005ac2 <HAL_DMA_Init+0x28a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b42      	cmp	r3, #66	; 0x42
 8005ac0:	d90f      	bls.n	8005ae2 <HAL_DMA_Init+0x2aa>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b46      	cmp	r3, #70	; 0x46
 8005ac8:	d903      	bls.n	8005ad2 <HAL_DMA_Init+0x29a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b48      	cmp	r3, #72	; 0x48
 8005ad0:	d907      	bls.n	8005ae2 <HAL_DMA_Init+0x2aa>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b4e      	cmp	r3, #78	; 0x4e
 8005ad8:	d905      	bls.n	8005ae6 <HAL_DMA_Init+0x2ae>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b52      	cmp	r3, #82	; 0x52
 8005ae0:	d801      	bhi.n	8005ae6 <HAL_DMA_Init+0x2ae>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <HAL_DMA_Init+0x2b0>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005af2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d117      	bne.n	8005b4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00e      	beq.n	8005b4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f002 fb31 	bl	8008198 <DMA_CheckFifoParam>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d008      	beq.n	8005b4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2240      	movs	r2, #64	; 0x40
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e197      	b.n	8005e7e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f002 fa6c 	bl	8008034 <DMA_CalcBaseAndBitshift>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	223f      	movs	r2, #63	; 0x3f
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	609a      	str	r2, [r3, #8]
 8005b70:	e0cd      	b.n	8005d0e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a3b      	ldr	r2, [pc, #236]	; (8005c64 <HAL_DMA_Init+0x42c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <HAL_DMA_Init+0x38a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a39      	ldr	r2, [pc, #228]	; (8005c68 <HAL_DMA_Init+0x430>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01d      	beq.n	8005bc2 <HAL_DMA_Init+0x38a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a38      	ldr	r2, [pc, #224]	; (8005c6c <HAL_DMA_Init+0x434>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <HAL_DMA_Init+0x38a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a36      	ldr	r2, [pc, #216]	; (8005c70 <HAL_DMA_Init+0x438>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <HAL_DMA_Init+0x38a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a35      	ldr	r2, [pc, #212]	; (8005c74 <HAL_DMA_Init+0x43c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <HAL_DMA_Init+0x38a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a33      	ldr	r2, [pc, #204]	; (8005c78 <HAL_DMA_Init+0x440>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <HAL_DMA_Init+0x38a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a32      	ldr	r2, [pc, #200]	; (8005c7c <HAL_DMA_Init+0x444>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_DMA_Init+0x38a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a30      	ldr	r2, [pc, #192]	; (8005c80 <HAL_DMA_Init+0x448>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d101      	bne.n	8005bc6 <HAL_DMA_Init+0x38e>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <HAL_DMA_Init+0x390>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8097 	beq.w	8005cfc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a24      	ldr	r2, [pc, #144]	; (8005c64 <HAL_DMA_Init+0x42c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d021      	beq.n	8005c1c <HAL_DMA_Init+0x3e4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a22      	ldr	r2, [pc, #136]	; (8005c68 <HAL_DMA_Init+0x430>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d01c      	beq.n	8005c1c <HAL_DMA_Init+0x3e4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a21      	ldr	r2, [pc, #132]	; (8005c6c <HAL_DMA_Init+0x434>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d017      	beq.n	8005c1c <HAL_DMA_Init+0x3e4>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <HAL_DMA_Init+0x438>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d012      	beq.n	8005c1c <HAL_DMA_Init+0x3e4>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <HAL_DMA_Init+0x43c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00d      	beq.n	8005c1c <HAL_DMA_Init+0x3e4>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <HAL_DMA_Init+0x440>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d008      	beq.n	8005c1c <HAL_DMA_Init+0x3e4>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <HAL_DMA_Init+0x444>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <HAL_DMA_Init+0x3e4>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <HAL_DMA_Init+0x448>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <HAL_DMA_Init+0x44c>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d020      	beq.n	8005c88 <HAL_DMA_Init+0x450>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d102      	bne.n	8005c54 <HAL_DMA_Init+0x41c>
 8005c4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c52:	e01a      	b.n	8005c8a <HAL_DMA_Init+0x452>
 8005c54:	2300      	movs	r3, #0
 8005c56:	e018      	b.n	8005c8a <HAL_DMA_Init+0x452>
 8005c58:	fe10803f 	.word	0xfe10803f
 8005c5c:	5c001000 	.word	0x5c001000
 8005c60:	ffff0000 	.word	0xffff0000
 8005c64:	58025408 	.word	0x58025408
 8005c68:	5802541c 	.word	0x5802541c
 8005c6c:	58025430 	.word	0x58025430
 8005c70:	58025444 	.word	0x58025444
 8005c74:	58025458 	.word	0x58025458
 8005c78:	5802546c 	.word	0x5802546c
 8005c7c:	58025480 	.word	0x58025480
 8005c80:	58025494 	.word	0x58025494
 8005c84:	fffe000f 	.word	0xfffe000f
 8005c88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	68d2      	ldr	r2, [r2, #12]
 8005c8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ca8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005cb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005cb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b6e      	ldr	r3, [pc, #440]	; (8005e88 <HAL_DMA_Init+0x650>)
 8005cd0:	4413      	add	r3, r2
 8005cd2:	4a6e      	ldr	r2, [pc, #440]	; (8005e8c <HAL_DMA_Init+0x654>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	009a      	lsls	r2, r3, #2
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f002 f9a7 	bl	8008034 <DMA_CalcBaseAndBitshift>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	409a      	lsls	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	e008      	b.n	8005d0e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2240      	movs	r2, #64	; 0x40
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2203      	movs	r2, #3
 8005d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e0b7      	b.n	8005e7e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a5f      	ldr	r2, [pc, #380]	; (8005e90 <HAL_DMA_Init+0x658>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d072      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a5d      	ldr	r2, [pc, #372]	; (8005e94 <HAL_DMA_Init+0x65c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d06d      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a5c      	ldr	r2, [pc, #368]	; (8005e98 <HAL_DMA_Init+0x660>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d068      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a5a      	ldr	r2, [pc, #360]	; (8005e9c <HAL_DMA_Init+0x664>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d063      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a59      	ldr	r2, [pc, #356]	; (8005ea0 <HAL_DMA_Init+0x668>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d05e      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a57      	ldr	r2, [pc, #348]	; (8005ea4 <HAL_DMA_Init+0x66c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d059      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a56      	ldr	r2, [pc, #344]	; (8005ea8 <HAL_DMA_Init+0x670>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d054      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a54      	ldr	r2, [pc, #336]	; (8005eac <HAL_DMA_Init+0x674>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d04f      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a53      	ldr	r2, [pc, #332]	; (8005eb0 <HAL_DMA_Init+0x678>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d04a      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a51      	ldr	r2, [pc, #324]	; (8005eb4 <HAL_DMA_Init+0x67c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d045      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a50      	ldr	r2, [pc, #320]	; (8005eb8 <HAL_DMA_Init+0x680>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d040      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a4e      	ldr	r2, [pc, #312]	; (8005ebc <HAL_DMA_Init+0x684>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d03b      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a4d      	ldr	r2, [pc, #308]	; (8005ec0 <HAL_DMA_Init+0x688>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d036      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a4b      	ldr	r2, [pc, #300]	; (8005ec4 <HAL_DMA_Init+0x68c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d031      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a4a      	ldr	r2, [pc, #296]	; (8005ec8 <HAL_DMA_Init+0x690>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d02c      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a48      	ldr	r2, [pc, #288]	; (8005ecc <HAL_DMA_Init+0x694>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d027      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a47      	ldr	r2, [pc, #284]	; (8005ed0 <HAL_DMA_Init+0x698>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d022      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a45      	ldr	r2, [pc, #276]	; (8005ed4 <HAL_DMA_Init+0x69c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01d      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a44      	ldr	r2, [pc, #272]	; (8005ed8 <HAL_DMA_Init+0x6a0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d018      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a42      	ldr	r2, [pc, #264]	; (8005edc <HAL_DMA_Init+0x6a4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d013      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a41      	ldr	r2, [pc, #260]	; (8005ee0 <HAL_DMA_Init+0x6a8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00e      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3f      	ldr	r2, [pc, #252]	; (8005ee4 <HAL_DMA_Init+0x6ac>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d009      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3e      	ldr	r2, [pc, #248]	; (8005ee8 <HAL_DMA_Init+0x6b0>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d004      	beq.n	8005dfe <HAL_DMA_Init+0x5c6>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a3c      	ldr	r2, [pc, #240]	; (8005eec <HAL_DMA_Init+0x6b4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_DMA_Init+0x5ca>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_DMA_Init+0x5cc>
 8005e02:	2300      	movs	r3, #0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d032      	beq.n	8005e6e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f002 fa41 	bl	8008290 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b80      	cmp	r3, #128	; 0x80
 8005e14:	d102      	bne.n	8005e1c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e30:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d010      	beq.n	8005e5c <HAL_DMA_Init+0x624>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d80c      	bhi.n	8005e5c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f002 fabe 	bl	80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	e008      	b.n	8005e6e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	a7fdabf8 	.word	0xa7fdabf8
 8005e8c:	cccccccd 	.word	0xcccccccd
 8005e90:	40020010 	.word	0x40020010
 8005e94:	40020028 	.word	0x40020028
 8005e98:	40020040 	.word	0x40020040
 8005e9c:	40020058 	.word	0x40020058
 8005ea0:	40020070 	.word	0x40020070
 8005ea4:	40020088 	.word	0x40020088
 8005ea8:	400200a0 	.word	0x400200a0
 8005eac:	400200b8 	.word	0x400200b8
 8005eb0:	40020410 	.word	0x40020410
 8005eb4:	40020428 	.word	0x40020428
 8005eb8:	40020440 	.word	0x40020440
 8005ebc:	40020458 	.word	0x40020458
 8005ec0:	40020470 	.word	0x40020470
 8005ec4:	40020488 	.word	0x40020488
 8005ec8:	400204a0 	.word	0x400204a0
 8005ecc:	400204b8 	.word	0x400204b8
 8005ed0:	58025408 	.word	0x58025408
 8005ed4:	5802541c 	.word	0x5802541c
 8005ed8:	58025430 	.word	0x58025430
 8005edc:	58025444 	.word	0x58025444
 8005ee0:	58025458 	.word	0x58025458
 8005ee4:	5802546c 	.word	0x5802546c
 8005ee8:	58025480 	.word	0x58025480
 8005eec:	58025494 	.word	0x58025494

08005ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e226      	b.n	800635a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_DMA_Start_IT+0x2a>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e21f      	b.n	800635a <HAL_DMA_Start_IT+0x46a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	f040 820a 	bne.w	8006344 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a68      	ldr	r2, [pc, #416]	; (80060e4 <HAL_DMA_Start_IT+0x1f4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d04a      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a66      	ldr	r2, [pc, #408]	; (80060e8 <HAL_DMA_Start_IT+0x1f8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d045      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a65      	ldr	r2, [pc, #404]	; (80060ec <HAL_DMA_Start_IT+0x1fc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d040      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a63      	ldr	r2, [pc, #396]	; (80060f0 <HAL_DMA_Start_IT+0x200>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d03b      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a62      	ldr	r2, [pc, #392]	; (80060f4 <HAL_DMA_Start_IT+0x204>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d036      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a60      	ldr	r2, [pc, #384]	; (80060f8 <HAL_DMA_Start_IT+0x208>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a5f      	ldr	r2, [pc, #380]	; (80060fc <HAL_DMA_Start_IT+0x20c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d02c      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a5d      	ldr	r2, [pc, #372]	; (8006100 <HAL_DMA_Start_IT+0x210>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d027      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a5c      	ldr	r2, [pc, #368]	; (8006104 <HAL_DMA_Start_IT+0x214>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d022      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a5a      	ldr	r2, [pc, #360]	; (8006108 <HAL_DMA_Start_IT+0x218>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a59      	ldr	r2, [pc, #356]	; (800610c <HAL_DMA_Start_IT+0x21c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d018      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a57      	ldr	r2, [pc, #348]	; (8006110 <HAL_DMA_Start_IT+0x220>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a56      	ldr	r2, [pc, #344]	; (8006114 <HAL_DMA_Start_IT+0x224>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a54      	ldr	r2, [pc, #336]	; (8006118 <HAL_DMA_Start_IT+0x228>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a53      	ldr	r2, [pc, #332]	; (800611c <HAL_DMA_Start_IT+0x22c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a51      	ldr	r2, [pc, #324]	; (8006120 <HAL_DMA_Start_IT+0x230>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <HAL_DMA_Start_IT+0x100>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e007      	b.n	8006000 <HAL_DMA_Start_IT+0x110>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f001 fe68 	bl	8007cdc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a34      	ldr	r2, [pc, #208]	; (80060e4 <HAL_DMA_Start_IT+0x1f4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d04a      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a33      	ldr	r2, [pc, #204]	; (80060e8 <HAL_DMA_Start_IT+0x1f8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d045      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a31      	ldr	r2, [pc, #196]	; (80060ec <HAL_DMA_Start_IT+0x1fc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d040      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a30      	ldr	r2, [pc, #192]	; (80060f0 <HAL_DMA_Start_IT+0x200>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d03b      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_DMA_Start_IT+0x204>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d036      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <HAL_DMA_Start_IT+0x208>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d031      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2b      	ldr	r2, [pc, #172]	; (80060fc <HAL_DMA_Start_IT+0x20c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2a      	ldr	r2, [pc, #168]	; (8006100 <HAL_DMA_Start_IT+0x210>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d027      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a28      	ldr	r2, [pc, #160]	; (8006104 <HAL_DMA_Start_IT+0x214>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a27      	ldr	r2, [pc, #156]	; (8006108 <HAL_DMA_Start_IT+0x218>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a25      	ldr	r2, [pc, #148]	; (800610c <HAL_DMA_Start_IT+0x21c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a24      	ldr	r2, [pc, #144]	; (8006110 <HAL_DMA_Start_IT+0x220>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a22      	ldr	r2, [pc, #136]	; (8006114 <HAL_DMA_Start_IT+0x224>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a21      	ldr	r2, [pc, #132]	; (8006118 <HAL_DMA_Start_IT+0x228>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	; (800611c <HAL_DMA_Start_IT+0x22c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <HAL_DMA_Start_IT+0x230>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d101      	bne.n	80060b0 <HAL_DMA_Start_IT+0x1c0>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_DMA_Start_IT+0x1c2>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d036      	beq.n	8006124 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f023 021e 	bic.w	r2, r3, #30
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0216 	orr.w	r2, r2, #22
 80060c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d03e      	beq.n	8006150 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0208 	orr.w	r2, r2, #8
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e035      	b.n	8006150 <HAL_DMA_Start_IT+0x260>
 80060e4:	40020010 	.word	0x40020010
 80060e8:	40020028 	.word	0x40020028
 80060ec:	40020040 	.word	0x40020040
 80060f0:	40020058 	.word	0x40020058
 80060f4:	40020070 	.word	0x40020070
 80060f8:	40020088 	.word	0x40020088
 80060fc:	400200a0 	.word	0x400200a0
 8006100:	400200b8 	.word	0x400200b8
 8006104:	40020410 	.word	0x40020410
 8006108:	40020428 	.word	0x40020428
 800610c:	40020440 	.word	0x40020440
 8006110:	40020458 	.word	0x40020458
 8006114:	40020470 	.word	0x40020470
 8006118:	40020488 	.word	0x40020488
 800611c:	400204a0 	.word	0x400204a0
 8006120:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 020e 	bic.w	r2, r3, #14
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 020a 	orr.w	r2, r2, #10
 8006136:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0204 	orr.w	r2, r2, #4
 800614e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a83      	ldr	r2, [pc, #524]	; (8006364 <HAL_DMA_Start_IT+0x474>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d072      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a82      	ldr	r2, [pc, #520]	; (8006368 <HAL_DMA_Start_IT+0x478>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d06d      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a80      	ldr	r2, [pc, #512]	; (800636c <HAL_DMA_Start_IT+0x47c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d068      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7f      	ldr	r2, [pc, #508]	; (8006370 <HAL_DMA_Start_IT+0x480>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d063      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7d      	ldr	r2, [pc, #500]	; (8006374 <HAL_DMA_Start_IT+0x484>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d05e      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7c      	ldr	r2, [pc, #496]	; (8006378 <HAL_DMA_Start_IT+0x488>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d059      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7a      	ldr	r2, [pc, #488]	; (800637c <HAL_DMA_Start_IT+0x48c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d054      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a79      	ldr	r2, [pc, #484]	; (8006380 <HAL_DMA_Start_IT+0x490>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d04f      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a77      	ldr	r2, [pc, #476]	; (8006384 <HAL_DMA_Start_IT+0x494>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d04a      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a76      	ldr	r2, [pc, #472]	; (8006388 <HAL_DMA_Start_IT+0x498>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d045      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a74      	ldr	r2, [pc, #464]	; (800638c <HAL_DMA_Start_IT+0x49c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d040      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a73      	ldr	r2, [pc, #460]	; (8006390 <HAL_DMA_Start_IT+0x4a0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d03b      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a71      	ldr	r2, [pc, #452]	; (8006394 <HAL_DMA_Start_IT+0x4a4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d036      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a70      	ldr	r2, [pc, #448]	; (8006398 <HAL_DMA_Start_IT+0x4a8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d031      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a6e      	ldr	r2, [pc, #440]	; (800639c <HAL_DMA_Start_IT+0x4ac>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d02c      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6d      	ldr	r2, [pc, #436]	; (80063a0 <HAL_DMA_Start_IT+0x4b0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d027      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6b      	ldr	r2, [pc, #428]	; (80063a4 <HAL_DMA_Start_IT+0x4b4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d022      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6a      	ldr	r2, [pc, #424]	; (80063a8 <HAL_DMA_Start_IT+0x4b8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d01d      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a68      	ldr	r2, [pc, #416]	; (80063ac <HAL_DMA_Start_IT+0x4bc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d018      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a67      	ldr	r2, [pc, #412]	; (80063b0 <HAL_DMA_Start_IT+0x4c0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a65      	ldr	r2, [pc, #404]	; (80063b4 <HAL_DMA_Start_IT+0x4c4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00e      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a64      	ldr	r2, [pc, #400]	; (80063b8 <HAL_DMA_Start_IT+0x4c8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d009      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a62      	ldr	r2, [pc, #392]	; (80063bc <HAL_DMA_Start_IT+0x4cc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a61      	ldr	r2, [pc, #388]	; (80063c0 <HAL_DMA_Start_IT+0x4d0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d101      	bne.n	8006244 <HAL_DMA_Start_IT+0x354>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_DMA_Start_IT+0x356>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01a      	beq.n	8006280 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006266:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800627e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a37      	ldr	r2, [pc, #220]	; (8006364 <HAL_DMA_Start_IT+0x474>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d04a      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a36      	ldr	r2, [pc, #216]	; (8006368 <HAL_DMA_Start_IT+0x478>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d045      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a34      	ldr	r2, [pc, #208]	; (800636c <HAL_DMA_Start_IT+0x47c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d040      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a33      	ldr	r2, [pc, #204]	; (8006370 <HAL_DMA_Start_IT+0x480>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d03b      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a31      	ldr	r2, [pc, #196]	; (8006374 <HAL_DMA_Start_IT+0x484>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d036      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a30      	ldr	r2, [pc, #192]	; (8006378 <HAL_DMA_Start_IT+0x488>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d031      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2e      	ldr	r2, [pc, #184]	; (800637c <HAL_DMA_Start_IT+0x48c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d02c      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2d      	ldr	r2, [pc, #180]	; (8006380 <HAL_DMA_Start_IT+0x490>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d027      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2b      	ldr	r2, [pc, #172]	; (8006384 <HAL_DMA_Start_IT+0x494>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d022      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2a      	ldr	r2, [pc, #168]	; (8006388 <HAL_DMA_Start_IT+0x498>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d01d      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a28      	ldr	r2, [pc, #160]	; (800638c <HAL_DMA_Start_IT+0x49c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d018      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a27      	ldr	r2, [pc, #156]	; (8006390 <HAL_DMA_Start_IT+0x4a0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a25      	ldr	r2, [pc, #148]	; (8006394 <HAL_DMA_Start_IT+0x4a4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a24      	ldr	r2, [pc, #144]	; (8006398 <HAL_DMA_Start_IT+0x4a8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a22      	ldr	r2, [pc, #136]	; (800639c <HAL_DMA_Start_IT+0x4ac>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a21      	ldr	r2, [pc, #132]	; (80063a0 <HAL_DMA_Start_IT+0x4b0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d108      	bne.n	8006332 <HAL_DMA_Start_IT+0x442>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e012      	b.n	8006358 <HAL_DMA_Start_IT+0x468>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e009      	b.n	8006358 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40020010 	.word	0x40020010
 8006368:	40020028 	.word	0x40020028
 800636c:	40020040 	.word	0x40020040
 8006370:	40020058 	.word	0x40020058
 8006374:	40020070 	.word	0x40020070
 8006378:	40020088 	.word	0x40020088
 800637c:	400200a0 	.word	0x400200a0
 8006380:	400200b8 	.word	0x400200b8
 8006384:	40020410 	.word	0x40020410
 8006388:	40020428 	.word	0x40020428
 800638c:	40020440 	.word	0x40020440
 8006390:	40020458 	.word	0x40020458
 8006394:	40020470 	.word	0x40020470
 8006398:	40020488 	.word	0x40020488
 800639c:	400204a0 	.word	0x400204a0
 80063a0:	400204b8 	.word	0x400204b8
 80063a4:	58025408 	.word	0x58025408
 80063a8:	5802541c 	.word	0x5802541c
 80063ac:	58025430 	.word	0x58025430
 80063b0:	58025444 	.word	0x58025444
 80063b4:	58025458 	.word	0x58025458
 80063b8:	5802546c 	.word	0x5802546c
 80063bc:	58025480 	.word	0x58025480
 80063c0:	58025494 	.word	0x58025494

080063c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80063cc:	f7fe f938 	bl	8004640 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e2dc      	b.n	8006996 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d008      	beq.n	80063fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2280      	movs	r2, #128	; 0x80
 80063ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e2cd      	b.n	8006996 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a76      	ldr	r2, [pc, #472]	; (80065d8 <HAL_DMA_Abort+0x214>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d04a      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a74      	ldr	r2, [pc, #464]	; (80065dc <HAL_DMA_Abort+0x218>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d045      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a73      	ldr	r2, [pc, #460]	; (80065e0 <HAL_DMA_Abort+0x21c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d040      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a71      	ldr	r2, [pc, #452]	; (80065e4 <HAL_DMA_Abort+0x220>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d03b      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a70      	ldr	r2, [pc, #448]	; (80065e8 <HAL_DMA_Abort+0x224>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d036      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a6e      	ldr	r2, [pc, #440]	; (80065ec <HAL_DMA_Abort+0x228>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d031      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6d      	ldr	r2, [pc, #436]	; (80065f0 <HAL_DMA_Abort+0x22c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d02c      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a6b      	ldr	r2, [pc, #428]	; (80065f4 <HAL_DMA_Abort+0x230>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d027      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a6a      	ldr	r2, [pc, #424]	; (80065f8 <HAL_DMA_Abort+0x234>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a68      	ldr	r2, [pc, #416]	; (80065fc <HAL_DMA_Abort+0x238>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01d      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a67      	ldr	r2, [pc, #412]	; (8006600 <HAL_DMA_Abort+0x23c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a65      	ldr	r2, [pc, #404]	; (8006604 <HAL_DMA_Abort+0x240>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a64      	ldr	r2, [pc, #400]	; (8006608 <HAL_DMA_Abort+0x244>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a62      	ldr	r2, [pc, #392]	; (800660c <HAL_DMA_Abort+0x248>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a61      	ldr	r2, [pc, #388]	; (8006610 <HAL_DMA_Abort+0x24c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a5f      	ldr	r2, [pc, #380]	; (8006614 <HAL_DMA_Abort+0x250>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d101      	bne.n	800649e <HAL_DMA_Abort+0xda>
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <HAL_DMA_Abort+0xdc>
 800649e:	2300      	movs	r3, #0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d013      	beq.n	80064cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 021e 	bic.w	r2, r2, #30
 80064b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	e00a      	b.n	80064e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 020e 	bic.w	r2, r2, #14
 80064da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a3c      	ldr	r2, [pc, #240]	; (80065d8 <HAL_DMA_Abort+0x214>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d072      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a3a      	ldr	r2, [pc, #232]	; (80065dc <HAL_DMA_Abort+0x218>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d06d      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a39      	ldr	r2, [pc, #228]	; (80065e0 <HAL_DMA_Abort+0x21c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d068      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a37      	ldr	r2, [pc, #220]	; (80065e4 <HAL_DMA_Abort+0x220>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d063      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a36      	ldr	r2, [pc, #216]	; (80065e8 <HAL_DMA_Abort+0x224>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d05e      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a34      	ldr	r2, [pc, #208]	; (80065ec <HAL_DMA_Abort+0x228>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d059      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a33      	ldr	r2, [pc, #204]	; (80065f0 <HAL_DMA_Abort+0x22c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d054      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a31      	ldr	r2, [pc, #196]	; (80065f4 <HAL_DMA_Abort+0x230>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d04f      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a30      	ldr	r2, [pc, #192]	; (80065f8 <HAL_DMA_Abort+0x234>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d04a      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2e      	ldr	r2, [pc, #184]	; (80065fc <HAL_DMA_Abort+0x238>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d045      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2d      	ldr	r2, [pc, #180]	; (8006600 <HAL_DMA_Abort+0x23c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d040      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2b      	ldr	r2, [pc, #172]	; (8006604 <HAL_DMA_Abort+0x240>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d03b      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <HAL_DMA_Abort+0x244>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d036      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a28      	ldr	r2, [pc, #160]	; (800660c <HAL_DMA_Abort+0x248>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d031      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a27      	ldr	r2, [pc, #156]	; (8006610 <HAL_DMA_Abort+0x24c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d02c      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a25      	ldr	r2, [pc, #148]	; (8006614 <HAL_DMA_Abort+0x250>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d027      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a24      	ldr	r2, [pc, #144]	; (8006618 <HAL_DMA_Abort+0x254>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d022      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a22      	ldr	r2, [pc, #136]	; (800661c <HAL_DMA_Abort+0x258>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01d      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a21      	ldr	r2, [pc, #132]	; (8006620 <HAL_DMA_Abort+0x25c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d018      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <HAL_DMA_Abort+0x260>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_DMA_Abort+0x264>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00e      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <HAL_DMA_Abort+0x268>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_DMA_Abort+0x26c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a19      	ldr	r2, [pc, #100]	; (8006634 <HAL_DMA_Abort+0x270>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d132      	bne.n	8006638 <HAL_DMA_Abort+0x274>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e031      	b.n	800663a <HAL_DMA_Abort+0x276>
 80065d6:	bf00      	nop
 80065d8:	40020010 	.word	0x40020010
 80065dc:	40020028 	.word	0x40020028
 80065e0:	40020040 	.word	0x40020040
 80065e4:	40020058 	.word	0x40020058
 80065e8:	40020070 	.word	0x40020070
 80065ec:	40020088 	.word	0x40020088
 80065f0:	400200a0 	.word	0x400200a0
 80065f4:	400200b8 	.word	0x400200b8
 80065f8:	40020410 	.word	0x40020410
 80065fc:	40020428 	.word	0x40020428
 8006600:	40020440 	.word	0x40020440
 8006604:	40020458 	.word	0x40020458
 8006608:	40020470 	.word	0x40020470
 800660c:	40020488 	.word	0x40020488
 8006610:	400204a0 	.word	0x400204a0
 8006614:	400204b8 	.word	0x400204b8
 8006618:	58025408 	.word	0x58025408
 800661c:	5802541c 	.word	0x5802541c
 8006620:	58025430 	.word	0x58025430
 8006624:	58025444 	.word	0x58025444
 8006628:	58025458 	.word	0x58025458
 800662c:	5802546c 	.word	0x5802546c
 8006630:	58025480 	.word	0x58025480
 8006634:	58025494 	.word	0x58025494
 8006638:	2300      	movs	r3, #0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800664c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6d      	ldr	r2, [pc, #436]	; (8006808 <HAL_DMA_Abort+0x444>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d04a      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a6b      	ldr	r2, [pc, #428]	; (800680c <HAL_DMA_Abort+0x448>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d045      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a6a      	ldr	r2, [pc, #424]	; (8006810 <HAL_DMA_Abort+0x44c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d040      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a68      	ldr	r2, [pc, #416]	; (8006814 <HAL_DMA_Abort+0x450>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d03b      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a67      	ldr	r2, [pc, #412]	; (8006818 <HAL_DMA_Abort+0x454>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d036      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a65      	ldr	r2, [pc, #404]	; (800681c <HAL_DMA_Abort+0x458>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d031      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a64      	ldr	r2, [pc, #400]	; (8006820 <HAL_DMA_Abort+0x45c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d02c      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a62      	ldr	r2, [pc, #392]	; (8006824 <HAL_DMA_Abort+0x460>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d027      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a61      	ldr	r2, [pc, #388]	; (8006828 <HAL_DMA_Abort+0x464>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d022      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a5f      	ldr	r2, [pc, #380]	; (800682c <HAL_DMA_Abort+0x468>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01d      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a5e      	ldr	r2, [pc, #376]	; (8006830 <HAL_DMA_Abort+0x46c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d018      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a5c      	ldr	r2, [pc, #368]	; (8006834 <HAL_DMA_Abort+0x470>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a5b      	ldr	r2, [pc, #364]	; (8006838 <HAL_DMA_Abort+0x474>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a59      	ldr	r2, [pc, #356]	; (800683c <HAL_DMA_Abort+0x478>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a58      	ldr	r2, [pc, #352]	; (8006840 <HAL_DMA_Abort+0x47c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a56      	ldr	r2, [pc, #344]	; (8006844 <HAL_DMA_Abort+0x480>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d108      	bne.n	8006700 <HAL_DMA_Abort+0x33c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	e007      	b.n	8006710 <HAL_DMA_Abort+0x34c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006710:	e013      	b.n	800673a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006712:	f7fd ff95 	bl	8004640 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b05      	cmp	r3, #5
 800671e:	d90c      	bls.n	800673a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2203      	movs	r2, #3
 800672a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e12d      	b.n	8006996 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2f      	ldr	r2, [pc, #188]	; (8006808 <HAL_DMA_Abort+0x444>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d04a      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2d      	ldr	r2, [pc, #180]	; (800680c <HAL_DMA_Abort+0x448>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d045      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2c      	ldr	r2, [pc, #176]	; (8006810 <HAL_DMA_Abort+0x44c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d040      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a2a      	ldr	r2, [pc, #168]	; (8006814 <HAL_DMA_Abort+0x450>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d03b      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a29      	ldr	r2, [pc, #164]	; (8006818 <HAL_DMA_Abort+0x454>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d036      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a27      	ldr	r2, [pc, #156]	; (800681c <HAL_DMA_Abort+0x458>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d031      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a26      	ldr	r2, [pc, #152]	; (8006820 <HAL_DMA_Abort+0x45c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d02c      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a24      	ldr	r2, [pc, #144]	; (8006824 <HAL_DMA_Abort+0x460>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d027      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a23      	ldr	r2, [pc, #140]	; (8006828 <HAL_DMA_Abort+0x464>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d022      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a21      	ldr	r2, [pc, #132]	; (800682c <HAL_DMA_Abort+0x468>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01d      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a20      	ldr	r2, [pc, #128]	; (8006830 <HAL_DMA_Abort+0x46c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d018      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <HAL_DMA_Abort+0x470>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <HAL_DMA_Abort+0x474>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	; (800683c <HAL_DMA_Abort+0x478>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1a      	ldr	r2, [pc, #104]	; (8006840 <HAL_DMA_Abort+0x47c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a18      	ldr	r2, [pc, #96]	; (8006844 <HAL_DMA_Abort+0x480>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d101      	bne.n	80067ea <HAL_DMA_Abort+0x426>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <HAL_DMA_Abort+0x428>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d02b      	beq.n	8006848 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	223f      	movs	r2, #63	; 0x3f
 8006800:	409a      	lsls	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	609a      	str	r2, [r3, #8]
 8006806:	e02a      	b.n	800685e <HAL_DMA_Abort+0x49a>
 8006808:	40020010 	.word	0x40020010
 800680c:	40020028 	.word	0x40020028
 8006810:	40020040 	.word	0x40020040
 8006814:	40020058 	.word	0x40020058
 8006818:	40020070 	.word	0x40020070
 800681c:	40020088 	.word	0x40020088
 8006820:	400200a0 	.word	0x400200a0
 8006824:	400200b8 	.word	0x400200b8
 8006828:	40020410 	.word	0x40020410
 800682c:	40020428 	.word	0x40020428
 8006830:	40020440 	.word	0x40020440
 8006834:	40020458 	.word	0x40020458
 8006838:	40020470 	.word	0x40020470
 800683c:	40020488 	.word	0x40020488
 8006840:	400204a0 	.word	0x400204a0
 8006844:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006852:	f003 031f 	and.w	r3, r3, #31
 8006856:	2201      	movs	r2, #1
 8006858:	409a      	lsls	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a4f      	ldr	r2, [pc, #316]	; (80069a0 <HAL_DMA_Abort+0x5dc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d072      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a4d      	ldr	r2, [pc, #308]	; (80069a4 <HAL_DMA_Abort+0x5e0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d06d      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a4c      	ldr	r2, [pc, #304]	; (80069a8 <HAL_DMA_Abort+0x5e4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d068      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a4a      	ldr	r2, [pc, #296]	; (80069ac <HAL_DMA_Abort+0x5e8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d063      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a49      	ldr	r2, [pc, #292]	; (80069b0 <HAL_DMA_Abort+0x5ec>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d05e      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a47      	ldr	r2, [pc, #284]	; (80069b4 <HAL_DMA_Abort+0x5f0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d059      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a46      	ldr	r2, [pc, #280]	; (80069b8 <HAL_DMA_Abort+0x5f4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d054      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a44      	ldr	r2, [pc, #272]	; (80069bc <HAL_DMA_Abort+0x5f8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d04f      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a43      	ldr	r2, [pc, #268]	; (80069c0 <HAL_DMA_Abort+0x5fc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d04a      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a41      	ldr	r2, [pc, #260]	; (80069c4 <HAL_DMA_Abort+0x600>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d045      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a40      	ldr	r2, [pc, #256]	; (80069c8 <HAL_DMA_Abort+0x604>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d040      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a3e      	ldr	r2, [pc, #248]	; (80069cc <HAL_DMA_Abort+0x608>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d03b      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a3d      	ldr	r2, [pc, #244]	; (80069d0 <HAL_DMA_Abort+0x60c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d036      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a3b      	ldr	r2, [pc, #236]	; (80069d4 <HAL_DMA_Abort+0x610>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d031      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a3a      	ldr	r2, [pc, #232]	; (80069d8 <HAL_DMA_Abort+0x614>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d02c      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a38      	ldr	r2, [pc, #224]	; (80069dc <HAL_DMA_Abort+0x618>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d027      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a37      	ldr	r2, [pc, #220]	; (80069e0 <HAL_DMA_Abort+0x61c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d022      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a35      	ldr	r2, [pc, #212]	; (80069e4 <HAL_DMA_Abort+0x620>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01d      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a34      	ldr	r2, [pc, #208]	; (80069e8 <HAL_DMA_Abort+0x624>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d018      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a32      	ldr	r2, [pc, #200]	; (80069ec <HAL_DMA_Abort+0x628>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a31      	ldr	r2, [pc, #196]	; (80069f0 <HAL_DMA_Abort+0x62c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00e      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2f      	ldr	r2, [pc, #188]	; (80069f4 <HAL_DMA_Abort+0x630>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d009      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2e      	ldr	r2, [pc, #184]	; (80069f8 <HAL_DMA_Abort+0x634>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d004      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a2c      	ldr	r2, [pc, #176]	; (80069fc <HAL_DMA_Abort+0x638>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d101      	bne.n	8006952 <HAL_DMA_Abort+0x58e>
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <HAL_DMA_Abort+0x590>
 8006952:	2300      	movs	r3, #0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d015      	beq.n	8006984 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006960:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00c      	beq.n	8006984 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006978:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006982:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40020010 	.word	0x40020010
 80069a4:	40020028 	.word	0x40020028
 80069a8:	40020040 	.word	0x40020040
 80069ac:	40020058 	.word	0x40020058
 80069b0:	40020070 	.word	0x40020070
 80069b4:	40020088 	.word	0x40020088
 80069b8:	400200a0 	.word	0x400200a0
 80069bc:	400200b8 	.word	0x400200b8
 80069c0:	40020410 	.word	0x40020410
 80069c4:	40020428 	.word	0x40020428
 80069c8:	40020440 	.word	0x40020440
 80069cc:	40020458 	.word	0x40020458
 80069d0:	40020470 	.word	0x40020470
 80069d4:	40020488 	.word	0x40020488
 80069d8:	400204a0 	.word	0x400204a0
 80069dc:	400204b8 	.word	0x400204b8
 80069e0:	58025408 	.word	0x58025408
 80069e4:	5802541c 	.word	0x5802541c
 80069e8:	58025430 	.word	0x58025430
 80069ec:	58025444 	.word	0x58025444
 80069f0:	58025458 	.word	0x58025458
 80069f4:	5802546c 	.word	0x5802546c
 80069f8:	58025480 	.word	0x58025480
 80069fc:	58025494 	.word	0x58025494

08006a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e205      	b.n	8006e1e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d004      	beq.n	8006a28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2280      	movs	r2, #128	; 0x80
 8006a22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e1fa      	b.n	8006e1e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a8c      	ldr	r2, [pc, #560]	; (8006c60 <HAL_DMA_Abort_IT+0x260>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d04a      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a8b      	ldr	r2, [pc, #556]	; (8006c64 <HAL_DMA_Abort_IT+0x264>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d045      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a89      	ldr	r2, [pc, #548]	; (8006c68 <HAL_DMA_Abort_IT+0x268>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d040      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a88      	ldr	r2, [pc, #544]	; (8006c6c <HAL_DMA_Abort_IT+0x26c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d03b      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a86      	ldr	r2, [pc, #536]	; (8006c70 <HAL_DMA_Abort_IT+0x270>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d036      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a85      	ldr	r2, [pc, #532]	; (8006c74 <HAL_DMA_Abort_IT+0x274>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d031      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a83      	ldr	r2, [pc, #524]	; (8006c78 <HAL_DMA_Abort_IT+0x278>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d02c      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a82      	ldr	r2, [pc, #520]	; (8006c7c <HAL_DMA_Abort_IT+0x27c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d027      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a80      	ldr	r2, [pc, #512]	; (8006c80 <HAL_DMA_Abort_IT+0x280>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d022      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a7f      	ldr	r2, [pc, #508]	; (8006c84 <HAL_DMA_Abort_IT+0x284>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d01d      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a7d      	ldr	r2, [pc, #500]	; (8006c88 <HAL_DMA_Abort_IT+0x288>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d018      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a7c      	ldr	r2, [pc, #496]	; (8006c8c <HAL_DMA_Abort_IT+0x28c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d013      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a7a      	ldr	r2, [pc, #488]	; (8006c90 <HAL_DMA_Abort_IT+0x290>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a79      	ldr	r2, [pc, #484]	; (8006c94 <HAL_DMA_Abort_IT+0x294>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d009      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a77      	ldr	r2, [pc, #476]	; (8006c98 <HAL_DMA_Abort_IT+0x298>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d004      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a76      	ldr	r2, [pc, #472]	; (8006c9c <HAL_DMA_Abort_IT+0x29c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d101      	bne.n	8006acc <HAL_DMA_Abort_IT+0xcc>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <HAL_DMA_Abort_IT+0xce>
 8006acc:	2300      	movs	r3, #0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d065      	beq.n	8006b9e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a60      	ldr	r2, [pc, #384]	; (8006c60 <HAL_DMA_Abort_IT+0x260>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d04a      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a5e      	ldr	r2, [pc, #376]	; (8006c64 <HAL_DMA_Abort_IT+0x264>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d045      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a5d      	ldr	r2, [pc, #372]	; (8006c68 <HAL_DMA_Abort_IT+0x268>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d040      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a5b      	ldr	r2, [pc, #364]	; (8006c6c <HAL_DMA_Abort_IT+0x26c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d03b      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a5a      	ldr	r2, [pc, #360]	; (8006c70 <HAL_DMA_Abort_IT+0x270>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d036      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a58      	ldr	r2, [pc, #352]	; (8006c74 <HAL_DMA_Abort_IT+0x274>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d031      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a57      	ldr	r2, [pc, #348]	; (8006c78 <HAL_DMA_Abort_IT+0x278>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d02c      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a55      	ldr	r2, [pc, #340]	; (8006c7c <HAL_DMA_Abort_IT+0x27c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d027      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a54      	ldr	r2, [pc, #336]	; (8006c80 <HAL_DMA_Abort_IT+0x280>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a52      	ldr	r2, [pc, #328]	; (8006c84 <HAL_DMA_Abort_IT+0x284>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01d      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a51      	ldr	r2, [pc, #324]	; (8006c88 <HAL_DMA_Abort_IT+0x288>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a4f      	ldr	r2, [pc, #316]	; (8006c8c <HAL_DMA_Abort_IT+0x28c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a4e      	ldr	r2, [pc, #312]	; (8006c90 <HAL_DMA_Abort_IT+0x290>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a4c      	ldr	r2, [pc, #304]	; (8006c94 <HAL_DMA_Abort_IT+0x294>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a4b      	ldr	r2, [pc, #300]	; (8006c98 <HAL_DMA_Abort_IT+0x298>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_DMA_Abort_IT+0x17a>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a49      	ldr	r2, [pc, #292]	; (8006c9c <HAL_DMA_Abort_IT+0x29c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d108      	bne.n	8006b8c <HAL_DMA_Abort_IT+0x18c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e147      	b.n	8006e1c <HAL_DMA_Abort_IT+0x41c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0201 	bic.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	e13e      	b.n	8006e1c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 020e 	bic.w	r2, r2, #14
 8006bac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2b      	ldr	r2, [pc, #172]	; (8006c60 <HAL_DMA_Abort_IT+0x260>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d04a      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a29      	ldr	r2, [pc, #164]	; (8006c64 <HAL_DMA_Abort_IT+0x264>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d045      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a28      	ldr	r2, [pc, #160]	; (8006c68 <HAL_DMA_Abort_IT+0x268>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d040      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a26      	ldr	r2, [pc, #152]	; (8006c6c <HAL_DMA_Abort_IT+0x26c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d03b      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a25      	ldr	r2, [pc, #148]	; (8006c70 <HAL_DMA_Abort_IT+0x270>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d036      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a23      	ldr	r2, [pc, #140]	; (8006c74 <HAL_DMA_Abort_IT+0x274>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d031      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a22      	ldr	r2, [pc, #136]	; (8006c78 <HAL_DMA_Abort_IT+0x278>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d02c      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a20      	ldr	r2, [pc, #128]	; (8006c7c <HAL_DMA_Abort_IT+0x27c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d027      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <HAL_DMA_Abort_IT+0x280>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d022      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <HAL_DMA_Abort_IT+0x284>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01d      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1c      	ldr	r2, [pc, #112]	; (8006c88 <HAL_DMA_Abort_IT+0x288>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d018      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1a      	ldr	r2, [pc, #104]	; (8006c8c <HAL_DMA_Abort_IT+0x28c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a19      	ldr	r2, [pc, #100]	; (8006c90 <HAL_DMA_Abort_IT+0x290>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d00e      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a17      	ldr	r2, [pc, #92]	; (8006c94 <HAL_DMA_Abort_IT+0x294>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d009      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <HAL_DMA_Abort_IT+0x298>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d004      	beq.n	8006c4e <HAL_DMA_Abort_IT+0x24e>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a14      	ldr	r2, [pc, #80]	; (8006c9c <HAL_DMA_Abort_IT+0x29c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d128      	bne.n	8006ca0 <HAL_DMA_Abort_IT+0x2a0>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e027      	b.n	8006cb0 <HAL_DMA_Abort_IT+0x2b0>
 8006c60:	40020010 	.word	0x40020010
 8006c64:	40020028 	.word	0x40020028
 8006c68:	40020040 	.word	0x40020040
 8006c6c:	40020058 	.word	0x40020058
 8006c70:	40020070 	.word	0x40020070
 8006c74:	40020088 	.word	0x40020088
 8006c78:	400200a0 	.word	0x400200a0
 8006c7c:	400200b8 	.word	0x400200b8
 8006c80:	40020410 	.word	0x40020410
 8006c84:	40020428 	.word	0x40020428
 8006c88:	40020440 	.word	0x40020440
 8006c8c:	40020458 	.word	0x40020458
 8006c90:	40020470 	.word	0x40020470
 8006c94:	40020488 	.word	0x40020488
 8006c98:	400204a0 	.word	0x400204a0
 8006c9c:	400204b8 	.word	0x400204b8
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0201 	bic.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a5c      	ldr	r2, [pc, #368]	; (8006e28 <HAL_DMA_Abort_IT+0x428>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d072      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a5b      	ldr	r2, [pc, #364]	; (8006e2c <HAL_DMA_Abort_IT+0x42c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d06d      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a59      	ldr	r2, [pc, #356]	; (8006e30 <HAL_DMA_Abort_IT+0x430>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d068      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a58      	ldr	r2, [pc, #352]	; (8006e34 <HAL_DMA_Abort_IT+0x434>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d063      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a56      	ldr	r2, [pc, #344]	; (8006e38 <HAL_DMA_Abort_IT+0x438>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d05e      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a55      	ldr	r2, [pc, #340]	; (8006e3c <HAL_DMA_Abort_IT+0x43c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d059      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a53      	ldr	r2, [pc, #332]	; (8006e40 <HAL_DMA_Abort_IT+0x440>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d054      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a52      	ldr	r2, [pc, #328]	; (8006e44 <HAL_DMA_Abort_IT+0x444>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d04f      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a50      	ldr	r2, [pc, #320]	; (8006e48 <HAL_DMA_Abort_IT+0x448>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d04a      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a4f      	ldr	r2, [pc, #316]	; (8006e4c <HAL_DMA_Abort_IT+0x44c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d045      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a4d      	ldr	r2, [pc, #308]	; (8006e50 <HAL_DMA_Abort_IT+0x450>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d040      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a4c      	ldr	r2, [pc, #304]	; (8006e54 <HAL_DMA_Abort_IT+0x454>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d03b      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a4a      	ldr	r2, [pc, #296]	; (8006e58 <HAL_DMA_Abort_IT+0x458>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d036      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a49      	ldr	r2, [pc, #292]	; (8006e5c <HAL_DMA_Abort_IT+0x45c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d031      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a47      	ldr	r2, [pc, #284]	; (8006e60 <HAL_DMA_Abort_IT+0x460>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d02c      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a46      	ldr	r2, [pc, #280]	; (8006e64 <HAL_DMA_Abort_IT+0x464>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d027      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a44      	ldr	r2, [pc, #272]	; (8006e68 <HAL_DMA_Abort_IT+0x468>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d022      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a43      	ldr	r2, [pc, #268]	; (8006e6c <HAL_DMA_Abort_IT+0x46c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d01d      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a41      	ldr	r2, [pc, #260]	; (8006e70 <HAL_DMA_Abort_IT+0x470>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d018      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a40      	ldr	r2, [pc, #256]	; (8006e74 <HAL_DMA_Abort_IT+0x474>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d013      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a3e      	ldr	r2, [pc, #248]	; (8006e78 <HAL_DMA_Abort_IT+0x478>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00e      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a3d      	ldr	r2, [pc, #244]	; (8006e7c <HAL_DMA_Abort_IT+0x47c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d009      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a3b      	ldr	r2, [pc, #236]	; (8006e80 <HAL_DMA_Abort_IT+0x480>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d004      	beq.n	8006da0 <HAL_DMA_Abort_IT+0x3a0>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3a      	ldr	r2, [pc, #232]	; (8006e84 <HAL_DMA_Abort_IT+0x484>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d101      	bne.n	8006da4 <HAL_DMA_Abort_IT+0x3a4>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <HAL_DMA_Abort_IT+0x3a6>
 8006da4:	2300      	movs	r3, #0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d028      	beq.n	8006dfc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006db8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2201      	movs	r2, #1
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006dd8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00c      	beq.n	8006dfc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006df0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dfa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40020010 	.word	0x40020010
 8006e2c:	40020028 	.word	0x40020028
 8006e30:	40020040 	.word	0x40020040
 8006e34:	40020058 	.word	0x40020058
 8006e38:	40020070 	.word	0x40020070
 8006e3c:	40020088 	.word	0x40020088
 8006e40:	400200a0 	.word	0x400200a0
 8006e44:	400200b8 	.word	0x400200b8
 8006e48:	40020410 	.word	0x40020410
 8006e4c:	40020428 	.word	0x40020428
 8006e50:	40020440 	.word	0x40020440
 8006e54:	40020458 	.word	0x40020458
 8006e58:	40020470 	.word	0x40020470
 8006e5c:	40020488 	.word	0x40020488
 8006e60:	400204a0 	.word	0x400204a0
 8006e64:	400204b8 	.word	0x400204b8
 8006e68:	58025408 	.word	0x58025408
 8006e6c:	5802541c 	.word	0x5802541c
 8006e70:	58025430 	.word	0x58025430
 8006e74:	58025444 	.word	0x58025444
 8006e78:	58025458 	.word	0x58025458
 8006e7c:	5802546c 	.word	0x5802546c
 8006e80:	58025480 	.word	0x58025480
 8006e84:	58025494 	.word	0x58025494

08006e88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e94:	4b67      	ldr	r3, [pc, #412]	; (8007034 <HAL_DMA_IRQHandler+0x1ac>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a67      	ldr	r2, [pc, #412]	; (8007038 <HAL_DMA_IRQHandler+0x1b0>)
 8006e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9e:	0a9b      	lsrs	r3, r3, #10
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a5f      	ldr	r2, [pc, #380]	; (800703c <HAL_DMA_IRQHandler+0x1b4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d04a      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a5d      	ldr	r2, [pc, #372]	; (8007040 <HAL_DMA_IRQHandler+0x1b8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d045      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a5c      	ldr	r2, [pc, #368]	; (8007044 <HAL_DMA_IRQHandler+0x1bc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d040      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5a      	ldr	r2, [pc, #360]	; (8007048 <HAL_DMA_IRQHandler+0x1c0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d03b      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a59      	ldr	r2, [pc, #356]	; (800704c <HAL_DMA_IRQHandler+0x1c4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d036      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a57      	ldr	r2, [pc, #348]	; (8007050 <HAL_DMA_IRQHandler+0x1c8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d031      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a56      	ldr	r2, [pc, #344]	; (8007054 <HAL_DMA_IRQHandler+0x1cc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d02c      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a54      	ldr	r2, [pc, #336]	; (8007058 <HAL_DMA_IRQHandler+0x1d0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d027      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a53      	ldr	r2, [pc, #332]	; (800705c <HAL_DMA_IRQHandler+0x1d4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d022      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a51      	ldr	r2, [pc, #324]	; (8007060 <HAL_DMA_IRQHandler+0x1d8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d01d      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a50      	ldr	r2, [pc, #320]	; (8007064 <HAL_DMA_IRQHandler+0x1dc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d018      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a4e      	ldr	r2, [pc, #312]	; (8007068 <HAL_DMA_IRQHandler+0x1e0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d013      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a4d      	ldr	r2, [pc, #308]	; (800706c <HAL_DMA_IRQHandler+0x1e4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00e      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a4b      	ldr	r2, [pc, #300]	; (8007070 <HAL_DMA_IRQHandler+0x1e8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d009      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a4a      	ldr	r2, [pc, #296]	; (8007074 <HAL_DMA_IRQHandler+0x1ec>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d004      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xd2>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a48      	ldr	r2, [pc, #288]	; (8007078 <HAL_DMA_IRQHandler+0x1f0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d101      	bne.n	8006f5e <HAL_DMA_IRQHandler+0xd6>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <HAL_DMA_IRQHandler+0xd8>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 842b 	beq.w	80077bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	2208      	movs	r2, #8
 8006f70:	409a      	lsls	r2, r3
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	4013      	ands	r3, r2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 80a2 	beq.w	80070c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2e      	ldr	r2, [pc, #184]	; (800703c <HAL_DMA_IRQHandler+0x1b4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d04a      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2d      	ldr	r2, [pc, #180]	; (8007040 <HAL_DMA_IRQHandler+0x1b8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d045      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a2b      	ldr	r2, [pc, #172]	; (8007044 <HAL_DMA_IRQHandler+0x1bc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d040      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a2a      	ldr	r2, [pc, #168]	; (8007048 <HAL_DMA_IRQHandler+0x1c0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d03b      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a28      	ldr	r2, [pc, #160]	; (800704c <HAL_DMA_IRQHandler+0x1c4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d036      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a27      	ldr	r2, [pc, #156]	; (8007050 <HAL_DMA_IRQHandler+0x1c8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d031      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a25      	ldr	r2, [pc, #148]	; (8007054 <HAL_DMA_IRQHandler+0x1cc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d02c      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a24      	ldr	r2, [pc, #144]	; (8007058 <HAL_DMA_IRQHandler+0x1d0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d027      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a22      	ldr	r2, [pc, #136]	; (800705c <HAL_DMA_IRQHandler+0x1d4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d022      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a21      	ldr	r2, [pc, #132]	; (8007060 <HAL_DMA_IRQHandler+0x1d8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d01d      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1f      	ldr	r2, [pc, #124]	; (8007064 <HAL_DMA_IRQHandler+0x1dc>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d018      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1e      	ldr	r2, [pc, #120]	; (8007068 <HAL_DMA_IRQHandler+0x1e0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d013      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1c      	ldr	r2, [pc, #112]	; (800706c <HAL_DMA_IRQHandler+0x1e4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00e      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1b      	ldr	r2, [pc, #108]	; (8007070 <HAL_DMA_IRQHandler+0x1e8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d009      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a19      	ldr	r2, [pc, #100]	; (8007074 <HAL_DMA_IRQHandler+0x1ec>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d004      	beq.n	800701c <HAL_DMA_IRQHandler+0x194>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a18      	ldr	r2, [pc, #96]	; (8007078 <HAL_DMA_IRQHandler+0x1f0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d12f      	bne.n	800707c <HAL_DMA_IRQHandler+0x1f4>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	bf14      	ite	ne
 800702a:	2301      	movne	r3, #1
 800702c:	2300      	moveq	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	e02e      	b.n	8007090 <HAL_DMA_IRQHandler+0x208>
 8007032:	bf00      	nop
 8007034:	24000000 	.word	0x24000000
 8007038:	1b4e81b5 	.word	0x1b4e81b5
 800703c:	40020010 	.word	0x40020010
 8007040:	40020028 	.word	0x40020028
 8007044:	40020040 	.word	0x40020040
 8007048:	40020058 	.word	0x40020058
 800704c:	40020070 	.word	0x40020070
 8007050:	40020088 	.word	0x40020088
 8007054:	400200a0 	.word	0x400200a0
 8007058:	400200b8 	.word	0x400200b8
 800705c:	40020410 	.word	0x40020410
 8007060:	40020428 	.word	0x40020428
 8007064:	40020440 	.word	0x40020440
 8007068:	40020458 	.word	0x40020458
 800706c:	40020470 	.word	0x40020470
 8007070:	40020488 	.word	0x40020488
 8007074:	400204a0 	.word	0x400204a0
 8007078:	400204b8 	.word	0x400204b8
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b00      	cmp	r3, #0
 8007088:	bf14      	ite	ne
 800708a:	2301      	movne	r3, #1
 800708c:	2300      	moveq	r3, #0
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d015      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0204 	bic.w	r2, r2, #4
 80070a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	2208      	movs	r2, #8
 80070ae:	409a      	lsls	r2, r3
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b8:	f043 0201 	orr.w	r2, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	fa22 f303 	lsr.w	r3, r2, r3
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d06e      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a69      	ldr	r2, [pc, #420]	; (8007280 <HAL_DMA_IRQHandler+0x3f8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d04a      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a67      	ldr	r2, [pc, #412]	; (8007284 <HAL_DMA_IRQHandler+0x3fc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d045      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a66      	ldr	r2, [pc, #408]	; (8007288 <HAL_DMA_IRQHandler+0x400>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d040      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a64      	ldr	r2, [pc, #400]	; (800728c <HAL_DMA_IRQHandler+0x404>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d03b      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a63      	ldr	r2, [pc, #396]	; (8007290 <HAL_DMA_IRQHandler+0x408>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d036      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a61      	ldr	r2, [pc, #388]	; (8007294 <HAL_DMA_IRQHandler+0x40c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d031      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a60      	ldr	r2, [pc, #384]	; (8007298 <HAL_DMA_IRQHandler+0x410>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d02c      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a5e      	ldr	r2, [pc, #376]	; (800729c <HAL_DMA_IRQHandler+0x414>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d027      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a5d      	ldr	r2, [pc, #372]	; (80072a0 <HAL_DMA_IRQHandler+0x418>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d022      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a5b      	ldr	r2, [pc, #364]	; (80072a4 <HAL_DMA_IRQHandler+0x41c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01d      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a5a      	ldr	r2, [pc, #360]	; (80072a8 <HAL_DMA_IRQHandler+0x420>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d018      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a58      	ldr	r2, [pc, #352]	; (80072ac <HAL_DMA_IRQHandler+0x424>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a57      	ldr	r2, [pc, #348]	; (80072b0 <HAL_DMA_IRQHandler+0x428>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00e      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a55      	ldr	r2, [pc, #340]	; (80072b4 <HAL_DMA_IRQHandler+0x42c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a54      	ldr	r2, [pc, #336]	; (80072b8 <HAL_DMA_IRQHandler+0x430>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d004      	beq.n	8007176 <HAL_DMA_IRQHandler+0x2ee>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a52      	ldr	r2, [pc, #328]	; (80072bc <HAL_DMA_IRQHandler+0x434>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d10a      	bne.n	800718c <HAL_DMA_IRQHandler+0x304>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007180:	2b00      	cmp	r3, #0
 8007182:	bf14      	ite	ne
 8007184:	2301      	movne	r3, #1
 8007186:	2300      	moveq	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	e003      	b.n	8007194 <HAL_DMA_IRQHandler+0x30c>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00d      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	2201      	movs	r2, #1
 80071a2:	409a      	lsls	r2, r3
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ac:	f043 0202 	orr.w	r2, r3, #2
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	2204      	movs	r2, #4
 80071be:	409a      	lsls	r2, r3
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 808f 	beq.w	80072e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2c      	ldr	r2, [pc, #176]	; (8007280 <HAL_DMA_IRQHandler+0x3f8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d04a      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2a      	ldr	r2, [pc, #168]	; (8007284 <HAL_DMA_IRQHandler+0x3fc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d045      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a29      	ldr	r2, [pc, #164]	; (8007288 <HAL_DMA_IRQHandler+0x400>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d040      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a27      	ldr	r2, [pc, #156]	; (800728c <HAL_DMA_IRQHandler+0x404>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d03b      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a26      	ldr	r2, [pc, #152]	; (8007290 <HAL_DMA_IRQHandler+0x408>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d036      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a24      	ldr	r2, [pc, #144]	; (8007294 <HAL_DMA_IRQHandler+0x40c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d031      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a23      	ldr	r2, [pc, #140]	; (8007298 <HAL_DMA_IRQHandler+0x410>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d02c      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a21      	ldr	r2, [pc, #132]	; (800729c <HAL_DMA_IRQHandler+0x414>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d027      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a20      	ldr	r2, [pc, #128]	; (80072a0 <HAL_DMA_IRQHandler+0x418>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d022      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1e      	ldr	r2, [pc, #120]	; (80072a4 <HAL_DMA_IRQHandler+0x41c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d01d      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1d      	ldr	r2, [pc, #116]	; (80072a8 <HAL_DMA_IRQHandler+0x420>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d018      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1b      	ldr	r2, [pc, #108]	; (80072ac <HAL_DMA_IRQHandler+0x424>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d013      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1a      	ldr	r2, [pc, #104]	; (80072b0 <HAL_DMA_IRQHandler+0x428>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00e      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a18      	ldr	r2, [pc, #96]	; (80072b4 <HAL_DMA_IRQHandler+0x42c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d009      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <HAL_DMA_IRQHandler+0x430>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d004      	beq.n	800726a <HAL_DMA_IRQHandler+0x3e2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a15      	ldr	r2, [pc, #84]	; (80072bc <HAL_DMA_IRQHandler+0x434>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d12a      	bne.n	80072c0 <HAL_DMA_IRQHandler+0x438>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	bf14      	ite	ne
 8007278:	2301      	movne	r3, #1
 800727a:	2300      	moveq	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e023      	b.n	80072c8 <HAL_DMA_IRQHandler+0x440>
 8007280:	40020010 	.word	0x40020010
 8007284:	40020028 	.word	0x40020028
 8007288:	40020040 	.word	0x40020040
 800728c:	40020058 	.word	0x40020058
 8007290:	40020070 	.word	0x40020070
 8007294:	40020088 	.word	0x40020088
 8007298:	400200a0 	.word	0x400200a0
 800729c:	400200b8 	.word	0x400200b8
 80072a0:	40020410 	.word	0x40020410
 80072a4:	40020428 	.word	0x40020428
 80072a8:	40020440 	.word	0x40020440
 80072ac:	40020458 	.word	0x40020458
 80072b0:	40020470 	.word	0x40020470
 80072b4:	40020488 	.word	0x40020488
 80072b8:	400204a0 	.word	0x400204a0
 80072bc:	400204b8 	.word	0x400204b8
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2300      	movs	r3, #0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00d      	beq.n	80072e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d0:	f003 031f 	and.w	r3, r3, #31
 80072d4:	2204      	movs	r2, #4
 80072d6:	409a      	lsls	r2, r3
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e0:	f043 0204 	orr.w	r2, r3, #4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ec:	f003 031f 	and.w	r3, r3, #31
 80072f0:	2210      	movs	r2, #16
 80072f2:	409a      	lsls	r2, r3
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	4013      	ands	r3, r2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80a6 	beq.w	800744a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a85      	ldr	r2, [pc, #532]	; (8007518 <HAL_DMA_IRQHandler+0x690>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d04a      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a83      	ldr	r2, [pc, #524]	; (800751c <HAL_DMA_IRQHandler+0x694>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d045      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a82      	ldr	r2, [pc, #520]	; (8007520 <HAL_DMA_IRQHandler+0x698>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d040      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a80      	ldr	r2, [pc, #512]	; (8007524 <HAL_DMA_IRQHandler+0x69c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d03b      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a7f      	ldr	r2, [pc, #508]	; (8007528 <HAL_DMA_IRQHandler+0x6a0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d036      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a7d      	ldr	r2, [pc, #500]	; (800752c <HAL_DMA_IRQHandler+0x6a4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d031      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a7c      	ldr	r2, [pc, #496]	; (8007530 <HAL_DMA_IRQHandler+0x6a8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d02c      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a7a      	ldr	r2, [pc, #488]	; (8007534 <HAL_DMA_IRQHandler+0x6ac>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d027      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a79      	ldr	r2, [pc, #484]	; (8007538 <HAL_DMA_IRQHandler+0x6b0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d022      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a77      	ldr	r2, [pc, #476]	; (800753c <HAL_DMA_IRQHandler+0x6b4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d01d      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a76      	ldr	r2, [pc, #472]	; (8007540 <HAL_DMA_IRQHandler+0x6b8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d018      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a74      	ldr	r2, [pc, #464]	; (8007544 <HAL_DMA_IRQHandler+0x6bc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a73      	ldr	r2, [pc, #460]	; (8007548 <HAL_DMA_IRQHandler+0x6c0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00e      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a71      	ldr	r2, [pc, #452]	; (800754c <HAL_DMA_IRQHandler+0x6c4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d009      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a70      	ldr	r2, [pc, #448]	; (8007550 <HAL_DMA_IRQHandler+0x6c8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d004      	beq.n	800739e <HAL_DMA_IRQHandler+0x516>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a6e      	ldr	r2, [pc, #440]	; (8007554 <HAL_DMA_IRQHandler+0x6cc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d10a      	bne.n	80073b4 <HAL_DMA_IRQHandler+0x52c>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bf14      	ite	ne
 80073ac:	2301      	movne	r3, #1
 80073ae:	2300      	moveq	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	e009      	b.n	80073c8 <HAL_DMA_IRQHandler+0x540>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bf14      	ite	ne
 80073c2:	2301      	movne	r3, #1
 80073c4:	2300      	moveq	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d03e      	beq.n	800744a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	2210      	movs	r2, #16
 80073d6:	409a      	lsls	r2, r3
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d018      	beq.n	800741c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d108      	bne.n	800740a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d024      	beq.n	800744a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
 8007408:	e01f      	b.n	800744a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740e:	2b00      	cmp	r3, #0
 8007410:	d01b      	beq.n	800744a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
 800741a:	e016      	b.n	800744a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0208 	bic.w	r2, r2, #8
 8007438:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744e:	f003 031f 	and.w	r3, r3, #31
 8007452:	2220      	movs	r2, #32
 8007454:	409a      	lsls	r2, r3
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	4013      	ands	r3, r2
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 8110 	beq.w	8007680 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a2c      	ldr	r2, [pc, #176]	; (8007518 <HAL_DMA_IRQHandler+0x690>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d04a      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2b      	ldr	r2, [pc, #172]	; (800751c <HAL_DMA_IRQHandler+0x694>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d045      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a29      	ldr	r2, [pc, #164]	; (8007520 <HAL_DMA_IRQHandler+0x698>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d040      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a28      	ldr	r2, [pc, #160]	; (8007524 <HAL_DMA_IRQHandler+0x69c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d03b      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a26      	ldr	r2, [pc, #152]	; (8007528 <HAL_DMA_IRQHandler+0x6a0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d036      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a25      	ldr	r2, [pc, #148]	; (800752c <HAL_DMA_IRQHandler+0x6a4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d031      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a23      	ldr	r2, [pc, #140]	; (8007530 <HAL_DMA_IRQHandler+0x6a8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d02c      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a22      	ldr	r2, [pc, #136]	; (8007534 <HAL_DMA_IRQHandler+0x6ac>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d027      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a20      	ldr	r2, [pc, #128]	; (8007538 <HAL_DMA_IRQHandler+0x6b0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d022      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1f      	ldr	r2, [pc, #124]	; (800753c <HAL_DMA_IRQHandler+0x6b4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d01d      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1d      	ldr	r2, [pc, #116]	; (8007540 <HAL_DMA_IRQHandler+0x6b8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d018      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <HAL_DMA_IRQHandler+0x6bc>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d013      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a1a      	ldr	r2, [pc, #104]	; (8007548 <HAL_DMA_IRQHandler+0x6c0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00e      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a19      	ldr	r2, [pc, #100]	; (800754c <HAL_DMA_IRQHandler+0x6c4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d009      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a17      	ldr	r2, [pc, #92]	; (8007550 <HAL_DMA_IRQHandler+0x6c8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d004      	beq.n	8007500 <HAL_DMA_IRQHandler+0x678>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a16      	ldr	r2, [pc, #88]	; (8007554 <HAL_DMA_IRQHandler+0x6cc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d12b      	bne.n	8007558 <HAL_DMA_IRQHandler+0x6d0>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b00      	cmp	r3, #0
 800750c:	bf14      	ite	ne
 800750e:	2301      	movne	r3, #1
 8007510:	2300      	moveq	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	e02a      	b.n	800756c <HAL_DMA_IRQHandler+0x6e4>
 8007516:	bf00      	nop
 8007518:	40020010 	.word	0x40020010
 800751c:	40020028 	.word	0x40020028
 8007520:	40020040 	.word	0x40020040
 8007524:	40020058 	.word	0x40020058
 8007528:	40020070 	.word	0x40020070
 800752c:	40020088 	.word	0x40020088
 8007530:	400200a0 	.word	0x400200a0
 8007534:	400200b8 	.word	0x400200b8
 8007538:	40020410 	.word	0x40020410
 800753c:	40020428 	.word	0x40020428
 8007540:	40020440 	.word	0x40020440
 8007544:	40020458 	.word	0x40020458
 8007548:	40020470 	.word	0x40020470
 800754c:	40020488 	.word	0x40020488
 8007550:	400204a0 	.word	0x400204a0
 8007554:	400204b8 	.word	0x400204b8
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	bf14      	ite	ne
 8007566:	2301      	movne	r3, #1
 8007568:	2300      	moveq	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8087 	beq.w	8007680 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007576:	f003 031f 	and.w	r3, r3, #31
 800757a:	2220      	movs	r2, #32
 800757c:	409a      	lsls	r2, r3
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b04      	cmp	r3, #4
 800758c:	d139      	bne.n	8007602 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0216 	bic.w	r2, r2, #22
 800759c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	695a      	ldr	r2, [r3, #20]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d103      	bne.n	80075be <HAL_DMA_IRQHandler+0x736>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0208 	bic.w	r2, r2, #8
 80075cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d2:	f003 031f 	and.w	r3, r3, #31
 80075d6:	223f      	movs	r2, #63	; 0x3f
 80075d8:	409a      	lsls	r2, r3
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 834a 	beq.w	8007c8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
          }
          return;
 8007600:	e344      	b.n	8007c8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d018      	beq.n	8007642 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d108      	bne.n	8007630 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	2b00      	cmp	r3, #0
 8007624:	d02c      	beq.n	8007680 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
 800762e:	e027      	b.n	8007680 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d023      	beq.n	8007680 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
 8007640:	e01e      	b.n	8007680 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10f      	bne.n	8007670 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0210 	bic.w	r2, r2, #16
 800765e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8306 	beq.w	8007c96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8088 	beq.w	80077a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2204      	movs	r2, #4
 800769c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a7a      	ldr	r2, [pc, #488]	; (8007890 <HAL_DMA_IRQHandler+0xa08>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d04a      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a79      	ldr	r2, [pc, #484]	; (8007894 <HAL_DMA_IRQHandler+0xa0c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d045      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a77      	ldr	r2, [pc, #476]	; (8007898 <HAL_DMA_IRQHandler+0xa10>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d040      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a76      	ldr	r2, [pc, #472]	; (800789c <HAL_DMA_IRQHandler+0xa14>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d03b      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a74      	ldr	r2, [pc, #464]	; (80078a0 <HAL_DMA_IRQHandler+0xa18>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d036      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a73      	ldr	r2, [pc, #460]	; (80078a4 <HAL_DMA_IRQHandler+0xa1c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d031      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a71      	ldr	r2, [pc, #452]	; (80078a8 <HAL_DMA_IRQHandler+0xa20>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d02c      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a70      	ldr	r2, [pc, #448]	; (80078ac <HAL_DMA_IRQHandler+0xa24>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d027      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a6e      	ldr	r2, [pc, #440]	; (80078b0 <HAL_DMA_IRQHandler+0xa28>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d022      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a6d      	ldr	r2, [pc, #436]	; (80078b4 <HAL_DMA_IRQHandler+0xa2c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d01d      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a6b      	ldr	r2, [pc, #428]	; (80078b8 <HAL_DMA_IRQHandler+0xa30>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d018      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a6a      	ldr	r2, [pc, #424]	; (80078bc <HAL_DMA_IRQHandler+0xa34>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d013      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a68      	ldr	r2, [pc, #416]	; (80078c0 <HAL_DMA_IRQHandler+0xa38>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00e      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a67      	ldr	r2, [pc, #412]	; (80078c4 <HAL_DMA_IRQHandler+0xa3c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d009      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a65      	ldr	r2, [pc, #404]	; (80078c8 <HAL_DMA_IRQHandler+0xa40>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d004      	beq.n	8007740 <HAL_DMA_IRQHandler+0x8b8>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a64      	ldr	r2, [pc, #400]	; (80078cc <HAL_DMA_IRQHandler+0xa44>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d108      	bne.n	8007752 <HAL_DMA_IRQHandler+0x8ca>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	e007      	b.n	8007762 <HAL_DMA_IRQHandler+0x8da>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0201 	bic.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776a:	429a      	cmp	r2, r3
 800776c:	d307      	bcc.n	800777e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f2      	bne.n	8007762 <HAL_DMA_IRQHandler+0x8da>
 800777c:	e000      	b.n	8007780 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800777e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2203      	movs	r2, #3
 8007792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007796:	e003      	b.n	80077a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 8272 	beq.w	8007c96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	4798      	blx	r3
 80077ba:	e26c      	b.n	8007c96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a43      	ldr	r2, [pc, #268]	; (80078d0 <HAL_DMA_IRQHandler+0xa48>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d022      	beq.n	800780c <HAL_DMA_IRQHandler+0x984>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a42      	ldr	r2, [pc, #264]	; (80078d4 <HAL_DMA_IRQHandler+0xa4c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d01d      	beq.n	800780c <HAL_DMA_IRQHandler+0x984>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a40      	ldr	r2, [pc, #256]	; (80078d8 <HAL_DMA_IRQHandler+0xa50>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d018      	beq.n	800780c <HAL_DMA_IRQHandler+0x984>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a3f      	ldr	r2, [pc, #252]	; (80078dc <HAL_DMA_IRQHandler+0xa54>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d013      	beq.n	800780c <HAL_DMA_IRQHandler+0x984>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a3d      	ldr	r2, [pc, #244]	; (80078e0 <HAL_DMA_IRQHandler+0xa58>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00e      	beq.n	800780c <HAL_DMA_IRQHandler+0x984>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a3c      	ldr	r2, [pc, #240]	; (80078e4 <HAL_DMA_IRQHandler+0xa5c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d009      	beq.n	800780c <HAL_DMA_IRQHandler+0x984>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a3a      	ldr	r2, [pc, #232]	; (80078e8 <HAL_DMA_IRQHandler+0xa60>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <HAL_DMA_IRQHandler+0x984>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a39      	ldr	r2, [pc, #228]	; (80078ec <HAL_DMA_IRQHandler+0xa64>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d101      	bne.n	8007810 <HAL_DMA_IRQHandler+0x988>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <HAL_DMA_IRQHandler+0x98a>
 8007810:	2300      	movs	r3, #0
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 823f 	beq.w	8007c96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	2204      	movs	r2, #4
 800782a:	409a      	lsls	r2, r3
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4013      	ands	r3, r2
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 80cd 	beq.w	80079d0 <HAL_DMA_IRQHandler+0xb48>
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 80c7 	beq.w	80079d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007846:	f003 031f 	and.w	r3, r3, #31
 800784a:	2204      	movs	r2, #4
 800784c:	409a      	lsls	r2, r3
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d049      	beq.n	80078f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8210 	beq.w	8007c90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007878:	e20a      	b.n	8007c90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8206 	beq.w	8007c90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800788c:	e200      	b.n	8007c90 <HAL_DMA_IRQHandler+0xe08>
 800788e:	bf00      	nop
 8007890:	40020010 	.word	0x40020010
 8007894:	40020028 	.word	0x40020028
 8007898:	40020040 	.word	0x40020040
 800789c:	40020058 	.word	0x40020058
 80078a0:	40020070 	.word	0x40020070
 80078a4:	40020088 	.word	0x40020088
 80078a8:	400200a0 	.word	0x400200a0
 80078ac:	400200b8 	.word	0x400200b8
 80078b0:	40020410 	.word	0x40020410
 80078b4:	40020428 	.word	0x40020428
 80078b8:	40020440 	.word	0x40020440
 80078bc:	40020458 	.word	0x40020458
 80078c0:	40020470 	.word	0x40020470
 80078c4:	40020488 	.word	0x40020488
 80078c8:	400204a0 	.word	0x400204a0
 80078cc:	400204b8 	.word	0x400204b8
 80078d0:	58025408 	.word	0x58025408
 80078d4:	5802541c 	.word	0x5802541c
 80078d8:	58025430 	.word	0x58025430
 80078dc:	58025444 	.word	0x58025444
 80078e0:	58025458 	.word	0x58025458
 80078e4:	5802546c 	.word	0x5802546c
 80078e8:	58025480 	.word	0x58025480
 80078ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d160      	bne.n	80079bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a8c      	ldr	r2, [pc, #560]	; (8007b30 <HAL_DMA_IRQHandler+0xca8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d04a      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a8a      	ldr	r2, [pc, #552]	; (8007b34 <HAL_DMA_IRQHandler+0xcac>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d045      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a89      	ldr	r2, [pc, #548]	; (8007b38 <HAL_DMA_IRQHandler+0xcb0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d040      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a87      	ldr	r2, [pc, #540]	; (8007b3c <HAL_DMA_IRQHandler+0xcb4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d03b      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a86      	ldr	r2, [pc, #536]	; (8007b40 <HAL_DMA_IRQHandler+0xcb8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d036      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a84      	ldr	r2, [pc, #528]	; (8007b44 <HAL_DMA_IRQHandler+0xcbc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d031      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a83      	ldr	r2, [pc, #524]	; (8007b48 <HAL_DMA_IRQHandler+0xcc0>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d02c      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a81      	ldr	r2, [pc, #516]	; (8007b4c <HAL_DMA_IRQHandler+0xcc4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d027      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a80      	ldr	r2, [pc, #512]	; (8007b50 <HAL_DMA_IRQHandler+0xcc8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d022      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a7e      	ldr	r2, [pc, #504]	; (8007b54 <HAL_DMA_IRQHandler+0xccc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d01d      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a7d      	ldr	r2, [pc, #500]	; (8007b58 <HAL_DMA_IRQHandler+0xcd0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d018      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a7b      	ldr	r2, [pc, #492]	; (8007b5c <HAL_DMA_IRQHandler+0xcd4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d013      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a7a      	ldr	r2, [pc, #488]	; (8007b60 <HAL_DMA_IRQHandler+0xcd8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00e      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a78      	ldr	r2, [pc, #480]	; (8007b64 <HAL_DMA_IRQHandler+0xcdc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d009      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a77      	ldr	r2, [pc, #476]	; (8007b68 <HAL_DMA_IRQHandler+0xce0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d004      	beq.n	800799a <HAL_DMA_IRQHandler+0xb12>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a75      	ldr	r2, [pc, #468]	; (8007b6c <HAL_DMA_IRQHandler+0xce4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d108      	bne.n	80079ac <HAL_DMA_IRQHandler+0xb24>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0208 	bic.w	r2, r2, #8
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e007      	b.n	80079bc <HAL_DMA_IRQHandler+0xb34>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0204 	bic.w	r2, r2, #4
 80079ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 8165 	beq.w	8007c90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ce:	e15f      	b.n	8007c90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	2202      	movs	r2, #2
 80079da:	409a      	lsls	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	4013      	ands	r3, r2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80c5 	beq.w	8007b70 <HAL_DMA_IRQHandler+0xce8>
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 80bf 	beq.w	8007b70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	2202      	movs	r2, #2
 80079fc:	409a      	lsls	r2, r3
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d018      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d109      	bne.n	8007a2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 813a 	beq.w	8007c94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a28:	e134      	b.n	8007c94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 8130 	beq.w	8007c94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a3c:	e12a      	b.n	8007c94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d168      	bne.n	8007b1a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a38      	ldr	r2, [pc, #224]	; (8007b30 <HAL_DMA_IRQHandler+0xca8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d04a      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a37      	ldr	r2, [pc, #220]	; (8007b34 <HAL_DMA_IRQHandler+0xcac>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d045      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a35      	ldr	r2, [pc, #212]	; (8007b38 <HAL_DMA_IRQHandler+0xcb0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d040      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a34      	ldr	r2, [pc, #208]	; (8007b3c <HAL_DMA_IRQHandler+0xcb4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d03b      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a32      	ldr	r2, [pc, #200]	; (8007b40 <HAL_DMA_IRQHandler+0xcb8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d036      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a31      	ldr	r2, [pc, #196]	; (8007b44 <HAL_DMA_IRQHandler+0xcbc>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d031      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a2f      	ldr	r2, [pc, #188]	; (8007b48 <HAL_DMA_IRQHandler+0xcc0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d02c      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a2e      	ldr	r2, [pc, #184]	; (8007b4c <HAL_DMA_IRQHandler+0xcc4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d027      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a2c      	ldr	r2, [pc, #176]	; (8007b50 <HAL_DMA_IRQHandler+0xcc8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d022      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a2b      	ldr	r2, [pc, #172]	; (8007b54 <HAL_DMA_IRQHandler+0xccc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d01d      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a29      	ldr	r2, [pc, #164]	; (8007b58 <HAL_DMA_IRQHandler+0xcd0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d018      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a28      	ldr	r2, [pc, #160]	; (8007b5c <HAL_DMA_IRQHandler+0xcd4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d013      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a26      	ldr	r2, [pc, #152]	; (8007b60 <HAL_DMA_IRQHandler+0xcd8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00e      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a25      	ldr	r2, [pc, #148]	; (8007b64 <HAL_DMA_IRQHandler+0xcdc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d009      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a23      	ldr	r2, [pc, #140]	; (8007b68 <HAL_DMA_IRQHandler+0xce0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d004      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0xc60>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a22      	ldr	r2, [pc, #136]	; (8007b6c <HAL_DMA_IRQHandler+0xce4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d108      	bne.n	8007afa <HAL_DMA_IRQHandler+0xc72>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0214 	bic.w	r2, r2, #20
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	e007      	b.n	8007b0a <HAL_DMA_IRQHandler+0xc82>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 020a 	bic.w	r2, r2, #10
 8007b08:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80b8 	beq.w	8007c94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b2c:	e0b2      	b.n	8007c94 <HAL_DMA_IRQHandler+0xe0c>
 8007b2e:	bf00      	nop
 8007b30:	40020010 	.word	0x40020010
 8007b34:	40020028 	.word	0x40020028
 8007b38:	40020040 	.word	0x40020040
 8007b3c:	40020058 	.word	0x40020058
 8007b40:	40020070 	.word	0x40020070
 8007b44:	40020088 	.word	0x40020088
 8007b48:	400200a0 	.word	0x400200a0
 8007b4c:	400200b8 	.word	0x400200b8
 8007b50:	40020410 	.word	0x40020410
 8007b54:	40020428 	.word	0x40020428
 8007b58:	40020440 	.word	0x40020440
 8007b5c:	40020458 	.word	0x40020458
 8007b60:	40020470 	.word	0x40020470
 8007b64:	40020488 	.word	0x40020488
 8007b68:	400204a0 	.word	0x400204a0
 8007b6c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b74:	f003 031f 	and.w	r3, r3, #31
 8007b78:	2208      	movs	r2, #8
 8007b7a:	409a      	lsls	r2, r3
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8088 	beq.w	8007c96 <HAL_DMA_IRQHandler+0xe0e>
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8082 	beq.w	8007c96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a41      	ldr	r2, [pc, #260]	; (8007c9c <HAL_DMA_IRQHandler+0xe14>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d04a      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a3f      	ldr	r2, [pc, #252]	; (8007ca0 <HAL_DMA_IRQHandler+0xe18>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d045      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a3e      	ldr	r2, [pc, #248]	; (8007ca4 <HAL_DMA_IRQHandler+0xe1c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d040      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a3c      	ldr	r2, [pc, #240]	; (8007ca8 <HAL_DMA_IRQHandler+0xe20>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d03b      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a3b      	ldr	r2, [pc, #236]	; (8007cac <HAL_DMA_IRQHandler+0xe24>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d036      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a39      	ldr	r2, [pc, #228]	; (8007cb0 <HAL_DMA_IRQHandler+0xe28>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d031      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a38      	ldr	r2, [pc, #224]	; (8007cb4 <HAL_DMA_IRQHandler+0xe2c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d02c      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a36      	ldr	r2, [pc, #216]	; (8007cb8 <HAL_DMA_IRQHandler+0xe30>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d027      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a35      	ldr	r2, [pc, #212]	; (8007cbc <HAL_DMA_IRQHandler+0xe34>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d022      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a33      	ldr	r2, [pc, #204]	; (8007cc0 <HAL_DMA_IRQHandler+0xe38>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d01d      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a32      	ldr	r2, [pc, #200]	; (8007cc4 <HAL_DMA_IRQHandler+0xe3c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d018      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a30      	ldr	r2, [pc, #192]	; (8007cc8 <HAL_DMA_IRQHandler+0xe40>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d013      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a2f      	ldr	r2, [pc, #188]	; (8007ccc <HAL_DMA_IRQHandler+0xe44>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00e      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a2d      	ldr	r2, [pc, #180]	; (8007cd0 <HAL_DMA_IRQHandler+0xe48>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d009      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a2c      	ldr	r2, [pc, #176]	; (8007cd4 <HAL_DMA_IRQHandler+0xe4c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d004      	beq.n	8007c32 <HAL_DMA_IRQHandler+0xdaa>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a2a      	ldr	r2, [pc, #168]	; (8007cd8 <HAL_DMA_IRQHandler+0xe50>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d108      	bne.n	8007c44 <HAL_DMA_IRQHandler+0xdbc>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 021c 	bic.w	r2, r2, #28
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	e007      	b.n	8007c54 <HAL_DMA_IRQHandler+0xdcc>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 020e 	bic.w	r2, r2, #14
 8007c52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c58:	f003 031f 	and.w	r3, r3, #31
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	409a      	lsls	r2, r3
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d009      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
 8007c8a:	e004      	b.n	8007c96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c8c:	bf00      	nop
 8007c8e:	e002      	b.n	8007c96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c90:	bf00      	nop
 8007c92:	e000      	b.n	8007c96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c96:	3728      	adds	r7, #40	; 0x28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40020010 	.word	0x40020010
 8007ca0:	40020028 	.word	0x40020028
 8007ca4:	40020040 	.word	0x40020040
 8007ca8:	40020058 	.word	0x40020058
 8007cac:	40020070 	.word	0x40020070
 8007cb0:	40020088 	.word	0x40020088
 8007cb4:	400200a0 	.word	0x400200a0
 8007cb8:	400200b8 	.word	0x400200b8
 8007cbc:	40020410 	.word	0x40020410
 8007cc0:	40020428 	.word	0x40020428
 8007cc4:	40020440 	.word	0x40020440
 8007cc8:	40020458 	.word	0x40020458
 8007ccc:	40020470 	.word	0x40020470
 8007cd0:	40020488 	.word	0x40020488
 8007cd4:	400204a0 	.word	0x400204a0
 8007cd8:	400204b8 	.word	0x400204b8

08007cdc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a84      	ldr	r2, [pc, #528]	; (8007f0c <DMA_SetConfig+0x230>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d072      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a82      	ldr	r2, [pc, #520]	; (8007f10 <DMA_SetConfig+0x234>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d06d      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a81      	ldr	r2, [pc, #516]	; (8007f14 <DMA_SetConfig+0x238>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d068      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a7f      	ldr	r2, [pc, #508]	; (8007f18 <DMA_SetConfig+0x23c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d063      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a7e      	ldr	r2, [pc, #504]	; (8007f1c <DMA_SetConfig+0x240>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d05e      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a7c      	ldr	r2, [pc, #496]	; (8007f20 <DMA_SetConfig+0x244>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d059      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a7b      	ldr	r2, [pc, #492]	; (8007f24 <DMA_SetConfig+0x248>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d054      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a79      	ldr	r2, [pc, #484]	; (8007f28 <DMA_SetConfig+0x24c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d04f      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a78      	ldr	r2, [pc, #480]	; (8007f2c <DMA_SetConfig+0x250>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d04a      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a76      	ldr	r2, [pc, #472]	; (8007f30 <DMA_SetConfig+0x254>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d045      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a75      	ldr	r2, [pc, #468]	; (8007f34 <DMA_SetConfig+0x258>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d040      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a73      	ldr	r2, [pc, #460]	; (8007f38 <DMA_SetConfig+0x25c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d03b      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a72      	ldr	r2, [pc, #456]	; (8007f3c <DMA_SetConfig+0x260>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d036      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a70      	ldr	r2, [pc, #448]	; (8007f40 <DMA_SetConfig+0x264>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d031      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a6f      	ldr	r2, [pc, #444]	; (8007f44 <DMA_SetConfig+0x268>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d02c      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a6d      	ldr	r2, [pc, #436]	; (8007f48 <DMA_SetConfig+0x26c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d027      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a6c      	ldr	r2, [pc, #432]	; (8007f4c <DMA_SetConfig+0x270>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d022      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a6a      	ldr	r2, [pc, #424]	; (8007f50 <DMA_SetConfig+0x274>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d01d      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a69      	ldr	r2, [pc, #420]	; (8007f54 <DMA_SetConfig+0x278>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d018      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a67      	ldr	r2, [pc, #412]	; (8007f58 <DMA_SetConfig+0x27c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a66      	ldr	r2, [pc, #408]	; (8007f5c <DMA_SetConfig+0x280>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00e      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a64      	ldr	r2, [pc, #400]	; (8007f60 <DMA_SetConfig+0x284>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d009      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a63      	ldr	r2, [pc, #396]	; (8007f64 <DMA_SetConfig+0x288>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <DMA_SetConfig+0x10a>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a61      	ldr	r2, [pc, #388]	; (8007f68 <DMA_SetConfig+0x28c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d101      	bne.n	8007dea <DMA_SetConfig+0x10e>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <DMA_SetConfig+0x110>
 8007dea:	2300      	movs	r3, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00d      	beq.n	8007e0c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007df8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e0a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a3e      	ldr	r2, [pc, #248]	; (8007f0c <DMA_SetConfig+0x230>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d04a      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a3d      	ldr	r2, [pc, #244]	; (8007f10 <DMA_SetConfig+0x234>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d045      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a3b      	ldr	r2, [pc, #236]	; (8007f14 <DMA_SetConfig+0x238>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d040      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a3a      	ldr	r2, [pc, #232]	; (8007f18 <DMA_SetConfig+0x23c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d03b      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a38      	ldr	r2, [pc, #224]	; (8007f1c <DMA_SetConfig+0x240>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d036      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a37      	ldr	r2, [pc, #220]	; (8007f20 <DMA_SetConfig+0x244>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d031      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a35      	ldr	r2, [pc, #212]	; (8007f24 <DMA_SetConfig+0x248>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d02c      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a34      	ldr	r2, [pc, #208]	; (8007f28 <DMA_SetConfig+0x24c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d027      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a32      	ldr	r2, [pc, #200]	; (8007f2c <DMA_SetConfig+0x250>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d022      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a31      	ldr	r2, [pc, #196]	; (8007f30 <DMA_SetConfig+0x254>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d01d      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a2f      	ldr	r2, [pc, #188]	; (8007f34 <DMA_SetConfig+0x258>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d018      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a2e      	ldr	r2, [pc, #184]	; (8007f38 <DMA_SetConfig+0x25c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d013      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a2c      	ldr	r2, [pc, #176]	; (8007f3c <DMA_SetConfig+0x260>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00e      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a2b      	ldr	r2, [pc, #172]	; (8007f40 <DMA_SetConfig+0x264>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d009      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a29      	ldr	r2, [pc, #164]	; (8007f44 <DMA_SetConfig+0x268>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d004      	beq.n	8007eac <DMA_SetConfig+0x1d0>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a28      	ldr	r2, [pc, #160]	; (8007f48 <DMA_SetConfig+0x26c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d101      	bne.n	8007eb0 <DMA_SetConfig+0x1d4>
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <DMA_SetConfig+0x1d6>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d05a      	beq.n	8007f6c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eba:	f003 031f 	and.w	r3, r3, #31
 8007ebe:	223f      	movs	r2, #63	; 0x3f
 8007ec0:	409a      	lsls	r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ed4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	2b40      	cmp	r3, #64	; 0x40
 8007ee4:	d108      	bne.n	8007ef8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ef6:	e087      	b.n	8008008 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	60da      	str	r2, [r3, #12]
}
 8007f08:	e07e      	b.n	8008008 <DMA_SetConfig+0x32c>
 8007f0a:	bf00      	nop
 8007f0c:	40020010 	.word	0x40020010
 8007f10:	40020028 	.word	0x40020028
 8007f14:	40020040 	.word	0x40020040
 8007f18:	40020058 	.word	0x40020058
 8007f1c:	40020070 	.word	0x40020070
 8007f20:	40020088 	.word	0x40020088
 8007f24:	400200a0 	.word	0x400200a0
 8007f28:	400200b8 	.word	0x400200b8
 8007f2c:	40020410 	.word	0x40020410
 8007f30:	40020428 	.word	0x40020428
 8007f34:	40020440 	.word	0x40020440
 8007f38:	40020458 	.word	0x40020458
 8007f3c:	40020470 	.word	0x40020470
 8007f40:	40020488 	.word	0x40020488
 8007f44:	400204a0 	.word	0x400204a0
 8007f48:	400204b8 	.word	0x400204b8
 8007f4c:	58025408 	.word	0x58025408
 8007f50:	5802541c 	.word	0x5802541c
 8007f54:	58025430 	.word	0x58025430
 8007f58:	58025444 	.word	0x58025444
 8007f5c:	58025458 	.word	0x58025458
 8007f60:	5802546c 	.word	0x5802546c
 8007f64:	58025480 	.word	0x58025480
 8007f68:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a28      	ldr	r2, [pc, #160]	; (8008014 <DMA_SetConfig+0x338>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d022      	beq.n	8007fbc <DMA_SetConfig+0x2e0>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a27      	ldr	r2, [pc, #156]	; (8008018 <DMA_SetConfig+0x33c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d01d      	beq.n	8007fbc <DMA_SetConfig+0x2e0>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a25      	ldr	r2, [pc, #148]	; (800801c <DMA_SetConfig+0x340>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d018      	beq.n	8007fbc <DMA_SetConfig+0x2e0>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a24      	ldr	r2, [pc, #144]	; (8008020 <DMA_SetConfig+0x344>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d013      	beq.n	8007fbc <DMA_SetConfig+0x2e0>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a22      	ldr	r2, [pc, #136]	; (8008024 <DMA_SetConfig+0x348>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00e      	beq.n	8007fbc <DMA_SetConfig+0x2e0>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a21      	ldr	r2, [pc, #132]	; (8008028 <DMA_SetConfig+0x34c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d009      	beq.n	8007fbc <DMA_SetConfig+0x2e0>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1f      	ldr	r2, [pc, #124]	; (800802c <DMA_SetConfig+0x350>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d004      	beq.n	8007fbc <DMA_SetConfig+0x2e0>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1e      	ldr	r2, [pc, #120]	; (8008030 <DMA_SetConfig+0x354>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d101      	bne.n	8007fc0 <DMA_SetConfig+0x2e4>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <DMA_SetConfig+0x2e6>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d020      	beq.n	8008008 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	2201      	movs	r2, #1
 8007fd0:	409a      	lsls	r2, r3
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d108      	bne.n	8007ff8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	60da      	str	r2, [r3, #12]
}
 8007ff6:	e007      	b.n	8008008 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	60da      	str	r2, [r3, #12]
}
 8008008:	bf00      	nop
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	58025408 	.word	0x58025408
 8008018:	5802541c 	.word	0x5802541c
 800801c:	58025430 	.word	0x58025430
 8008020:	58025444 	.word	0x58025444
 8008024:	58025458 	.word	0x58025458
 8008028:	5802546c 	.word	0x5802546c
 800802c:	58025480 	.word	0x58025480
 8008030:	58025494 	.word	0x58025494

08008034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a42      	ldr	r2, [pc, #264]	; (800814c <DMA_CalcBaseAndBitshift+0x118>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d04a      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a41      	ldr	r2, [pc, #260]	; (8008150 <DMA_CalcBaseAndBitshift+0x11c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d045      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a3f      	ldr	r2, [pc, #252]	; (8008154 <DMA_CalcBaseAndBitshift+0x120>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d040      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a3e      	ldr	r2, [pc, #248]	; (8008158 <DMA_CalcBaseAndBitshift+0x124>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d03b      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a3c      	ldr	r2, [pc, #240]	; (800815c <DMA_CalcBaseAndBitshift+0x128>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d036      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a3b      	ldr	r2, [pc, #236]	; (8008160 <DMA_CalcBaseAndBitshift+0x12c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d031      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a39      	ldr	r2, [pc, #228]	; (8008164 <DMA_CalcBaseAndBitshift+0x130>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d02c      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a38      	ldr	r2, [pc, #224]	; (8008168 <DMA_CalcBaseAndBitshift+0x134>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d027      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a36      	ldr	r2, [pc, #216]	; (800816c <DMA_CalcBaseAndBitshift+0x138>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d022      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a35      	ldr	r2, [pc, #212]	; (8008170 <DMA_CalcBaseAndBitshift+0x13c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d01d      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a33      	ldr	r2, [pc, #204]	; (8008174 <DMA_CalcBaseAndBitshift+0x140>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d018      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a32      	ldr	r2, [pc, #200]	; (8008178 <DMA_CalcBaseAndBitshift+0x144>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d013      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a30      	ldr	r2, [pc, #192]	; (800817c <DMA_CalcBaseAndBitshift+0x148>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00e      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a2f      	ldr	r2, [pc, #188]	; (8008180 <DMA_CalcBaseAndBitshift+0x14c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d009      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a2d      	ldr	r2, [pc, #180]	; (8008184 <DMA_CalcBaseAndBitshift+0x150>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d004      	beq.n	80080dc <DMA_CalcBaseAndBitshift+0xa8>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a2c      	ldr	r2, [pc, #176]	; (8008188 <DMA_CalcBaseAndBitshift+0x154>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d101      	bne.n	80080e0 <DMA_CalcBaseAndBitshift+0xac>
 80080dc:	2301      	movs	r3, #1
 80080de:	e000      	b.n	80080e2 <DMA_CalcBaseAndBitshift+0xae>
 80080e0:	2300      	movs	r3, #0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d024      	beq.n	8008130 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	3b10      	subs	r3, #16
 80080ee:	4a27      	ldr	r2, [pc, #156]	; (800818c <DMA_CalcBaseAndBitshift+0x158>)
 80080f0:	fba2 2303 	umull	r2, r3, r2, r3
 80080f4:	091b      	lsrs	r3, r3, #4
 80080f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f003 0307 	and.w	r3, r3, #7
 80080fe:	4a24      	ldr	r2, [pc, #144]	; (8008190 <DMA_CalcBaseAndBitshift+0x15c>)
 8008100:	5cd3      	ldrb	r3, [r2, r3]
 8008102:	461a      	mov	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b03      	cmp	r3, #3
 800810c:	d908      	bls.n	8008120 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	4b1f      	ldr	r3, [pc, #124]	; (8008194 <DMA_CalcBaseAndBitshift+0x160>)
 8008116:	4013      	ands	r3, r2
 8008118:	1d1a      	adds	r2, r3, #4
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	659a      	str	r2, [r3, #88]	; 0x58
 800811e:	e00d      	b.n	800813c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	4b1b      	ldr	r3, [pc, #108]	; (8008194 <DMA_CalcBaseAndBitshift+0x160>)
 8008128:	4013      	ands	r3, r2
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6593      	str	r3, [r2, #88]	; 0x58
 800812e:	e005      	b.n	800813c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	40020010 	.word	0x40020010
 8008150:	40020028 	.word	0x40020028
 8008154:	40020040 	.word	0x40020040
 8008158:	40020058 	.word	0x40020058
 800815c:	40020070 	.word	0x40020070
 8008160:	40020088 	.word	0x40020088
 8008164:	400200a0 	.word	0x400200a0
 8008168:	400200b8 	.word	0x400200b8
 800816c:	40020410 	.word	0x40020410
 8008170:	40020428 	.word	0x40020428
 8008174:	40020440 	.word	0x40020440
 8008178:	40020458 	.word	0x40020458
 800817c:	40020470 	.word	0x40020470
 8008180:	40020488 	.word	0x40020488
 8008184:	400204a0 	.word	0x400204a0
 8008188:	400204b8 	.word	0x400204b8
 800818c:	aaaaaaab 	.word	0xaaaaaaab
 8008190:	08011f20 	.word	0x08011f20
 8008194:	fffffc00 	.word	0xfffffc00

08008198 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d120      	bne.n	80081ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d858      	bhi.n	8008266 <DMA_CheckFifoParam+0xce>
 80081b4:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <DMA_CheckFifoParam+0x24>)
 80081b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ba:	bf00      	nop
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081df 	.word	0x080081df
 80081c4:	080081cd 	.word	0x080081cd
 80081c8:	08008267 	.word	0x08008267
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d048      	beq.n	800826a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081dc:	e045      	b.n	800826a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081e6:	d142      	bne.n	800826e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081ec:	e03f      	b.n	800826e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f6:	d123      	bne.n	8008240 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d838      	bhi.n	8008272 <DMA_CheckFifoParam+0xda>
 8008200:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <DMA_CheckFifoParam+0x70>)
 8008202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008206:	bf00      	nop
 8008208:	08008219 	.word	0x08008219
 800820c:	0800821f 	.word	0x0800821f
 8008210:	08008219 	.word	0x08008219
 8008214:	08008231 	.word	0x08008231
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	73fb      	strb	r3, [r7, #15]
        break;
 800821c:	e030      	b.n	8008280 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d025      	beq.n	8008276 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800822e:	e022      	b.n	8008276 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008238:	d11f      	bne.n	800827a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800823e:	e01c      	b.n	800827a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	2b02      	cmp	r3, #2
 8008246:	d902      	bls.n	800824e <DMA_CheckFifoParam+0xb6>
 8008248:	2b03      	cmp	r3, #3
 800824a:	d003      	beq.n	8008254 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800824c:	e018      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	73fb      	strb	r3, [r7, #15]
        break;
 8008252:	e015      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00e      	beq.n	800827e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]
    break;
 8008264:	e00b      	b.n	800827e <DMA_CheckFifoParam+0xe6>
        break;
 8008266:	bf00      	nop
 8008268:	e00a      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
        break;
 800826a:	bf00      	nop
 800826c:	e008      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
        break;
 800826e:	bf00      	nop
 8008270:	e006      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
        break;
 8008272:	bf00      	nop
 8008274:	e004      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
        break;
 8008276:	bf00      	nop
 8008278:	e002      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
        break;
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
    break;
 800827e:	bf00      	nop
    }
  }

  return status;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a38      	ldr	r2, [pc, #224]	; (8008384 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d022      	beq.n	80082ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a36      	ldr	r2, [pc, #216]	; (8008388 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d01d      	beq.n	80082ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a35      	ldr	r2, [pc, #212]	; (800838c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d018      	beq.n	80082ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a33      	ldr	r2, [pc, #204]	; (8008390 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d013      	beq.n	80082ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a32      	ldr	r2, [pc, #200]	; (8008394 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00e      	beq.n	80082ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a30      	ldr	r2, [pc, #192]	; (8008398 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d009      	beq.n	80082ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a2f      	ldr	r2, [pc, #188]	; (800839c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d004      	beq.n	80082ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a2d      	ldr	r2, [pc, #180]	; (80083a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d101      	bne.n	80082f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e000      	b.n	80082f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80082f2:	2300      	movs	r3, #0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01a      	beq.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	3b08      	subs	r3, #8
 8008300:	4a28      	ldr	r2, [pc, #160]	; (80083a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008302:	fba2 2303 	umull	r2, r3, r2, r3
 8008306:	091b      	lsrs	r3, r3, #4
 8008308:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4b26      	ldr	r3, [pc, #152]	; (80083a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	461a      	mov	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a24      	ldr	r2, [pc, #144]	; (80083ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800831c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f003 031f 	and.w	r3, r3, #31
 8008324:	2201      	movs	r2, #1
 8008326:	409a      	lsls	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800832c:	e024      	b.n	8008378 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	3b10      	subs	r3, #16
 8008336:	4a1e      	ldr	r2, [pc, #120]	; (80083b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008338:	fba2 2303 	umull	r2, r3, r2, r3
 800833c:	091b      	lsrs	r3, r3, #4
 800833e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4a1c      	ldr	r2, [pc, #112]	; (80083b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d806      	bhi.n	8008356 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4a1b      	ldr	r2, [pc, #108]	; (80083b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d902      	bls.n	8008356 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3308      	adds	r3, #8
 8008354:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4b18      	ldr	r3, [pc, #96]	; (80083bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800835a:	4413      	add	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	461a      	mov	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a16      	ldr	r2, [pc, #88]	; (80083c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008368:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f003 031f 	and.w	r3, r3, #31
 8008370:	2201      	movs	r2, #1
 8008372:	409a      	lsls	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008378:	bf00      	nop
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	58025408 	.word	0x58025408
 8008388:	5802541c 	.word	0x5802541c
 800838c:	58025430 	.word	0x58025430
 8008390:	58025444 	.word	0x58025444
 8008394:	58025458 	.word	0x58025458
 8008398:	5802546c 	.word	0x5802546c
 800839c:	58025480 	.word	0x58025480
 80083a0:	58025494 	.word	0x58025494
 80083a4:	cccccccd 	.word	0xcccccccd
 80083a8:	16009600 	.word	0x16009600
 80083ac:	58025880 	.word	0x58025880
 80083b0:	aaaaaaab 	.word	0xaaaaaaab
 80083b4:	400204b8 	.word	0x400204b8
 80083b8:	4002040f 	.word	0x4002040f
 80083bc:	10008200 	.word	0x10008200
 80083c0:	40020880 	.word	0x40020880

080083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d04a      	beq.n	8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d847      	bhi.n	8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a25      	ldr	r2, [pc, #148]	; (800847c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d022      	beq.n	8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a24      	ldr	r2, [pc, #144]	; (8008480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d01d      	beq.n	8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a22      	ldr	r2, [pc, #136]	; (8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d018      	beq.n	8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a21      	ldr	r2, [pc, #132]	; (8008488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d013      	beq.n	8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1f      	ldr	r2, [pc, #124]	; (800848c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00e      	beq.n	8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a1e      	ldr	r2, [pc, #120]	; (8008490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d009      	beq.n	8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1c      	ldr	r2, [pc, #112]	; (8008494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a1b      	ldr	r2, [pc, #108]	; (8008498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d101      	bne.n	8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008434:	2300      	movs	r3, #0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4b17      	ldr	r3, [pc, #92]	; (800849c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a15      	ldr	r2, [pc, #84]	; (80084a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800844c:	671a      	str	r2, [r3, #112]	; 0x70
 800844e:	e009      	b.n	8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4b14      	ldr	r3, [pc, #80]	; (80084a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	461a      	mov	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a11      	ldr	r2, [pc, #68]	; (80084a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008462:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3b01      	subs	r3, #1
 8008468:	2201      	movs	r2, #1
 800846a:	409a      	lsls	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008470:	bf00      	nop
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	58025408 	.word	0x58025408
 8008480:	5802541c 	.word	0x5802541c
 8008484:	58025430 	.word	0x58025430
 8008488:	58025444 	.word	0x58025444
 800848c:	58025458 	.word	0x58025458
 8008490:	5802546c 	.word	0x5802546c
 8008494:	58025480 	.word	0x58025480
 8008498:	58025494 	.word	0x58025494
 800849c:	1600963f 	.word	0x1600963f
 80084a0:	58025940 	.word	0x58025940
 80084a4:	1000823f 	.word	0x1000823f
 80084a8:	40020940 	.word	0x40020940

080084ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e0c6      	b.n	800864c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d102      	bne.n	80084cc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7fb f97c 	bl	80037c4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2223      	movs	r2, #35	; 0x23
 80084d0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084d2:	4b60      	ldr	r3, [pc, #384]	; (8008654 <HAL_ETH_Init+0x1a8>)
 80084d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084d8:	4a5e      	ldr	r2, [pc, #376]	; (8008654 <HAL_ETH_Init+0x1a8>)
 80084da:	f043 0302 	orr.w	r3, r3, #2
 80084de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80084e2:	4b5c      	ldr	r3, [pc, #368]	; (8008654 <HAL_ETH_Init+0x1a8>)
 80084e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	60bb      	str	r3, [r7, #8]
 80084ee:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	7a1b      	ldrb	r3, [r3, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80084f8:	2000      	movs	r0, #0
 80084fa:	f7fc f8dd 	bl	80046b8 <HAL_SYSCFG_ETHInterfaceSelect>
 80084fe:	e003      	b.n	8008508 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8008500:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008504:	f7fc f8d8 	bl	80046b8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008520:	f7fc f88e 	bl	8004640 <HAL_GetTick>
 8008524:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008526:	e00f      	b.n	8008548 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8008528:	f7fc f88a 	bl	8004640 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008536:	d907      	bls.n	8008548 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2204      	movs	r2, #4
 800853c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	22e0      	movs	r2, #224	; 0xe0
 8008542:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e081      	b.n	800864c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e6      	bne.n	8008528 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fac0 	bl	8008ae0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8008560:	f001 fe8c 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 8008564:	4603      	mov	r3, r0
 8008566:	4a3c      	ldr	r2, [pc, #240]	; (8008658 <HAL_ETH_Init+0x1ac>)
 8008568:	fba2 2303 	umull	r2, r3, r2, r3
 800856c:	0c9a      	lsrs	r2, r3, #18
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3a01      	subs	r2, #1
 8008574:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fa13 	bl	80089a4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008594:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008598:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	22e0      	movs	r2, #224	; 0xe0
 80085b0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e04a      	b.n	800864c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	f241 1308 	movw	r3, #4360	; 0x1108
 80085be:	4413      	add	r3, r2
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b26      	ldr	r3, [pc, #152]	; (800865c <HAL_ETH_Init+0x1b0>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	6952      	ldr	r2, [r2, #20]
 80085ca:	0052      	lsls	r2, r2, #1
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	6809      	ldr	r1, [r1, #0]
 80085d0:	431a      	orrs	r2, r3
 80085d2:	f241 1308 	movw	r3, #4360	; 0x1108
 80085d6:	440b      	add	r3, r1
 80085d8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fad8 	bl	8008b90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fb1c 	bl	8008c1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	3305      	adds	r3, #5
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	021a      	lsls	r2, r3, #8
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	3304      	adds	r3, #4
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	4619      	mov	r1, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	3303      	adds	r3, #3
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	061a      	lsls	r2, r3, #24
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	3302      	adds	r3, #2
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	3301      	adds	r3, #1
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008624:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008632:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008634:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2210      	movs	r2, #16
 8008642:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2210      	movs	r2, #16
 8008648:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	58024400 	.word	0x58024400
 8008658:	431bde83 	.word	0x431bde83
 800865c:	ffff8001 	.word	0xffff8001

08008660 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8008672:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	791b      	ldrb	r3, [r3, #4]
 8008678:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800867a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	7b1b      	ldrb	r3, [r3, #12]
 8008680:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008682:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	7b5b      	ldrb	r3, [r3, #13]
 8008688:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800868a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	7b9b      	ldrb	r3, [r3, #14]
 8008690:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008692:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	7bdb      	ldrb	r3, [r3, #15]
 8008698:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800869a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	2a00      	cmp	r2, #0
 80086a2:	d102      	bne.n	80086aa <ETH_SetMACConfig+0x4a>
 80086a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80086a8:	e000      	b.n	80086ac <ETH_SetMACConfig+0x4c>
 80086aa:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80086ac:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	7c52      	ldrb	r2, [r2, #17]
 80086b2:	2a00      	cmp	r2, #0
 80086b4:	d102      	bne.n	80086bc <ETH_SetMACConfig+0x5c>
 80086b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086ba:	e000      	b.n	80086be <ETH_SetMACConfig+0x5e>
 80086bc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80086be:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	7c9b      	ldrb	r3, [r3, #18]
 80086c4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80086c6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80086cc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80086d2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	7f1b      	ldrb	r3, [r3, #28]
 80086d8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80086da:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	7f5b      	ldrb	r3, [r3, #29]
 80086e0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80086e2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	7f92      	ldrb	r2, [r2, #30]
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	d102      	bne.n	80086f2 <ETH_SetMACConfig+0x92>
 80086ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086f0:	e000      	b.n	80086f4 <ETH_SetMACConfig+0x94>
 80086f2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80086f4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	7fdb      	ldrb	r3, [r3, #31]
 80086fa:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80086fc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008704:	2a00      	cmp	r2, #0
 8008706:	d102      	bne.n	800870e <ETH_SetMACConfig+0xae>
 8008708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800870c:	e000      	b.n	8008710 <ETH_SetMACConfig+0xb0>
 800870e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008710:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8008716:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800871e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8008720:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	4b56      	ldr	r3, [pc, #344]	; (800888c <ETH_SetMACConfig+0x22c>)
 8008732:	4013      	ands	r3, r2
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	6812      	ldr	r2, [r2, #0]
 8008738:	68f9      	ldr	r1, [r7, #12]
 800873a:	430b      	orrs	r3, r1
 800873c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008742:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800874a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800874c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008754:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8008756:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800875e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8008760:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008768:	2a00      	cmp	r2, #0
 800876a:	d102      	bne.n	8008772 <ETH_SetMACConfig+0x112>
 800876c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008770:	e000      	b.n	8008774 <ETH_SetMACConfig+0x114>
 8008772:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008774:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	4b42      	ldr	r3, [pc, #264]	; (8008890 <ETH_SetMACConfig+0x230>)
 8008786:	4013      	ands	r3, r2
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	68f9      	ldr	r1, [r7, #12]
 800878e:	430b      	orrs	r3, r1
 8008790:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008798:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	4b3a      	ldr	r3, [pc, #232]	; (8008894 <ETH_SetMACConfig+0x234>)
 80087aa:	4013      	ands	r3, r2
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	68f9      	ldr	r1, [r7, #12]
 80087b2:	430b      	orrs	r3, r1
 80087b4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80087bc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80087c2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	d101      	bne.n	80087d2 <ETH_SetMACConfig+0x172>
 80087ce:	2280      	movs	r2, #128	; 0x80
 80087d0:	e000      	b.n	80087d4 <ETH_SetMACConfig+0x174>
 80087d2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80087d4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087da:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80087dc:	4313      	orrs	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087e6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80087ea:	4013      	ands	r3, r2
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	6812      	ldr	r2, [r2, #0]
 80087f0:	68f9      	ldr	r1, [r7, #12]
 80087f2:	430b      	orrs	r3, r1
 80087f4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80087fc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008804:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008812:	f023 0103 	bic.w	r1, r3, #3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	430a      	orrs	r2, r1
 800881e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800882a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	430a      	orrs	r2, r1
 8008838:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8008846:	2a00      	cmp	r2, #0
 8008848:	d101      	bne.n	800884e <ETH_SetMACConfig+0x1ee>
 800884a:	2240      	movs	r2, #64	; 0x40
 800884c:	e000      	b.n	8008850 <ETH_SetMACConfig+0x1f0>
 800884e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8008850:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008858:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800885a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008862:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008864:	4313      	orrs	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008870:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	430a      	orrs	r2, r1
 800887c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008880:	bf00      	nop
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	00048083 	.word	0x00048083
 8008890:	c0f88000 	.word	0xc0f88000
 8008894:	fffffef0 	.word	0xfffffef0

08008898 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	4b38      	ldr	r3, [pc, #224]	; (8008990 <ETH_SetDMAConfig+0xf8>)
 80088ae:	4013      	ands	r3, r2
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	6809      	ldr	r1, [r1, #0]
 80088b8:	431a      	orrs	r2, r3
 80088ba:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80088be:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	791b      	ldrb	r3, [r3, #4]
 80088c4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80088ca:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	7b1b      	ldrb	r3, [r3, #12]
 80088d0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	f241 0304 	movw	r3, #4100	; 0x1004
 80088de:	4413      	add	r3, r2
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b2c      	ldr	r3, [pc, #176]	; (8008994 <ETH_SetDMAConfig+0xfc>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6811      	ldr	r1, [r2, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	431a      	orrs	r2, r3
 80088ee:	f241 0304 	movw	r3, #4100	; 0x1004
 80088f2:	440b      	add	r3, r1
 80088f4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	7b5b      	ldrb	r3, [r3, #13]
 80088fa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008900:	4313      	orrs	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b22      	ldr	r3, [pc, #136]	; (8008998 <ETH_SetDMAConfig+0x100>)
 8008910:	4013      	ands	r3, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6811      	ldr	r1, [r2, #0]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	431a      	orrs	r2, r3
 800891a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800891e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	7d1b      	ldrb	r3, [r3, #20]
 8008928:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800892a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	7f5b      	ldrb	r3, [r3, #29]
 8008930:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008932:	4313      	orrs	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	f241 1304 	movw	r3, #4356	; 0x1104
 800893e:	4413      	add	r3, r2
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b16      	ldr	r3, [pc, #88]	; (800899c <ETH_SetDMAConfig+0x104>)
 8008944:	4013      	ands	r3, r2
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6811      	ldr	r1, [r2, #0]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	431a      	orrs	r2, r3
 800894e:	f241 1304 	movw	r3, #4356	; 0x1104
 8008952:	440b      	add	r3, r1
 8008954:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	7f1b      	ldrb	r3, [r3, #28]
 800895a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008960:	4313      	orrs	r3, r2
 8008962:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	f241 1308 	movw	r3, #4360	; 0x1108
 800896c:	4413      	add	r3, r2
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <ETH_SetDMAConfig+0x108>)
 8008972:	4013      	ands	r3, r2
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6811      	ldr	r1, [r2, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	431a      	orrs	r2, r3
 800897c:	f241 1308 	movw	r3, #4360	; 0x1108
 8008980:	440b      	add	r3, r1
 8008982:	601a      	str	r2, [r3, #0]
}
 8008984:	bf00      	nop
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	ffff87fd 	.word	0xffff87fd
 8008994:	ffff2ffe 	.word	0xffff2ffe
 8008998:	fffec000 	.word	0xfffec000
 800899c:	ffc0efef 	.word	0xffc0efef
 80089a0:	7fc0ffff 	.word	0x7fc0ffff

080089a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b0a4      	sub	sp, #144	; 0x90
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80089b2:	2300      	movs	r3, #0
 80089b4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80089bc:	2300      	movs	r3, #0
 80089be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80089c8:	2301      	movs	r3, #1
 80089ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80089da:	2301      	movs	r3, #1
 80089dc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80089e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089e4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80089f6:	2300      	movs	r3, #0
 80089f8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80089fc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008a00:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008a02:	2300      	movs	r3, #0
 8008a04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008a26:	2300      	movs	r3, #0
 8008a28:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008a4e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a58:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008a60:	2302      	movs	r3, #2
 8008a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008a66:	2300      	movs	r3, #0
 8008a68:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008a72:	2300      	movs	r3, #0
 8008a74:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff fde6 	bl	8008660 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008a94:	2301      	movs	r3, #1
 8008a96:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008aae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ab2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008ab8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008abc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8008ac4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008ac8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008aca:	f107 0308 	add.w	r3, r7, #8
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff fee1 	bl	8008898 <ETH_SetDMAConfig>
}
 8008ad6:	bf00      	nop
 8008ad8:	3790      	adds	r7, #144	; 0x90
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008afa:	f001 fbbf 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 8008afe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4a1e      	ldr	r2, [pc, #120]	; (8008b7c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d908      	bls.n	8008b1a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	4a1d      	ldr	r2, [pc, #116]	; (8008b80 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d804      	bhi.n	8008b1a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e027      	b.n	8008b6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4a18      	ldr	r2, [pc, #96]	; (8008b80 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d908      	bls.n	8008b34 <ETH_MAC_MDIO_ClkConfig+0x54>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d204      	bcs.n	8008b34 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	e01a      	b.n	8008b6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	4a13      	ldr	r2, [pc, #76]	; (8008b84 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d303      	bcc.n	8008b44 <ETH_MAC_MDIO_ClkConfig+0x64>
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4a12      	ldr	r2, [pc, #72]	; (8008b88 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d911      	bls.n	8008b68 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4a10      	ldr	r2, [pc, #64]	; (8008b88 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d908      	bls.n	8008b5e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4a0f      	ldr	r2, [pc, #60]	; (8008b8c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d804      	bhi.n	8008b5e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	e005      	b.n	8008b6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	e000      	b.n	8008b6a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008b68:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008b74:	bf00      	nop
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	01312cff 	.word	0x01312cff
 8008b80:	02160ebf 	.word	0x02160ebf
 8008b84:	03938700 	.word	0x03938700
 8008b88:	05f5e0ff 	.word	0x05f5e0ff
 8008b8c:	08f0d17f 	.word	0x08f0d17f

08008b90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e01d      	b.n	8008bda <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68d9      	ldr	r1, [r3, #12]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	4413      	add	r3, r2
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	440b      	add	r3, r1
 8008bae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008bc8:	68b9      	ldr	r1, [r7, #8]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	3206      	adds	r2, #6
 8008bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d9de      	bls.n	8008b9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	f241 132c 	movw	r3, #4396	; 0x112c
 8008bee:	4413      	add	r3, r2
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68d9      	ldr	r1, [r3, #12]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	f241 1314 	movw	r3, #4372	; 0x1114
 8008c00:	4413      	add	r3, r2
 8008c02:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8008c10:	601a      	str	r2, [r3, #0]
}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b085      	sub	sp, #20
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	e024      	b.n	8008c76 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6919      	ldr	r1, [r3, #16]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	4613      	mov	r3, r2
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	4413      	add	r3, r2
 8008c38:	00db      	lsls	r3, r3, #3
 8008c3a:	440b      	add	r3, r1
 8008c3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2200      	movs	r2, #0
 8008c48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2200      	movs	r2, #0
 8008c54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3310      	adds	r3, #16
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3301      	adds	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d9d7      	bls.n	8008c2c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	f241 1330 	movw	r3, #4400	; 0x1130
 8008ca2:	4413      	add	r3, r2
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6919      	ldr	r1, [r3, #16]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	f241 131c 	movw	r3, #4380	; 0x111c
 8008cb4:	4413      	add	r3, r2
 8008cb6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	f241 1328 	movw	r3, #4392	; 0x1128
 8008cc8:	4413      	add	r3, r2
 8008cca:	6019      	str	r1, [r3, #0]
}
 8008ccc:	bf00      	nop
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b089      	sub	sp, #36	; 0x24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008ce6:	4b89      	ldr	r3, [pc, #548]	; (8008f0c <HAL_GPIO_Init+0x234>)
 8008ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cea:	e194      	b.n	8009016 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 8186 	beq.w	8009010 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d005      	beq.n	8008d1c <HAL_GPIO_Init+0x44>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f003 0303 	and.w	r3, r3, #3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d130      	bne.n	8008d7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	2203      	movs	r2, #3
 8008d28:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2c:	43db      	mvns	r3, r3
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	4013      	ands	r3, r2
 8008d32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d52:	2201      	movs	r2, #1
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5a:	43db      	mvns	r3, r3
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	091b      	lsrs	r3, r3, #4
 8008d68:	f003 0201 	and.w	r2, r3, #1
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f003 0303 	and.w	r3, r3, #3
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d017      	beq.n	8008dba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	2203      	movs	r2, #3
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	43db      	mvns	r3, r3
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	4013      	ands	r3, r2
 8008da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d123      	bne.n	8008e0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	08da      	lsrs	r2, r3, #3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3208      	adds	r2, #8
 8008dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	220f      	movs	r2, #15
 8008dde:	fa02 f303 	lsl.w	r3, r2, r3
 8008de2:	43db      	mvns	r3, r3
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	4013      	ands	r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	691a      	ldr	r2, [r3, #16]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	f003 0307 	and.w	r3, r3, #7
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	08da      	lsrs	r2, r3, #3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3208      	adds	r2, #8
 8008e08:	69b9      	ldr	r1, [r7, #24]
 8008e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	2203      	movs	r2, #3
 8008e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e1e:	43db      	mvns	r3, r3
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	4013      	ands	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f003 0203 	and.w	r2, r3, #3
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	fa02 f303 	lsl.w	r3, r2, r3
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 80e0 	beq.w	8009010 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e50:	4b2f      	ldr	r3, [pc, #188]	; (8008f10 <HAL_GPIO_Init+0x238>)
 8008e52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e56:	4a2e      	ldr	r2, [pc, #184]	; (8008f10 <HAL_GPIO_Init+0x238>)
 8008e58:	f043 0302 	orr.w	r3, r3, #2
 8008e5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008e60:	4b2b      	ldr	r3, [pc, #172]	; (8008f10 <HAL_GPIO_Init+0x238>)
 8008e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e6e:	4a29      	ldr	r2, [pc, #164]	; (8008f14 <HAL_GPIO_Init+0x23c>)
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	089b      	lsrs	r3, r3, #2
 8008e74:	3302      	adds	r3, #2
 8008e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	220f      	movs	r2, #15
 8008e86:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8a:	43db      	mvns	r3, r3
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a20      	ldr	r2, [pc, #128]	; (8008f18 <HAL_GPIO_Init+0x240>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d052      	beq.n	8008f40 <HAL_GPIO_Init+0x268>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a1f      	ldr	r2, [pc, #124]	; (8008f1c <HAL_GPIO_Init+0x244>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d031      	beq.n	8008f06 <HAL_GPIO_Init+0x22e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a1e      	ldr	r2, [pc, #120]	; (8008f20 <HAL_GPIO_Init+0x248>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d02b      	beq.n	8008f02 <HAL_GPIO_Init+0x22a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a1d      	ldr	r2, [pc, #116]	; (8008f24 <HAL_GPIO_Init+0x24c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d025      	beq.n	8008efe <HAL_GPIO_Init+0x226>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a1c      	ldr	r2, [pc, #112]	; (8008f28 <HAL_GPIO_Init+0x250>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01f      	beq.n	8008efa <HAL_GPIO_Init+0x222>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a1b      	ldr	r2, [pc, #108]	; (8008f2c <HAL_GPIO_Init+0x254>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d019      	beq.n	8008ef6 <HAL_GPIO_Init+0x21e>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a1a      	ldr	r2, [pc, #104]	; (8008f30 <HAL_GPIO_Init+0x258>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d013      	beq.n	8008ef2 <HAL_GPIO_Init+0x21a>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a19      	ldr	r2, [pc, #100]	; (8008f34 <HAL_GPIO_Init+0x25c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d00d      	beq.n	8008eee <HAL_GPIO_Init+0x216>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a18      	ldr	r2, [pc, #96]	; (8008f38 <HAL_GPIO_Init+0x260>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d007      	beq.n	8008eea <HAL_GPIO_Init+0x212>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a17      	ldr	r2, [pc, #92]	; (8008f3c <HAL_GPIO_Init+0x264>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d101      	bne.n	8008ee6 <HAL_GPIO_Init+0x20e>
 8008ee2:	2309      	movs	r3, #9
 8008ee4:	e02d      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	e02b      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008eea:	2308      	movs	r3, #8
 8008eec:	e029      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008eee:	2307      	movs	r3, #7
 8008ef0:	e027      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008ef2:	2306      	movs	r3, #6
 8008ef4:	e025      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008ef6:	2305      	movs	r3, #5
 8008ef8:	e023      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008efa:	2304      	movs	r3, #4
 8008efc:	e021      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008efe:	2303      	movs	r3, #3
 8008f00:	e01f      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008f02:	2302      	movs	r3, #2
 8008f04:	e01d      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e01b      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008f0a:	bf00      	nop
 8008f0c:	58000080 	.word	0x58000080
 8008f10:	58024400 	.word	0x58024400
 8008f14:	58000400 	.word	0x58000400
 8008f18:	58020000 	.word	0x58020000
 8008f1c:	58020400 	.word	0x58020400
 8008f20:	58020800 	.word	0x58020800
 8008f24:	58020c00 	.word	0x58020c00
 8008f28:	58021000 	.word	0x58021000
 8008f2c:	58021400 	.word	0x58021400
 8008f30:	58021800 	.word	0x58021800
 8008f34:	58021c00 	.word	0x58021c00
 8008f38:	58022000 	.word	0x58022000
 8008f3c:	58022400 	.word	0x58022400
 8008f40:	2300      	movs	r3, #0
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	f002 0203 	and.w	r2, r2, #3
 8008f48:	0092      	lsls	r2, r2, #2
 8008f4a:	4093      	lsls	r3, r2
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f52:	4938      	ldr	r1, [pc, #224]	; (8009034 <HAL_GPIO_Init+0x35c>)
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	089b      	lsrs	r3, r3, #2
 8008f58:	3302      	adds	r3, #2
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	43db      	mvns	r3, r3
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	43db      	mvns	r3, r3
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	43db      	mvns	r3, r3
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	4313      	orrs	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	69ba      	ldr	r2, [r7, #24]
 800900e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	3301      	adds	r3, #1
 8009014:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	fa22 f303 	lsr.w	r3, r2, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	f47f ae63 	bne.w	8008cec <HAL_GPIO_Init+0x14>
  }
}
 8009026:	bf00      	nop
 8009028:	bf00      	nop
 800902a:	3724      	adds	r7, #36	; 0x24
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	58000400 	.word	0x58000400

08009038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	807b      	strh	r3, [r7, #2]
 8009044:	4613      	mov	r3, r2
 8009046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009048:	787b      	ldrb	r3, [r7, #1]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800904e:	887a      	ldrh	r2, [r7, #2]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009054:	e003      	b.n	800905e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009056:	887b      	ldrh	r3, [r7, #2]
 8009058:	041a      	lsls	r2, r3, #16
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	619a      	str	r2, [r3, #24]
}
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	4603      	mov	r3, r0
 8009072:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009078:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	4013      	ands	r3, r2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d008      	beq.n	8009096 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009088:	88fb      	ldrh	r3, [r7, #6]
 800908a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800908e:	88fb      	ldrh	r3, [r7, #6]
 8009090:	4618      	mov	r0, r3
 8009092:	f7fa fa99 	bl	80035c8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800909e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a0:	b08f      	sub	sp, #60	; 0x3c
 80090a2:	af0a      	add	r7, sp, #40	; 0x28
 80090a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e116      	b.n	80092de <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7fb f862 	bl	8004194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2203      	movs	r2, #3
 80090d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f007 f8aa 	bl	8010248 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	603b      	str	r3, [r7, #0]
 80090fa:	687e      	ldr	r6, [r7, #4]
 80090fc:	466d      	mov	r5, sp
 80090fe:	f106 0410 	add.w	r4, r6, #16
 8009102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800910a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800910e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009112:	1d33      	adds	r3, r6, #4
 8009114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009116:	6838      	ldr	r0, [r7, #0]
 8009118:	f007 f828 	bl	801016c <USB_CoreInit>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d005      	beq.n	800912e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2202      	movs	r2, #2
 8009126:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e0d7      	b.n	80092de <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2100      	movs	r1, #0
 8009134:	4618      	mov	r0, r3
 8009136:	f007 f898 	bl	801026a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
 800913e:	e04a      	b.n	80091d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009140:	7bfa      	ldrb	r2, [r7, #15]
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	333d      	adds	r3, #61	; 0x3d
 8009150:	2201      	movs	r2, #1
 8009152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009154:	7bfa      	ldrb	r2, [r7, #15]
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	1a9b      	subs	r3, r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	333c      	adds	r3, #60	; 0x3c
 8009164:	7bfa      	ldrb	r2, [r7, #15]
 8009166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009168:	7bfa      	ldrb	r2, [r7, #15]
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	b298      	uxth	r0, r3
 800916e:	6879      	ldr	r1, [r7, #4]
 8009170:	4613      	mov	r3, r2
 8009172:	00db      	lsls	r3, r3, #3
 8009174:	1a9b      	subs	r3, r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	440b      	add	r3, r1
 800917a:	3342      	adds	r3, #66	; 0x42
 800917c:	4602      	mov	r2, r0
 800917e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009180:	7bfa      	ldrb	r2, [r7, #15]
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	4613      	mov	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	1a9b      	subs	r3, r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	440b      	add	r3, r1
 800918e:	333f      	adds	r3, #63	; 0x3f
 8009190:	2200      	movs	r2, #0
 8009192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009194:	7bfa      	ldrb	r2, [r7, #15]
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	4613      	mov	r3, r2
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	1a9b      	subs	r3, r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	3344      	adds	r3, #68	; 0x44
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80091a8:	7bfa      	ldrb	r2, [r7, #15]
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	4613      	mov	r3, r2
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	1a9b      	subs	r3, r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	3348      	adds	r3, #72	; 0x48
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80091bc:	7bfa      	ldrb	r2, [r7, #15]
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	1a9b      	subs	r3, r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	3350      	adds	r3, #80	; 0x50
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	3301      	adds	r3, #1
 80091d4:	73fb      	strb	r3, [r7, #15]
 80091d6:	7bfa      	ldrb	r2, [r7, #15]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d3af      	bcc.n	8009140 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]
 80091e4:	e044      	b.n	8009270 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80091e6:	7bfa      	ldrb	r2, [r7, #15]
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80091f8:	2200      	movs	r2, #0
 80091fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80091fc:	7bfa      	ldrb	r2, [r7, #15]
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4613      	mov	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	1a9b      	subs	r3, r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	440b      	add	r3, r1
 800920a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800920e:	7bfa      	ldrb	r2, [r7, #15]
 8009210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009212:	7bfa      	ldrb	r2, [r7, #15]
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4613      	mov	r3, r2
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	1a9b      	subs	r3, r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	440b      	add	r3, r1
 8009220:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009224:	2200      	movs	r2, #0
 8009226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009228:	7bfa      	ldrb	r2, [r7, #15]
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	4613      	mov	r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	1a9b      	subs	r3, r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800923e:	7bfa      	ldrb	r2, [r7, #15]
 8009240:	6879      	ldr	r1, [r7, #4]
 8009242:	4613      	mov	r3, r2
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	440b      	add	r3, r1
 800924c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009254:	7bfa      	ldrb	r2, [r7, #15]
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	4613      	mov	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	3301      	adds	r3, #1
 800926e:	73fb      	strb	r3, [r7, #15]
 8009270:	7bfa      	ldrb	r2, [r7, #15]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	429a      	cmp	r2, r3
 8009278:	d3b5      	bcc.n	80091e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	687e      	ldr	r6, [r7, #4]
 8009282:	466d      	mov	r5, sp
 8009284:	f106 0410 	add.w	r4, r6, #16
 8009288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800928a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800928c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800928e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009294:	e885 0003 	stmia.w	r5, {r0, r1}
 8009298:	1d33      	adds	r3, r6, #4
 800929a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800929c:	6838      	ldr	r0, [r7, #0]
 800929e:	f007 f831 	bl	8010304 <USB_DevInit>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e014      	b.n	80092de <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d102      	bne.n	80092d2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f80b 	bl	80092e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f007 f9eb 	bl	80106b2 <USB_DevDisconnect>

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080092e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009316:	4b05      	ldr	r3, [pc, #20]	; (800932c <HAL_PCDEx_ActivateLPM+0x44>)
 8009318:	4313      	orrs	r3, r2
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	10000003 	.word	0x10000003

08009330 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009338:	4b19      	ldr	r3, [pc, #100]	; (80093a0 <HAL_PWREx_ConfigSupply+0x70>)
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b04      	cmp	r3, #4
 8009342:	d00a      	beq.n	800935a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009344:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f003 0307 	and.w	r3, r3, #7
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	429a      	cmp	r2, r3
 8009350:	d001      	beq.n	8009356 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e01f      	b.n	8009396 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	e01d      	b.n	8009396 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800935a:	4b11      	ldr	r3, [pc, #68]	; (80093a0 <HAL_PWREx_ConfigSupply+0x70>)
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f023 0207 	bic.w	r2, r3, #7
 8009362:	490f      	ldr	r1, [pc, #60]	; (80093a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4313      	orrs	r3, r2
 8009368:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800936a:	f7fb f969 	bl	8004640 <HAL_GetTick>
 800936e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009370:	e009      	b.n	8009386 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009372:	f7fb f965 	bl	8004640 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009380:	d901      	bls.n	8009386 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e007      	b.n	8009396 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009386:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800938e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009392:	d1ee      	bne.n	8009372 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	58024800 	.word	0x58024800

080093a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80093a8:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	4a04      	ldr	r2, [pc, #16]	; (80093c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80093ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093b2:	60d3      	str	r3, [r2, #12]
}
 80093b4:	bf00      	nop
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	58024800 	.word	0x58024800

080093c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08c      	sub	sp, #48	; 0x30
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	f000 bc1c 	b.w	8009c10 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 8087 	beq.w	80094f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093e6:	4b9e      	ldr	r3, [pc, #632]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80093f0:	4b9b      	ldr	r3, [pc, #620]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80093f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d007      	beq.n	800940c <HAL_RCC_OscConfig+0x48>
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	2b18      	cmp	r3, #24
 8009400:	d110      	bne.n	8009424 <HAL_RCC_OscConfig+0x60>
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	f003 0303 	and.w	r3, r3, #3
 8009408:	2b02      	cmp	r3, #2
 800940a:	d10b      	bne.n	8009424 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800940c:	4b94      	ldr	r3, [pc, #592]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d06c      	beq.n	80094f2 <HAL_RCC_OscConfig+0x12e>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d168      	bne.n	80094f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e3f5      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800942c:	d106      	bne.n	800943c <HAL_RCC_OscConfig+0x78>
 800942e:	4b8c      	ldr	r3, [pc, #560]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a8b      	ldr	r2, [pc, #556]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	e02e      	b.n	800949a <HAL_RCC_OscConfig+0xd6>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10c      	bne.n	800945e <HAL_RCC_OscConfig+0x9a>
 8009444:	4b86      	ldr	r3, [pc, #536]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a85      	ldr	r2, [pc, #532]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800944a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	4b83      	ldr	r3, [pc, #524]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a82      	ldr	r2, [pc, #520]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	e01d      	b.n	800949a <HAL_RCC_OscConfig+0xd6>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009466:	d10c      	bne.n	8009482 <HAL_RCC_OscConfig+0xbe>
 8009468:	4b7d      	ldr	r3, [pc, #500]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a7c      	ldr	r2, [pc, #496]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800946e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	4b7a      	ldr	r3, [pc, #488]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a79      	ldr	r2, [pc, #484]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800947a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	e00b      	b.n	800949a <HAL_RCC_OscConfig+0xd6>
 8009482:	4b77      	ldr	r3, [pc, #476]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a76      	ldr	r2, [pc, #472]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800948c:	6013      	str	r3, [r2, #0]
 800948e:	4b74      	ldr	r3, [pc, #464]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a73      	ldr	r2, [pc, #460]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009498:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d013      	beq.n	80094ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a2:	f7fb f8cd 	bl	8004640 <HAL_GetTick>
 80094a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094a8:	e008      	b.n	80094bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094aa:	f7fb f8c9 	bl	8004640 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b64      	cmp	r3, #100	; 0x64
 80094b6:	d901      	bls.n	80094bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e3a9      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094bc:	4b68      	ldr	r3, [pc, #416]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d0f0      	beq.n	80094aa <HAL_RCC_OscConfig+0xe6>
 80094c8:	e014      	b.n	80094f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ca:	f7fb f8b9 	bl	8004640 <HAL_GetTick>
 80094ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80094d0:	e008      	b.n	80094e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094d2:	f7fb f8b5 	bl	8004640 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	2b64      	cmp	r3, #100	; 0x64
 80094de:	d901      	bls.n	80094e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e395      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80094e4:	4b5e      	ldr	r3, [pc, #376]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1f0      	bne.n	80094d2 <HAL_RCC_OscConfig+0x10e>
 80094f0:	e000      	b.n	80094f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 80ca 	beq.w	8009696 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009502:	4b57      	ldr	r3, [pc, #348]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800950a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800950c:	4b54      	ldr	r3, [pc, #336]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800950e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009510:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d007      	beq.n	8009528 <HAL_RCC_OscConfig+0x164>
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	2b18      	cmp	r3, #24
 800951c:	d156      	bne.n	80095cc <HAL_RCC_OscConfig+0x208>
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	f003 0303 	and.w	r3, r3, #3
 8009524:	2b00      	cmp	r3, #0
 8009526:	d151      	bne.n	80095cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009528:	4b4d      	ldr	r3, [pc, #308]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d005      	beq.n	8009540 <HAL_RCC_OscConfig+0x17c>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e367      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009540:	4b47      	ldr	r3, [pc, #284]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f023 0219 	bic.w	r2, r3, #25
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	4944      	ldr	r1, [pc, #272]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800954e:	4313      	orrs	r3, r2
 8009550:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009552:	f7fb f875 	bl	8004640 <HAL_GetTick>
 8009556:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009558:	e008      	b.n	800956c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800955a:	f7fb f871 	bl	8004640 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	2b02      	cmp	r3, #2
 8009566:	d901      	bls.n	800956c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e351      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800956c:	4b3c      	ldr	r3, [pc, #240]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0304 	and.w	r3, r3, #4
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0f0      	beq.n	800955a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009578:	f7fb f892 	bl	80046a0 <HAL_GetREVID>
 800957c:	4603      	mov	r3, r0
 800957e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009582:	4293      	cmp	r3, r2
 8009584:	d817      	bhi.n	80095b6 <HAL_RCC_OscConfig+0x1f2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	2b40      	cmp	r3, #64	; 0x40
 800958c:	d108      	bne.n	80095a0 <HAL_RCC_OscConfig+0x1dc>
 800958e:	4b34      	ldr	r3, [pc, #208]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009596:	4a32      	ldr	r2, [pc, #200]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800959e:	e07a      	b.n	8009696 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095a0:	4b2f      	ldr	r3, [pc, #188]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	031b      	lsls	r3, r3, #12
 80095ae:	492c      	ldr	r1, [pc, #176]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095b4:	e06f      	b.n	8009696 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095b6:	4b2a      	ldr	r3, [pc, #168]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	061b      	lsls	r3, r3, #24
 80095c4:	4926      	ldr	r1, [pc, #152]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095ca:	e064      	b.n	8009696 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d047      	beq.n	8009664 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80095d4:	4b22      	ldr	r3, [pc, #136]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f023 0219 	bic.w	r2, r3, #25
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	491f      	ldr	r1, [pc, #124]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e6:	f7fb f82b 	bl	8004640 <HAL_GetTick>
 80095ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095ec:	e008      	b.n	8009600 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095ee:	f7fb f827 	bl	8004640 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d901      	bls.n	8009600 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e307      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009600:	4b17      	ldr	r3, [pc, #92]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0f0      	beq.n	80095ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800960c:	f7fb f848 	bl	80046a0 <HAL_GetREVID>
 8009610:	4603      	mov	r3, r0
 8009612:	f241 0203 	movw	r2, #4099	; 0x1003
 8009616:	4293      	cmp	r3, r2
 8009618:	d817      	bhi.n	800964a <HAL_RCC_OscConfig+0x286>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b40      	cmp	r3, #64	; 0x40
 8009620:	d108      	bne.n	8009634 <HAL_RCC_OscConfig+0x270>
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800962a:	4a0d      	ldr	r2, [pc, #52]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800962c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009630:	6053      	str	r3, [r2, #4]
 8009632:	e030      	b.n	8009696 <HAL_RCC_OscConfig+0x2d2>
 8009634:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	031b      	lsls	r3, r3, #12
 8009642:	4907      	ldr	r1, [pc, #28]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 8009644:	4313      	orrs	r3, r2
 8009646:	604b      	str	r3, [r1, #4]
 8009648:	e025      	b.n	8009696 <HAL_RCC_OscConfig+0x2d2>
 800964a:	4b05      	ldr	r3, [pc, #20]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	061b      	lsls	r3, r3, #24
 8009658:	4901      	ldr	r1, [pc, #4]	; (8009660 <HAL_RCC_OscConfig+0x29c>)
 800965a:	4313      	orrs	r3, r2
 800965c:	604b      	str	r3, [r1, #4]
 800965e:	e01a      	b.n	8009696 <HAL_RCC_OscConfig+0x2d2>
 8009660:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009664:	4b9e      	ldr	r3, [pc, #632]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a9d      	ldr	r2, [pc, #628]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 800966a:	f023 0301 	bic.w	r3, r3, #1
 800966e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009670:	f7fa ffe6 	bl	8004640 <HAL_GetTick>
 8009674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009676:	e008      	b.n	800968a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009678:	f7fa ffe2 	bl	8004640 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d901      	bls.n	800968a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e2c2      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800968a:	4b95      	ldr	r3, [pc, #596]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0304 	and.w	r3, r3, #4
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1f0      	bne.n	8009678 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0310 	and.w	r3, r3, #16
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 80a9 	beq.w	80097f6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096a4:	4b8e      	ldr	r3, [pc, #568]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096ae:	4b8c      	ldr	r3, [pc, #560]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80096b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	2b08      	cmp	r3, #8
 80096b8:	d007      	beq.n	80096ca <HAL_RCC_OscConfig+0x306>
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	2b18      	cmp	r3, #24
 80096be:	d13a      	bne.n	8009736 <HAL_RCC_OscConfig+0x372>
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d135      	bne.n	8009736 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096ca:	4b85      	ldr	r3, [pc, #532]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <HAL_RCC_OscConfig+0x31e>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	2b80      	cmp	r3, #128	; 0x80
 80096dc:	d001      	beq.n	80096e2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e296      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096e2:	f7fa ffdd 	bl	80046a0 <HAL_GetREVID>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d817      	bhi.n	8009720 <HAL_RCC_OscConfig+0x35c>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	2b20      	cmp	r3, #32
 80096f6:	d108      	bne.n	800970a <HAL_RCC_OscConfig+0x346>
 80096f8:	4b79      	ldr	r3, [pc, #484]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009700:	4a77      	ldr	r2, [pc, #476]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009706:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009708:	e075      	b.n	80097f6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800970a:	4b75      	ldr	r3, [pc, #468]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	069b      	lsls	r3, r3, #26
 8009718:	4971      	ldr	r1, [pc, #452]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 800971a:	4313      	orrs	r3, r2
 800971c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800971e:	e06a      	b.n	80097f6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009720:	4b6f      	ldr	r3, [pc, #444]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	061b      	lsls	r3, r3, #24
 800972e:	496c      	ldr	r1, [pc, #432]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009730:	4313      	orrs	r3, r2
 8009732:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009734:	e05f      	b.n	80097f6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d042      	beq.n	80097c4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800973e:	4b68      	ldr	r3, [pc, #416]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a67      	ldr	r2, [pc, #412]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800974a:	f7fa ff79 	bl	8004640 <HAL_GetTick>
 800974e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009750:	e008      	b.n	8009764 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009752:	f7fa ff75 	bl	8004640 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b02      	cmp	r3, #2
 800975e:	d901      	bls.n	8009764 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e255      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009764:	4b5e      	ldr	r3, [pc, #376]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0f0      	beq.n	8009752 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009770:	f7fa ff96 	bl	80046a0 <HAL_GetREVID>
 8009774:	4603      	mov	r3, r0
 8009776:	f241 0203 	movw	r2, #4099	; 0x1003
 800977a:	4293      	cmp	r3, r2
 800977c:	d817      	bhi.n	80097ae <HAL_RCC_OscConfig+0x3ea>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	2b20      	cmp	r3, #32
 8009784:	d108      	bne.n	8009798 <HAL_RCC_OscConfig+0x3d4>
 8009786:	4b56      	ldr	r3, [pc, #344]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800978e:	4a54      	ldr	r2, [pc, #336]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009794:	6053      	str	r3, [r2, #4]
 8009796:	e02e      	b.n	80097f6 <HAL_RCC_OscConfig+0x432>
 8009798:	4b51      	ldr	r3, [pc, #324]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	069b      	lsls	r3, r3, #26
 80097a6:	494e      	ldr	r1, [pc, #312]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	604b      	str	r3, [r1, #4]
 80097ac:	e023      	b.n	80097f6 <HAL_RCC_OscConfig+0x432>
 80097ae:	4b4c      	ldr	r3, [pc, #304]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	061b      	lsls	r3, r3, #24
 80097bc:	4948      	ldr	r1, [pc, #288]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	60cb      	str	r3, [r1, #12]
 80097c2:	e018      	b.n	80097f6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80097c4:	4b46      	ldr	r3, [pc, #280]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a45      	ldr	r2, [pc, #276]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80097ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d0:	f7fa ff36 	bl	8004640 <HAL_GetTick>
 80097d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097d6:	e008      	b.n	80097ea <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80097d8:	f7fa ff32 	bl	8004640 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e212      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097ea:	4b3d      	ldr	r3, [pc, #244]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1f0      	bne.n	80097d8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0308 	and.w	r3, r3, #8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d036      	beq.n	8009870 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d019      	beq.n	800983e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800980a:	4b35      	ldr	r3, [pc, #212]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 800980c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800980e:	4a34      	ldr	r2, [pc, #208]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009810:	f043 0301 	orr.w	r3, r3, #1
 8009814:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009816:	f7fa ff13 	bl	8004640 <HAL_GetTick>
 800981a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800981c:	e008      	b.n	8009830 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800981e:	f7fa ff0f 	bl	8004640 <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	2b02      	cmp	r3, #2
 800982a:	d901      	bls.n	8009830 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e1ef      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009830:	4b2b      	ldr	r3, [pc, #172]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d0f0      	beq.n	800981e <HAL_RCC_OscConfig+0x45a>
 800983c:	e018      	b.n	8009870 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800983e:	4b28      	ldr	r3, [pc, #160]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009842:	4a27      	ldr	r2, [pc, #156]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009844:	f023 0301 	bic.w	r3, r3, #1
 8009848:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800984a:	f7fa fef9 	bl	8004640 <HAL_GetTick>
 800984e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009850:	e008      	b.n	8009864 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009852:	f7fa fef5 	bl	8004640 <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	2b02      	cmp	r3, #2
 800985e:	d901      	bls.n	8009864 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e1d5      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009864:	4b1e      	ldr	r3, [pc, #120]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1f0      	bne.n	8009852 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0320 	and.w	r3, r3, #32
 8009878:	2b00      	cmp	r3, #0
 800987a:	d039      	beq.n	80098f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d019      	beq.n	80098b8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009884:	4b16      	ldr	r3, [pc, #88]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a15      	ldr	r2, [pc, #84]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 800988a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800988e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009890:	f7fa fed6 	bl	8004640 <HAL_GetTick>
 8009894:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009896:	e008      	b.n	80098aa <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009898:	f7fa fed2 	bl	8004640 <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d901      	bls.n	80098aa <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e1b2      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80098aa:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0f0      	beq.n	8009898 <HAL_RCC_OscConfig+0x4d4>
 80098b6:	e01b      	b.n	80098f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098b8:	4b09      	ldr	r3, [pc, #36]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a08      	ldr	r2, [pc, #32]	; (80098e0 <HAL_RCC_OscConfig+0x51c>)
 80098be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80098c4:	f7fa febc 	bl	8004640 <HAL_GetTick>
 80098c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098ca:	e00b      	b.n	80098e4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80098cc:	f7fa feb8 	bl	8004640 <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d904      	bls.n	80098e4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e198      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
 80098de:	bf00      	nop
 80098e0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098e4:	4ba3      	ldr	r3, [pc, #652]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1ed      	bne.n	80098cc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0304 	and.w	r3, r3, #4
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8081 	beq.w	8009a00 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80098fe:	4b9e      	ldr	r3, [pc, #632]	; (8009b78 <HAL_RCC_OscConfig+0x7b4>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a9d      	ldr	r2, [pc, #628]	; (8009b78 <HAL_RCC_OscConfig+0x7b4>)
 8009904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009908:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800990a:	f7fa fe99 	bl	8004640 <HAL_GetTick>
 800990e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009910:	e008      	b.n	8009924 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009912:	f7fa fe95 	bl	8004640 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	2b64      	cmp	r3, #100	; 0x64
 800991e:	d901      	bls.n	8009924 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e175      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009924:	4b94      	ldr	r3, [pc, #592]	; (8009b78 <HAL_RCC_OscConfig+0x7b4>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0f0      	beq.n	8009912 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d106      	bne.n	8009946 <HAL_RCC_OscConfig+0x582>
 8009938:	4b8e      	ldr	r3, [pc, #568]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 800993a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993c:	4a8d      	ldr	r2, [pc, #564]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	6713      	str	r3, [r2, #112]	; 0x70
 8009944:	e02d      	b.n	80099a2 <HAL_RCC_OscConfig+0x5de>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10c      	bne.n	8009968 <HAL_RCC_OscConfig+0x5a4>
 800994e:	4b89      	ldr	r3, [pc, #548]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009952:	4a88      	ldr	r2, [pc, #544]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009954:	f023 0301 	bic.w	r3, r3, #1
 8009958:	6713      	str	r3, [r2, #112]	; 0x70
 800995a:	4b86      	ldr	r3, [pc, #536]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 800995c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995e:	4a85      	ldr	r2, [pc, #532]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009960:	f023 0304 	bic.w	r3, r3, #4
 8009964:	6713      	str	r3, [r2, #112]	; 0x70
 8009966:	e01c      	b.n	80099a2 <HAL_RCC_OscConfig+0x5de>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	2b05      	cmp	r3, #5
 800996e:	d10c      	bne.n	800998a <HAL_RCC_OscConfig+0x5c6>
 8009970:	4b80      	ldr	r3, [pc, #512]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009974:	4a7f      	ldr	r2, [pc, #508]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009976:	f043 0304 	orr.w	r3, r3, #4
 800997a:	6713      	str	r3, [r2, #112]	; 0x70
 800997c:	4b7d      	ldr	r3, [pc, #500]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 800997e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009980:	4a7c      	ldr	r2, [pc, #496]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009982:	f043 0301 	orr.w	r3, r3, #1
 8009986:	6713      	str	r3, [r2, #112]	; 0x70
 8009988:	e00b      	b.n	80099a2 <HAL_RCC_OscConfig+0x5de>
 800998a:	4b7a      	ldr	r3, [pc, #488]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 800998c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998e:	4a79      	ldr	r2, [pc, #484]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009990:	f023 0301 	bic.w	r3, r3, #1
 8009994:	6713      	str	r3, [r2, #112]	; 0x70
 8009996:	4b77      	ldr	r3, [pc, #476]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999a:	4a76      	ldr	r2, [pc, #472]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 800999c:	f023 0304 	bic.w	r3, r3, #4
 80099a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d015      	beq.n	80099d6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099aa:	f7fa fe49 	bl	8004640 <HAL_GetTick>
 80099ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099b0:	e00a      	b.n	80099c8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099b2:	f7fa fe45 	bl	8004640 <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e123      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099c8:	4b6a      	ldr	r3, [pc, #424]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 80099ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0ee      	beq.n	80099b2 <HAL_RCC_OscConfig+0x5ee>
 80099d4:	e014      	b.n	8009a00 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099d6:	f7fa fe33 	bl	8004640 <HAL_GetTick>
 80099da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099dc:	e00a      	b.n	80099f4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099de:	f7fa fe2f 	bl	8004640 <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d901      	bls.n	80099f4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e10d      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099f4:	4b5f      	ldr	r3, [pc, #380]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 80099f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1ee      	bne.n	80099de <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8102 	beq.w	8009c0e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009a0a:	4b5a      	ldr	r3, [pc, #360]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a12:	2b18      	cmp	r3, #24
 8009a14:	f000 80bd 	beq.w	8009b92 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	f040 8095 	bne.w	8009b4c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a22:	4b54      	ldr	r3, [pc, #336]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a53      	ldr	r2, [pc, #332]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2e:	f7fa fe07 	bl	8004640 <HAL_GetTick>
 8009a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a34:	e008      	b.n	8009a48 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a36:	f7fa fe03 	bl	8004640 <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e0e3      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a48:	4b4a      	ldr	r3, [pc, #296]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1f0      	bne.n	8009a36 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a54:	4b47      	ldr	r3, [pc, #284]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a58:	4b48      	ldr	r3, [pc, #288]	; (8009b7c <HAL_RCC_OscConfig+0x7b8>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a64:	0112      	lsls	r2, r2, #4
 8009a66:	430a      	orrs	r2, r1
 8009a68:	4942      	ldr	r1, [pc, #264]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	628b      	str	r3, [r1, #40]	; 0x28
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a72:	3b01      	subs	r3, #1
 8009a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	025b      	lsls	r3, r3, #9
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	041b      	lsls	r3, r3, #16
 8009a8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a90:	431a      	orrs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a96:	3b01      	subs	r3, #1
 8009a98:	061b      	lsls	r3, r3, #24
 8009a9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a9e:	4935      	ldr	r1, [pc, #212]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009aa4:	4b33      	ldr	r3, [pc, #204]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	4a32      	ldr	r2, [pc, #200]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009aaa:	f023 0301 	bic.w	r3, r3, #1
 8009aae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ab0:	4b30      	ldr	r3, [pc, #192]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ab4:	4b32      	ldr	r3, [pc, #200]	; (8009b80 <HAL_RCC_OscConfig+0x7bc>)
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009abc:	00d2      	lsls	r2, r2, #3
 8009abe:	492d      	ldr	r1, [pc, #180]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ac4:	4b2b      	ldr	r3, [pc, #172]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	f023 020c 	bic.w	r2, r3, #12
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	4928      	ldr	r1, [pc, #160]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ad6:	4b27      	ldr	r3, [pc, #156]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	f023 0202 	bic.w	r2, r3, #2
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae2:	4924      	ldr	r1, [pc, #144]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ae8:	4b22      	ldr	r3, [pc, #136]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	4a21      	ldr	r2, [pc, #132]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009af4:	4b1f      	ldr	r3, [pc, #124]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	4a1e      	ldr	r2, [pc, #120]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009b00:	4b1c      	ldr	r3, [pc, #112]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	4a1b      	ldr	r2, [pc, #108]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009b0c:	4b19      	ldr	r3, [pc, #100]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	4a18      	ldr	r2, [pc, #96]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009b12:	f043 0301 	orr.w	r3, r3, #1
 8009b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b18:	4b16      	ldr	r3, [pc, #88]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a15      	ldr	r2, [pc, #84]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b24:	f7fa fd8c 	bl	8004640 <HAL_GetTick>
 8009b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b2a:	e008      	b.n	8009b3e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b2c:	f7fa fd88 	bl	8004640 <HAL_GetTick>
 8009b30:	4602      	mov	r2, r0
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d901      	bls.n	8009b3e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e068      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b3e:	4b0d      	ldr	r3, [pc, #52]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0f0      	beq.n	8009b2c <HAL_RCC_OscConfig+0x768>
 8009b4a:	e060      	b.n	8009c0e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b4c:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a08      	ldr	r2, [pc, #32]	; (8009b74 <HAL_RCC_OscConfig+0x7b0>)
 8009b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b58:	f7fa fd72 	bl	8004640 <HAL_GetTick>
 8009b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b5e:	e011      	b.n	8009b84 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b60:	f7fa fd6e 	bl	8004640 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d90a      	bls.n	8009b84 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e04e      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
 8009b72:	bf00      	nop
 8009b74:	58024400 	.word	0x58024400
 8009b78:	58024800 	.word	0x58024800
 8009b7c:	fffffc0c 	.word	0xfffffc0c
 8009b80:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b84:	4b24      	ldr	r3, [pc, #144]	; (8009c18 <HAL_RCC_OscConfig+0x854>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e7      	bne.n	8009b60 <HAL_RCC_OscConfig+0x79c>
 8009b90:	e03d      	b.n	8009c0e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009b92:	4b21      	ldr	r3, [pc, #132]	; (8009c18 <HAL_RCC_OscConfig+0x854>)
 8009b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b96:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b98:	4b1f      	ldr	r3, [pc, #124]	; (8009c18 <HAL_RCC_OscConfig+0x854>)
 8009b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d031      	beq.n	8009c0a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f003 0203 	and.w	r2, r3, #3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d12a      	bne.n	8009c0a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	091b      	lsrs	r3, r3, #4
 8009bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d122      	bne.n	8009c0a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d11a      	bne.n	8009c0a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	0a5b      	lsrs	r3, r3, #9
 8009bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d111      	bne.n	8009c0a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	0c1b      	lsrs	r3, r3, #16
 8009bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d108      	bne.n	8009c0a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	0e1b      	lsrs	r3, r3, #24
 8009bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c04:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d001      	beq.n	8009c0e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e000      	b.n	8009c10 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3730      	adds	r7, #48	; 0x30
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	58024400 	.word	0x58024400

08009c1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e19c      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c30:	4b8a      	ldr	r3, [pc, #552]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 030f 	and.w	r3, r3, #15
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d910      	bls.n	8009c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c3e:	4b87      	ldr	r3, [pc, #540]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f023 020f 	bic.w	r2, r3, #15
 8009c46:	4985      	ldr	r1, [pc, #532]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c4e:	4b83      	ldr	r3, [pc, #524]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 030f 	and.w	r3, r3, #15
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d001      	beq.n	8009c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e184      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 0304 	and.w	r3, r3, #4
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d010      	beq.n	8009c8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	691a      	ldr	r2, [r3, #16]
 8009c70:	4b7b      	ldr	r3, [pc, #492]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d908      	bls.n	8009c8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c7c:	4b78      	ldr	r3, [pc, #480]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	4975      	ldr	r1, [pc, #468]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0308 	and.w	r3, r3, #8
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d010      	beq.n	8009cbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	695a      	ldr	r2, [r3, #20]
 8009c9e:	4b70      	ldr	r3, [pc, #448]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d908      	bls.n	8009cbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009caa:	4b6d      	ldr	r3, [pc, #436]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cac:	69db      	ldr	r3, [r3, #28]
 8009cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	496a      	ldr	r1, [pc, #424]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0310 	and.w	r3, r3, #16
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d010      	beq.n	8009cea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699a      	ldr	r2, [r3, #24]
 8009ccc:	4b64      	ldr	r3, [pc, #400]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d908      	bls.n	8009cea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009cd8:	4b61      	ldr	r3, [pc, #388]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	495e      	ldr	r1, [pc, #376]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d010      	beq.n	8009d18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	69da      	ldr	r2, [r3, #28]
 8009cfa:	4b59      	ldr	r3, [pc, #356]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d908      	bls.n	8009d18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009d06:	4b56      	ldr	r3, [pc, #344]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	4953      	ldr	r1, [pc, #332]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d010      	beq.n	8009d46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68da      	ldr	r2, [r3, #12]
 8009d28:	4b4d      	ldr	r3, [pc, #308]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d908      	bls.n	8009d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d34:	4b4a      	ldr	r3, [pc, #296]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	f023 020f 	bic.w	r2, r3, #15
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	4947      	ldr	r1, [pc, #284]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d055      	beq.n	8009dfe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009d52:	4b43      	ldr	r3, [pc, #268]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	4940      	ldr	r1, [pc, #256]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d107      	bne.n	8009d7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d6c:	4b3c      	ldr	r3, [pc, #240]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d121      	bne.n	8009dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e0f6      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d107      	bne.n	8009d94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d84:	4b36      	ldr	r3, [pc, #216]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d115      	bne.n	8009dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e0ea      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d107      	bne.n	8009dac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d9c:	4b30      	ldr	r3, [pc, #192]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d109      	bne.n	8009dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e0de      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dac:	4b2c      	ldr	r3, [pc, #176]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e0d6      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009dbc:	4b28      	ldr	r3, [pc, #160]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f023 0207 	bic.w	r2, r3, #7
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4925      	ldr	r1, [pc, #148]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dce:	f7fa fc37 	bl	8004640 <HAL_GetTick>
 8009dd2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dd4:	e00a      	b.n	8009dec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dd6:	f7fa fc33 	bl	8004640 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d901      	bls.n	8009dec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e0be      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dec:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	00db      	lsls	r3, r3, #3
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d1eb      	bne.n	8009dd6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d010      	beq.n	8009e2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	4b14      	ldr	r3, [pc, #80]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	f003 030f 	and.w	r3, r3, #15
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d208      	bcs.n	8009e2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e1a:	4b11      	ldr	r3, [pc, #68]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	f023 020f 	bic.w	r2, r3, #15
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	490e      	ldr	r1, [pc, #56]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e2c:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 030f 	and.w	r3, r3, #15
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d214      	bcs.n	8009e64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e3a:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f023 020f 	bic.w	r2, r3, #15
 8009e42:	4906      	ldr	r1, [pc, #24]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e4a:	4b04      	ldr	r3, [pc, #16]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 030f 	and.w	r3, r3, #15
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d005      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e086      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
 8009e5c:	52002000 	.word	0x52002000
 8009e60:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d010      	beq.n	8009e92 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	4b3f      	ldr	r3, [pc, #252]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d208      	bcs.n	8009e92 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e80:	4b3c      	ldr	r3, [pc, #240]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	4939      	ldr	r1, [pc, #228]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0308 	and.w	r3, r3, #8
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d010      	beq.n	8009ec0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	695a      	ldr	r2, [r3, #20]
 8009ea2:	4b34      	ldr	r3, [pc, #208]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d208      	bcs.n	8009ec0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009eae:	4b31      	ldr	r3, [pc, #196]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	492e      	ldr	r1, [pc, #184]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d010      	beq.n	8009eee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	699a      	ldr	r2, [r3, #24]
 8009ed0:	4b28      	ldr	r3, [pc, #160]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009ed2:	69db      	ldr	r3, [r3, #28]
 8009ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d208      	bcs.n	8009eee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009edc:	4b25      	ldr	r3, [pc, #148]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	4922      	ldr	r1, [pc, #136]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0320 	and.w	r3, r3, #32
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d010      	beq.n	8009f1c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	69da      	ldr	r2, [r3, #28]
 8009efe:	4b1d      	ldr	r3, [pc, #116]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d208      	bcs.n	8009f1c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009f0a:	4b1a      	ldr	r3, [pc, #104]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	4917      	ldr	r1, [pc, #92]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f1c:	f000 f834 	bl	8009f88 <HAL_RCC_GetSysClockFreq>
 8009f20:	4602      	mov	r2, r0
 8009f22:	4b14      	ldr	r3, [pc, #80]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	0a1b      	lsrs	r3, r3, #8
 8009f28:	f003 030f 	and.w	r3, r3, #15
 8009f2c:	4912      	ldr	r1, [pc, #72]	; (8009f78 <HAL_RCC_ClockConfig+0x35c>)
 8009f2e:	5ccb      	ldrb	r3, [r1, r3]
 8009f30:	f003 031f 	and.w	r3, r3, #31
 8009f34:	fa22 f303 	lsr.w	r3, r2, r3
 8009f38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f3a:	4b0e      	ldr	r3, [pc, #56]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	4a0d      	ldr	r2, [pc, #52]	; (8009f78 <HAL_RCC_ClockConfig+0x35c>)
 8009f44:	5cd3      	ldrb	r3, [r2, r3]
 8009f46:	f003 031f 	and.w	r3, r3, #31
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <HAL_RCC_ClockConfig+0x360>)
 8009f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f54:	4a0a      	ldr	r2, [pc, #40]	; (8009f80 <HAL_RCC_ClockConfig+0x364>)
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <HAL_RCC_ClockConfig+0x368>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fa fb24 	bl	80045ac <HAL_InitTick>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	58024400 	.word	0x58024400
 8009f78:	08011f10 	.word	0x08011f10
 8009f7c:	24000004 	.word	0x24000004
 8009f80:	24000000 	.word	0x24000000
 8009f84:	24000008 	.word	0x24000008

08009f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b089      	sub	sp, #36	; 0x24
 8009f8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f8e:	4bb3      	ldr	r3, [pc, #716]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f96:	2b18      	cmp	r3, #24
 8009f98:	f200 8155 	bhi.w	800a246 <HAL_RCC_GetSysClockFreq+0x2be>
 8009f9c:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	0800a009 	.word	0x0800a009
 8009fa8:	0800a247 	.word	0x0800a247
 8009fac:	0800a247 	.word	0x0800a247
 8009fb0:	0800a247 	.word	0x0800a247
 8009fb4:	0800a247 	.word	0x0800a247
 8009fb8:	0800a247 	.word	0x0800a247
 8009fbc:	0800a247 	.word	0x0800a247
 8009fc0:	0800a247 	.word	0x0800a247
 8009fc4:	0800a02f 	.word	0x0800a02f
 8009fc8:	0800a247 	.word	0x0800a247
 8009fcc:	0800a247 	.word	0x0800a247
 8009fd0:	0800a247 	.word	0x0800a247
 8009fd4:	0800a247 	.word	0x0800a247
 8009fd8:	0800a247 	.word	0x0800a247
 8009fdc:	0800a247 	.word	0x0800a247
 8009fe0:	0800a247 	.word	0x0800a247
 8009fe4:	0800a035 	.word	0x0800a035
 8009fe8:	0800a247 	.word	0x0800a247
 8009fec:	0800a247 	.word	0x0800a247
 8009ff0:	0800a247 	.word	0x0800a247
 8009ff4:	0800a247 	.word	0x0800a247
 8009ff8:	0800a247 	.word	0x0800a247
 8009ffc:	0800a247 	.word	0x0800a247
 800a000:	0800a247 	.word	0x0800a247
 800a004:	0800a03b 	.word	0x0800a03b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a008:	4b94      	ldr	r3, [pc, #592]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0320 	and.w	r3, r3, #32
 800a010:	2b00      	cmp	r3, #0
 800a012:	d009      	beq.n	800a028 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a014:	4b91      	ldr	r3, [pc, #580]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	08db      	lsrs	r3, r3, #3
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	4a90      	ldr	r2, [pc, #576]	; (800a260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a020:	fa22 f303 	lsr.w	r3, r2, r3
 800a024:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a026:	e111      	b.n	800a24c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a028:	4b8d      	ldr	r3, [pc, #564]	; (800a260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a02a:	61bb      	str	r3, [r7, #24]
    break;
 800a02c:	e10e      	b.n	800a24c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a02e:	4b8d      	ldr	r3, [pc, #564]	; (800a264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a030:	61bb      	str	r3, [r7, #24]
    break;
 800a032:	e10b      	b.n	800a24c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a034:	4b8c      	ldr	r3, [pc, #560]	; (800a268 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a036:	61bb      	str	r3, [r7, #24]
    break;
 800a038:	e108      	b.n	800a24c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a03a:	4b88      	ldr	r3, [pc, #544]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a044:	4b85      	ldr	r3, [pc, #532]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a048:	091b      	lsrs	r3, r3, #4
 800a04a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a04e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a050:	4b82      	ldr	r3, [pc, #520]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a05a:	4b80      	ldr	r3, [pc, #512]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05e:	08db      	lsrs	r3, r3, #3
 800a060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	fb02 f303 	mul.w	r3, r2, r3
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a072:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 80e1 	beq.w	800a240 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b02      	cmp	r3, #2
 800a082:	f000 8083 	beq.w	800a18c <HAL_RCC_GetSysClockFreq+0x204>
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	f200 80a1 	bhi.w	800a1d0 <HAL_RCC_GetSysClockFreq+0x248>
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <HAL_RCC_GetSysClockFreq+0x114>
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d056      	beq.n	800a148 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a09a:	e099      	b.n	800a1d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a09c:	4b6f      	ldr	r3, [pc, #444]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0320 	and.w	r3, r3, #32
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d02d      	beq.n	800a104 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0a8:	4b6c      	ldr	r3, [pc, #432]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	08db      	lsrs	r3, r3, #3
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	4a6b      	ldr	r2, [pc, #428]	; (800a260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	ee07 3a90 	vmov	s15, r3
 800a0c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d2:	4b62      	ldr	r3, [pc, #392]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a26c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a102:	e087      	b.n	800a214 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a270 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a116:	4b51      	ldr	r3, [pc, #324]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a126:	ed97 6a02 	vldr	s12, [r7, #8]
 800a12a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a26c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a12e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a146:	e065      	b.n	800a214 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a152:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a274 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a15a:	4b40      	ldr	r3, [pc, #256]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a16a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a16e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a26c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a17a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a182:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a18a:	e043      	b.n	800a214 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a196:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a278 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19e:	4b2f      	ldr	r3, [pc, #188]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a26c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1ce:	e021      	b.n	800a214 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1da:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a274 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e2:	4b1e      	ldr	r3, [pc, #120]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a26c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a212:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a214:	4b11      	ldr	r3, [pc, #68]	; (800a25c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a218:	0a5b      	lsrs	r3, r3, #9
 800a21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a21e:	3301      	adds	r3, #1
 800a220:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a22c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a238:	ee17 3a90 	vmov	r3, s15
 800a23c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a23e:	e005      	b.n	800a24c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	61bb      	str	r3, [r7, #24]
    break;
 800a244:	e002      	b.n	800a24c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a248:	61bb      	str	r3, [r7, #24]
    break;
 800a24a:	bf00      	nop
  }

  return sysclockfreq;
 800a24c:	69bb      	ldr	r3, [r7, #24]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3724      	adds	r7, #36	; 0x24
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	58024400 	.word	0x58024400
 800a260:	03d09000 	.word	0x03d09000
 800a264:	003d0900 	.word	0x003d0900
 800a268:	02dc6c00 	.word	0x02dc6c00
 800a26c:	46000000 	.word	0x46000000
 800a270:	4c742400 	.word	0x4c742400
 800a274:	4a742400 	.word	0x4a742400
 800a278:	4c371b00 	.word	0x4c371b00

0800a27c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a282:	f7ff fe81 	bl	8009f88 <HAL_RCC_GetSysClockFreq>
 800a286:	4602      	mov	r2, r0
 800a288:	4b10      	ldr	r3, [pc, #64]	; (800a2cc <HAL_RCC_GetHCLKFreq+0x50>)
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	0a1b      	lsrs	r3, r3, #8
 800a28e:	f003 030f 	and.w	r3, r3, #15
 800a292:	490f      	ldr	r1, [pc, #60]	; (800a2d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a294:	5ccb      	ldrb	r3, [r1, r3]
 800a296:	f003 031f 	and.w	r3, r3, #31
 800a29a:	fa22 f303 	lsr.w	r3, r2, r3
 800a29e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <HAL_RCC_GetHCLKFreq+0x50>)
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	4a09      	ldr	r2, [pc, #36]	; (800a2d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a2aa:	5cd3      	ldrb	r3, [r2, r3]
 800a2ac:	f003 031f 	and.w	r3, r3, #31
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b6:	4a07      	ldr	r2, [pc, #28]	; (800a2d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a2b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2ba:	4a07      	ldr	r2, [pc, #28]	; (800a2d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a2c0:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	58024400 	.word	0x58024400
 800a2d0:	08011f10 	.word	0x08011f10
 800a2d4:	24000004 	.word	0x24000004
 800a2d8:	24000000 	.word	0x24000000

0800a2dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a2e0:	f7ff ffcc 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	4b06      	ldr	r3, [pc, #24]	; (800a300 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	091b      	lsrs	r3, r3, #4
 800a2ec:	f003 0307 	and.w	r3, r3, #7
 800a2f0:	4904      	ldr	r1, [pc, #16]	; (800a304 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a2f2:	5ccb      	ldrb	r3, [r1, r3]
 800a2f4:	f003 031f 	and.w	r3, r3, #31
 800a2f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	58024400 	.word	0x58024400
 800a304:	08011f10 	.word	0x08011f10

0800a308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a30c:	f7ff ffb6 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 800a310:	4602      	mov	r2, r0
 800a312:	4b06      	ldr	r3, [pc, #24]	; (800a32c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	f003 0307 	and.w	r3, r3, #7
 800a31c:	4904      	ldr	r1, [pc, #16]	; (800a330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a31e:	5ccb      	ldrb	r3, [r1, r3]
 800a320:	f003 031f 	and.w	r3, r3, #31
 800a324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a328:	4618      	mov	r0, r3
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	58024400 	.word	0x58024400
 800a330:	08011f10 	.word	0x08011f10

0800a334 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a33c:	2300      	movs	r3, #0
 800a33e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a340:	2300      	movs	r3, #0
 800a342:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d03f      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a354:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a358:	d02a      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a35a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a35e:	d824      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a364:	d018      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a366:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a36a:	d81e      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a374:	d007      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a376:	e018      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a378:	4bab      	ldr	r3, [pc, #684]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	4aaa      	ldr	r2, [pc, #680]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a37e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a384:	e015      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3304      	adds	r3, #4
 800a38a:	2102      	movs	r1, #2
 800a38c:	4618      	mov	r0, r3
 800a38e:	f001 fff3 	bl	800c378 <RCCEx_PLL2_Config>
 800a392:	4603      	mov	r3, r0
 800a394:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a396:	e00c      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3324      	adds	r3, #36	; 0x24
 800a39c:	2102      	movs	r1, #2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f002 f89c 	bl	800c4dc <RCCEx_PLL3_Config>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a3a8:	e003      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ae:	e000      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a3b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d109      	bne.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a3b8:	4b9b      	ldr	r3, [pc, #620]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3c4:	4998      	ldr	r1, [pc, #608]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	650b      	str	r3, [r1, #80]	; 0x50
 800a3ca:	e001      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
 800a3ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d03d      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d826      	bhi.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a3e4:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ea:	bf00      	nop
 800a3ec:	0800a401 	.word	0x0800a401
 800a3f0:	0800a40f 	.word	0x0800a40f
 800a3f4:	0800a421 	.word	0x0800a421
 800a3f8:	0800a439 	.word	0x0800a439
 800a3fc:	0800a439 	.word	0x0800a439
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a400:	4b89      	ldr	r3, [pc, #548]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	4a88      	ldr	r2, [pc, #544]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a40a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a40c:	e015      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3304      	adds	r3, #4
 800a412:	2100      	movs	r1, #0
 800a414:	4618      	mov	r0, r3
 800a416:	f001 ffaf 	bl	800c378 <RCCEx_PLL2_Config>
 800a41a:	4603      	mov	r3, r0
 800a41c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a41e:	e00c      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	3324      	adds	r3, #36	; 0x24
 800a424:	2100      	movs	r1, #0
 800a426:	4618      	mov	r0, r3
 800a428:	f002 f858 	bl	800c4dc <RCCEx_PLL3_Config>
 800a42c:	4603      	mov	r3, r0
 800a42e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a430:	e003      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	75fb      	strb	r3, [r7, #23]
      break;
 800a436:	e000      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d109      	bne.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a440:	4b79      	ldr	r3, [pc, #484]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a444:	f023 0207 	bic.w	r2, r3, #7
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a44c:	4976      	ldr	r1, [pc, #472]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	650b      	str	r3, [r1, #80]	; 0x50
 800a452:	e001      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a454:	7dfb      	ldrb	r3, [r7, #23]
 800a456:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a460:	2b00      	cmp	r3, #0
 800a462:	d042      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a46c:	d02b      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a472:	d825      	bhi.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a474:	2bc0      	cmp	r3, #192	; 0xc0
 800a476:	d028      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a478:	2bc0      	cmp	r3, #192	; 0xc0
 800a47a:	d821      	bhi.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a47c:	2b80      	cmp	r3, #128	; 0x80
 800a47e:	d016      	beq.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a480:	2b80      	cmp	r3, #128	; 0x80
 800a482:	d81d      	bhi.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a484:	2b00      	cmp	r3, #0
 800a486:	d002      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a488:	2b40      	cmp	r3, #64	; 0x40
 800a48a:	d007      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a48c:	e018      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a48e:	4b66      	ldr	r3, [pc, #408]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a492:	4a65      	ldr	r2, [pc, #404]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a498:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a49a:	e017      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f001 ff68 	bl	800c378 <RCCEx_PLL2_Config>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a4ac:	e00e      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3324      	adds	r3, #36	; 0x24
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f002 f811 	bl	800c4dc <RCCEx_PLL3_Config>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a4be:	e005      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c4:	e002      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a4c6:	bf00      	nop
 800a4c8:	e000      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a4ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d109      	bne.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a4d2:	4b55      	ldr	r3, [pc, #340]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4de:	4952      	ldr	r1, [pc, #328]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	650b      	str	r3, [r1, #80]	; 0x50
 800a4e4:	e001      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d049      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a500:	d030      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a506:	d82a      	bhi.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a508:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a50c:	d02c      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a50e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a512:	d824      	bhi.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a518:	d018      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a51a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a51e:	d81e      	bhi.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a528:	d007      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a52a:	e018      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a52c:	4b3e      	ldr	r3, [pc, #248]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	4a3d      	ldr	r2, [pc, #244]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a536:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a538:	e017      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3304      	adds	r3, #4
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f001 ff19 	bl	800c378 <RCCEx_PLL2_Config>
 800a546:	4603      	mov	r3, r0
 800a548:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a54a:	e00e      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3324      	adds	r3, #36	; 0x24
 800a550:	2100      	movs	r1, #0
 800a552:	4618      	mov	r0, r3
 800a554:	f001 ffc2 	bl	800c4dc <RCCEx_PLL3_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a55c:	e005      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	75fb      	strb	r3, [r7, #23]
      break;
 800a562:	e002      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a564:	bf00      	nop
 800a566:	e000      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10a      	bne.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a570:	4b2d      	ldr	r3, [pc, #180]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a574:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a57e:	492a      	ldr	r1, [pc, #168]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a580:	4313      	orrs	r3, r2
 800a582:	658b      	str	r3, [r1, #88]	; 0x58
 800a584:	e001      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a592:	2b00      	cmp	r3, #0
 800a594:	d04c      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a59c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5a0:	d030      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a5a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5a6:	d82a      	bhi.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a5a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5ac:	d02c      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a5ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5b2:	d824      	bhi.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a5b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5b8:	d018      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a5ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5be:	d81e      	bhi.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a5c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5c8:	d007      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a5ca:	e018      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5cc:	4b16      	ldr	r3, [pc, #88]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d0:	4a15      	ldr	r2, [pc, #84]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a5d8:	e017      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	2100      	movs	r1, #0
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f001 fec9 	bl	800c378 <RCCEx_PLL2_Config>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a5ea:	e00e      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3324      	adds	r3, #36	; 0x24
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f001 ff72 	bl	800c4dc <RCCEx_PLL3_Config>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a5fc:	e005      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	75fb      	strb	r3, [r7, #23]
      break;
 800a602:	e002      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a604:	bf00      	nop
 800a606:	e000      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10d      	bne.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a610:	4b05      	ldr	r3, [pc, #20]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a614:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a61e:	4902      	ldr	r1, [pc, #8]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a620:	4313      	orrs	r3, r2
 800a622:	658b      	str	r3, [r1, #88]	; 0x58
 800a624:	e004      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a626:	bf00      	nop
 800a628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
 800a62e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d032      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a640:	2b30      	cmp	r3, #48	; 0x30
 800a642:	d01c      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a644:	2b30      	cmp	r3, #48	; 0x30
 800a646:	d817      	bhi.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a648:	2b20      	cmp	r3, #32
 800a64a:	d00c      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a64c:	2b20      	cmp	r3, #32
 800a64e:	d813      	bhi.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a650:	2b00      	cmp	r3, #0
 800a652:	d016      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a654:	2b10      	cmp	r3, #16
 800a656:	d10f      	bne.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a658:	4baf      	ldr	r3, [pc, #700]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	4aae      	ldr	r2, [pc, #696]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a65e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a664:	e00e      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	3304      	adds	r3, #4
 800a66a:	2102      	movs	r1, #2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f001 fe83 	bl	800c378 <RCCEx_PLL2_Config>
 800a672:	4603      	mov	r3, r0
 800a674:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a676:	e005      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	75fb      	strb	r3, [r7, #23]
      break;
 800a67c:	e002      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a67e:	bf00      	nop
 800a680:	e000      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a682:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a68a:	4ba3      	ldr	r3, [pc, #652]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a68e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a696:	49a0      	ldr	r1, [pc, #640]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a698:	4313      	orrs	r3, r2
 800a69a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a69c:	e001      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d047      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b6:	d030      	beq.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a6b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6bc:	d82a      	bhi.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a6be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6c2:	d02c      	beq.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a6c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6c8:	d824      	bhi.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a6ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ce:	d018      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a6d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6d4:	d81e      	bhi.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a6da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6de:	d007      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a6e0:	e018      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6e2:	4b8d      	ldr	r3, [pc, #564]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e6:	4a8c      	ldr	r2, [pc, #560]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a6e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a6ee:	e017      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 fe3e 	bl	800c378 <RCCEx_PLL2_Config>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a700:	e00e      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3324      	adds	r3, #36	; 0x24
 800a706:	2100      	movs	r1, #0
 800a708:	4618      	mov	r0, r3
 800a70a:	f001 fee7 	bl	800c4dc <RCCEx_PLL3_Config>
 800a70e:	4603      	mov	r3, r0
 800a710:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a712:	e005      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	75fb      	strb	r3, [r7, #23]
      break;
 800a718:	e002      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a71a:	bf00      	nop
 800a71c:	e000      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a71e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d109      	bne.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a726:	4b7c      	ldr	r3, [pc, #496]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a732:	4979      	ldr	r1, [pc, #484]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a734:	4313      	orrs	r3, r2
 800a736:	650b      	str	r3, [r1, #80]	; 0x50
 800a738:	e001      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d049      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a74e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a752:	d02e      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a758:	d828      	bhi.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a75a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a75e:	d02a      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a764:	d822      	bhi.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a766:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a76a:	d026      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a76c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a770:	d81c      	bhi.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a776:	d010      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a77c:	d816      	bhi.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d01d      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a786:	d111      	bne.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3304      	adds	r3, #4
 800a78c:	2101      	movs	r1, #1
 800a78e:	4618      	mov	r0, r3
 800a790:	f001 fdf2 	bl	800c378 <RCCEx_PLL2_Config>
 800a794:	4603      	mov	r3, r0
 800a796:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a798:	e012      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	3324      	adds	r3, #36	; 0x24
 800a79e:	2101      	movs	r1, #1
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f001 fe9b 	bl	800c4dc <RCCEx_PLL3_Config>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a7aa:	e009      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a7b0:	e006      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a7b2:	bf00      	nop
 800a7b4:	e004      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a7b6:	bf00      	nop
 800a7b8:	e002      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a7ba:	bf00      	nop
 800a7bc:	e000      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a7be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7c0:	7dfb      	ldrb	r3, [r7, #23]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d109      	bne.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a7c6:	4b54      	ldr	r3, [pc, #336]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7d2:	4951      	ldr	r1, [pc, #324]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	650b      	str	r3, [r1, #80]	; 0x50
 800a7d8:	e001      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d04b      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7f4:	d02e      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a7f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7fa:	d828      	bhi.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a800:	d02a      	beq.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a806:	d822      	bhi.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a808:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a80c:	d026      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a80e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a812:	d81c      	bhi.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a818:	d010      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a81a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a81e:	d816      	bhi.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01d      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a828:	d111      	bne.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	3304      	adds	r3, #4
 800a82e:	2101      	movs	r1, #1
 800a830:	4618      	mov	r0, r3
 800a832:	f001 fda1 	bl	800c378 <RCCEx_PLL2_Config>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a83a:	e012      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3324      	adds	r3, #36	; 0x24
 800a840:	2101      	movs	r1, #1
 800a842:	4618      	mov	r0, r3
 800a844:	f001 fe4a 	bl	800c4dc <RCCEx_PLL3_Config>
 800a848:	4603      	mov	r3, r0
 800a84a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a84c:	e009      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	75fb      	strb	r3, [r7, #23]
      break;
 800a852:	e006      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a854:	bf00      	nop
 800a856:	e004      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a858:	bf00      	nop
 800a85a:	e002      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a85c:	bf00      	nop
 800a85e:	e000      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a860:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a862:	7dfb      	ldrb	r3, [r7, #23]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a868:	4b2b      	ldr	r3, [pc, #172]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a86a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a86c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a876:	4928      	ldr	r1, [pc, #160]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	658b      	str	r3, [r1, #88]	; 0x58
 800a87c:	e001      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
 800a880:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d02f      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a896:	d00e      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a89c:	d814      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d015      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a8a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8a6:	d10f      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8a8:	4b1b      	ldr	r3, [pc, #108]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ac:	4a1a      	ldr	r2, [pc, #104]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a8ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a8b4:	e00c      	b.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f001 fd5b 	bl	800c378 <RCCEx_PLL2_Config>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a8c6:	e003      	b.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a8cc:	e000      	b.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a8ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d109      	bne.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a8d6:	4b10      	ldr	r3, [pc, #64]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e2:	490d      	ldr	r1, [pc, #52]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	650b      	str	r3, [r1, #80]	; 0x50
 800a8e8:	e001      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ea:	7dfb      	ldrb	r3, [r7, #23]
 800a8ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d033      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d81c      	bhi.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a902:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a943 	.word	0x0800a943
 800a90c:	0800a91d 	.word	0x0800a91d
 800a910:	0800a92b 	.word	0x0800a92b
 800a914:	0800a943 	.word	0x0800a943
 800a918:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a91c:	4bb8      	ldr	r3, [pc, #736]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a920:	4ab7      	ldr	r2, [pc, #732]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a928:	e00c      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	3304      	adds	r3, #4
 800a92e:	2102      	movs	r1, #2
 800a930:	4618      	mov	r0, r3
 800a932:	f001 fd21 	bl	800c378 <RCCEx_PLL2_Config>
 800a936:	4603      	mov	r3, r0
 800a938:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a93a:	e003      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	75fb      	strb	r3, [r7, #23]
      break;
 800a940:	e000      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a942:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a944:	7dfb      	ldrb	r3, [r7, #23]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d109      	bne.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a94a:	4bad      	ldr	r3, [pc, #692]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a94c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a94e:	f023 0203 	bic.w	r2, r3, #3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a956:	49aa      	ldr	r1, [pc, #680]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a958:	4313      	orrs	r3, r2
 800a95a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a95c:	e001      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f000 8086 	beq.w	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a970:	4ba4      	ldr	r3, [pc, #656]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4aa3      	ldr	r2, [pc, #652]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a97a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a97c:	f7f9 fe60 	bl	8004640 <HAL_GetTick>
 800a980:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a982:	e009      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a984:	f7f9 fe5c 	bl	8004640 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b64      	cmp	r3, #100	; 0x64
 800a990:	d902      	bls.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	75fb      	strb	r3, [r7, #23]
        break;
 800a996:	e005      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a998:	4b9a      	ldr	r3, [pc, #616]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0ef      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d166      	bne.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a9aa:	4b95      	ldr	r3, [pc, #596]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9b4:	4053      	eors	r3, r2
 800a9b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d013      	beq.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9be:	4b90      	ldr	r3, [pc, #576]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9c8:	4b8d      	ldr	r3, [pc, #564]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9cc:	4a8c      	ldr	r2, [pc, #560]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9d4:	4b8a      	ldr	r3, [pc, #552]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d8:	4a89      	ldr	r2, [pc, #548]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a9e0:	4a87      	ldr	r2, [pc, #540]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9f0:	d115      	bne.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9f2:	f7f9 fe25 	bl	8004640 <HAL_GetTick>
 800a9f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9f8:	e00b      	b.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9fa:	f7f9 fe21 	bl	8004640 <HAL_GetTick>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d902      	bls.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	75fb      	strb	r3, [r7, #23]
            break;
 800aa10:	e005      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa12:	4b7b      	ldr	r3, [pc, #492]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa16:	f003 0302 	and.w	r3, r3, #2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0ed      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800aa1e:	7dfb      	ldrb	r3, [r7, #23]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d126      	bne.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa32:	d10d      	bne.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800aa34:	4b72      	ldr	r3, [pc, #456]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa42:	0919      	lsrs	r1, r3, #4
 800aa44:	4b70      	ldr	r3, [pc, #448]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800aa46:	400b      	ands	r3, r1
 800aa48:	496d      	ldr	r1, [pc, #436]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	610b      	str	r3, [r1, #16]
 800aa4e:	e005      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800aa50:	4b6b      	ldr	r3, [pc, #428]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	4a6a      	ldr	r2, [pc, #424]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aa5a:	6113      	str	r3, [r2, #16]
 800aa5c:	4b68      	ldr	r3, [pc, #416]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa6a:	4965      	ldr	r1, [pc, #404]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	670b      	str	r3, [r1, #112]	; 0x70
 800aa70:	e004      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	75bb      	strb	r3, [r7, #22]
 800aa76:	e001      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
 800aa7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d07e      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa8c:	2b28      	cmp	r3, #40	; 0x28
 800aa8e:	d867      	bhi.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800aa90:	a201      	add	r2, pc, #4	; (adr r2, 800aa98 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800aa92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa96:	bf00      	nop
 800aa98:	0800ab67 	.word	0x0800ab67
 800aa9c:	0800ab61 	.word	0x0800ab61
 800aaa0:	0800ab61 	.word	0x0800ab61
 800aaa4:	0800ab61 	.word	0x0800ab61
 800aaa8:	0800ab61 	.word	0x0800ab61
 800aaac:	0800ab61 	.word	0x0800ab61
 800aab0:	0800ab61 	.word	0x0800ab61
 800aab4:	0800ab61 	.word	0x0800ab61
 800aab8:	0800ab3d 	.word	0x0800ab3d
 800aabc:	0800ab61 	.word	0x0800ab61
 800aac0:	0800ab61 	.word	0x0800ab61
 800aac4:	0800ab61 	.word	0x0800ab61
 800aac8:	0800ab61 	.word	0x0800ab61
 800aacc:	0800ab61 	.word	0x0800ab61
 800aad0:	0800ab61 	.word	0x0800ab61
 800aad4:	0800ab61 	.word	0x0800ab61
 800aad8:	0800ab4f 	.word	0x0800ab4f
 800aadc:	0800ab61 	.word	0x0800ab61
 800aae0:	0800ab61 	.word	0x0800ab61
 800aae4:	0800ab61 	.word	0x0800ab61
 800aae8:	0800ab61 	.word	0x0800ab61
 800aaec:	0800ab61 	.word	0x0800ab61
 800aaf0:	0800ab61 	.word	0x0800ab61
 800aaf4:	0800ab61 	.word	0x0800ab61
 800aaf8:	0800ab67 	.word	0x0800ab67
 800aafc:	0800ab61 	.word	0x0800ab61
 800ab00:	0800ab61 	.word	0x0800ab61
 800ab04:	0800ab61 	.word	0x0800ab61
 800ab08:	0800ab61 	.word	0x0800ab61
 800ab0c:	0800ab61 	.word	0x0800ab61
 800ab10:	0800ab61 	.word	0x0800ab61
 800ab14:	0800ab61 	.word	0x0800ab61
 800ab18:	0800ab67 	.word	0x0800ab67
 800ab1c:	0800ab61 	.word	0x0800ab61
 800ab20:	0800ab61 	.word	0x0800ab61
 800ab24:	0800ab61 	.word	0x0800ab61
 800ab28:	0800ab61 	.word	0x0800ab61
 800ab2c:	0800ab61 	.word	0x0800ab61
 800ab30:	0800ab61 	.word	0x0800ab61
 800ab34:	0800ab61 	.word	0x0800ab61
 800ab38:	0800ab67 	.word	0x0800ab67
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	2101      	movs	r1, #1
 800ab42:	4618      	mov	r0, r3
 800ab44:	f001 fc18 	bl	800c378 <RCCEx_PLL2_Config>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ab4c:	e00c      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	3324      	adds	r3, #36	; 0x24
 800ab52:	2101      	movs	r1, #1
 800ab54:	4618      	mov	r0, r3
 800ab56:	f001 fcc1 	bl	800c4dc <RCCEx_PLL3_Config>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ab5e:	e003      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	75fb      	strb	r3, [r7, #23]
      break;
 800ab64:	e000      	b.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800ab66:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d109      	bne.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ab6e:	4b24      	ldr	r3, [pc, #144]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab7a:	4921      	ldr	r1, [pc, #132]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	654b      	str	r3, [r1, #84]	; 0x54
 800ab80:	e001      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 0302 	and.w	r3, r3, #2
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d03e      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab96:	2b05      	cmp	r3, #5
 800ab98:	d820      	bhi.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800ab9a:	a201      	add	r2, pc, #4	; (adr r2, 800aba0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800ab9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba0:	0800abe3 	.word	0x0800abe3
 800aba4:	0800abb9 	.word	0x0800abb9
 800aba8:	0800abcb 	.word	0x0800abcb
 800abac:	0800abe3 	.word	0x0800abe3
 800abb0:	0800abe3 	.word	0x0800abe3
 800abb4:	0800abe3 	.word	0x0800abe3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	3304      	adds	r3, #4
 800abbc:	2101      	movs	r1, #1
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 fbda 	bl	800c378 <RCCEx_PLL2_Config>
 800abc4:	4603      	mov	r3, r0
 800abc6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800abc8:	e00c      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	3324      	adds	r3, #36	; 0x24
 800abce:	2101      	movs	r1, #1
 800abd0:	4618      	mov	r0, r3
 800abd2:	f001 fc83 	bl	800c4dc <RCCEx_PLL3_Config>
 800abd6:	4603      	mov	r3, r0
 800abd8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800abda:	e003      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	75fb      	strb	r3, [r7, #23]
      break;
 800abe0:	e000      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800abe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abe4:	7dfb      	ldrb	r3, [r7, #23]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d110      	bne.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800abec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abee:	f023 0207 	bic.w	r2, r3, #7
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abf6:	4902      	ldr	r1, [pc, #8]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800abf8:	4313      	orrs	r3, r2
 800abfa:	654b      	str	r3, [r1, #84]	; 0x54
 800abfc:	e008      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800abfe:	bf00      	nop
 800ac00:	58024400 	.word	0x58024400
 800ac04:	58024800 	.word	0x58024800
 800ac08:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
 800ac0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0304 	and.w	r3, r3, #4
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d039      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac22:	2b05      	cmp	r3, #5
 800ac24:	d820      	bhi.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800ac26:	a201      	add	r2, pc, #4	; (adr r2, 800ac2c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800ac28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2c:	0800ac6f 	.word	0x0800ac6f
 800ac30:	0800ac45 	.word	0x0800ac45
 800ac34:	0800ac57 	.word	0x0800ac57
 800ac38:	0800ac6f 	.word	0x0800ac6f
 800ac3c:	0800ac6f 	.word	0x0800ac6f
 800ac40:	0800ac6f 	.word	0x0800ac6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	3304      	adds	r3, #4
 800ac48:	2101      	movs	r1, #1
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 fb94 	bl	800c378 <RCCEx_PLL2_Config>
 800ac50:	4603      	mov	r3, r0
 800ac52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ac54:	e00c      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3324      	adds	r3, #36	; 0x24
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 fc3d 	bl	800c4dc <RCCEx_PLL3_Config>
 800ac62:	4603      	mov	r3, r0
 800ac64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ac66:	e003      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac6c:	e000      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800ac6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ac76:	4bb7      	ldr	r3, [pc, #732]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac7a:	f023 0207 	bic.w	r2, r3, #7
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac84:	49b3      	ldr	r1, [pc, #716]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	658b      	str	r3, [r1, #88]	; 0x58
 800ac8a:	e001      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
 800ac8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0320 	and.w	r3, r3, #32
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d04b      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aca6:	d02e      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800aca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acac:	d828      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800acae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb2:	d02a      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800acb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb8:	d822      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800acba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acbe:	d026      	beq.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800acc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acc4:	d81c      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800acc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acca:	d010      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800accc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acd0:	d816      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d01d      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800acd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acda:	d111      	bne.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3304      	adds	r3, #4
 800ace0:	2100      	movs	r1, #0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f001 fb48 	bl	800c378 <RCCEx_PLL2_Config>
 800ace8:	4603      	mov	r3, r0
 800acea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800acec:	e012      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3324      	adds	r3, #36	; 0x24
 800acf2:	2102      	movs	r1, #2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 fbf1 	bl	800c4dc <RCCEx_PLL3_Config>
 800acfa:	4603      	mov	r3, r0
 800acfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800acfe:	e009      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	75fb      	strb	r3, [r7, #23]
      break;
 800ad04:	e006      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ad06:	bf00      	nop
 800ad08:	e004      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ad0a:	bf00      	nop
 800ad0c:	e002      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ad0e:	bf00      	nop
 800ad10:	e000      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800ad12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad14:	7dfb      	ldrb	r3, [r7, #23]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10a      	bne.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ad1a:	4b8e      	ldr	r3, [pc, #568]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad28:	498a      	ldr	r1, [pc, #552]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	654b      	str	r3, [r1, #84]	; 0x54
 800ad2e:	e001      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad30:	7dfb      	ldrb	r3, [r7, #23]
 800ad32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d04b      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ad4a:	d02e      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800ad4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ad50:	d828      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad56:	d02a      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800ad58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad5c:	d822      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad62:	d026      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800ad64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad68:	d81c      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad6e:	d010      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800ad70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad74:	d816      	bhi.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d01d      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800ad7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad7e:	d111      	bne.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3304      	adds	r3, #4
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 faf6 	bl	800c378 <RCCEx_PLL2_Config>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ad90:	e012      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3324      	adds	r3, #36	; 0x24
 800ad96:	2102      	movs	r1, #2
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f001 fb9f 	bl	800c4dc <RCCEx_PLL3_Config>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ada2:	e009      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	75fb      	strb	r3, [r7, #23]
      break;
 800ada8:	e006      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800adaa:	bf00      	nop
 800adac:	e004      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800adae:	bf00      	nop
 800adb0:	e002      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800adb2:	bf00      	nop
 800adb4:	e000      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800adb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800adbe:	4b65      	ldr	r3, [pc, #404]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800adc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800adcc:	4961      	ldr	r1, [pc, #388]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800adce:	4313      	orrs	r3, r2
 800add0:	658b      	str	r3, [r1, #88]	; 0x58
 800add2:	e001      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d04b      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800adee:	d02e      	beq.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800adf0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800adf4:	d828      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800adf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adfa:	d02a      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800adfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae00:	d822      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ae02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ae06:	d026      	beq.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ae08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ae0c:	d81c      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ae0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae12:	d010      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800ae14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae18:	d816      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01d      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ae1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae22:	d111      	bne.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	3304      	adds	r3, #4
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f001 faa4 	bl	800c378 <RCCEx_PLL2_Config>
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ae34:	e012      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3324      	adds	r3, #36	; 0x24
 800ae3a:	2102      	movs	r1, #2
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f001 fb4d 	bl	800c4dc <RCCEx_PLL3_Config>
 800ae42:	4603      	mov	r3, r0
 800ae44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ae46:	e009      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ae4c:	e006      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ae4e:	bf00      	nop
 800ae50:	e004      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ae52:	bf00      	nop
 800ae54:	e002      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ae56:	bf00      	nop
 800ae58:	e000      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ae5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10a      	bne.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ae62:	4b3c      	ldr	r3, [pc, #240]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae70:	4938      	ldr	r1, [pc, #224]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	658b      	str	r3, [r1, #88]	; 0x58
 800ae76:	e001      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d01a      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae92:	d10a      	bne.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	3324      	adds	r3, #36	; 0x24
 800ae98:	2102      	movs	r1, #2
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f001 fb1e 	bl	800c4dc <RCCEx_PLL3_Config>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aeaa:	4b2a      	ldr	r3, [pc, #168]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aeac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeb8:	4926      	ldr	r1, [pc, #152]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 0310 	and.w	r3, r3, #16
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d01a      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aed4:	d10a      	bne.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3324      	adds	r3, #36	; 0x24
 800aeda:	2102      	movs	r1, #2
 800aedc:	4618      	mov	r0, r3
 800aede:	f001 fafd 	bl	800c4dc <RCCEx_PLL3_Config>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aeec:	4b19      	ldr	r3, [pc, #100]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aeee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aefa:	4916      	ldr	r1, [pc, #88]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aefc:	4313      	orrs	r3, r2
 800aefe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d036      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af16:	d01f      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800af18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af1c:	d817      	bhi.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800af22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af26:	d009      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800af28:	e011      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3304      	adds	r3, #4
 800af2e:	2100      	movs	r1, #0
 800af30:	4618      	mov	r0, r3
 800af32:	f001 fa21 	bl	800c378 <RCCEx_PLL2_Config>
 800af36:	4603      	mov	r3, r0
 800af38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800af3a:	e00e      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3324      	adds	r3, #36	; 0x24
 800af40:	2102      	movs	r1, #2
 800af42:	4618      	mov	r0, r3
 800af44:	f001 faca 	bl	800c4dc <RCCEx_PLL3_Config>
 800af48:	4603      	mov	r3, r0
 800af4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800af4c:	e005      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	75fb      	strb	r3, [r7, #23]
      break;
 800af52:	e002      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800af54:	58024400 	.word	0x58024400
      break;
 800af58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10a      	bne.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af60:	4b93      	ldr	r3, [pc, #588]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af6e:	4990      	ldr	r1, [pc, #576]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af70:	4313      	orrs	r3, r2
 800af72:	658b      	str	r3, [r1, #88]	; 0x58
 800af74:	e001      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d033      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af90:	d01c      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800af92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af96:	d816      	bhi.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800af98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af9c:	d003      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800af9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afa2:	d007      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800afa4:	e00f      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afa6:	4b82      	ldr	r3, [pc, #520]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	4a81      	ldr	r2, [pc, #516]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800afb2:	e00c      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3324      	adds	r3, #36	; 0x24
 800afb8:	2101      	movs	r1, #1
 800afba:	4618      	mov	r0, r3
 800afbc:	f001 fa8e 	bl	800c4dc <RCCEx_PLL3_Config>
 800afc0:	4603      	mov	r3, r0
 800afc2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800afc4:	e003      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	75fb      	strb	r3, [r7, #23]
      break;
 800afca:	e000      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800afcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10a      	bne.n	800afea <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800afd4:	4b76      	ldr	r3, [pc, #472]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afe2:	4973      	ldr	r1, [pc, #460]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	654b      	str	r3, [r1, #84]	; 0x54
 800afe8:	e001      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d029      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d003      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b006:	d007      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b008:	e00f      	b.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b00a:	4b69      	ldr	r3, [pc, #420]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	4a68      	ldr	r2, [pc, #416]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b014:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b016:	e00b      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3304      	adds	r3, #4
 800b01c:	2102      	movs	r1, #2
 800b01e:	4618      	mov	r0, r3
 800b020:	f001 f9aa 	bl	800c378 <RCCEx_PLL2_Config>
 800b024:	4603      	mov	r3, r0
 800b026:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b028:	e002      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	75fb      	strb	r3, [r7, #23]
      break;
 800b02e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d109      	bne.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b036:	4b5e      	ldr	r3, [pc, #376]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b03a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b042:	495b      	ldr	r1, [pc, #364]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b044:	4313      	orrs	r3, r2
 800b046:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b048:	e001      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3324      	adds	r3, #36	; 0x24
 800b05e:	2102      	movs	r1, #2
 800b060:	4618      	mov	r0, r3
 800b062:	f001 fa3b 	bl	800c4dc <RCCEx_PLL3_Config>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d030      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b080:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b084:	d017      	beq.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b08a:	d811      	bhi.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b090:	d013      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b096:	d80b      	bhi.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d010      	beq.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a0:	d106      	bne.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0a2:	4b43      	ldr	r3, [pc, #268]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	4a42      	ldr	r2, [pc, #264]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b0ae:	e007      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b0b4:	e004      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b0b6:	bf00      	nop
 800b0b8:	e002      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b0ba:	bf00      	nop
 800b0bc:	e000      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b0be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d109      	bne.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b0c6:	4b3a      	ldr	r3, [pc, #232]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0d2:	4937      	ldr	r1, [pc, #220]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	654b      	str	r3, [r1, #84]	; 0x54
 800b0d8:	e001      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
 800b0dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d008      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b0ea:	4b31      	ldr	r3, [pc, #196]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f6:	492e      	ldr	r1, [pc, #184]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d009      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b108:	4b29      	ldr	r3, [pc, #164]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b116:	4926      	ldr	r1, [pc, #152]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b118:	4313      	orrs	r3, r2
 800b11a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d008      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b128:	4b21      	ldr	r3, [pc, #132]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b12c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b134:	491e      	ldr	r1, [pc, #120]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b136:	4313      	orrs	r3, r2
 800b138:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00d      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b146:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	4a19      	ldr	r2, [pc, #100]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b14c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b150:	6113      	str	r3, [r2, #16]
 800b152:	4b17      	ldr	r3, [pc, #92]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b154:	691a      	ldr	r2, [r3, #16]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b15c:	4914      	ldr	r1, [pc, #80]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	da08      	bge.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b16a:	4b11      	ldr	r3, [pc, #68]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b16e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b176:	490e      	ldr	r1, [pc, #56]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b178:	4313      	orrs	r3, r2
 800b17a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d009      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b188:	4b09      	ldr	r3, [pc, #36]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b18a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b18c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b196:	4906      	ldr	r1, [pc, #24]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b198:	4313      	orrs	r3, r2
 800b19a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b19c:	7dbb      	ldrb	r3, [r7, #22]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e000      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3718      	adds	r7, #24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	58024400 	.word	0x58024400

0800b1b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b090      	sub	sp, #64	; 0x40
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1c2:	f040 8095 	bne.w	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b1c6:	4bae      	ldr	r3, [pc, #696]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b1c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ca:	f003 0307 	and.w	r3, r3, #7
 800b1ce:	633b      	str	r3, [r7, #48]	; 0x30
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	2b04      	cmp	r3, #4
 800b1d4:	f200 8088 	bhi.w	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b1d8:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1de:	bf00      	nop
 800b1e0:	0800b1f5 	.word	0x0800b1f5
 800b1e4:	0800b21d 	.word	0x0800b21d
 800b1e8:	0800b245 	.word	0x0800b245
 800b1ec:	0800b2e1 	.word	0x0800b2e1
 800b1f0:	0800b26d 	.word	0x0800b26d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1f4:	4ba2      	ldr	r3, [pc, #648]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b200:	d108      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b206:	4618      	mov	r0, r3
 800b208:	f000 ff64 	bl	800c0d4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b210:	f000 bc95 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b218:	f000 bc91 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b21c:	4b98      	ldr	r3, [pc, #608]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b228:	d108      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b22a:	f107 0318 	add.w	r3, r7, #24
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fca8 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b238:	f000 bc81 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b240:	f000 bc7d 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b244:	4b8e      	ldr	r3, [pc, #568]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b24c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b250:	d108      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b252:	f107 030c 	add.w	r3, r7, #12
 800b256:	4618      	mov	r0, r3
 800b258:	f000 fde8 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b260:	f000 bc6d 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b268:	f000 bc69 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b26c:	4b84      	ldr	r3, [pc, #528]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b26e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b274:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b276:	4b82      	ldr	r3, [pc, #520]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0304 	and.w	r3, r3, #4
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d10c      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b284:	2b00      	cmp	r3, #0
 800b286:	d109      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b288:	4b7d      	ldr	r3, [pc, #500]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	08db      	lsrs	r3, r3, #3
 800b28e:	f003 0303 	and.w	r3, r3, #3
 800b292:	4a7c      	ldr	r2, [pc, #496]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b294:	fa22 f303 	lsr.w	r3, r2, r3
 800b298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b29a:	e01f      	b.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b29c:	4b78      	ldr	r3, [pc, #480]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2a8:	d106      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2b0:	d102      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b2b2:	4b75      	ldr	r3, [pc, #468]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2b6:	e011      	b.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2b8:	4b71      	ldr	r3, [pc, #452]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2c4:	d106      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2cc:	d102      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b2ce:	4b6f      	ldr	r3, [pc, #444]	; (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2d2:	e003      	b.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b2d8:	f000 bc31 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2dc:	f000 bc2f 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b2e0:	4b6b      	ldr	r3, [pc, #428]	; (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2e4:	f000 bc2b 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2ec:	f000 bc27 	b.w	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2f6:	f040 8095 	bne.w	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b2fa:	4b61      	ldr	r3, [pc, #388]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b2fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2fe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b302:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b30a:	d04d      	beq.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b312:	f200 8084 	bhi.w	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	2bc0      	cmp	r3, #192	; 0xc0
 800b31a:	d07d      	beq.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	2bc0      	cmp	r3, #192	; 0xc0
 800b320:	d87d      	bhi.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	2b80      	cmp	r3, #128	; 0x80
 800b326:	d02d      	beq.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	2b80      	cmp	r3, #128	; 0x80
 800b32c:	d877      	bhi.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	2b00      	cmp	r3, #0
 800b332:	d003      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b336:	2b40      	cmp	r3, #64	; 0x40
 800b338:	d012      	beq.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b33a:	e070      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b33c:	4b50      	ldr	r3, [pc, #320]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b348:	d107      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b34a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fec0 	bl	800c0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b358:	e3f1      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b35e:	e3ee      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b360:	4b47      	ldr	r3, [pc, #284]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b36c:	d107      	bne.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b36e:	f107 0318 	add.w	r3, r7, #24
 800b372:	4618      	mov	r0, r3
 800b374:	f000 fc06 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b37c:	e3df      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b382:	e3dc      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b384:	4b3e      	ldr	r3, [pc, #248]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b38c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b390:	d107      	bne.n	800b3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b392:	f107 030c 	add.w	r3, r7, #12
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fd48 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b3a0:	e3cd      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3a6:	e3ca      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b3a8:	4b35      	ldr	r3, [pc, #212]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b3aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3b0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3b2:	4b33      	ldr	r3, [pc, #204]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 0304 	and.w	r3, r3, #4
 800b3ba:	2b04      	cmp	r3, #4
 800b3bc:	d10c      	bne.n	800b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d109      	bne.n	800b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b3c4:	4b2e      	ldr	r3, [pc, #184]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	08db      	lsrs	r3, r3, #3
 800b3ca:	f003 0303 	and.w	r3, r3, #3
 800b3ce:	4a2d      	ldr	r2, [pc, #180]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b3d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3d6:	e01e      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3d8:	4b29      	ldr	r3, [pc, #164]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3e4:	d106      	bne.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3ec:	d102      	bne.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b3ee:	4b26      	ldr	r3, [pc, #152]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3f2:	e010      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3f4:	4b22      	ldr	r3, [pc, #136]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b400:	d106      	bne.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b408:	d102      	bne.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b40a:	4b20      	ldr	r3, [pc, #128]	; (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b40e:	e002      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b410:	2300      	movs	r3, #0
 800b412:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b414:	e393      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b416:	e392      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b418:	4b1d      	ldr	r3, [pc, #116]	; (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b41a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b41c:	e38f      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b41e:	2300      	movs	r3, #0
 800b420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b422:	e38c      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b42a:	f040 80a7 	bne.w	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b42e:	4b14      	ldr	r3, [pc, #80]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b432:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b436:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b43e:	d05f      	beq.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b446:	f200 8096 	bhi.w	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b450:	f000 808e 	beq.w	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800b454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b456:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b45a:	f200 808c 	bhi.w	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b464:	d03a      	beq.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b46c:	f200 8083 	bhi.w	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00e      	beq.n	800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b47c:	d01c      	beq.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800b47e:	e07a      	b.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b480:	58024400 	.word	0x58024400
 800b484:	03d09000 	.word	0x03d09000
 800b488:	003d0900 	.word	0x003d0900
 800b48c:	02dc6c00 	.word	0x02dc6c00
 800b490:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b494:	4baa      	ldr	r3, [pc, #680]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b49c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4a0:	d107      	bne.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 fe14 	bl	800c0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b4b0:	e345      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4b6:	e342      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4b8:	4ba1      	ldr	r3, [pc, #644]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4c4:	d107      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4c6:	f107 0318 	add.w	r3, r7, #24
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 fb5a 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b4d4:	e333      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4da:	e330      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4dc:	4b98      	ldr	r3, [pc, #608]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e8:	d107      	bne.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ea:	f107 030c 	add.w	r3, r7, #12
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 fc9c 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b4f8:	e321      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4fe:	e31e      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b500:	4b8f      	ldr	r3, [pc, #572]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b508:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b50a:	4b8d      	ldr	r3, [pc, #564]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	2b04      	cmp	r3, #4
 800b514:	d10c      	bne.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800b516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d109      	bne.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b51c:	4b88      	ldr	r3, [pc, #544]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	08db      	lsrs	r3, r3, #3
 800b522:	f003 0303 	and.w	r3, r3, #3
 800b526:	4a87      	ldr	r2, [pc, #540]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b528:	fa22 f303 	lsr.w	r3, r2, r3
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b52e:	e01e      	b.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b530:	4b83      	ldr	r3, [pc, #524]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b53c:	d106      	bne.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800b53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b544:	d102      	bne.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b546:	4b80      	ldr	r3, [pc, #512]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b54a:	e010      	b.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b54c:	4b7c      	ldr	r3, [pc, #496]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b558:	d106      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800b55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b560:	d102      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b562:	4b7a      	ldr	r3, [pc, #488]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b564:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b566:	e002      	b.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b56c:	e2e7      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b56e:	e2e6      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b570:	4b77      	ldr	r3, [pc, #476]	; (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b574:	e2e3      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b57a:	e2e0      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b582:	f040 809c 	bne.w	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b586:	4b6e      	ldr	r3, [pc, #440]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b58a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b58e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b596:	d054      	beq.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b59e:	f200 808b 	bhi.w	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b5a8:	f000 8083 	beq.w	800b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b5b2:	f200 8081 	bhi.w	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5bc:	d02f      	beq.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5c4:	d878      	bhi.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d004      	beq.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b5d2:	d012      	beq.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b5d4:	e070      	b.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5d6:	4b5a      	ldr	r3, [pc, #360]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5e2:	d107      	bne.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fd73 	bl	800c0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5f2:	e2a4      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5f8:	e2a1      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5fa:	4b51      	ldr	r3, [pc, #324]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b606:	d107      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b608:	f107 0318 	add.w	r3, r7, #24
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 fab9 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b616:	e292      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b61c:	e28f      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b61e:	4b48      	ldr	r3, [pc, #288]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b62a:	d107      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b62c:	f107 030c 	add.w	r3, r7, #12
 800b630:	4618      	mov	r0, r3
 800b632:	f000 fbfb 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b63a:	e280      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b640:	e27d      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b642:	4b3f      	ldr	r3, [pc, #252]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b64a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b64c:	4b3c      	ldr	r3, [pc, #240]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0304 	and.w	r3, r3, #4
 800b654:	2b04      	cmp	r3, #4
 800b656:	d10c      	bne.n	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d109      	bne.n	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b65e:	4b38      	ldr	r3, [pc, #224]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	08db      	lsrs	r3, r3, #3
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	4a36      	ldr	r2, [pc, #216]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b66a:	fa22 f303 	lsr.w	r3, r2, r3
 800b66e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b670:	e01e      	b.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b672:	4b33      	ldr	r3, [pc, #204]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b67a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b67e:	d106      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b686:	d102      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b688:	4b2f      	ldr	r3, [pc, #188]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b68a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b68c:	e010      	b.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b68e:	4b2c      	ldr	r3, [pc, #176]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b69a:	d106      	bne.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6a2:	d102      	bne.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b6a4:	4b29      	ldr	r3, [pc, #164]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6a8:	e002      	b.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b6ae:	e246      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6b0:	e245      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b6b2:	4b27      	ldr	r3, [pc, #156]	; (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6b6:	e242      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6bc:	e23f      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6c4:	f040 80a8 	bne.w	800b818 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b6c8:	4b1d      	ldr	r3, [pc, #116]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6cc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b6d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6d8:	d060      	beq.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6e0:	f200 8097 	bhi.w	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6ea:	f000 808f 	beq.w	800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6f4:	f200 808d 	bhi.w	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6fe:	d03b      	beq.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800b700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b706:	f200 8084 	bhi.w	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d004      	beq.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b716:	d01d      	beq.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800b718:	e07b      	b.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b71a:	4b09      	ldr	r3, [pc, #36]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b726:	d107      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 fcd1 	bl	800c0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b736:	e202      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b73c:	e1ff      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b73e:	bf00      	nop
 800b740:	58024400 	.word	0x58024400
 800b744:	03d09000 	.word	0x03d09000
 800b748:	003d0900 	.word	0x003d0900
 800b74c:	02dc6c00 	.word	0x02dc6c00
 800b750:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b754:	4ba3      	ldr	r3, [pc, #652]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b75c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b760:	d107      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b762:	f107 0318 	add.w	r3, r7, #24
 800b766:	4618      	mov	r0, r3
 800b768:	f000 fa0c 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b770:	e1e5      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b776:	e1e2      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b778:	4b9a      	ldr	r3, [pc, #616]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b784:	d107      	bne.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b786:	f107 030c 	add.w	r3, r7, #12
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fb4e 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b794:	e1d3      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b79a:	e1d0      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b79c:	4b91      	ldr	r3, [pc, #580]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b79e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7a4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7a6:	4b8f      	ldr	r3, [pc, #572]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 0304 	and.w	r3, r3, #4
 800b7ae:	2b04      	cmp	r3, #4
 800b7b0:	d10c      	bne.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800b7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d109      	bne.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b7b8:	4b8a      	ldr	r3, [pc, #552]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	08db      	lsrs	r3, r3, #3
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	4a89      	ldr	r2, [pc, #548]	; (800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7ca:	e01e      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7cc:	4b85      	ldr	r3, [pc, #532]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7d8:	d106      	bne.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7e0:	d102      	bne.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b7e2:	4b82      	ldr	r3, [pc, #520]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7e6:	e010      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7e8:	4b7e      	ldr	r3, [pc, #504]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7f4:	d106      	bne.n	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7fc:	d102      	bne.n	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b7fe:	4b7c      	ldr	r3, [pc, #496]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b800:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b802:	e002      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b808:	e199      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b80a:	e198      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b80c:	4b79      	ldr	r3, [pc, #484]	; (800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b80e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b810:	e195      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b816:	e192      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b81e:	d173      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b820:	4b70      	ldr	r3, [pc, #448]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b828:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b830:	d02f      	beq.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800b832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b838:	d863      	bhi.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d004      	beq.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b846:	d012      	beq.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800b848:	e05b      	b.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b84a:	4b66      	ldr	r3, [pc, #408]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b856:	d107      	bne.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b858:	f107 0318 	add.w	r3, r7, #24
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 f991 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b866:	e16a      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b86c:	e167      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b86e:	4b5d      	ldr	r3, [pc, #372]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b87a:	d107      	bne.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b87c:	f107 030c 	add.w	r3, r7, #12
 800b880:	4618      	mov	r0, r3
 800b882:	f000 fad3 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b88a:	e158      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b890:	e155      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b892:	4b54      	ldr	r3, [pc, #336]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b896:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b89a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b89c:	4b51      	ldr	r3, [pc, #324]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d10c      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d109      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b8ae:	4b4d      	ldr	r3, [pc, #308]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	08db      	lsrs	r3, r3, #3
 800b8b4:	f003 0303 	and.w	r3, r3, #3
 800b8b8:	4a4b      	ldr	r2, [pc, #300]	; (800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b8ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c0:	e01e      	b.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8c2:	4b48      	ldr	r3, [pc, #288]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ce:	d106      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8d6:	d102      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b8d8:	4b44      	ldr	r3, [pc, #272]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b8da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8dc:	e010      	b.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8de:	4b41      	ldr	r3, [pc, #260]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ea:	d106      	bne.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8f2:	d102      	bne.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b8f4:	4b3e      	ldr	r3, [pc, #248]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8f8:	e002      	b.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b8fe:	e11e      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b900:	e11d      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b906:	e11a      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b90e:	d133      	bne.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b910:	4b34      	ldr	r3, [pc, #208]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b918:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b926:	d012      	beq.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b928:	e023      	b.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b92a:	4b2e      	ldr	r3, [pc, #184]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b936:	d107      	bne.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 fbc9 	bl	800c0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b944:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b946:	e0fa      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b94c:	e0f7      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b94e:	4b25      	ldr	r3, [pc, #148]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b95a:	d107      	bne.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b95c:	f107 0318 	add.w	r3, r7, #24
 800b960:	4618      	mov	r0, r3
 800b962:	f000 f90f 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b96a:	e0e8      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b96c:	2300      	movs	r3, #0
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b970:	e0e5      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b976:	e0e2      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b97e:	f040 808f 	bne.w	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b982:	4b18      	ldr	r3, [pc, #96]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b986:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b98a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b992:	d075      	beq.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b99a:	d87e      	bhi.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9a2:	d060      	beq.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9aa:	d876      	bhi.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9b2:	d045      	beq.n	800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9ba:	d86e      	bhi.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9c2:	d02b      	beq.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ca:	d866      	bhi.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d004      	beq.n	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9d8:	d00e      	beq.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b9da:	e05e      	b.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b9dc:	f000 f8bc 	bl	800bb58 <HAL_RCCEx_GetD3PCLK1Freq>
 800b9e0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b9e2:	e0ac      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9e4:	58024400 	.word	0x58024400
 800b9e8:	03d09000 	.word	0x03d09000
 800b9ec:	003d0900 	.word	0x003d0900
 800b9f0:	02dc6c00 	.word	0x02dc6c00
 800b9f4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9f8:	4b53      	ldr	r3, [pc, #332]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba04:	d107      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba06:	f107 0318 	add.w	r3, r7, #24
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 f8ba 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba14:	e093      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba16:	2300      	movs	r3, #0
 800ba18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba1a:	e090      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba1c:	4b4a      	ldr	r3, [pc, #296]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba28:	d107      	bne.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba2a:	f107 030c 	add.w	r3, r7, #12
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 f9fc 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba38:	e081      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba3e:	e07e      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba40:	4b41      	ldr	r3, [pc, #260]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b04      	cmp	r3, #4
 800ba4a:	d109      	bne.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba4c:	4b3e      	ldr	r3, [pc, #248]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	08db      	lsrs	r3, r3, #3
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	4a3d      	ldr	r2, [pc, #244]	; (800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ba58:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba5e:	e06e      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba64:	e06b      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba66:	4b38      	ldr	r3, [pc, #224]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba72:	d102      	bne.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800ba74:	4b36      	ldr	r3, [pc, #216]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ba76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba78:	e061      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba7e:	e05e      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba80:	4b31      	ldr	r3, [pc, #196]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba8c:	d102      	bne.n	800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800ba8e:	4b31      	ldr	r3, [pc, #196]	; (800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ba90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba92:	e054      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba94:	2300      	movs	r3, #0
 800ba96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba98:	e051      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba9e:	e04e      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baa6:	d148      	bne.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800baa8:	4b27      	ldr	r3, [pc, #156]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800baaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bab0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bab8:	d02a      	beq.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bac0:	d838      	bhi.n	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d004      	beq.n	800bad2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bace:	d00d      	beq.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bad0:	e030      	b.n	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bad2:	4b1d      	ldr	r3, [pc, #116]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bade:	d102      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800bae0:	4b1c      	ldr	r3, [pc, #112]	; (800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bae2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bae4:	e02b      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800baea:	e028      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800baec:	4b16      	ldr	r3, [pc, #88]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baf8:	d107      	bne.n	800bb0a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bafa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fae8 	bl	800c0d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bb08:	e019      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb0e:	e016      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb10:	4b0d      	ldr	r3, [pc, #52]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb1c:	d107      	bne.n	800bb2e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb1e:	f107 0318 	add.w	r3, r7, #24
 800bb22:	4618      	mov	r0, r3
 800bb24:	f000 f82e 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bb2c:	e007      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb32:	e004      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb38:	e001      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800bb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3740      	adds	r7, #64	; 0x40
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	58024400 	.word	0x58024400
 800bb4c:	03d09000 	.word	0x03d09000
 800bb50:	003d0900 	.word	0x003d0900
 800bb54:	02dc6c00 	.word	0x02dc6c00

0800bb58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb5c:	f7fe fb8e 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 800bb60:	4602      	mov	r2, r0
 800bb62:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	091b      	lsrs	r3, r3, #4
 800bb68:	f003 0307 	and.w	r3, r3, #7
 800bb6c:	4904      	ldr	r1, [pc, #16]	; (800bb80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb6e:	5ccb      	ldrb	r3, [r1, r3]
 800bb70:	f003 031f 	and.w	r3, r3, #31
 800bb74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	58024400 	.word	0x58024400
 800bb80:	08011f10 	.word	0x08011f10

0800bb84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b089      	sub	sp, #36	; 0x24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb8c:	4ba1      	ldr	r3, [pc, #644]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb90:	f003 0303 	and.w	r3, r3, #3
 800bb94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bb96:	4b9f      	ldr	r3, [pc, #636]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9a:	0b1b      	lsrs	r3, r3, #12
 800bb9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bba0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bba2:	4b9c      	ldr	r3, [pc, #624]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba6:	091b      	lsrs	r3, r3, #4
 800bba8:	f003 0301 	and.w	r3, r3, #1
 800bbac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bbae:	4b99      	ldr	r3, [pc, #612]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb2:	08db      	lsrs	r3, r3, #3
 800bbb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	fb02 f303 	mul.w	r3, r2, r3
 800bbbe:	ee07 3a90 	vmov	s15, r3
 800bbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 8111 	beq.w	800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	f000 8083 	beq.w	800bce0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	f200 80a1 	bhi.w	800bd24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d003      	beq.n	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d056      	beq.n	800bc9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bbee:	e099      	b.n	800bd24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbf0:	4b88      	ldr	r3, [pc, #544]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0320 	and.w	r3, r3, #32
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d02d      	beq.n	800bc58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbfc:	4b85      	ldr	r3, [pc, #532]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	08db      	lsrs	r3, r3, #3
 800bc02:	f003 0303 	and.w	r3, r3, #3
 800bc06:	4a84      	ldr	r2, [pc, #528]	; (800be18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc08:	fa22 f303 	lsr.w	r3, r2, r3
 800bc0c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	ee07 3a90 	vmov	s15, r3
 800bc14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc26:	4b7b      	ldr	r3, [pc, #492]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc36:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bc56:	e087      	b.n	800bd68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	ee07 3a90 	vmov	s15, r3
 800bc5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6a:	4b6a      	ldr	r3, [pc, #424]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc72:	ee07 3a90 	vmov	s15, r3
 800bc76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc9a:	e065      	b.n	800bd68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	ee07 3a90 	vmov	s15, r3
 800bca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcae:	4b59      	ldr	r3, [pc, #356]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcde:	e043      	b.n	800bd68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	ee07 3a90 	vmov	s15, r3
 800bce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bcee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf2:	4b48      	ldr	r3, [pc, #288]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd02:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd06:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd22:	e021      	b.n	800bd68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	ee07 3a90 	vmov	s15, r3
 800bd2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd36:	4b37      	ldr	r3, [pc, #220]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd3e:	ee07 3a90 	vmov	s15, r3
 800bd42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd46:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bd68:	4b2a      	ldr	r3, [pc, #168]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6c:	0a5b      	lsrs	r3, r3, #9
 800bd6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd72:	ee07 3a90 	vmov	s15, r3
 800bd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd82:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd8e:	ee17 2a90 	vmov	r2, s15
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bd96:	4b1f      	ldr	r3, [pc, #124]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9a:	0c1b      	lsrs	r3, r3, #16
 800bd9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda0:	ee07 3a90 	vmov	s15, r3
 800bda4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdbc:	ee17 2a90 	vmov	r2, s15
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bdc4:	4b13      	ldr	r3, [pc, #76]	; (800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc8:	0e1b      	lsrs	r3, r3, #24
 800bdca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdde:	edd7 6a07 	vldr	s13, [r7, #28]
 800bde2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bde6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdea:	ee17 2a90 	vmov	r2, s15
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bdf2:	e008      	b.n	800be06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	609a      	str	r2, [r3, #8]
}
 800be06:	bf00      	nop
 800be08:	3724      	adds	r7, #36	; 0x24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	58024400 	.word	0x58024400
 800be18:	03d09000 	.word	0x03d09000
 800be1c:	46000000 	.word	0x46000000
 800be20:	4c742400 	.word	0x4c742400
 800be24:	4a742400 	.word	0x4a742400
 800be28:	4c371b00 	.word	0x4c371b00

0800be2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b089      	sub	sp, #36	; 0x24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be34:	4ba1      	ldr	r3, [pc, #644]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be38:	f003 0303 	and.w	r3, r3, #3
 800be3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800be3e:	4b9f      	ldr	r3, [pc, #636]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be42:	0d1b      	lsrs	r3, r3, #20
 800be44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be4a:	4b9c      	ldr	r3, [pc, #624]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4e:	0a1b      	lsrs	r3, r3, #8
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800be56:	4b99      	ldr	r3, [pc, #612]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be5a:	08db      	lsrs	r3, r3, #3
 800be5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	fb02 f303 	mul.w	r3, r2, r3
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2b00      	cmp	r3, #0
 800be76:	f000 8111 	beq.w	800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	f000 8083 	beq.w	800bf88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	2b02      	cmp	r3, #2
 800be86:	f200 80a1 	bhi.w	800bfcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d003      	beq.n	800be98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d056      	beq.n	800bf44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be96:	e099      	b.n	800bfcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be98:	4b88      	ldr	r3, [pc, #544]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0320 	and.w	r3, r3, #32
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d02d      	beq.n	800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bea4:	4b85      	ldr	r3, [pc, #532]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	08db      	lsrs	r3, r3, #3
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	4a84      	ldr	r2, [pc, #528]	; (800c0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800beb0:	fa22 f303 	lsr.w	r3, r2, r3
 800beb4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	ee07 3a90 	vmov	s15, r3
 800bebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bece:	4b7b      	ldr	r3, [pc, #492]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bede:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800befe:	e087      	b.n	800c010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	ee07 3a90 	vmov	s15, r3
 800bf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf12:	4b6a      	ldr	r3, [pc, #424]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf26:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf42:	e065      	b.n	800c010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf56:	4b59      	ldr	r3, [pc, #356]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf86:	e043      	b.n	800c010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf9a:	4b48      	ldr	r3, [pc, #288]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfca:	e021      	b.n	800c010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	ee07 3a90 	vmov	s15, r3
 800bfd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfde:	4b37      	ldr	r3, [pc, #220]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe6:	ee07 3a90 	vmov	s15, r3
 800bfea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfee:	ed97 6a03 	vldr	s12, [r7, #12]
 800bff2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c00a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c00e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c010:	4b2a      	ldr	r3, [pc, #168]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c014:	0a5b      	lsrs	r3, r3, #9
 800c016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c01a:	ee07 3a90 	vmov	s15, r3
 800c01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c02a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c02e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c036:	ee17 2a90 	vmov	r2, s15
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c03e:	4b1f      	ldr	r3, [pc, #124]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c042:	0c1b      	lsrs	r3, r3, #16
 800c044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c048:	ee07 3a90 	vmov	s15, r3
 800c04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c054:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c058:	edd7 6a07 	vldr	s13, [r7, #28]
 800c05c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c064:	ee17 2a90 	vmov	r2, s15
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c06c:	4b13      	ldr	r3, [pc, #76]	; (800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c070:	0e1b      	lsrs	r3, r3, #24
 800c072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c07e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c082:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c086:	edd7 6a07 	vldr	s13, [r7, #28]
 800c08a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c08e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c092:	ee17 2a90 	vmov	r2, s15
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c09a:	e008      	b.n	800c0ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	609a      	str	r2, [r3, #8]
}
 800c0ae:	bf00      	nop
 800c0b0:	3724      	adds	r7, #36	; 0x24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	58024400 	.word	0x58024400
 800c0c0:	03d09000 	.word	0x03d09000
 800c0c4:	46000000 	.word	0x46000000
 800c0c8:	4c742400 	.word	0x4c742400
 800c0cc:	4a742400 	.word	0x4a742400
 800c0d0:	4c371b00 	.word	0x4c371b00

0800c0d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b089      	sub	sp, #36	; 0x24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0dc:	4ba0      	ldr	r3, [pc, #640]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e0:	f003 0303 	and.w	r3, r3, #3
 800c0e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c0e6:	4b9e      	ldr	r3, [pc, #632]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ea:	091b      	lsrs	r3, r3, #4
 800c0ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c0f2:	4b9b      	ldr	r3, [pc, #620]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f6:	f003 0301 	and.w	r3, r3, #1
 800c0fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c0fc:	4b98      	ldr	r3, [pc, #608]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c100:	08db      	lsrs	r3, r3, #3
 800c102:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	fb02 f303 	mul.w	r3, r2, r3
 800c10c:	ee07 3a90 	vmov	s15, r3
 800c110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c114:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 8111 	beq.w	800c342 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	2b02      	cmp	r3, #2
 800c124:	f000 8083 	beq.w	800c22e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	f200 80a1 	bhi.w	800c272 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d056      	beq.n	800c1ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c13c:	e099      	b.n	800c272 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c13e:	4b88      	ldr	r3, [pc, #544]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 0320 	and.w	r3, r3, #32
 800c146:	2b00      	cmp	r3, #0
 800c148:	d02d      	beq.n	800c1a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c14a:	4b85      	ldr	r3, [pc, #532]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	08db      	lsrs	r3, r3, #3
 800c150:	f003 0303 	and.w	r3, r3, #3
 800c154:	4a83      	ldr	r2, [pc, #524]	; (800c364 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c156:	fa22 f303 	lsr.w	r3, r2, r3
 800c15a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	ee07 3a90 	vmov	s15, r3
 800c162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	ee07 3a90 	vmov	s15, r3
 800c16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c174:	4b7a      	ldr	r3, [pc, #488]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17c:	ee07 3a90 	vmov	s15, r3
 800c180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c184:	ed97 6a03 	vldr	s12, [r7, #12]
 800c188:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c18c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c19c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c1a4:	e087      	b.n	800c2b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	ee07 3a90 	vmov	s15, r3
 800c1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c36c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1b8:	4b69      	ldr	r3, [pc, #420]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c0:	ee07 3a90 	vmov	s15, r3
 800c1c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1e8:	e065      	b.n	800c2b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	ee07 3a90 	vmov	s15, r3
 800c1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c370 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c1f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1fc:	4b58      	ldr	r3, [pc, #352]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c204:	ee07 3a90 	vmov	s15, r3
 800c208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c20c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c210:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c21c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c224:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c228:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c22c:	e043      	b.n	800c2b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	ee07 3a90 	vmov	s15, r3
 800c234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c238:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c374 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c23c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c240:	4b47      	ldr	r3, [pc, #284]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c248:	ee07 3a90 	vmov	s15, r3
 800c24c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c250:	ed97 6a03 	vldr	s12, [r7, #12]
 800c254:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c25c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c26c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c270:	e021      	b.n	800c2b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	ee07 3a90 	vmov	s15, r3
 800c278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c27c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c36c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c284:	4b36      	ldr	r3, [pc, #216]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c28c:	ee07 3a90 	vmov	s15, r3
 800c290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c294:	ed97 6a03 	vldr	s12, [r7, #12]
 800c298:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c29c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c2b6:	4b2a      	ldr	r3, [pc, #168]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ba:	0a5b      	lsrs	r3, r3, #9
 800c2bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2c0:	ee07 3a90 	vmov	s15, r3
 800c2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2dc:	ee17 2a90 	vmov	r2, s15
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c2e4:	4b1e      	ldr	r3, [pc, #120]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e8:	0c1b      	lsrs	r3, r3, #16
 800c2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ee:	ee07 3a90 	vmov	s15, r3
 800c2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c30a:	ee17 2a90 	vmov	r2, s15
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c312:	4b13      	ldr	r3, [pc, #76]	; (800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c316:	0e1b      	lsrs	r3, r3, #24
 800c318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c31c:	ee07 3a90 	vmov	s15, r3
 800c320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c32c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c338:	ee17 2a90 	vmov	r2, s15
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c340:	e008      	b.n	800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	609a      	str	r2, [r3, #8]
}
 800c354:	bf00      	nop
 800c356:	3724      	adds	r7, #36	; 0x24
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	58024400 	.word	0x58024400
 800c364:	03d09000 	.word	0x03d09000
 800c368:	46000000 	.word	0x46000000
 800c36c:	4c742400 	.word	0x4c742400
 800c370:	4a742400 	.word	0x4a742400
 800c374:	4c371b00 	.word	0x4c371b00

0800c378 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c386:	4b53      	ldr	r3, [pc, #332]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38a:	f003 0303 	and.w	r3, r3, #3
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d101      	bne.n	800c396 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c392:	2301      	movs	r3, #1
 800c394:	e099      	b.n	800c4ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c396:	4b4f      	ldr	r3, [pc, #316]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a4e      	ldr	r2, [pc, #312]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c39c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3a2:	f7f8 f94d 	bl	8004640 <HAL_GetTick>
 800c3a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3a8:	e008      	b.n	800c3bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c3aa:	f7f8 f949 	bl	8004640 <HAL_GetTick>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d901      	bls.n	800c3bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c3b8:	2303      	movs	r3, #3
 800c3ba:	e086      	b.n	800c4ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3bc:	4b45      	ldr	r3, [pc, #276]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1f0      	bne.n	800c3aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c3c8:	4b42      	ldr	r3, [pc, #264]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	031b      	lsls	r3, r3, #12
 800c3d6:	493f      	ldr	r1, [pc, #252]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	628b      	str	r3, [r1, #40]	; 0x28
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	025b      	lsls	r3, r3, #9
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	431a      	orrs	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	041b      	lsls	r3, r3, #16
 800c3fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c3fe:	431a      	orrs	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	3b01      	subs	r3, #1
 800c406:	061b      	lsls	r3, r3, #24
 800c408:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c40c:	4931      	ldr	r1, [pc, #196]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c40e:	4313      	orrs	r3, r2
 800c410:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c412:	4b30      	ldr	r3, [pc, #192]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c416:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	492d      	ldr	r1, [pc, #180]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c420:	4313      	orrs	r3, r2
 800c422:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c424:	4b2b      	ldr	r3, [pc, #172]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c428:	f023 0220 	bic.w	r2, r3, #32
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	4928      	ldr	r1, [pc, #160]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c432:	4313      	orrs	r3, r2
 800c434:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c436:	4b27      	ldr	r3, [pc, #156]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43a:	4a26      	ldr	r2, [pc, #152]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c43c:	f023 0310 	bic.w	r3, r3, #16
 800c440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c442:	4b24      	ldr	r3, [pc, #144]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c446:	4b24      	ldr	r3, [pc, #144]	; (800c4d8 <RCCEx_PLL2_Config+0x160>)
 800c448:	4013      	ands	r3, r2
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	69d2      	ldr	r2, [r2, #28]
 800c44e:	00d2      	lsls	r2, r2, #3
 800c450:	4920      	ldr	r1, [pc, #128]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c452:	4313      	orrs	r3, r2
 800c454:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c456:	4b1f      	ldr	r3, [pc, #124]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45a:	4a1e      	ldr	r2, [pc, #120]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c45c:	f043 0310 	orr.w	r3, r3, #16
 800c460:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d106      	bne.n	800c476 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c468:	4b1a      	ldr	r3, [pc, #104]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46c:	4a19      	ldr	r2, [pc, #100]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c46e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c472:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c474:	e00f      	b.n	800c496 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d106      	bne.n	800c48a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c47c:	4b15      	ldr	r3, [pc, #84]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c480:	4a14      	ldr	r2, [pc, #80]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c486:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c488:	e005      	b.n	800c496 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c48a:	4b12      	ldr	r3, [pc, #72]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48e:	4a11      	ldr	r2, [pc, #68]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c494:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c496:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a0e      	ldr	r2, [pc, #56]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c49c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c4a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4a2:	f7f8 f8cd 	bl	8004640 <HAL_GetTick>
 800c4a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4a8:	e008      	b.n	800c4bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c4aa:	f7f8 f8c9 	bl	8004640 <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d901      	bls.n	800c4bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	e006      	b.n	800c4ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4bc:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <RCCEx_PLL2_Config+0x15c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d0f0      	beq.n	800c4aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	58024400 	.word	0x58024400
 800c4d8:	ffff0007 	.word	0xffff0007

0800c4dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4ea:	4b53      	ldr	r3, [pc, #332]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d101      	bne.n	800c4fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e099      	b.n	800c62e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c4fa:	4b4f      	ldr	r3, [pc, #316]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a4e      	ldr	r2, [pc, #312]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c506:	f7f8 f89b 	bl	8004640 <HAL_GetTick>
 800c50a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c50c:	e008      	b.n	800c520 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c50e:	f7f8 f897 	bl	8004640 <HAL_GetTick>
 800c512:	4602      	mov	r2, r0
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	2b02      	cmp	r3, #2
 800c51a:	d901      	bls.n	800c520 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c51c:	2303      	movs	r3, #3
 800c51e:	e086      	b.n	800c62e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c520:	4b45      	ldr	r3, [pc, #276]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1f0      	bne.n	800c50e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c52c:	4b42      	ldr	r3, [pc, #264]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c530:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	051b      	lsls	r3, r3, #20
 800c53a:	493f      	ldr	r1, [pc, #252]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c53c:	4313      	orrs	r3, r2
 800c53e:	628b      	str	r3, [r1, #40]	; 0x28
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	3b01      	subs	r3, #1
 800c546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	3b01      	subs	r3, #1
 800c550:	025b      	lsls	r3, r3, #9
 800c552:	b29b      	uxth	r3, r3
 800c554:	431a      	orrs	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	3b01      	subs	r3, #1
 800c55c:	041b      	lsls	r3, r3, #16
 800c55e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c562:	431a      	orrs	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	3b01      	subs	r3, #1
 800c56a:	061b      	lsls	r3, r3, #24
 800c56c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c570:	4931      	ldr	r1, [pc, #196]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c572:	4313      	orrs	r3, r2
 800c574:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c576:	4b30      	ldr	r3, [pc, #192]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	492d      	ldr	r1, [pc, #180]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c584:	4313      	orrs	r3, r2
 800c586:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c588:	4b2b      	ldr	r3, [pc, #172]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	4928      	ldr	r1, [pc, #160]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c596:	4313      	orrs	r3, r2
 800c598:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c59a:	4b27      	ldr	r3, [pc, #156]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59e:	4a26      	ldr	r2, [pc, #152]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c5a6:	4b24      	ldr	r3, [pc, #144]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5aa:	4b24      	ldr	r3, [pc, #144]	; (800c63c <RCCEx_PLL3_Config+0x160>)
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	69d2      	ldr	r2, [r2, #28]
 800c5b2:	00d2      	lsls	r2, r2, #3
 800c5b4:	4920      	ldr	r1, [pc, #128]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c5ba:	4b1f      	ldr	r3, [pc, #124]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5be:	4a1e      	ldr	r2, [pc, #120]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d106      	bne.n	800c5da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c5cc:	4b1a      	ldr	r3, [pc, #104]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	4a19      	ldr	r2, [pc, #100]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c5d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c5d8:	e00f      	b.n	800c5fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d106      	bne.n	800c5ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c5e0:	4b15      	ldr	r3, [pc, #84]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e4:	4a14      	ldr	r2, [pc, #80]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c5ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c5ec:	e005      	b.n	800c5fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c5ee:	4b12      	ldr	r3, [pc, #72]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f2:	4a11      	ldr	r2, [pc, #68]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c5fa:	4b0f      	ldr	r3, [pc, #60]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a0e      	ldr	r2, [pc, #56]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c606:	f7f8 f81b 	bl	8004640 <HAL_GetTick>
 800c60a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c60c:	e008      	b.n	800c620 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c60e:	f7f8 f817 	bl	8004640 <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	2b02      	cmp	r3, #2
 800c61a:	d901      	bls.n	800c620 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e006      	b.n	800c62e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c620:	4b05      	ldr	r3, [pc, #20]	; (800c638 <RCCEx_PLL3_Config+0x15c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d0f0      	beq.n	800c60e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	58024400 	.word	0x58024400
 800c63c:	ffff0007 	.word	0xffff0007

0800c640 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d101      	bne.n	800c652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	e0f1      	b.n	800c836 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a78      	ldr	r2, [pc, #480]	; (800c840 <HAL_SPI_Init+0x200>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d00f      	beq.n	800c682 <HAL_SPI_Init+0x42>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a77      	ldr	r2, [pc, #476]	; (800c844 <HAL_SPI_Init+0x204>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d00a      	beq.n	800c682 <HAL_SPI_Init+0x42>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a75      	ldr	r2, [pc, #468]	; (800c848 <HAL_SPI_Init+0x208>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d005      	beq.n	800c682 <HAL_SPI_Init+0x42>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	2b0f      	cmp	r3, #15
 800c67c:	d901      	bls.n	800c682 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e0d9      	b.n	800c836 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f8e2 	bl	800c84c <SPI_GetPacketSize>
 800c688:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a6c      	ldr	r2, [pc, #432]	; (800c840 <HAL_SPI_Init+0x200>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00c      	beq.n	800c6ae <HAL_SPI_Init+0x6e>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a6a      	ldr	r2, [pc, #424]	; (800c844 <HAL_SPI_Init+0x204>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d007      	beq.n	800c6ae <HAL_SPI_Init+0x6e>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a69      	ldr	r2, [pc, #420]	; (800c848 <HAL_SPI_Init+0x208>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d002      	beq.n	800c6ae <HAL_SPI_Init+0x6e>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b08      	cmp	r3, #8
 800c6ac:	d811      	bhi.n	800c6d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c6b2:	4a63      	ldr	r2, [pc, #396]	; (800c840 <HAL_SPI_Init+0x200>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d009      	beq.n	800c6cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a61      	ldr	r2, [pc, #388]	; (800c844 <HAL_SPI_Init+0x204>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d004      	beq.n	800c6cc <HAL_SPI_Init+0x8c>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a60      	ldr	r2, [pc, #384]	; (800c848 <HAL_SPI_Init+0x208>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d104      	bne.n	800c6d6 <HAL_SPI_Init+0x96>
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2b10      	cmp	r3, #16
 800c6d0:	d901      	bls.n	800c6d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e0af      	b.n	800c836 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d106      	bne.n	800c6f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7f7 f938 	bl	8003960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f022 0201 	bic.w	r2, r2, #1
 800c706:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c712:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c71c:	d119      	bne.n	800c752 <HAL_SPI_Init+0x112>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c726:	d103      	bne.n	800c730 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d008      	beq.n	800c742 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10c      	bne.n	800c752 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c73c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c740:	d107      	bne.n	800c752 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c750:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	69da      	ldr	r2, [r3, #28]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c75a:	431a      	orrs	r2, r3
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	431a      	orrs	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c764:	ea42 0103 	orr.w	r1, r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	68da      	ldr	r2, [r3, #12]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	430a      	orrs	r2, r1
 800c772:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77c:	431a      	orrs	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c782:	431a      	orrs	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	699b      	ldr	r3, [r3, #24]
 800c788:	431a      	orrs	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	431a      	orrs	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	431a      	orrs	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a1b      	ldr	r3, [r3, #32]
 800c79a:	431a      	orrs	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7a6:	431a      	orrs	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	431a      	orrs	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7b2:	ea42 0103 	orr.w	r1, r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	430a      	orrs	r2, r1
 800c7c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d113      	bne.n	800c7f2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c7f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f022 0201 	bic.w	r2, r2, #1
 800c800:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00a      	beq.n	800c824 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	430a      	orrs	r2, r1
 800c822:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	40013000 	.word	0x40013000
 800c844:	40003800 	.word	0x40003800
 800c848:	40003c00 	.word	0x40003c00

0800c84c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c858:	095b      	lsrs	r3, r3, #5
 800c85a:	3301      	adds	r3, #1
 800c85c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	3301      	adds	r3, #1
 800c864:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	3307      	adds	r3, #7
 800c86a:	08db      	lsrs	r3, r3, #3
 800c86c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	fb02 f303 	mul.w	r3, r2, r3
}
 800c876:	4618      	mov	r0, r3
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b082      	sub	sp, #8
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	e049      	b.n	800c928 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d106      	bne.n	800c8ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7f7 f9f5 	bl	8003c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3304      	adds	r3, #4
 800c8be:	4619      	mov	r1, r3
 800c8c0:	4610      	mov	r0, r2
 800c8c2:	f000 ff3b 	bl	800d73c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2201      	movs	r2, #1
 800c902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b01      	cmp	r3, #1
 800c942:	d001      	beq.n	800c948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c944:	2301      	movs	r3, #1
 800c946:	e054      	b.n	800c9f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2202      	movs	r2, #2
 800c94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68da      	ldr	r2, [r3, #12]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f042 0201 	orr.w	r2, r2, #1
 800c95e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a26      	ldr	r2, [pc, #152]	; (800ca00 <HAL_TIM_Base_Start_IT+0xd0>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d022      	beq.n	800c9b0 <HAL_TIM_Base_Start_IT+0x80>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c972:	d01d      	beq.n	800c9b0 <HAL_TIM_Base_Start_IT+0x80>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a22      	ldr	r2, [pc, #136]	; (800ca04 <HAL_TIM_Base_Start_IT+0xd4>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d018      	beq.n	800c9b0 <HAL_TIM_Base_Start_IT+0x80>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a21      	ldr	r2, [pc, #132]	; (800ca08 <HAL_TIM_Base_Start_IT+0xd8>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d013      	beq.n	800c9b0 <HAL_TIM_Base_Start_IT+0x80>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a1f      	ldr	r2, [pc, #124]	; (800ca0c <HAL_TIM_Base_Start_IT+0xdc>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d00e      	beq.n	800c9b0 <HAL_TIM_Base_Start_IT+0x80>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a1e      	ldr	r2, [pc, #120]	; (800ca10 <HAL_TIM_Base_Start_IT+0xe0>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d009      	beq.n	800c9b0 <HAL_TIM_Base_Start_IT+0x80>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a1c      	ldr	r2, [pc, #112]	; (800ca14 <HAL_TIM_Base_Start_IT+0xe4>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d004      	beq.n	800c9b0 <HAL_TIM_Base_Start_IT+0x80>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a1b      	ldr	r2, [pc, #108]	; (800ca18 <HAL_TIM_Base_Start_IT+0xe8>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d115      	bne.n	800c9dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	689a      	ldr	r2, [r3, #8]
 800c9b6:	4b19      	ldr	r3, [pc, #100]	; (800ca1c <HAL_TIM_Base_Start_IT+0xec>)
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b06      	cmp	r3, #6
 800c9c0:	d015      	beq.n	800c9ee <HAL_TIM_Base_Start_IT+0xbe>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9c8:	d011      	beq.n	800c9ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f042 0201 	orr.w	r2, r2, #1
 800c9d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9da:	e008      	b.n	800c9ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f042 0201 	orr.w	r2, r2, #1
 800c9ea:	601a      	str	r2, [r3, #0]
 800c9ec:	e000      	b.n	800c9f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	40010000 	.word	0x40010000
 800ca04:	40000400 	.word	0x40000400
 800ca08:	40000800 	.word	0x40000800
 800ca0c:	40000c00 	.word	0x40000c00
 800ca10:	40010400 	.word	0x40010400
 800ca14:	40001800 	.word	0x40001800
 800ca18:	40014000 	.word	0x40014000
 800ca1c:	00010007 	.word	0x00010007

0800ca20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e049      	b.n	800cac6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d106      	bne.n	800ca4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f841 	bl	800cace <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2202      	movs	r2, #2
 800ca50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	4610      	mov	r0, r2
 800ca60:	f000 fe6c 	bl	800d73c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2201      	movs	r2, #1
 800ca68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
	...

0800cae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d109      	bne.n	800cb08 <HAL_TIM_PWM_Start+0x24>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	bf14      	ite	ne
 800cb00:	2301      	movne	r3, #1
 800cb02:	2300      	moveq	r3, #0
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	e03c      	b.n	800cb82 <HAL_TIM_PWM_Start+0x9e>
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	2b04      	cmp	r3, #4
 800cb0c:	d109      	bne.n	800cb22 <HAL_TIM_PWM_Start+0x3e>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	bf14      	ite	ne
 800cb1a:	2301      	movne	r3, #1
 800cb1c:	2300      	moveq	r3, #0
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	e02f      	b.n	800cb82 <HAL_TIM_PWM_Start+0x9e>
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	d109      	bne.n	800cb3c <HAL_TIM_PWM_Start+0x58>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	bf14      	ite	ne
 800cb34:	2301      	movne	r3, #1
 800cb36:	2300      	moveq	r3, #0
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	e022      	b.n	800cb82 <HAL_TIM_PWM_Start+0x9e>
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2b0c      	cmp	r3, #12
 800cb40:	d109      	bne.n	800cb56 <HAL_TIM_PWM_Start+0x72>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	bf14      	ite	ne
 800cb4e:	2301      	movne	r3, #1
 800cb50:	2300      	moveq	r3, #0
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	e015      	b.n	800cb82 <HAL_TIM_PWM_Start+0x9e>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b10      	cmp	r3, #16
 800cb5a:	d109      	bne.n	800cb70 <HAL_TIM_PWM_Start+0x8c>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	bf14      	ite	ne
 800cb68:	2301      	movne	r3, #1
 800cb6a:	2300      	moveq	r3, #0
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	e008      	b.n	800cb82 <HAL_TIM_PWM_Start+0x9e>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	bf14      	ite	ne
 800cb7c:	2301      	movne	r3, #1
 800cb7e:	2300      	moveq	r3, #0
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	e0a1      	b.n	800ccce <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d104      	bne.n	800cb9a <HAL_TIM_PWM_Start+0xb6>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2202      	movs	r2, #2
 800cb94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb98:	e023      	b.n	800cbe2 <HAL_TIM_PWM_Start+0xfe>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d104      	bne.n	800cbaa <HAL_TIM_PWM_Start+0xc6>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cba8:	e01b      	b.n	800cbe2 <HAL_TIM_PWM_Start+0xfe>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b08      	cmp	r3, #8
 800cbae:	d104      	bne.n	800cbba <HAL_TIM_PWM_Start+0xd6>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cbb8:	e013      	b.n	800cbe2 <HAL_TIM_PWM_Start+0xfe>
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	2b0c      	cmp	r3, #12
 800cbbe:	d104      	bne.n	800cbca <HAL_TIM_PWM_Start+0xe6>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2202      	movs	r2, #2
 800cbc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cbc8:	e00b      	b.n	800cbe2 <HAL_TIM_PWM_Start+0xfe>
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b10      	cmp	r3, #16
 800cbce:	d104      	bne.n	800cbda <HAL_TIM_PWM_Start+0xf6>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cbd8:	e003      	b.n	800cbe2 <HAL_TIM_PWM_Start+0xfe>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2202      	movs	r2, #2
 800cbde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f001 f9b4 	bl	800df58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a38      	ldr	r2, [pc, #224]	; (800ccd8 <HAL_TIM_PWM_Start+0x1f4>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d013      	beq.n	800cc22 <HAL_TIM_PWM_Start+0x13e>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a37      	ldr	r2, [pc, #220]	; (800ccdc <HAL_TIM_PWM_Start+0x1f8>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d00e      	beq.n	800cc22 <HAL_TIM_PWM_Start+0x13e>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a35      	ldr	r2, [pc, #212]	; (800cce0 <HAL_TIM_PWM_Start+0x1fc>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d009      	beq.n	800cc22 <HAL_TIM_PWM_Start+0x13e>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a34      	ldr	r2, [pc, #208]	; (800cce4 <HAL_TIM_PWM_Start+0x200>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d004      	beq.n	800cc22 <HAL_TIM_PWM_Start+0x13e>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a32      	ldr	r2, [pc, #200]	; (800cce8 <HAL_TIM_PWM_Start+0x204>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d101      	bne.n	800cc26 <HAL_TIM_PWM_Start+0x142>
 800cc22:	2301      	movs	r3, #1
 800cc24:	e000      	b.n	800cc28 <HAL_TIM_PWM_Start+0x144>
 800cc26:	2300      	movs	r3, #0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d007      	beq.n	800cc3c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a25      	ldr	r2, [pc, #148]	; (800ccd8 <HAL_TIM_PWM_Start+0x1f4>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d022      	beq.n	800cc8c <HAL_TIM_PWM_Start+0x1a8>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc4e:	d01d      	beq.n	800cc8c <HAL_TIM_PWM_Start+0x1a8>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a25      	ldr	r2, [pc, #148]	; (800ccec <HAL_TIM_PWM_Start+0x208>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d018      	beq.n	800cc8c <HAL_TIM_PWM_Start+0x1a8>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a24      	ldr	r2, [pc, #144]	; (800ccf0 <HAL_TIM_PWM_Start+0x20c>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d013      	beq.n	800cc8c <HAL_TIM_PWM_Start+0x1a8>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a22      	ldr	r2, [pc, #136]	; (800ccf4 <HAL_TIM_PWM_Start+0x210>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d00e      	beq.n	800cc8c <HAL_TIM_PWM_Start+0x1a8>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a1a      	ldr	r2, [pc, #104]	; (800ccdc <HAL_TIM_PWM_Start+0x1f8>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d009      	beq.n	800cc8c <HAL_TIM_PWM_Start+0x1a8>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a1e      	ldr	r2, [pc, #120]	; (800ccf8 <HAL_TIM_PWM_Start+0x214>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d004      	beq.n	800cc8c <HAL_TIM_PWM_Start+0x1a8>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a16      	ldr	r2, [pc, #88]	; (800cce0 <HAL_TIM_PWM_Start+0x1fc>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d115      	bne.n	800ccb8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	689a      	ldr	r2, [r3, #8]
 800cc92:	4b1a      	ldr	r3, [pc, #104]	; (800ccfc <HAL_TIM_PWM_Start+0x218>)
 800cc94:	4013      	ands	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b06      	cmp	r3, #6
 800cc9c:	d015      	beq.n	800ccca <HAL_TIM_PWM_Start+0x1e6>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cca4:	d011      	beq.n	800ccca <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f042 0201 	orr.w	r2, r2, #1
 800ccb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccb6:	e008      	b.n	800ccca <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f042 0201 	orr.w	r2, r2, #1
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	e000      	b.n	800cccc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	40010000 	.word	0x40010000
 800ccdc:	40010400 	.word	0x40010400
 800cce0:	40014000 	.word	0x40014000
 800cce4:	40014400 	.word	0x40014400
 800cce8:	40014800 	.word	0x40014800
 800ccec:	40000400 	.word	0x40000400
 800ccf0:	40000800 	.word	0x40000800
 800ccf4:	40000c00 	.word	0x40000c00
 800ccf8:	40001800 	.word	0x40001800
 800ccfc:	00010007 	.word	0x00010007

0800cd00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	6839      	ldr	r1, [r7, #0]
 800cd12:	4618      	mov	r0, r3
 800cd14:	f001 f920 	bl	800df58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a3e      	ldr	r2, [pc, #248]	; (800ce18 <HAL_TIM_PWM_Stop+0x118>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d013      	beq.n	800cd4a <HAL_TIM_PWM_Stop+0x4a>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a3d      	ldr	r2, [pc, #244]	; (800ce1c <HAL_TIM_PWM_Stop+0x11c>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d00e      	beq.n	800cd4a <HAL_TIM_PWM_Stop+0x4a>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a3b      	ldr	r2, [pc, #236]	; (800ce20 <HAL_TIM_PWM_Stop+0x120>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d009      	beq.n	800cd4a <HAL_TIM_PWM_Stop+0x4a>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a3a      	ldr	r2, [pc, #232]	; (800ce24 <HAL_TIM_PWM_Stop+0x124>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d004      	beq.n	800cd4a <HAL_TIM_PWM_Stop+0x4a>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a38      	ldr	r2, [pc, #224]	; (800ce28 <HAL_TIM_PWM_Stop+0x128>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d101      	bne.n	800cd4e <HAL_TIM_PWM_Stop+0x4e>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e000      	b.n	800cd50 <HAL_TIM_PWM_Stop+0x50>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d017      	beq.n	800cd84 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6a1a      	ldr	r2, [r3, #32]
 800cd5a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd5e:	4013      	ands	r3, r2
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10f      	bne.n	800cd84 <HAL_TIM_PWM_Stop+0x84>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6a1a      	ldr	r2, [r3, #32]
 800cd6a:	f240 4344 	movw	r3, #1092	; 0x444
 800cd6e:	4013      	ands	r3, r2
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d107      	bne.n	800cd84 <HAL_TIM_PWM_Stop+0x84>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	6a1a      	ldr	r2, [r3, #32]
 800cd8a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd8e:	4013      	ands	r3, r2
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10f      	bne.n	800cdb4 <HAL_TIM_PWM_Stop+0xb4>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	6a1a      	ldr	r2, [r3, #32]
 800cd9a:	f240 4344 	movw	r3, #1092	; 0x444
 800cd9e:	4013      	ands	r3, r2
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d107      	bne.n	800cdb4 <HAL_TIM_PWM_Stop+0xb4>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f022 0201 	bic.w	r2, r2, #1
 800cdb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d104      	bne.n	800cdc4 <HAL_TIM_PWM_Stop+0xc4>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdc2:	e023      	b.n	800ce0c <HAL_TIM_PWM_Stop+0x10c>
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	2b04      	cmp	r3, #4
 800cdc8:	d104      	bne.n	800cdd4 <HAL_TIM_PWM_Stop+0xd4>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cdd2:	e01b      	b.n	800ce0c <HAL_TIM_PWM_Stop+0x10c>
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b08      	cmp	r3, #8
 800cdd8:	d104      	bne.n	800cde4 <HAL_TIM_PWM_Stop+0xe4>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cde2:	e013      	b.n	800ce0c <HAL_TIM_PWM_Stop+0x10c>
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2b0c      	cmp	r3, #12
 800cde8:	d104      	bne.n	800cdf4 <HAL_TIM_PWM_Stop+0xf4>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdf2:	e00b      	b.n	800ce0c <HAL_TIM_PWM_Stop+0x10c>
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b10      	cmp	r3, #16
 800cdf8:	d104      	bne.n	800ce04 <HAL_TIM_PWM_Stop+0x104>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce02:	e003      	b.n	800ce0c <HAL_TIM_PWM_Stop+0x10c>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	40010000 	.word	0x40010000
 800ce1c:	40010400 	.word	0x40010400
 800ce20:	40014000 	.word	0x40014000
 800ce24:	40014400 	.word	0x40014400
 800ce28:	40014800 	.word	0x40014800

0800ce2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d101      	bne.n	800ce40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e08f      	b.n	800cf60 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d106      	bne.n	800ce5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7f6 fe0f 	bl	8003a78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2202      	movs	r2, #2
 800ce5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	6899      	ldr	r1, [r3, #8]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	4b3e      	ldr	r3, [pc, #248]	; (800cf68 <HAL_TIM_Encoder_Init+0x13c>)
 800ce6e:	400b      	ands	r3, r1
 800ce70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3304      	adds	r3, #4
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	f000 fc5d 	bl	800d73c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6a1b      	ldr	r3, [r3, #32]
 800ce98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	4313      	orrs	r3, r2
 800cea2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cea4:	693a      	ldr	r2, [r7, #16]
 800cea6:	4b31      	ldr	r3, [pc, #196]	; (800cf6c <HAL_TIM_Encoder_Init+0x140>)
 800cea8:	4013      	ands	r3, r2
 800ceaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	689a      	ldr	r2, [r3, #8]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	699b      	ldr	r3, [r3, #24]
 800ceb4:	021b      	lsls	r3, r3, #8
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cebe:	693a      	ldr	r2, [r7, #16]
 800cec0:	4b2b      	ldr	r3, [pc, #172]	; (800cf70 <HAL_TIM_Encoder_Init+0x144>)
 800cec2:	4013      	ands	r3, r2
 800cec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cec6:	693a      	ldr	r2, [r7, #16]
 800cec8:	4b2a      	ldr	r3, [pc, #168]	; (800cf74 <HAL_TIM_Encoder_Init+0x148>)
 800ceca:	4013      	ands	r3, r2
 800cecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	68da      	ldr	r2, [r3, #12]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	69db      	ldr	r3, [r3, #28]
 800ced6:	021b      	lsls	r3, r3, #8
 800ced8:	4313      	orrs	r3, r2
 800ceda:	693a      	ldr	r2, [r7, #16]
 800cedc:	4313      	orrs	r3, r2
 800cede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	011a      	lsls	r2, r3, #4
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	031b      	lsls	r3, r3, #12
 800ceec:	4313      	orrs	r3, r2
 800ceee:	693a      	ldr	r2, [r7, #16]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cefa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cf02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	685a      	ldr	r2, [r3, #4]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	011b      	lsls	r3, r3, #4
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	fffebff8 	.word	0xfffebff8
 800cf6c:	fffffcfc 	.word	0xfffffcfc
 800cf70:	fffff3f3 	.word	0xfffff3f3
 800cf74:	ffff0f0f 	.word	0xffff0f0f

0800cf78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cf90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfa0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d110      	bne.n	800cfca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d102      	bne.n	800cfb4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cfae:	7b7b      	ldrb	r3, [r7, #13]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d001      	beq.n	800cfb8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	e069      	b.n	800d08c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2202      	movs	r2, #2
 800cfbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfc8:	e031      	b.n	800d02e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b04      	cmp	r3, #4
 800cfce:	d110      	bne.n	800cff2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cfd0:	7bbb      	ldrb	r3, [r7, #14]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d102      	bne.n	800cfdc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cfd6:	7b3b      	ldrb	r3, [r7, #12]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d001      	beq.n	800cfe0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e055      	b.n	800d08c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2202      	movs	r2, #2
 800cfe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2202      	movs	r2, #2
 800cfec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cff0:	e01d      	b.n	800d02e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cff2:	7bfb      	ldrb	r3, [r7, #15]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d108      	bne.n	800d00a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cff8:	7bbb      	ldrb	r3, [r7, #14]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d105      	bne.n	800d00a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cffe:	7b7b      	ldrb	r3, [r7, #13]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d102      	bne.n	800d00a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d004:	7b3b      	ldrb	r3, [r7, #12]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d001      	beq.n	800d00e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d00a:	2301      	movs	r3, #1
 800d00c:	e03e      	b.n	800d08c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2202      	movs	r2, #2
 800d012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2202      	movs	r2, #2
 800d01a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2202      	movs	r2, #2
 800d022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2202      	movs	r2, #2
 800d02a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d003      	beq.n	800d03c <HAL_TIM_Encoder_Start+0xc4>
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	2b04      	cmp	r3, #4
 800d038:	d008      	beq.n	800d04c <HAL_TIM_Encoder_Start+0xd4>
 800d03a:	e00f      	b.n	800d05c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2201      	movs	r2, #1
 800d042:	2100      	movs	r1, #0
 800d044:	4618      	mov	r0, r3
 800d046:	f000 ff87 	bl	800df58 <TIM_CCxChannelCmd>
      break;
 800d04a:	e016      	b.n	800d07a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2201      	movs	r2, #1
 800d052:	2104      	movs	r1, #4
 800d054:	4618      	mov	r0, r3
 800d056:	f000 ff7f 	bl	800df58 <TIM_CCxChannelCmd>
      break;
 800d05a:	e00e      	b.n	800d07a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2201      	movs	r2, #1
 800d062:	2100      	movs	r1, #0
 800d064:	4618      	mov	r0, r3
 800d066:	f000 ff77 	bl	800df58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2201      	movs	r2, #1
 800d070:	2104      	movs	r1, #4
 800d072:	4618      	mov	r0, r3
 800d074:	f000 ff70 	bl	800df58 <TIM_CCxChannelCmd>
      break;
 800d078:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f042 0201 	orr.w	r2, r2, #1
 800d088:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	691b      	ldr	r3, [r3, #16]
 800d0a2:	f003 0302 	and.w	r3, r3, #2
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d122      	bne.n	800d0f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	f003 0302 	and.w	r3, r3, #2
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d11b      	bne.n	800d0f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f06f 0202 	mvn.w	r2, #2
 800d0c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	699b      	ldr	r3, [r3, #24]
 800d0ce:	f003 0303 	and.w	r3, r3, #3
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d003      	beq.n	800d0de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fb12 	bl	800d700 <HAL_TIM_IC_CaptureCallback>
 800d0dc:	e005      	b.n	800d0ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 fb04 	bl	800d6ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 fb15 	bl	800d714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	f003 0304 	and.w	r3, r3, #4
 800d0fa:	2b04      	cmp	r3, #4
 800d0fc:	d122      	bne.n	800d144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	f003 0304 	and.w	r3, r3, #4
 800d108:	2b04      	cmp	r3, #4
 800d10a:	d11b      	bne.n	800d144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f06f 0204 	mvn.w	r2, #4
 800d114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2202      	movs	r2, #2
 800d11a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fae8 	bl	800d700 <HAL_TIM_IC_CaptureCallback>
 800d130:	e005      	b.n	800d13e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fada 	bl	800d6ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 faeb 	bl	800d714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	f003 0308 	and.w	r3, r3, #8
 800d14e:	2b08      	cmp	r3, #8
 800d150:	d122      	bne.n	800d198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	f003 0308 	and.w	r3, r3, #8
 800d15c:	2b08      	cmp	r3, #8
 800d15e:	d11b      	bne.n	800d198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f06f 0208 	mvn.w	r2, #8
 800d168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2204      	movs	r2, #4
 800d16e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	69db      	ldr	r3, [r3, #28]
 800d176:	f003 0303 	and.w	r3, r3, #3
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d003      	beq.n	800d186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 fabe 	bl	800d700 <HAL_TIM_IC_CaptureCallback>
 800d184:	e005      	b.n	800d192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 fab0 	bl	800d6ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fac1 	bl	800d714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	f003 0310 	and.w	r3, r3, #16
 800d1a2:	2b10      	cmp	r3, #16
 800d1a4:	d122      	bne.n	800d1ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	f003 0310 	and.w	r3, r3, #16
 800d1b0:	2b10      	cmp	r3, #16
 800d1b2:	d11b      	bne.n	800d1ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f06f 0210 	mvn.w	r2, #16
 800d1bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2208      	movs	r2, #8
 800d1c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	69db      	ldr	r3, [r3, #28]
 800d1ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d003      	beq.n	800d1da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 fa94 	bl	800d700 <HAL_TIM_IC_CaptureCallback>
 800d1d8:	e005      	b.n	800d1e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fa86 	bl	800d6ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fa97 	bl	800d714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	f003 0301 	and.w	r3, r3, #1
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d10e      	bne.n	800d218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	f003 0301 	and.w	r3, r3, #1
 800d204:	2b01      	cmp	r3, #1
 800d206:	d107      	bne.n	800d218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f06f 0201 	mvn.w	r2, #1
 800d210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7f6 f9c2 	bl	800359c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d222:	2b80      	cmp	r3, #128	; 0x80
 800d224:	d10e      	bne.n	800d244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d230:	2b80      	cmp	r3, #128	; 0x80
 800d232:	d107      	bne.n	800d244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d23c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 ffc6 	bl	800e1d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d252:	d10e      	bne.n	800d272 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d25e:	2b80      	cmp	r3, #128	; 0x80
 800d260:	d107      	bne.n	800d272 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 ffb9 	bl	800e1e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d27c:	2b40      	cmp	r3, #64	; 0x40
 800d27e:	d10e      	bne.n	800d29e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d28a:	2b40      	cmp	r3, #64	; 0x40
 800d28c:	d107      	bne.n	800d29e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fa45 	bl	800d728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	f003 0320 	and.w	r3, r3, #32
 800d2a8:	2b20      	cmp	r3, #32
 800d2aa:	d10e      	bne.n	800d2ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	f003 0320 	and.w	r3, r3, #32
 800d2b6:	2b20      	cmp	r3, #32
 800d2b8:	d107      	bne.n	800d2ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f06f 0220 	mvn.w	r2, #32
 800d2c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 ff79 	bl	800e1bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
	...

0800d2d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b086      	sub	sp, #24
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d101      	bne.n	800d2f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d2ee:	2302      	movs	r3, #2
 800d2f0:	e0ff      	b.n	800d4f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b14      	cmp	r3, #20
 800d2fe:	f200 80f0 	bhi.w	800d4e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d302:	a201      	add	r2, pc, #4	; (adr r2, 800d308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d308:	0800d35d 	.word	0x0800d35d
 800d30c:	0800d4e3 	.word	0x0800d4e3
 800d310:	0800d4e3 	.word	0x0800d4e3
 800d314:	0800d4e3 	.word	0x0800d4e3
 800d318:	0800d39d 	.word	0x0800d39d
 800d31c:	0800d4e3 	.word	0x0800d4e3
 800d320:	0800d4e3 	.word	0x0800d4e3
 800d324:	0800d4e3 	.word	0x0800d4e3
 800d328:	0800d3df 	.word	0x0800d3df
 800d32c:	0800d4e3 	.word	0x0800d4e3
 800d330:	0800d4e3 	.word	0x0800d4e3
 800d334:	0800d4e3 	.word	0x0800d4e3
 800d338:	0800d41f 	.word	0x0800d41f
 800d33c:	0800d4e3 	.word	0x0800d4e3
 800d340:	0800d4e3 	.word	0x0800d4e3
 800d344:	0800d4e3 	.word	0x0800d4e3
 800d348:	0800d461 	.word	0x0800d461
 800d34c:	0800d4e3 	.word	0x0800d4e3
 800d350:	0800d4e3 	.word	0x0800d4e3
 800d354:	0800d4e3 	.word	0x0800d4e3
 800d358:	0800d4a1 	.word	0x0800d4a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68b9      	ldr	r1, [r7, #8]
 800d362:	4618      	mov	r0, r3
 800d364:	f000 fa84 	bl	800d870 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	699a      	ldr	r2, [r3, #24]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f042 0208 	orr.w	r2, r2, #8
 800d376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	699a      	ldr	r2, [r3, #24]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f022 0204 	bic.w	r2, r2, #4
 800d386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6999      	ldr	r1, [r3, #24]
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	691a      	ldr	r2, [r3, #16]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	430a      	orrs	r2, r1
 800d398:	619a      	str	r2, [r3, #24]
      break;
 800d39a:	e0a5      	b.n	800d4e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68b9      	ldr	r1, [r7, #8]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 faf4 	bl	800d990 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	699a      	ldr	r2, [r3, #24]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	699a      	ldr	r2, [r3, #24]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	6999      	ldr	r1, [r3, #24]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	021a      	lsls	r2, r3, #8
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	430a      	orrs	r2, r1
 800d3da:	619a      	str	r2, [r3, #24]
      break;
 800d3dc:	e084      	b.n	800d4e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	68b9      	ldr	r1, [r7, #8]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fb5d 	bl	800daa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	69da      	ldr	r2, [r3, #28]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f042 0208 	orr.w	r2, r2, #8
 800d3f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	69da      	ldr	r2, [r3, #28]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f022 0204 	bic.w	r2, r2, #4
 800d408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	69d9      	ldr	r1, [r3, #28]
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	691a      	ldr	r2, [r3, #16]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	430a      	orrs	r2, r1
 800d41a:	61da      	str	r2, [r3, #28]
      break;
 800d41c:	e064      	b.n	800d4e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	68b9      	ldr	r1, [r7, #8]
 800d424:	4618      	mov	r0, r3
 800d426:	f000 fbc5 	bl	800dbb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	69da      	ldr	r2, [r3, #28]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	69da      	ldr	r2, [r3, #28]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	69d9      	ldr	r1, [r3, #28]
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	021a      	lsls	r2, r3, #8
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	430a      	orrs	r2, r1
 800d45c:	61da      	str	r2, [r3, #28]
      break;
 800d45e:	e043      	b.n	800d4e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68b9      	ldr	r1, [r7, #8]
 800d466:	4618      	mov	r0, r3
 800d468:	f000 fc0e 	bl	800dc88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f042 0208 	orr.w	r2, r2, #8
 800d47a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f022 0204 	bic.w	r2, r2, #4
 800d48a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	691a      	ldr	r2, [r3, #16]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	430a      	orrs	r2, r1
 800d49c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d49e:	e023      	b.n	800d4e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 fc52 	bl	800dd50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	021a      	lsls	r2, r3, #8
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	430a      	orrs	r2, r1
 800d4de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d4e0:	e002      	b.n	800d4e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	75fb      	strb	r3, [r7, #23]
      break;
 800d4e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3718      	adds	r7, #24
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop

0800d4fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d506:	2300      	movs	r3, #0
 800d508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d510:	2b01      	cmp	r3, #1
 800d512:	d101      	bne.n	800d518 <HAL_TIM_ConfigClockSource+0x1c>
 800d514:	2302      	movs	r3, #2
 800d516:	e0dc      	b.n	800d6d2 <HAL_TIM_ConfigClockSource+0x1d6>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2202      	movs	r2, #2
 800d524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	4b6a      	ldr	r3, [pc, #424]	; (800d6dc <HAL_TIM_ConfigClockSource+0x1e0>)
 800d534:	4013      	ands	r3, r2
 800d536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d53e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a64      	ldr	r2, [pc, #400]	; (800d6e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	f000 80a9 	beq.w	800d6a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d554:	4a62      	ldr	r2, [pc, #392]	; (800d6e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d556:	4293      	cmp	r3, r2
 800d558:	f200 80ae 	bhi.w	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d55c:	4a61      	ldr	r2, [pc, #388]	; (800d6e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	f000 80a1 	beq.w	800d6a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d564:	4a5f      	ldr	r2, [pc, #380]	; (800d6e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d566:	4293      	cmp	r3, r2
 800d568:	f200 80a6 	bhi.w	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d56c:	4a5e      	ldr	r2, [pc, #376]	; (800d6e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	f000 8099 	beq.w	800d6a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d574:	4a5c      	ldr	r2, [pc, #368]	; (800d6e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d576:	4293      	cmp	r3, r2
 800d578:	f200 809e 	bhi.w	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d57c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d580:	f000 8091 	beq.w	800d6a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d584:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d588:	f200 8096 	bhi.w	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d58c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d590:	f000 8089 	beq.w	800d6a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d598:	f200 808e 	bhi.w	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d59c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5a0:	d03e      	beq.n	800d620 <HAL_TIM_ConfigClockSource+0x124>
 800d5a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5a6:	f200 8087 	bhi.w	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5ae:	f000 8086 	beq.w	800d6be <HAL_TIM_ConfigClockSource+0x1c2>
 800d5b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5b6:	d87f      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5b8:	2b70      	cmp	r3, #112	; 0x70
 800d5ba:	d01a      	beq.n	800d5f2 <HAL_TIM_ConfigClockSource+0xf6>
 800d5bc:	2b70      	cmp	r3, #112	; 0x70
 800d5be:	d87b      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5c0:	2b60      	cmp	r3, #96	; 0x60
 800d5c2:	d050      	beq.n	800d666 <HAL_TIM_ConfigClockSource+0x16a>
 800d5c4:	2b60      	cmp	r3, #96	; 0x60
 800d5c6:	d877      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5c8:	2b50      	cmp	r3, #80	; 0x50
 800d5ca:	d03c      	beq.n	800d646 <HAL_TIM_ConfigClockSource+0x14a>
 800d5cc:	2b50      	cmp	r3, #80	; 0x50
 800d5ce:	d873      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5d0:	2b40      	cmp	r3, #64	; 0x40
 800d5d2:	d058      	beq.n	800d686 <HAL_TIM_ConfigClockSource+0x18a>
 800d5d4:	2b40      	cmp	r3, #64	; 0x40
 800d5d6:	d86f      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5d8:	2b30      	cmp	r3, #48	; 0x30
 800d5da:	d064      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5dc:	2b30      	cmp	r3, #48	; 0x30
 800d5de:	d86b      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5e0:	2b20      	cmp	r3, #32
 800d5e2:	d060      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5e4:	2b20      	cmp	r3, #32
 800d5e6:	d867      	bhi.n	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d05c      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5ec:	2b10      	cmp	r3, #16
 800d5ee:	d05a      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5f0:	e062      	b.n	800d6b8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6818      	ldr	r0, [r3, #0]
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	6899      	ldr	r1, [r3, #8]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	685a      	ldr	r2, [r3, #4]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	f000 fc89 	bl	800df18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	609a      	str	r2, [r3, #8]
      break;
 800d61e:	e04f      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6818      	ldr	r0, [r3, #0]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	6899      	ldr	r1, [r3, #8]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	f000 fc72 	bl	800df18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689a      	ldr	r2, [r3, #8]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d642:	609a      	str	r2, [r3, #8]
      break;
 800d644:	e03c      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	6859      	ldr	r1, [r3, #4]
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	461a      	mov	r2, r3
 800d654:	f000 fbe2 	bl	800de1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2150      	movs	r1, #80	; 0x50
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 fc3c 	bl	800dedc <TIM_ITRx_SetConfig>
      break;
 800d664:	e02c      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6818      	ldr	r0, [r3, #0]
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	6859      	ldr	r1, [r3, #4]
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	461a      	mov	r2, r3
 800d674:	f000 fc01 	bl	800de7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2160      	movs	r1, #96	; 0x60
 800d67e:	4618      	mov	r0, r3
 800d680:	f000 fc2c 	bl	800dedc <TIM_ITRx_SetConfig>
      break;
 800d684:	e01c      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6818      	ldr	r0, [r3, #0]
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	6859      	ldr	r1, [r3, #4]
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	461a      	mov	r2, r3
 800d694:	f000 fbc2 	bl	800de1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2140      	movs	r1, #64	; 0x40
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 fc1c 	bl	800dedc <TIM_ITRx_SetConfig>
      break;
 800d6a4:	e00c      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	f000 fc13 	bl	800dedc <TIM_ITRx_SetConfig>
      break;
 800d6b6:	e003      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d6bc:	e000      	b.n	800d6c0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d6be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	ffceff88 	.word	0xffceff88
 800d6e0:	00100040 	.word	0x00100040
 800d6e4:	00100030 	.word	0x00100030
 800d6e8:	00100020 	.word	0x00100020

0800d6ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d708:	bf00      	nop
 800d70a:	370c      	adds	r7, #12
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d71c:	bf00      	nop
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d730:	bf00      	nop
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4a40      	ldr	r2, [pc, #256]	; (800d850 <TIM_Base_SetConfig+0x114>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d013      	beq.n	800d77c <TIM_Base_SetConfig+0x40>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d75a:	d00f      	beq.n	800d77c <TIM_Base_SetConfig+0x40>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a3d      	ldr	r2, [pc, #244]	; (800d854 <TIM_Base_SetConfig+0x118>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d00b      	beq.n	800d77c <TIM_Base_SetConfig+0x40>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	4a3c      	ldr	r2, [pc, #240]	; (800d858 <TIM_Base_SetConfig+0x11c>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d007      	beq.n	800d77c <TIM_Base_SetConfig+0x40>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a3b      	ldr	r2, [pc, #236]	; (800d85c <TIM_Base_SetConfig+0x120>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d003      	beq.n	800d77c <TIM_Base_SetConfig+0x40>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4a3a      	ldr	r2, [pc, #232]	; (800d860 <TIM_Base_SetConfig+0x124>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d108      	bne.n	800d78e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a2f      	ldr	r2, [pc, #188]	; (800d850 <TIM_Base_SetConfig+0x114>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d01f      	beq.n	800d7d6 <TIM_Base_SetConfig+0x9a>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d79c:	d01b      	beq.n	800d7d6 <TIM_Base_SetConfig+0x9a>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a2c      	ldr	r2, [pc, #176]	; (800d854 <TIM_Base_SetConfig+0x118>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d017      	beq.n	800d7d6 <TIM_Base_SetConfig+0x9a>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a2b      	ldr	r2, [pc, #172]	; (800d858 <TIM_Base_SetConfig+0x11c>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d013      	beq.n	800d7d6 <TIM_Base_SetConfig+0x9a>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4a2a      	ldr	r2, [pc, #168]	; (800d85c <TIM_Base_SetConfig+0x120>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d00f      	beq.n	800d7d6 <TIM_Base_SetConfig+0x9a>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a29      	ldr	r2, [pc, #164]	; (800d860 <TIM_Base_SetConfig+0x124>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d00b      	beq.n	800d7d6 <TIM_Base_SetConfig+0x9a>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4a28      	ldr	r2, [pc, #160]	; (800d864 <TIM_Base_SetConfig+0x128>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d007      	beq.n	800d7d6 <TIM_Base_SetConfig+0x9a>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	4a27      	ldr	r2, [pc, #156]	; (800d868 <TIM_Base_SetConfig+0x12c>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d003      	beq.n	800d7d6 <TIM_Base_SetConfig+0x9a>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4a26      	ldr	r2, [pc, #152]	; (800d86c <TIM_Base_SetConfig+0x130>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d108      	bne.n	800d7e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	689a      	ldr	r2, [r3, #8]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a10      	ldr	r2, [pc, #64]	; (800d850 <TIM_Base_SetConfig+0x114>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d00f      	beq.n	800d834 <TIM_Base_SetConfig+0xf8>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4a12      	ldr	r2, [pc, #72]	; (800d860 <TIM_Base_SetConfig+0x124>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d00b      	beq.n	800d834 <TIM_Base_SetConfig+0xf8>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4a11      	ldr	r2, [pc, #68]	; (800d864 <TIM_Base_SetConfig+0x128>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d007      	beq.n	800d834 <TIM_Base_SetConfig+0xf8>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4a10      	ldr	r2, [pc, #64]	; (800d868 <TIM_Base_SetConfig+0x12c>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d003      	beq.n	800d834 <TIM_Base_SetConfig+0xf8>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4a0f      	ldr	r2, [pc, #60]	; (800d86c <TIM_Base_SetConfig+0x130>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d103      	bne.n	800d83c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	691a      	ldr	r2, [r3, #16]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	615a      	str	r2, [r3, #20]
}
 800d842:	bf00      	nop
 800d844:	3714      	adds	r7, #20
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop
 800d850:	40010000 	.word	0x40010000
 800d854:	40000400 	.word	0x40000400
 800d858:	40000800 	.word	0x40000800
 800d85c:	40000c00 	.word	0x40000c00
 800d860:	40010400 	.word	0x40010400
 800d864:	40014000 	.word	0x40014000
 800d868:	40014400 	.word	0x40014400
 800d86c:	40014800 	.word	0x40014800

0800d870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d870:	b480      	push	{r7}
 800d872:	b087      	sub	sp, #28
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a1b      	ldr	r3, [r3, #32]
 800d87e:	f023 0201 	bic.w	r2, r3, #1
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6a1b      	ldr	r3, [r3, #32]
 800d88a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	4b37      	ldr	r3, [pc, #220]	; (800d978 <TIM_OC1_SetConfig+0x108>)
 800d89c:	4013      	ands	r3, r2
 800d89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f023 0303 	bic.w	r3, r3, #3
 800d8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	f023 0302 	bic.w	r3, r3, #2
 800d8b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a2d      	ldr	r2, [pc, #180]	; (800d97c <TIM_OC1_SetConfig+0x10c>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d00f      	beq.n	800d8ec <TIM_OC1_SetConfig+0x7c>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a2c      	ldr	r2, [pc, #176]	; (800d980 <TIM_OC1_SetConfig+0x110>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d00b      	beq.n	800d8ec <TIM_OC1_SetConfig+0x7c>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a2b      	ldr	r2, [pc, #172]	; (800d984 <TIM_OC1_SetConfig+0x114>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d007      	beq.n	800d8ec <TIM_OC1_SetConfig+0x7c>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a2a      	ldr	r2, [pc, #168]	; (800d988 <TIM_OC1_SetConfig+0x118>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d003      	beq.n	800d8ec <TIM_OC1_SetConfig+0x7c>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a29      	ldr	r2, [pc, #164]	; (800d98c <TIM_OC1_SetConfig+0x11c>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d10c      	bne.n	800d906 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	f023 0308 	bic.w	r3, r3, #8
 800d8f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f023 0304 	bic.w	r3, r3, #4
 800d904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	4a1c      	ldr	r2, [pc, #112]	; (800d97c <TIM_OC1_SetConfig+0x10c>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d00f      	beq.n	800d92e <TIM_OC1_SetConfig+0xbe>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4a1b      	ldr	r2, [pc, #108]	; (800d980 <TIM_OC1_SetConfig+0x110>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d00b      	beq.n	800d92e <TIM_OC1_SetConfig+0xbe>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4a1a      	ldr	r2, [pc, #104]	; (800d984 <TIM_OC1_SetConfig+0x114>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d007      	beq.n	800d92e <TIM_OC1_SetConfig+0xbe>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4a19      	ldr	r2, [pc, #100]	; (800d988 <TIM_OC1_SetConfig+0x118>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d003      	beq.n	800d92e <TIM_OC1_SetConfig+0xbe>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4a18      	ldr	r2, [pc, #96]	; (800d98c <TIM_OC1_SetConfig+0x11c>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d111      	bne.n	800d952 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d93c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	695b      	ldr	r3, [r3, #20]
 800d942:	693a      	ldr	r2, [r7, #16]
 800d944:	4313      	orrs	r3, r2
 800d946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	4313      	orrs	r3, r2
 800d950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	685a      	ldr	r2, [r3, #4]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	621a      	str	r2, [r3, #32]
}
 800d96c:	bf00      	nop
 800d96e:	371c      	adds	r7, #28
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr
 800d978:	fffeff8f 	.word	0xfffeff8f
 800d97c:	40010000 	.word	0x40010000
 800d980:	40010400 	.word	0x40010400
 800d984:	40014000 	.word	0x40014000
 800d988:	40014400 	.word	0x40014400
 800d98c:	40014800 	.word	0x40014800

0800d990 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d990:	b480      	push	{r7}
 800d992:	b087      	sub	sp, #28
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6a1b      	ldr	r3, [r3, #32]
 800d99e:	f023 0210 	bic.w	r2, r3, #16
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a1b      	ldr	r3, [r3, #32]
 800d9aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	699b      	ldr	r3, [r3, #24]
 800d9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	4b34      	ldr	r3, [pc, #208]	; (800da8c <TIM_OC2_SetConfig+0xfc>)
 800d9bc:	4013      	ands	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	021b      	lsls	r3, r3, #8
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	f023 0320 	bic.w	r3, r3, #32
 800d9da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	011b      	lsls	r3, r3, #4
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a29      	ldr	r2, [pc, #164]	; (800da90 <TIM_OC2_SetConfig+0x100>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d003      	beq.n	800d9f8 <TIM_OC2_SetConfig+0x68>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a28      	ldr	r2, [pc, #160]	; (800da94 <TIM_OC2_SetConfig+0x104>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d10d      	bne.n	800da14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	011b      	lsls	r3, r3, #4
 800da06:	697a      	ldr	r2, [r7, #20]
 800da08:	4313      	orrs	r3, r2
 800da0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a1e      	ldr	r2, [pc, #120]	; (800da90 <TIM_OC2_SetConfig+0x100>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d00f      	beq.n	800da3c <TIM_OC2_SetConfig+0xac>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a1d      	ldr	r2, [pc, #116]	; (800da94 <TIM_OC2_SetConfig+0x104>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d00b      	beq.n	800da3c <TIM_OC2_SetConfig+0xac>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a1c      	ldr	r2, [pc, #112]	; (800da98 <TIM_OC2_SetConfig+0x108>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d007      	beq.n	800da3c <TIM_OC2_SetConfig+0xac>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a1b      	ldr	r2, [pc, #108]	; (800da9c <TIM_OC2_SetConfig+0x10c>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d003      	beq.n	800da3c <TIM_OC2_SetConfig+0xac>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a1a      	ldr	r2, [pc, #104]	; (800daa0 <TIM_OC2_SetConfig+0x110>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d113      	bne.n	800da64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	695b      	ldr	r3, [r3, #20]
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	693a      	ldr	r2, [r7, #16]
 800da54:	4313      	orrs	r3, r2
 800da56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	693a      	ldr	r2, [r7, #16]
 800da60:	4313      	orrs	r3, r2
 800da62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	685a      	ldr	r2, [r3, #4]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	697a      	ldr	r2, [r7, #20]
 800da7c:	621a      	str	r2, [r3, #32]
}
 800da7e:	bf00      	nop
 800da80:	371c      	adds	r7, #28
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	feff8fff 	.word	0xfeff8fff
 800da90:	40010000 	.word	0x40010000
 800da94:	40010400 	.word	0x40010400
 800da98:	40014000 	.word	0x40014000
 800da9c:	40014400 	.word	0x40014400
 800daa0:	40014800 	.word	0x40014800

0800daa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b087      	sub	sp, #28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a1b      	ldr	r3, [r3, #32]
 800dab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a1b      	ldr	r3, [r3, #32]
 800dabe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	69db      	ldr	r3, [r3, #28]
 800daca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	4b33      	ldr	r3, [pc, #204]	; (800db9c <TIM_OC3_SetConfig+0xf8>)
 800dad0:	4013      	ands	r3, r2
 800dad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f023 0303 	bic.w	r3, r3, #3
 800dada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	4313      	orrs	r3, r2
 800dae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800daec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	021b      	lsls	r3, r3, #8
 800daf4:	697a      	ldr	r2, [r7, #20]
 800daf6:	4313      	orrs	r3, r2
 800daf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	4a28      	ldr	r2, [pc, #160]	; (800dba0 <TIM_OC3_SetConfig+0xfc>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d003      	beq.n	800db0a <TIM_OC3_SetConfig+0x66>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4a27      	ldr	r2, [pc, #156]	; (800dba4 <TIM_OC3_SetConfig+0x100>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d10d      	bne.n	800db26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	021b      	lsls	r3, r3, #8
 800db18:	697a      	ldr	r2, [r7, #20]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a1d      	ldr	r2, [pc, #116]	; (800dba0 <TIM_OC3_SetConfig+0xfc>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d00f      	beq.n	800db4e <TIM_OC3_SetConfig+0xaa>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a1c      	ldr	r2, [pc, #112]	; (800dba4 <TIM_OC3_SetConfig+0x100>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d00b      	beq.n	800db4e <TIM_OC3_SetConfig+0xaa>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a1b      	ldr	r2, [pc, #108]	; (800dba8 <TIM_OC3_SetConfig+0x104>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d007      	beq.n	800db4e <TIM_OC3_SetConfig+0xaa>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4a1a      	ldr	r2, [pc, #104]	; (800dbac <TIM_OC3_SetConfig+0x108>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d003      	beq.n	800db4e <TIM_OC3_SetConfig+0xaa>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a19      	ldr	r2, [pc, #100]	; (800dbb0 <TIM_OC3_SetConfig+0x10c>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d113      	bne.n	800db76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	011b      	lsls	r3, r3, #4
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	4313      	orrs	r3, r2
 800db68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	699b      	ldr	r3, [r3, #24]
 800db6e:	011b      	lsls	r3, r3, #4
 800db70:	693a      	ldr	r2, [r7, #16]
 800db72:	4313      	orrs	r3, r2
 800db74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	693a      	ldr	r2, [r7, #16]
 800db7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	685a      	ldr	r2, [r3, #4]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	697a      	ldr	r2, [r7, #20]
 800db8e:	621a      	str	r2, [r3, #32]
}
 800db90:	bf00      	nop
 800db92:	371c      	adds	r7, #28
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	fffeff8f 	.word	0xfffeff8f
 800dba0:	40010000 	.word	0x40010000
 800dba4:	40010400 	.word	0x40010400
 800dba8:	40014000 	.word	0x40014000
 800dbac:	40014400 	.word	0x40014400
 800dbb0:	40014800 	.word	0x40014800

0800dbb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b087      	sub	sp, #28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6a1b      	ldr	r3, [r3, #32]
 800dbc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4b24      	ldr	r3, [pc, #144]	; (800dc70 <TIM_OC4_SetConfig+0xbc>)
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	021b      	lsls	r3, r3, #8
 800dbf2:	68fa      	ldr	r2, [r7, #12]
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	031b      	lsls	r3, r3, #12
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4a19      	ldr	r2, [pc, #100]	; (800dc74 <TIM_OC4_SetConfig+0xc0>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d00f      	beq.n	800dc34 <TIM_OC4_SetConfig+0x80>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4a18      	ldr	r2, [pc, #96]	; (800dc78 <TIM_OC4_SetConfig+0xc4>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d00b      	beq.n	800dc34 <TIM_OC4_SetConfig+0x80>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4a17      	ldr	r2, [pc, #92]	; (800dc7c <TIM_OC4_SetConfig+0xc8>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d007      	beq.n	800dc34 <TIM_OC4_SetConfig+0x80>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a16      	ldr	r2, [pc, #88]	; (800dc80 <TIM_OC4_SetConfig+0xcc>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d003      	beq.n	800dc34 <TIM_OC4_SetConfig+0x80>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4a15      	ldr	r2, [pc, #84]	; (800dc84 <TIM_OC4_SetConfig+0xd0>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d109      	bne.n	800dc48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	695b      	ldr	r3, [r3, #20]
 800dc40:	019b      	lsls	r3, r3, #6
 800dc42:	697a      	ldr	r2, [r7, #20]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	685a      	ldr	r2, [r3, #4]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	693a      	ldr	r2, [r7, #16]
 800dc60:	621a      	str	r2, [r3, #32]
}
 800dc62:	bf00      	nop
 800dc64:	371c      	adds	r7, #28
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	feff8fff 	.word	0xfeff8fff
 800dc74:	40010000 	.word	0x40010000
 800dc78:	40010400 	.word	0x40010400
 800dc7c:	40014000 	.word	0x40014000
 800dc80:	40014400 	.word	0x40014400
 800dc84:	40014800 	.word	0x40014800

0800dc88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b087      	sub	sp, #28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a1b      	ldr	r3, [r3, #32]
 800dc96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	4b21      	ldr	r3, [pc, #132]	; (800dd38 <TIM_OC5_SetConfig+0xb0>)
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dcc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	041b      	lsls	r3, r3, #16
 800dcd0:	693a      	ldr	r2, [r7, #16]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a18      	ldr	r2, [pc, #96]	; (800dd3c <TIM_OC5_SetConfig+0xb4>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d00f      	beq.n	800dcfe <TIM_OC5_SetConfig+0x76>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a17      	ldr	r2, [pc, #92]	; (800dd40 <TIM_OC5_SetConfig+0xb8>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d00b      	beq.n	800dcfe <TIM_OC5_SetConfig+0x76>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4a16      	ldr	r2, [pc, #88]	; (800dd44 <TIM_OC5_SetConfig+0xbc>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d007      	beq.n	800dcfe <TIM_OC5_SetConfig+0x76>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a15      	ldr	r2, [pc, #84]	; (800dd48 <TIM_OC5_SetConfig+0xc0>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d003      	beq.n	800dcfe <TIM_OC5_SetConfig+0x76>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4a14      	ldr	r2, [pc, #80]	; (800dd4c <TIM_OC5_SetConfig+0xc4>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d109      	bne.n	800dd12 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	021b      	lsls	r3, r3, #8
 800dd0c:	697a      	ldr	r2, [r7, #20]
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	685a      	ldr	r2, [r3, #4]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	693a      	ldr	r2, [r7, #16]
 800dd2a:	621a      	str	r2, [r3, #32]
}
 800dd2c:	bf00      	nop
 800dd2e:	371c      	adds	r7, #28
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr
 800dd38:	fffeff8f 	.word	0xfffeff8f
 800dd3c:	40010000 	.word	0x40010000
 800dd40:	40010400 	.word	0x40010400
 800dd44:	40014000 	.word	0x40014000
 800dd48:	40014400 	.word	0x40014400
 800dd4c:	40014800 	.word	0x40014800

0800dd50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b087      	sub	sp, #28
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6a1b      	ldr	r3, [r3, #32]
 800dd5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	4b22      	ldr	r3, [pc, #136]	; (800de04 <TIM_OC6_SetConfig+0xb4>)
 800dd7c:	4013      	ands	r3, r2
 800dd7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	021b      	lsls	r3, r3, #8
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	051b      	lsls	r3, r3, #20
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a19      	ldr	r2, [pc, #100]	; (800de08 <TIM_OC6_SetConfig+0xb8>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d00f      	beq.n	800ddc8 <TIM_OC6_SetConfig+0x78>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4a18      	ldr	r2, [pc, #96]	; (800de0c <TIM_OC6_SetConfig+0xbc>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d00b      	beq.n	800ddc8 <TIM_OC6_SetConfig+0x78>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4a17      	ldr	r2, [pc, #92]	; (800de10 <TIM_OC6_SetConfig+0xc0>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d007      	beq.n	800ddc8 <TIM_OC6_SetConfig+0x78>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4a16      	ldr	r2, [pc, #88]	; (800de14 <TIM_OC6_SetConfig+0xc4>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d003      	beq.n	800ddc8 <TIM_OC6_SetConfig+0x78>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	4a15      	ldr	r2, [pc, #84]	; (800de18 <TIM_OC6_SetConfig+0xc8>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d109      	bne.n	800dddc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ddce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	695b      	ldr	r3, [r3, #20]
 800ddd4:	029b      	lsls	r3, r3, #10
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	697a      	ldr	r2, [r7, #20]
 800dde0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	685a      	ldr	r2, [r3, #4]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	693a      	ldr	r2, [r7, #16]
 800ddf4:	621a      	str	r2, [r3, #32]
}
 800ddf6:	bf00      	nop
 800ddf8:	371c      	adds	r7, #28
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	feff8fff 	.word	0xfeff8fff
 800de08:	40010000 	.word	0x40010000
 800de0c:	40010400 	.word	0x40010400
 800de10:	40014000 	.word	0x40014000
 800de14:	40014400 	.word	0x40014400
 800de18:	40014800 	.word	0x40014800

0800de1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b087      	sub	sp, #28
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6a1b      	ldr	r3, [r3, #32]
 800de2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6a1b      	ldr	r3, [r3, #32]
 800de32:	f023 0201 	bic.w	r2, r3, #1
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	699b      	ldr	r3, [r3, #24]
 800de3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800de46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	011b      	lsls	r3, r3, #4
 800de4c:	693a      	ldr	r2, [r7, #16]
 800de4e:	4313      	orrs	r3, r2
 800de50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	f023 030a 	bic.w	r3, r3, #10
 800de58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	4313      	orrs	r3, r2
 800de60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	693a      	ldr	r2, [r7, #16]
 800de66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	621a      	str	r2, [r3, #32]
}
 800de6e:	bf00      	nop
 800de70:	371c      	adds	r7, #28
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr

0800de7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de7a:	b480      	push	{r7}
 800de7c:	b087      	sub	sp, #28
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6a1b      	ldr	r3, [r3, #32]
 800de8a:	f023 0210 	bic.w	r2, r3, #16
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	031b      	lsls	r3, r3, #12
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	4313      	orrs	r3, r2
 800deae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800deb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	011b      	lsls	r3, r3, #4
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	4313      	orrs	r3, r2
 800dec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	697a      	ldr	r2, [r7, #20]
 800dec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	693a      	ldr	r2, [r7, #16]
 800decc:	621a      	str	r2, [r3, #32]
}
 800dece:	bf00      	nop
 800ded0:	371c      	adds	r7, #28
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
	...

0800dedc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	4b09      	ldr	r3, [pc, #36]	; (800df14 <TIM_ITRx_SetConfig+0x38>)
 800def0:	4013      	ands	r3, r2
 800def2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800def4:	683a      	ldr	r2, [r7, #0]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	4313      	orrs	r3, r2
 800defa:	f043 0307 	orr.w	r3, r3, #7
 800defe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	609a      	str	r2, [r3, #8]
}
 800df06:	bf00      	nop
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	ffcfff8f 	.word	0xffcfff8f

0800df18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df18:	b480      	push	{r7}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
 800df24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	689b      	ldr	r3, [r3, #8]
 800df2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	021a      	lsls	r2, r3, #8
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	431a      	orrs	r2, r3
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	4313      	orrs	r3, r2
 800df40:	697a      	ldr	r2, [r7, #20]
 800df42:	4313      	orrs	r3, r2
 800df44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	609a      	str	r2, [r3, #8]
}
 800df4c:	bf00      	nop
 800df4e:	371c      	adds	r7, #28
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800df58:	b480      	push	{r7}
 800df5a:	b087      	sub	sp, #28
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	f003 031f 	and.w	r3, r3, #31
 800df6a:	2201      	movs	r2, #1
 800df6c:	fa02 f303 	lsl.w	r3, r2, r3
 800df70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6a1a      	ldr	r2, [r3, #32]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	43db      	mvns	r3, r3
 800df7a:	401a      	ands	r2, r3
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6a1a      	ldr	r2, [r3, #32]
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	f003 031f 	and.w	r3, r3, #31
 800df8a:	6879      	ldr	r1, [r7, #4]
 800df8c:	fa01 f303 	lsl.w	r3, r1, r3
 800df90:	431a      	orrs	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	621a      	str	r2, [r3, #32]
}
 800df96:	bf00      	nop
 800df98:	371c      	adds	r7, #28
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
	...

0800dfa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d101      	bne.n	800dfbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dfb8:	2302      	movs	r3, #2
 800dfba:	e06d      	b.n	800e098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2202      	movs	r2, #2
 800dfc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	689b      	ldr	r3, [r3, #8]
 800dfda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a30      	ldr	r2, [pc, #192]	; (800e0a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d004      	beq.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a2f      	ldr	r2, [pc, #188]	; (800e0a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d108      	bne.n	800e002 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dff6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	4313      	orrs	r3, r2
 800e000:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e008:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	4313      	orrs	r3, r2
 800e012:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a20      	ldr	r2, [pc, #128]	; (800e0a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d022      	beq.n	800e06c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e02e:	d01d      	beq.n	800e06c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a1d      	ldr	r2, [pc, #116]	; (800e0ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d018      	beq.n	800e06c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4a1c      	ldr	r2, [pc, #112]	; (800e0b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d013      	beq.n	800e06c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4a1a      	ldr	r2, [pc, #104]	; (800e0b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d00e      	beq.n	800e06c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a15      	ldr	r2, [pc, #84]	; (800e0a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d009      	beq.n	800e06c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a16      	ldr	r2, [pc, #88]	; (800e0b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d004      	beq.n	800e06c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a15      	ldr	r2, [pc, #84]	; (800e0bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d10c      	bne.n	800e086 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68ba      	ldr	r2, [r7, #8]
 800e084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2201      	movs	r2, #1
 800e08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3714      	adds	r7, #20
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	40010000 	.word	0x40010000
 800e0a8:	40010400 	.word	0x40010400
 800e0ac:	40000400 	.word	0x40000400
 800e0b0:	40000800 	.word	0x40000800
 800e0b4:	40000c00 	.word	0x40000c00
 800e0b8:	40001800 	.word	0x40001800
 800e0bc:	40014000 	.word	0x40014000

0800e0c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b085      	sub	sp, #20
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d101      	bne.n	800e0dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e0d8:	2302      	movs	r3, #2
 800e0da:	e065      	b.n	800e1a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	4313      	orrs	r3, r2
 800e10c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4313      	orrs	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	691b      	ldr	r3, [r3, #16]
 800e126:	4313      	orrs	r3, r2
 800e128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	4313      	orrs	r3, r2
 800e136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e142:	4313      	orrs	r3, r2
 800e144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	041b      	lsls	r3, r3, #16
 800e152:	4313      	orrs	r3, r2
 800e154:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a16      	ldr	r2, [pc, #88]	; (800e1b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d004      	beq.n	800e16a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a14      	ldr	r2, [pc, #80]	; (800e1b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d115      	bne.n	800e196 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e174:	051b      	lsls	r3, r3, #20
 800e176:	4313      	orrs	r3, r2
 800e178:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	69db      	ldr	r3, [r3, #28]
 800e184:	4313      	orrs	r3, r2
 800e186:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	6a1b      	ldr	r3, [r3, #32]
 800e192:	4313      	orrs	r3, r2
 800e194:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3714      	adds	r7, #20
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr
 800e1b4:	40010000 	.word	0x40010000
 800e1b8:	40010400 	.word	0x40010400

0800e1bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e1d8:	bf00      	nop
 800e1da:	370c      	adds	r7, #12
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e1ec:	bf00      	nop
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e206:	2301      	movs	r3, #1
 800e208:	e042      	b.n	800e290 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e210:	2b00      	cmp	r3, #0
 800e212:	d106      	bne.n	800e222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f7f5 fe93 	bl	8003f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2224      	movs	r2, #36	; 0x24
 800e226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f022 0201 	bic.w	r2, r2, #1
 800e238:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 fce0 	bl	800ec00 <UART_SetConfig>
 800e240:	4603      	mov	r3, r0
 800e242:	2b01      	cmp	r3, #1
 800e244:	d101      	bne.n	800e24a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e246:	2301      	movs	r3, #1
 800e248:	e022      	b.n	800e290 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d002      	beq.n	800e258 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f001 fa34 	bl	800f6c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	685a      	ldr	r2, [r3, #4]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	689a      	ldr	r2, [r3, #8]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f042 0201 	orr.w	r2, r2, #1
 800e286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f001 fabb 	bl	800f804 <UART_CheckIdleState>
 800e28e:	4603      	mov	r3, r0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b08a      	sub	sp, #40	; 0x28
 800e29c:	af02      	add	r7, sp, #8
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	603b      	str	r3, [r7, #0]
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2ae:	2b20      	cmp	r3, #32
 800e2b0:	f040 8083 	bne.w	800e3ba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <HAL_UART_Transmit+0x28>
 800e2ba:	88fb      	ldrh	r3, [r7, #6]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d101      	bne.n	800e2c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e07b      	b.n	800e3bc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d101      	bne.n	800e2d2 <HAL_UART_Transmit+0x3a>
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	e074      	b.n	800e3bc <HAL_UART_Transmit+0x124>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2221      	movs	r2, #33	; 0x21
 800e2e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e2ea:	f7f6 f9a9 	bl	8004640 <HAL_GetTick>
 800e2ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	88fa      	ldrh	r2, [r7, #6]
 800e2f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	88fa      	ldrh	r2, [r7, #6]
 800e2fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e308:	d108      	bne.n	800e31c <HAL_UART_Transmit+0x84>
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	691b      	ldr	r3, [r3, #16]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d104      	bne.n	800e31c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e312:	2300      	movs	r3, #0
 800e314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	61bb      	str	r3, [r7, #24]
 800e31a:	e003      	b.n	800e324 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e320:	2300      	movs	r3, #0
 800e322:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e32c:	e02c      	b.n	800e388 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	9300      	str	r3, [sp, #0]
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	2200      	movs	r2, #0
 800e336:	2180      	movs	r1, #128	; 0x80
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f001 faae 	bl	800f89a <UART_WaitOnFlagUntilTimeout>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d001      	beq.n	800e348 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e344:	2303      	movs	r3, #3
 800e346:	e039      	b.n	800e3bc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10b      	bne.n	800e366 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	461a      	mov	r2, r3
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e35c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	3302      	adds	r3, #2
 800e362:	61bb      	str	r3, [r7, #24]
 800e364:	e007      	b.n	800e376 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	781a      	ldrb	r2, [r3, #0]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	3301      	adds	r3, #1
 800e374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3b01      	subs	r3, #1
 800e380:	b29a      	uxth	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e38e:	b29b      	uxth	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1cc      	bne.n	800e32e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	2200      	movs	r2, #0
 800e39c:	2140      	movs	r1, #64	; 0x40
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f001 fa7b 	bl	800f89a <UART_WaitOnFlagUntilTimeout>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	e006      	b.n	800e3bc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2220      	movs	r2, #32
 800e3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	e000      	b.n	800e3bc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e3ba:	2302      	movs	r3, #2
  }
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3720      	adds	r7, #32
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b08a      	sub	sp, #40	; 0x28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3d8:	2b20      	cmp	r3, #32
 800e3da:	d142      	bne.n	800e462 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d002      	beq.n	800e3e8 <HAL_UART_Receive_DMA+0x24>
 800e3e2:	88fb      	ldrh	r3, [r7, #6]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d101      	bne.n	800e3ec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e03b      	b.n	800e464 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d101      	bne.n	800e3fa <HAL_UART_Receive_DMA+0x36>
 800e3f6:	2302      	movs	r3, #2
 800e3f8:	e034      	b.n	800e464 <HAL_UART_Receive_DMA+0xa0>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4a17      	ldr	r2, [pc, #92]	; (800e46c <HAL_UART_Receive_DMA+0xa8>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d01f      	beq.n	800e452 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d018      	beq.n	800e452 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	e853 3f00 	ldrex	r3, [r3]
 800e42c:	613b      	str	r3, [r7, #16]
   return(result);
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e434:	627b      	str	r3, [r7, #36]	; 0x24
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	461a      	mov	r2, r3
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43e:	623b      	str	r3, [r7, #32]
 800e440:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e442:	69f9      	ldr	r1, [r7, #28]
 800e444:	6a3a      	ldr	r2, [r7, #32]
 800e446:	e841 2300 	strex	r3, r2, [r1]
 800e44a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1e6      	bne.n	800e420 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e452:	88fb      	ldrh	r3, [r7, #6]
 800e454:	461a      	mov	r2, r3
 800e456:	68b9      	ldr	r1, [r7, #8]
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f001 fae7 	bl	800fa2c <UART_Start_Receive_DMA>
 800e45e:	4603      	mov	r3, r0
 800e460:	e000      	b.n	800e464 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e462:	2302      	movs	r3, #2
  }
}
 800e464:	4618      	mov	r0, r3
 800e466:	3728      	adds	r7, #40	; 0x28
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	58000c00 	.word	0x58000c00

0800e470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b0ba      	sub	sp, #232	; 0xe8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	69db      	ldr	r3, [r3, #28]
 800e47e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e49a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e49e:	4013      	ands	r3, r2
 800e4a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e4a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d11b      	bne.n	800e4e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4b0:	f003 0320 	and.w	r3, r3, #32
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d015      	beq.n	800e4e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4bc:	f003 0320 	and.w	r3, r3, #32
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d105      	bne.n	800e4d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e4c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d009      	beq.n	800e4e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 835a 	beq.w	800eb8e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	4798      	blx	r3
      }
      return;
 800e4e2:	e354      	b.n	800eb8e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e4e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	f000 811f 	beq.w	800e72c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e4ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e4f2:	4b8b      	ldr	r3, [pc, #556]	; (800e720 <HAL_UART_IRQHandler+0x2b0>)
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d106      	bne.n	800e508 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e4fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e4fe:	4b89      	ldr	r3, [pc, #548]	; (800e724 <HAL_UART_IRQHandler+0x2b4>)
 800e500:	4013      	ands	r3, r2
 800e502:	2b00      	cmp	r3, #0
 800e504:	f000 8112 	beq.w	800e72c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	2b00      	cmp	r3, #0
 800e512:	d011      	beq.n	800e538 <HAL_UART_IRQHandler+0xc8>
 800e514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d00b      	beq.n	800e538 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2201      	movs	r2, #1
 800e526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e52e:	f043 0201 	orr.w	r2, r3, #1
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e53c:	f003 0302 	and.w	r3, r3, #2
 800e540:	2b00      	cmp	r3, #0
 800e542:	d011      	beq.n	800e568 <HAL_UART_IRQHandler+0xf8>
 800e544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00b      	beq.n	800e568 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2202      	movs	r2, #2
 800e556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e55e:	f043 0204 	orr.w	r2, r3, #4
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e56c:	f003 0304 	and.w	r3, r3, #4
 800e570:	2b00      	cmp	r3, #0
 800e572:	d011      	beq.n	800e598 <HAL_UART_IRQHandler+0x128>
 800e574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e578:	f003 0301 	and.w	r3, r3, #1
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00b      	beq.n	800e598 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2204      	movs	r2, #4
 800e586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e58e:	f043 0202 	orr.w	r2, r3, #2
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e59c:	f003 0308 	and.w	r3, r3, #8
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d017      	beq.n	800e5d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e5a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5a8:	f003 0320 	and.w	r3, r3, #32
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d105      	bne.n	800e5bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e5b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e5b4:	4b5a      	ldr	r3, [pc, #360]	; (800e720 <HAL_UART_IRQHandler+0x2b0>)
 800e5b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00b      	beq.n	800e5d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2208      	movs	r2, #8
 800e5c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5ca:	f043 0208 	orr.w	r2, r3, #8
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d012      	beq.n	800e606 <HAL_UART_IRQHandler+0x196>
 800e5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00c      	beq.n	800e606 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5fc:	f043 0220 	orr.w	r2, r3, #32
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f000 82c0 	beq.w	800eb92 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e616:	f003 0320 	and.w	r3, r3, #32
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d013      	beq.n	800e646 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e61e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e622:	f003 0320 	and.w	r3, r3, #32
 800e626:	2b00      	cmp	r3, #0
 800e628:	d105      	bne.n	800e636 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e62a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e62e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e632:	2b00      	cmp	r3, #0
 800e634:	d007      	beq.n	800e646 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d003      	beq.n	800e646 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e64c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e65a:	2b40      	cmp	r3, #64	; 0x40
 800e65c:	d005      	beq.n	800e66a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e65e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e662:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e666:	2b00      	cmp	r3, #0
 800e668:	d04f      	beq.n	800e70a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f001 fac8 	bl	800fc00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e67a:	2b40      	cmp	r3, #64	; 0x40
 800e67c:	d141      	bne.n	800e702 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	3308      	adds	r3, #8
 800e684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e68c:	e853 3f00 	ldrex	r3, [r3]
 800e690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e69c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	3308      	adds	r3, #8
 800e6a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e6aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e6ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e6b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e6ba:	e841 2300 	strex	r3, r2, [r1]
 800e6be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e6c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1d9      	bne.n	800e67e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d013      	beq.n	800e6fa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6d6:	4a14      	ldr	r2, [pc, #80]	; (800e728 <HAL_UART_IRQHandler+0x2b8>)
 800e6d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7f8 f98e 	bl	8006a00 <HAL_DMA_Abort_IT>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d017      	beq.n	800e71a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e6f4:	4610      	mov	r0, r2
 800e6f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6f8:	e00f      	b.n	800e71a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 fa6a 	bl	800ebd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e700:	e00b      	b.n	800e71a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 fa66 	bl	800ebd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e708:	e007      	b.n	800e71a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 fa62 	bl	800ebd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e718:	e23b      	b.n	800eb92 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e71a:	bf00      	nop
    return;
 800e71c:	e239      	b.n	800eb92 <HAL_UART_IRQHandler+0x722>
 800e71e:	bf00      	nop
 800e720:	10000001 	.word	0x10000001
 800e724:	04000120 	.word	0x04000120
 800e728:	0800fea7 	.word	0x0800fea7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e730:	2b01      	cmp	r3, #1
 800e732:	f040 81ce 	bne.w	800ead2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e73a:	f003 0310 	and.w	r3, r3, #16
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f000 81c7 	beq.w	800ead2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e748:	f003 0310 	and.w	r3, r3, #16
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f000 81c0 	beq.w	800ead2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2210      	movs	r2, #16
 800e758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e764:	2b40      	cmp	r3, #64	; 0x40
 800e766:	f040 813b 	bne.w	800e9e0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a8b      	ldr	r2, [pc, #556]	; (800e9a0 <HAL_UART_IRQHandler+0x530>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d059      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a89      	ldr	r2, [pc, #548]	; (800e9a4 <HAL_UART_IRQHandler+0x534>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d053      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a87      	ldr	r2, [pc, #540]	; (800e9a8 <HAL_UART_IRQHandler+0x538>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d04d      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a85      	ldr	r2, [pc, #532]	; (800e9ac <HAL_UART_IRQHandler+0x53c>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d047      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a83      	ldr	r2, [pc, #524]	; (800e9b0 <HAL_UART_IRQHandler+0x540>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d041      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a81      	ldr	r2, [pc, #516]	; (800e9b4 <HAL_UART_IRQHandler+0x544>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d03b      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a7f      	ldr	r2, [pc, #508]	; (800e9b8 <HAL_UART_IRQHandler+0x548>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d035      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a7d      	ldr	r2, [pc, #500]	; (800e9bc <HAL_UART_IRQHandler+0x54c>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d02f      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4a7b      	ldr	r2, [pc, #492]	; (800e9c0 <HAL_UART_IRQHandler+0x550>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d029      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a79      	ldr	r2, [pc, #484]	; (800e9c4 <HAL_UART_IRQHandler+0x554>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d023      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a77      	ldr	r2, [pc, #476]	; (800e9c8 <HAL_UART_IRQHandler+0x558>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d01d      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a75      	ldr	r2, [pc, #468]	; (800e9cc <HAL_UART_IRQHandler+0x55c>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d017      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4a73      	ldr	r2, [pc, #460]	; (800e9d0 <HAL_UART_IRQHandler+0x560>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d011      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a71      	ldr	r2, [pc, #452]	; (800e9d4 <HAL_UART_IRQHandler+0x564>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d00b      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a6f      	ldr	r2, [pc, #444]	; (800e9d8 <HAL_UART_IRQHandler+0x568>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d005      	beq.n	800e82a <HAL_UART_IRQHandler+0x3ba>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a6d      	ldr	r2, [pc, #436]	; (800e9dc <HAL_UART_IRQHandler+0x56c>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d105      	bne.n	800e836 <HAL_UART_IRQHandler+0x3c6>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	b29b      	uxth	r3, r3
 800e834:	e004      	b.n	800e840 <HAL_UART_IRQHandler+0x3d0>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	b29b      	uxth	r3, r3
 800e840:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e844:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e848:	2b00      	cmp	r3, #0
 800e84a:	f000 81a4 	beq.w	800eb96 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e854:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e858:	429a      	cmp	r2, r3
 800e85a:	f080 819c 	bcs.w	800eb96 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e864:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e86c:	69db      	ldr	r3, [r3, #28]
 800e86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e872:	f000 8086 	beq.w	800e982 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e882:	e853 3f00 	ldrex	r3, [r3]
 800e886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e88a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e88e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e892:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	461a      	mov	r2, r3
 800e89c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e8a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e8a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e8ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e8b0:	e841 2300 	strex	r3, r2, [r1]
 800e8b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e8b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1da      	bne.n	800e876 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3308      	adds	r3, #8
 800e8c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8ca:	e853 3f00 	ldrex	r3, [r3]
 800e8ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e8d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8d2:	f023 0301 	bic.w	r3, r3, #1
 800e8d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e8e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e8e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e8ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e8f0:	e841 2300 	strex	r3, r2, [r1]
 800e8f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e8f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1e1      	bne.n	800e8c0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	3308      	adds	r3, #8
 800e902:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e906:	e853 3f00 	ldrex	r3, [r3]
 800e90a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e90c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e90e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	3308      	adds	r3, #8
 800e91c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e920:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e922:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e924:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e926:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e928:	e841 2300 	strex	r3, r2, [r1]
 800e92c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e92e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1e3      	bne.n	800e8fc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2220      	movs	r2, #32
 800e938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2200      	movs	r2, #0
 800e940:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e94a:	e853 3f00 	ldrex	r3, [r3]
 800e94e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e952:	f023 0310 	bic.w	r3, r3, #16
 800e956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	461a      	mov	r2, r3
 800e960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e964:	65bb      	str	r3, [r7, #88]	; 0x58
 800e966:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e96a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e96c:	e841 2300 	strex	r3, r2, [r1]
 800e970:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1e4      	bne.n	800e942 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7f7 fd21 	bl	80063c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e98e:	b29b      	uxth	r3, r3
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	b29b      	uxth	r3, r3
 800e994:	4619      	mov	r1, r3
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 f926 	bl	800ebe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e99c:	e0fb      	b.n	800eb96 <HAL_UART_IRQHandler+0x726>
 800e99e:	bf00      	nop
 800e9a0:	40020010 	.word	0x40020010
 800e9a4:	40020028 	.word	0x40020028
 800e9a8:	40020040 	.word	0x40020040
 800e9ac:	40020058 	.word	0x40020058
 800e9b0:	40020070 	.word	0x40020070
 800e9b4:	40020088 	.word	0x40020088
 800e9b8:	400200a0 	.word	0x400200a0
 800e9bc:	400200b8 	.word	0x400200b8
 800e9c0:	40020410 	.word	0x40020410
 800e9c4:	40020428 	.word	0x40020428
 800e9c8:	40020440 	.word	0x40020440
 800e9cc:	40020458 	.word	0x40020458
 800e9d0:	40020470 	.word	0x40020470
 800e9d4:	40020488 	.word	0x40020488
 800e9d8:	400204a0 	.word	0x400204a0
 800e9dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	1ad3      	subs	r3, r2, r3
 800e9f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f000 80cc 	beq.w	800eb9a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ea02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	f000 80c7 	beq.w	800eb9a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea14:	e853 3f00 	ldrex	r3, [r3]
 800ea18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	461a      	mov	r2, r3
 800ea2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ea30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea36:	e841 2300 	strex	r3, r2, [r1]
 800ea3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1e4      	bne.n	800ea0c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	3308      	adds	r3, #8
 800ea48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4c:	e853 3f00 	ldrex	r3, [r3]
 800ea50:	623b      	str	r3, [r7, #32]
   return(result);
 800ea52:	6a3a      	ldr	r2, [r7, #32]
 800ea54:	4b54      	ldr	r3, [pc, #336]	; (800eba8 <HAL_UART_IRQHandler+0x738>)
 800ea56:	4013      	ands	r3, r2
 800ea58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	3308      	adds	r3, #8
 800ea62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea66:	633a      	str	r2, [r7, #48]	; 0x30
 800ea68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea6e:	e841 2300 	strex	r3, r2, [r1]
 800ea72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1e3      	bne.n	800ea42 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2220      	movs	r2, #32
 800ea7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	e853 3f00 	ldrex	r3, [r3]
 800ea9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f023 0310 	bic.w	r3, r3, #16
 800eaa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eab0:	61fb      	str	r3, [r7, #28]
 800eab2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab4:	69b9      	ldr	r1, [r7, #24]
 800eab6:	69fa      	ldr	r2, [r7, #28]
 800eab8:	e841 2300 	strex	r3, r2, [r1]
 800eabc:	617b      	str	r3, [r7, #20]
   return(result);
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1e4      	bne.n	800ea8e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f88c 	bl	800ebe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ead0:	e063      	b.n	800eb9a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ead2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ead6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00e      	beq.n	800eafc <HAL_UART_IRQHandler+0x68c>
 800eade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d008      	beq.n	800eafc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eaf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f001 fa17 	bl	800ff28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eafa:	e051      	b.n	800eba0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d014      	beq.n	800eb32 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d105      	bne.n	800eb20 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eb14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d008      	beq.n	800eb32 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d03a      	beq.n	800eb9e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	4798      	blx	r3
    }
    return;
 800eb30:	e035      	b.n	800eb9e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d009      	beq.n	800eb52 <HAL_UART_IRQHandler+0x6e2>
 800eb3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d003      	beq.n	800eb52 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f001 f9c1 	bl	800fed2 <UART_EndTransmit_IT>
    return;
 800eb50:	e026      	b.n	800eba0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eb52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d009      	beq.n	800eb72 <HAL_UART_IRQHandler+0x702>
 800eb5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d003      	beq.n	800eb72 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f001 f9f0 	bl	800ff50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb70:	e016      	b.n	800eba0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eb72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d010      	beq.n	800eba0 <HAL_UART_IRQHandler+0x730>
 800eb7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	da0c      	bge.n	800eba0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f001 f9d8 	bl	800ff3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb8c:	e008      	b.n	800eba0 <HAL_UART_IRQHandler+0x730>
      return;
 800eb8e:	bf00      	nop
 800eb90:	e006      	b.n	800eba0 <HAL_UART_IRQHandler+0x730>
    return;
 800eb92:	bf00      	nop
 800eb94:	e004      	b.n	800eba0 <HAL_UART_IRQHandler+0x730>
      return;
 800eb96:	bf00      	nop
 800eb98:	e002      	b.n	800eba0 <HAL_UART_IRQHandler+0x730>
      return;
 800eb9a:	bf00      	nop
 800eb9c:	e000      	b.n	800eba0 <HAL_UART_IRQHandler+0x730>
    return;
 800eb9e:	bf00      	nop
  }
}
 800eba0:	37e8      	adds	r7, #232	; 0xe8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	effffffe 	.word	0xeffffffe

0800ebac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ebdc:	bf00      	nop
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ebf4:	bf00      	nop
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec00:	b5b0      	push	{r4, r5, r7, lr}
 800ec02:	b08e      	sub	sp, #56	; 0x38
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	689a      	ldr	r2, [r3, #8]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	431a      	orrs	r2, r3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	695b      	ldr	r3, [r3, #20]
 800ec1c:	431a      	orrs	r2, r3
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	69db      	ldr	r3, [r3, #28]
 800ec22:	4313      	orrs	r3, r2
 800ec24:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	4bbf      	ldr	r3, [pc, #764]	; (800ef2c <UART_SetConfig+0x32c>)
 800ec2e:	4013      	ands	r3, r2
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	6812      	ldr	r2, [r2, #0]
 800ec34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec36:	430b      	orrs	r3, r1
 800ec38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	68da      	ldr	r2, [r3, #12]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	430a      	orrs	r2, r1
 800ec4e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	699b      	ldr	r3, [r3, #24]
 800ec54:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4ab5      	ldr	r2, [pc, #724]	; (800ef30 <UART_SetConfig+0x330>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d004      	beq.n	800ec6a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6a1b      	ldr	r3, [r3, #32]
 800ec64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec66:	4313      	orrs	r3, r2
 800ec68:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	689a      	ldr	r2, [r3, #8]
 800ec70:	4bb0      	ldr	r3, [pc, #704]	; (800ef34 <UART_SetConfig+0x334>)
 800ec72:	4013      	ands	r3, r2
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	6812      	ldr	r2, [r2, #0]
 800ec78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec7a:	430b      	orrs	r3, r1
 800ec7c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec84:	f023 010f 	bic.w	r1, r3, #15
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	430a      	orrs	r2, r1
 800ec92:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4aa7      	ldr	r2, [pc, #668]	; (800ef38 <UART_SetConfig+0x338>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d176      	bne.n	800ed8c <UART_SetConfig+0x18c>
 800ec9e:	4ba7      	ldr	r3, [pc, #668]	; (800ef3c <UART_SetConfig+0x33c>)
 800eca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eca6:	2b28      	cmp	r3, #40	; 0x28
 800eca8:	d86c      	bhi.n	800ed84 <UART_SetConfig+0x184>
 800ecaa:	a201      	add	r2, pc, #4	; (adr r2, 800ecb0 <UART_SetConfig+0xb0>)
 800ecac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb0:	0800ed55 	.word	0x0800ed55
 800ecb4:	0800ed85 	.word	0x0800ed85
 800ecb8:	0800ed85 	.word	0x0800ed85
 800ecbc:	0800ed85 	.word	0x0800ed85
 800ecc0:	0800ed85 	.word	0x0800ed85
 800ecc4:	0800ed85 	.word	0x0800ed85
 800ecc8:	0800ed85 	.word	0x0800ed85
 800eccc:	0800ed85 	.word	0x0800ed85
 800ecd0:	0800ed5d 	.word	0x0800ed5d
 800ecd4:	0800ed85 	.word	0x0800ed85
 800ecd8:	0800ed85 	.word	0x0800ed85
 800ecdc:	0800ed85 	.word	0x0800ed85
 800ece0:	0800ed85 	.word	0x0800ed85
 800ece4:	0800ed85 	.word	0x0800ed85
 800ece8:	0800ed85 	.word	0x0800ed85
 800ecec:	0800ed85 	.word	0x0800ed85
 800ecf0:	0800ed65 	.word	0x0800ed65
 800ecf4:	0800ed85 	.word	0x0800ed85
 800ecf8:	0800ed85 	.word	0x0800ed85
 800ecfc:	0800ed85 	.word	0x0800ed85
 800ed00:	0800ed85 	.word	0x0800ed85
 800ed04:	0800ed85 	.word	0x0800ed85
 800ed08:	0800ed85 	.word	0x0800ed85
 800ed0c:	0800ed85 	.word	0x0800ed85
 800ed10:	0800ed6d 	.word	0x0800ed6d
 800ed14:	0800ed85 	.word	0x0800ed85
 800ed18:	0800ed85 	.word	0x0800ed85
 800ed1c:	0800ed85 	.word	0x0800ed85
 800ed20:	0800ed85 	.word	0x0800ed85
 800ed24:	0800ed85 	.word	0x0800ed85
 800ed28:	0800ed85 	.word	0x0800ed85
 800ed2c:	0800ed85 	.word	0x0800ed85
 800ed30:	0800ed75 	.word	0x0800ed75
 800ed34:	0800ed85 	.word	0x0800ed85
 800ed38:	0800ed85 	.word	0x0800ed85
 800ed3c:	0800ed85 	.word	0x0800ed85
 800ed40:	0800ed85 	.word	0x0800ed85
 800ed44:	0800ed85 	.word	0x0800ed85
 800ed48:	0800ed85 	.word	0x0800ed85
 800ed4c:	0800ed85 	.word	0x0800ed85
 800ed50:	0800ed7d 	.word	0x0800ed7d
 800ed54:	2301      	movs	r3, #1
 800ed56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed5a:	e222      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ed5c:	2304      	movs	r3, #4
 800ed5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed62:	e21e      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ed64:	2308      	movs	r3, #8
 800ed66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed6a:	e21a      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ed6c:	2310      	movs	r3, #16
 800ed6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed72:	e216      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ed74:	2320      	movs	r3, #32
 800ed76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed7a:	e212      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ed7c:	2340      	movs	r3, #64	; 0x40
 800ed7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed82:	e20e      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ed84:	2380      	movs	r3, #128	; 0x80
 800ed86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed8a:	e20a      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a6b      	ldr	r2, [pc, #428]	; (800ef40 <UART_SetConfig+0x340>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d130      	bne.n	800edf8 <UART_SetConfig+0x1f8>
 800ed96:	4b69      	ldr	r3, [pc, #420]	; (800ef3c <UART_SetConfig+0x33c>)
 800ed98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed9a:	f003 0307 	and.w	r3, r3, #7
 800ed9e:	2b05      	cmp	r3, #5
 800eda0:	d826      	bhi.n	800edf0 <UART_SetConfig+0x1f0>
 800eda2:	a201      	add	r2, pc, #4	; (adr r2, 800eda8 <UART_SetConfig+0x1a8>)
 800eda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda8:	0800edc1 	.word	0x0800edc1
 800edac:	0800edc9 	.word	0x0800edc9
 800edb0:	0800edd1 	.word	0x0800edd1
 800edb4:	0800edd9 	.word	0x0800edd9
 800edb8:	0800ede1 	.word	0x0800ede1
 800edbc:	0800ede9 	.word	0x0800ede9
 800edc0:	2300      	movs	r3, #0
 800edc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edc6:	e1ec      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800edc8:	2304      	movs	r3, #4
 800edca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edce:	e1e8      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800edd0:	2308      	movs	r3, #8
 800edd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edd6:	e1e4      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800edd8:	2310      	movs	r3, #16
 800edda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edde:	e1e0      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ede0:	2320      	movs	r3, #32
 800ede2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ede6:	e1dc      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ede8:	2340      	movs	r3, #64	; 0x40
 800edea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edee:	e1d8      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800edf0:	2380      	movs	r3, #128	; 0x80
 800edf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edf6:	e1d4      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4a51      	ldr	r2, [pc, #324]	; (800ef44 <UART_SetConfig+0x344>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d130      	bne.n	800ee64 <UART_SetConfig+0x264>
 800ee02:	4b4e      	ldr	r3, [pc, #312]	; (800ef3c <UART_SetConfig+0x33c>)
 800ee04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee06:	f003 0307 	and.w	r3, r3, #7
 800ee0a:	2b05      	cmp	r3, #5
 800ee0c:	d826      	bhi.n	800ee5c <UART_SetConfig+0x25c>
 800ee0e:	a201      	add	r2, pc, #4	; (adr r2, 800ee14 <UART_SetConfig+0x214>)
 800ee10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee14:	0800ee2d 	.word	0x0800ee2d
 800ee18:	0800ee35 	.word	0x0800ee35
 800ee1c:	0800ee3d 	.word	0x0800ee3d
 800ee20:	0800ee45 	.word	0x0800ee45
 800ee24:	0800ee4d 	.word	0x0800ee4d
 800ee28:	0800ee55 	.word	0x0800ee55
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee32:	e1b6      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ee34:	2304      	movs	r3, #4
 800ee36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee3a:	e1b2      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ee3c:	2308      	movs	r3, #8
 800ee3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee42:	e1ae      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ee44:	2310      	movs	r3, #16
 800ee46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee4a:	e1aa      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ee4c:	2320      	movs	r3, #32
 800ee4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee52:	e1a6      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ee54:	2340      	movs	r3, #64	; 0x40
 800ee56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee5a:	e1a2      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ee5c:	2380      	movs	r3, #128	; 0x80
 800ee5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee62:	e19e      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a37      	ldr	r2, [pc, #220]	; (800ef48 <UART_SetConfig+0x348>)
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d130      	bne.n	800eed0 <UART_SetConfig+0x2d0>
 800ee6e:	4b33      	ldr	r3, [pc, #204]	; (800ef3c <UART_SetConfig+0x33c>)
 800ee70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee72:	f003 0307 	and.w	r3, r3, #7
 800ee76:	2b05      	cmp	r3, #5
 800ee78:	d826      	bhi.n	800eec8 <UART_SetConfig+0x2c8>
 800ee7a:	a201      	add	r2, pc, #4	; (adr r2, 800ee80 <UART_SetConfig+0x280>)
 800ee7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee80:	0800ee99 	.word	0x0800ee99
 800ee84:	0800eea1 	.word	0x0800eea1
 800ee88:	0800eea9 	.word	0x0800eea9
 800ee8c:	0800eeb1 	.word	0x0800eeb1
 800ee90:	0800eeb9 	.word	0x0800eeb9
 800ee94:	0800eec1 	.word	0x0800eec1
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee9e:	e180      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800eea0:	2304      	movs	r3, #4
 800eea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eea6:	e17c      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800eea8:	2308      	movs	r3, #8
 800eeaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeae:	e178      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800eeb0:	2310      	movs	r3, #16
 800eeb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeb6:	e174      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800eeb8:	2320      	movs	r3, #32
 800eeba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eebe:	e170      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800eec0:	2340      	movs	r3, #64	; 0x40
 800eec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eec6:	e16c      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800eec8:	2380      	movs	r3, #128	; 0x80
 800eeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eece:	e168      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a1d      	ldr	r2, [pc, #116]	; (800ef4c <UART_SetConfig+0x34c>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d142      	bne.n	800ef60 <UART_SetConfig+0x360>
 800eeda:	4b18      	ldr	r3, [pc, #96]	; (800ef3c <UART_SetConfig+0x33c>)
 800eedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eede:	f003 0307 	and.w	r3, r3, #7
 800eee2:	2b05      	cmp	r3, #5
 800eee4:	d838      	bhi.n	800ef58 <UART_SetConfig+0x358>
 800eee6:	a201      	add	r2, pc, #4	; (adr r2, 800eeec <UART_SetConfig+0x2ec>)
 800eee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeec:	0800ef05 	.word	0x0800ef05
 800eef0:	0800ef0d 	.word	0x0800ef0d
 800eef4:	0800ef15 	.word	0x0800ef15
 800eef8:	0800ef1d 	.word	0x0800ef1d
 800eefc:	0800ef25 	.word	0x0800ef25
 800ef00:	0800ef51 	.word	0x0800ef51
 800ef04:	2300      	movs	r3, #0
 800ef06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef0a:	e14a      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ef0c:	2304      	movs	r3, #4
 800ef0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef12:	e146      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ef14:	2308      	movs	r3, #8
 800ef16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef1a:	e142      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ef1c:	2310      	movs	r3, #16
 800ef1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef22:	e13e      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ef24:	2320      	movs	r3, #32
 800ef26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef2a:	e13a      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ef2c:	cfff69f3 	.word	0xcfff69f3
 800ef30:	58000c00 	.word	0x58000c00
 800ef34:	11fff4ff 	.word	0x11fff4ff
 800ef38:	40011000 	.word	0x40011000
 800ef3c:	58024400 	.word	0x58024400
 800ef40:	40004400 	.word	0x40004400
 800ef44:	40004800 	.word	0x40004800
 800ef48:	40004c00 	.word	0x40004c00
 800ef4c:	40005000 	.word	0x40005000
 800ef50:	2340      	movs	r3, #64	; 0x40
 800ef52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef56:	e124      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ef58:	2380      	movs	r3, #128	; 0x80
 800ef5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef5e:	e120      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4acc      	ldr	r2, [pc, #816]	; (800f298 <UART_SetConfig+0x698>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d176      	bne.n	800f058 <UART_SetConfig+0x458>
 800ef6a:	4bcc      	ldr	r3, [pc, #816]	; (800f29c <UART_SetConfig+0x69c>)
 800ef6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef72:	2b28      	cmp	r3, #40	; 0x28
 800ef74:	d86c      	bhi.n	800f050 <UART_SetConfig+0x450>
 800ef76:	a201      	add	r2, pc, #4	; (adr r2, 800ef7c <UART_SetConfig+0x37c>)
 800ef78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef7c:	0800f021 	.word	0x0800f021
 800ef80:	0800f051 	.word	0x0800f051
 800ef84:	0800f051 	.word	0x0800f051
 800ef88:	0800f051 	.word	0x0800f051
 800ef8c:	0800f051 	.word	0x0800f051
 800ef90:	0800f051 	.word	0x0800f051
 800ef94:	0800f051 	.word	0x0800f051
 800ef98:	0800f051 	.word	0x0800f051
 800ef9c:	0800f029 	.word	0x0800f029
 800efa0:	0800f051 	.word	0x0800f051
 800efa4:	0800f051 	.word	0x0800f051
 800efa8:	0800f051 	.word	0x0800f051
 800efac:	0800f051 	.word	0x0800f051
 800efb0:	0800f051 	.word	0x0800f051
 800efb4:	0800f051 	.word	0x0800f051
 800efb8:	0800f051 	.word	0x0800f051
 800efbc:	0800f031 	.word	0x0800f031
 800efc0:	0800f051 	.word	0x0800f051
 800efc4:	0800f051 	.word	0x0800f051
 800efc8:	0800f051 	.word	0x0800f051
 800efcc:	0800f051 	.word	0x0800f051
 800efd0:	0800f051 	.word	0x0800f051
 800efd4:	0800f051 	.word	0x0800f051
 800efd8:	0800f051 	.word	0x0800f051
 800efdc:	0800f039 	.word	0x0800f039
 800efe0:	0800f051 	.word	0x0800f051
 800efe4:	0800f051 	.word	0x0800f051
 800efe8:	0800f051 	.word	0x0800f051
 800efec:	0800f051 	.word	0x0800f051
 800eff0:	0800f051 	.word	0x0800f051
 800eff4:	0800f051 	.word	0x0800f051
 800eff8:	0800f051 	.word	0x0800f051
 800effc:	0800f041 	.word	0x0800f041
 800f000:	0800f051 	.word	0x0800f051
 800f004:	0800f051 	.word	0x0800f051
 800f008:	0800f051 	.word	0x0800f051
 800f00c:	0800f051 	.word	0x0800f051
 800f010:	0800f051 	.word	0x0800f051
 800f014:	0800f051 	.word	0x0800f051
 800f018:	0800f051 	.word	0x0800f051
 800f01c:	0800f049 	.word	0x0800f049
 800f020:	2301      	movs	r3, #1
 800f022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f026:	e0bc      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f028:	2304      	movs	r3, #4
 800f02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f02e:	e0b8      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f030:	2308      	movs	r3, #8
 800f032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f036:	e0b4      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f038:	2310      	movs	r3, #16
 800f03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f03e:	e0b0      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f040:	2320      	movs	r3, #32
 800f042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f046:	e0ac      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f048:	2340      	movs	r3, #64	; 0x40
 800f04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f04e:	e0a8      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f050:	2380      	movs	r3, #128	; 0x80
 800f052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f056:	e0a4      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a90      	ldr	r2, [pc, #576]	; (800f2a0 <UART_SetConfig+0x6a0>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d130      	bne.n	800f0c4 <UART_SetConfig+0x4c4>
 800f062:	4b8e      	ldr	r3, [pc, #568]	; (800f29c <UART_SetConfig+0x69c>)
 800f064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f066:	f003 0307 	and.w	r3, r3, #7
 800f06a:	2b05      	cmp	r3, #5
 800f06c:	d826      	bhi.n	800f0bc <UART_SetConfig+0x4bc>
 800f06e:	a201      	add	r2, pc, #4	; (adr r2, 800f074 <UART_SetConfig+0x474>)
 800f070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f074:	0800f08d 	.word	0x0800f08d
 800f078:	0800f095 	.word	0x0800f095
 800f07c:	0800f09d 	.word	0x0800f09d
 800f080:	0800f0a5 	.word	0x0800f0a5
 800f084:	0800f0ad 	.word	0x0800f0ad
 800f088:	0800f0b5 	.word	0x0800f0b5
 800f08c:	2300      	movs	r3, #0
 800f08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f092:	e086      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f094:	2304      	movs	r3, #4
 800f096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f09a:	e082      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f09c:	2308      	movs	r3, #8
 800f09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0a2:	e07e      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f0a4:	2310      	movs	r3, #16
 800f0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0aa:	e07a      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f0ac:	2320      	movs	r3, #32
 800f0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0b2:	e076      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f0b4:	2340      	movs	r3, #64	; 0x40
 800f0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ba:	e072      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f0bc:	2380      	movs	r3, #128	; 0x80
 800f0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0c2:	e06e      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a76      	ldr	r2, [pc, #472]	; (800f2a4 <UART_SetConfig+0x6a4>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d130      	bne.n	800f130 <UART_SetConfig+0x530>
 800f0ce:	4b73      	ldr	r3, [pc, #460]	; (800f29c <UART_SetConfig+0x69c>)
 800f0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d2:	f003 0307 	and.w	r3, r3, #7
 800f0d6:	2b05      	cmp	r3, #5
 800f0d8:	d826      	bhi.n	800f128 <UART_SetConfig+0x528>
 800f0da:	a201      	add	r2, pc, #4	; (adr r2, 800f0e0 <UART_SetConfig+0x4e0>)
 800f0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e0:	0800f0f9 	.word	0x0800f0f9
 800f0e4:	0800f101 	.word	0x0800f101
 800f0e8:	0800f109 	.word	0x0800f109
 800f0ec:	0800f111 	.word	0x0800f111
 800f0f0:	0800f119 	.word	0x0800f119
 800f0f4:	0800f121 	.word	0x0800f121
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0fe:	e050      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f100:	2304      	movs	r3, #4
 800f102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f106:	e04c      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f108:	2308      	movs	r3, #8
 800f10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f10e:	e048      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f110:	2310      	movs	r3, #16
 800f112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f116:	e044      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f118:	2320      	movs	r3, #32
 800f11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f11e:	e040      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f120:	2340      	movs	r3, #64	; 0x40
 800f122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f126:	e03c      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f128:	2380      	movs	r3, #128	; 0x80
 800f12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f12e:	e038      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a5c      	ldr	r2, [pc, #368]	; (800f2a8 <UART_SetConfig+0x6a8>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d130      	bne.n	800f19c <UART_SetConfig+0x59c>
 800f13a:	4b58      	ldr	r3, [pc, #352]	; (800f29c <UART_SetConfig+0x69c>)
 800f13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f13e:	f003 0307 	and.w	r3, r3, #7
 800f142:	2b05      	cmp	r3, #5
 800f144:	d826      	bhi.n	800f194 <UART_SetConfig+0x594>
 800f146:	a201      	add	r2, pc, #4	; (adr r2, 800f14c <UART_SetConfig+0x54c>)
 800f148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f14c:	0800f165 	.word	0x0800f165
 800f150:	0800f16d 	.word	0x0800f16d
 800f154:	0800f175 	.word	0x0800f175
 800f158:	0800f17d 	.word	0x0800f17d
 800f15c:	0800f185 	.word	0x0800f185
 800f160:	0800f18d 	.word	0x0800f18d
 800f164:	2302      	movs	r3, #2
 800f166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f16a:	e01a      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f16c:	2304      	movs	r3, #4
 800f16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f172:	e016      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f174:	2308      	movs	r3, #8
 800f176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f17a:	e012      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f17c:	2310      	movs	r3, #16
 800f17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f182:	e00e      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f184:	2320      	movs	r3, #32
 800f186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f18a:	e00a      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f18c:	2340      	movs	r3, #64	; 0x40
 800f18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f192:	e006      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f194:	2380      	movs	r3, #128	; 0x80
 800f196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f19a:	e002      	b.n	800f1a2 <UART_SetConfig+0x5a2>
 800f19c:	2380      	movs	r3, #128	; 0x80
 800f19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4a40      	ldr	r2, [pc, #256]	; (800f2a8 <UART_SetConfig+0x6a8>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	f040 80ef 	bne.w	800f38c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f1ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f1b2:	2b20      	cmp	r3, #32
 800f1b4:	dc46      	bgt.n	800f244 <UART_SetConfig+0x644>
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	f2c0 8081 	blt.w	800f2be <UART_SetConfig+0x6be>
 800f1bc:	3b02      	subs	r3, #2
 800f1be:	2b1e      	cmp	r3, #30
 800f1c0:	d87d      	bhi.n	800f2be <UART_SetConfig+0x6be>
 800f1c2:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <UART_SetConfig+0x5c8>)
 800f1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c8:	0800f24b 	.word	0x0800f24b
 800f1cc:	0800f2bf 	.word	0x0800f2bf
 800f1d0:	0800f253 	.word	0x0800f253
 800f1d4:	0800f2bf 	.word	0x0800f2bf
 800f1d8:	0800f2bf 	.word	0x0800f2bf
 800f1dc:	0800f2bf 	.word	0x0800f2bf
 800f1e0:	0800f263 	.word	0x0800f263
 800f1e4:	0800f2bf 	.word	0x0800f2bf
 800f1e8:	0800f2bf 	.word	0x0800f2bf
 800f1ec:	0800f2bf 	.word	0x0800f2bf
 800f1f0:	0800f2bf 	.word	0x0800f2bf
 800f1f4:	0800f2bf 	.word	0x0800f2bf
 800f1f8:	0800f2bf 	.word	0x0800f2bf
 800f1fc:	0800f2bf 	.word	0x0800f2bf
 800f200:	0800f273 	.word	0x0800f273
 800f204:	0800f2bf 	.word	0x0800f2bf
 800f208:	0800f2bf 	.word	0x0800f2bf
 800f20c:	0800f2bf 	.word	0x0800f2bf
 800f210:	0800f2bf 	.word	0x0800f2bf
 800f214:	0800f2bf 	.word	0x0800f2bf
 800f218:	0800f2bf 	.word	0x0800f2bf
 800f21c:	0800f2bf 	.word	0x0800f2bf
 800f220:	0800f2bf 	.word	0x0800f2bf
 800f224:	0800f2bf 	.word	0x0800f2bf
 800f228:	0800f2bf 	.word	0x0800f2bf
 800f22c:	0800f2bf 	.word	0x0800f2bf
 800f230:	0800f2bf 	.word	0x0800f2bf
 800f234:	0800f2bf 	.word	0x0800f2bf
 800f238:	0800f2bf 	.word	0x0800f2bf
 800f23c:	0800f2bf 	.word	0x0800f2bf
 800f240:	0800f2b1 	.word	0x0800f2b1
 800f244:	2b40      	cmp	r3, #64	; 0x40
 800f246:	d036      	beq.n	800f2b6 <UART_SetConfig+0x6b6>
 800f248:	e039      	b.n	800f2be <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f24a:	f7fc fc85 	bl	800bb58 <HAL_RCCEx_GetD3PCLK1Freq>
 800f24e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f250:	e03b      	b.n	800f2ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f252:	f107 0314 	add.w	r3, r7, #20
 800f256:	4618      	mov	r0, r3
 800f258:	f7fc fc94 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f260:	e033      	b.n	800f2ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f262:	f107 0308 	add.w	r3, r7, #8
 800f266:	4618      	mov	r0, r3
 800f268:	f7fc fde0 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f270:	e02b      	b.n	800f2ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f272:	4b0a      	ldr	r3, [pc, #40]	; (800f29c <UART_SetConfig+0x69c>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f003 0320 	and.w	r3, r3, #32
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d009      	beq.n	800f292 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f27e:	4b07      	ldr	r3, [pc, #28]	; (800f29c <UART_SetConfig+0x69c>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	08db      	lsrs	r3, r3, #3
 800f284:	f003 0303 	and.w	r3, r3, #3
 800f288:	4a08      	ldr	r2, [pc, #32]	; (800f2ac <UART_SetConfig+0x6ac>)
 800f28a:	fa22 f303 	lsr.w	r3, r2, r3
 800f28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f290:	e01b      	b.n	800f2ca <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800f292:	4b06      	ldr	r3, [pc, #24]	; (800f2ac <UART_SetConfig+0x6ac>)
 800f294:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f296:	e018      	b.n	800f2ca <UART_SetConfig+0x6ca>
 800f298:	40011400 	.word	0x40011400
 800f29c:	58024400 	.word	0x58024400
 800f2a0:	40007800 	.word	0x40007800
 800f2a4:	40007c00 	.word	0x40007c00
 800f2a8:	58000c00 	.word	0x58000c00
 800f2ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2b0:	4bc4      	ldr	r3, [pc, #784]	; (800f5c4 <UART_SetConfig+0x9c4>)
 800f2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2b4:	e009      	b.n	800f2ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2bc:	e005      	b.n	800f2ca <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f2c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f000 81da 	beq.w	800f686 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d6:	4abc      	ldr	r2, [pc, #752]	; (800f5c8 <UART_SetConfig+0x9c8>)
 800f2d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2e4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	685a      	ldr	r2, [r3, #4]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	005b      	lsls	r3, r3, #1
 800f2ee:	4413      	add	r3, r2
 800f2f0:	6a3a      	ldr	r2, [r7, #32]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d305      	bcc.n	800f302 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2fc:	6a3a      	ldr	r2, [r7, #32]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d903      	bls.n	800f30a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800f302:	2301      	movs	r3, #1
 800f304:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f308:	e1bd      	b.n	800f686 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30c:	4618      	mov	r0, r3
 800f30e:	f04f 0100 	mov.w	r1, #0
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f316:	4aac      	ldr	r2, [pc, #688]	; (800f5c8 <UART_SetConfig+0x9c8>)
 800f318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	f04f 0300 	mov.w	r3, #0
 800f322:	f7f0 ffd9 	bl	80002d8 <__aeabi_uldivmod>
 800f326:	4602      	mov	r2, r0
 800f328:	460b      	mov	r3, r1
 800f32a:	4610      	mov	r0, r2
 800f32c:	4619      	mov	r1, r3
 800f32e:	f04f 0200 	mov.w	r2, #0
 800f332:	f04f 0300 	mov.w	r3, #0
 800f336:	020b      	lsls	r3, r1, #8
 800f338:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f33c:	0202      	lsls	r2, r0, #8
 800f33e:	6879      	ldr	r1, [r7, #4]
 800f340:	6849      	ldr	r1, [r1, #4]
 800f342:	0849      	lsrs	r1, r1, #1
 800f344:	4608      	mov	r0, r1
 800f346:	f04f 0100 	mov.w	r1, #0
 800f34a:	1814      	adds	r4, r2, r0
 800f34c:	eb43 0501 	adc.w	r5, r3, r1
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	461a      	mov	r2, r3
 800f356:	f04f 0300 	mov.w	r3, #0
 800f35a:	4620      	mov	r0, r4
 800f35c:	4629      	mov	r1, r5
 800f35e:	f7f0 ffbb 	bl	80002d8 <__aeabi_uldivmod>
 800f362:	4602      	mov	r2, r0
 800f364:	460b      	mov	r3, r1
 800f366:	4613      	mov	r3, r2
 800f368:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f370:	d308      	bcc.n	800f384 <UART_SetConfig+0x784>
 800f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f378:	d204      	bcs.n	800f384 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f380:	60da      	str	r2, [r3, #12]
 800f382:	e180      	b.n	800f686 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800f384:	2301      	movs	r3, #1
 800f386:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f38a:	e17c      	b.n	800f686 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	69db      	ldr	r3, [r3, #28]
 800f390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f394:	f040 80be 	bne.w	800f514 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800f398:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f39c:	2b20      	cmp	r3, #32
 800f39e:	dc49      	bgt.n	800f434 <UART_SetConfig+0x834>
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	db7c      	blt.n	800f49e <UART_SetConfig+0x89e>
 800f3a4:	2b20      	cmp	r3, #32
 800f3a6:	d87a      	bhi.n	800f49e <UART_SetConfig+0x89e>
 800f3a8:	a201      	add	r2, pc, #4	; (adr r2, 800f3b0 <UART_SetConfig+0x7b0>)
 800f3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ae:	bf00      	nop
 800f3b0:	0800f43b 	.word	0x0800f43b
 800f3b4:	0800f443 	.word	0x0800f443
 800f3b8:	0800f49f 	.word	0x0800f49f
 800f3bc:	0800f49f 	.word	0x0800f49f
 800f3c0:	0800f44b 	.word	0x0800f44b
 800f3c4:	0800f49f 	.word	0x0800f49f
 800f3c8:	0800f49f 	.word	0x0800f49f
 800f3cc:	0800f49f 	.word	0x0800f49f
 800f3d0:	0800f45b 	.word	0x0800f45b
 800f3d4:	0800f49f 	.word	0x0800f49f
 800f3d8:	0800f49f 	.word	0x0800f49f
 800f3dc:	0800f49f 	.word	0x0800f49f
 800f3e0:	0800f49f 	.word	0x0800f49f
 800f3e4:	0800f49f 	.word	0x0800f49f
 800f3e8:	0800f49f 	.word	0x0800f49f
 800f3ec:	0800f49f 	.word	0x0800f49f
 800f3f0:	0800f46b 	.word	0x0800f46b
 800f3f4:	0800f49f 	.word	0x0800f49f
 800f3f8:	0800f49f 	.word	0x0800f49f
 800f3fc:	0800f49f 	.word	0x0800f49f
 800f400:	0800f49f 	.word	0x0800f49f
 800f404:	0800f49f 	.word	0x0800f49f
 800f408:	0800f49f 	.word	0x0800f49f
 800f40c:	0800f49f 	.word	0x0800f49f
 800f410:	0800f49f 	.word	0x0800f49f
 800f414:	0800f49f 	.word	0x0800f49f
 800f418:	0800f49f 	.word	0x0800f49f
 800f41c:	0800f49f 	.word	0x0800f49f
 800f420:	0800f49f 	.word	0x0800f49f
 800f424:	0800f49f 	.word	0x0800f49f
 800f428:	0800f49f 	.word	0x0800f49f
 800f42c:	0800f49f 	.word	0x0800f49f
 800f430:	0800f491 	.word	0x0800f491
 800f434:	2b40      	cmp	r3, #64	; 0x40
 800f436:	d02e      	beq.n	800f496 <UART_SetConfig+0x896>
 800f438:	e031      	b.n	800f49e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f43a:	f7fa ff4f 	bl	800a2dc <HAL_RCC_GetPCLK1Freq>
 800f43e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f440:	e033      	b.n	800f4aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f442:	f7fa ff61 	bl	800a308 <HAL_RCC_GetPCLK2Freq>
 800f446:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f448:	e02f      	b.n	800f4aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f44a:	f107 0314 	add.w	r3, r7, #20
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fc fb98 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f458:	e027      	b.n	800f4aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f45a:	f107 0308 	add.w	r3, r7, #8
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fc fce4 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f468:	e01f      	b.n	800f4aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f46a:	4b58      	ldr	r3, [pc, #352]	; (800f5cc <UART_SetConfig+0x9cc>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f003 0320 	and.w	r3, r3, #32
 800f472:	2b00      	cmp	r3, #0
 800f474:	d009      	beq.n	800f48a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f476:	4b55      	ldr	r3, [pc, #340]	; (800f5cc <UART_SetConfig+0x9cc>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	08db      	lsrs	r3, r3, #3
 800f47c:	f003 0303 	and.w	r3, r3, #3
 800f480:	4a53      	ldr	r2, [pc, #332]	; (800f5d0 <UART_SetConfig+0x9d0>)
 800f482:	fa22 f303 	lsr.w	r3, r2, r3
 800f486:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f488:	e00f      	b.n	800f4aa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f48a:	4b51      	ldr	r3, [pc, #324]	; (800f5d0 <UART_SetConfig+0x9d0>)
 800f48c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f48e:	e00c      	b.n	800f4aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f490:	4b4c      	ldr	r3, [pc, #304]	; (800f5c4 <UART_SetConfig+0x9c4>)
 800f492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f494:	e009      	b.n	800f4aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f49a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f49c:	e005      	b.n	800f4aa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f4a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f000 80ea 	beq.w	800f686 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b6:	4a44      	ldr	r2, [pc, #272]	; (800f5c8 <UART_SetConfig+0x9c8>)
 800f4b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4bc:	461a      	mov	r2, r3
 800f4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4c4:	005a      	lsls	r2, r3, #1
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	085b      	lsrs	r3, r3, #1
 800f4cc:	441a      	add	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4d6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4da:	2b0f      	cmp	r3, #15
 800f4dc:	d916      	bls.n	800f50c <UART_SetConfig+0x90c>
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4e4:	d212      	bcs.n	800f50c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	f023 030f 	bic.w	r3, r3, #15
 800f4ee:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	085b      	lsrs	r3, r3, #1
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	f003 0307 	and.w	r3, r3, #7
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f4fe:	4313      	orrs	r3, r2
 800f500:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f508:	60da      	str	r2, [r3, #12]
 800f50a:	e0bc      	b.n	800f686 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f50c:	2301      	movs	r3, #1
 800f50e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f512:	e0b8      	b.n	800f686 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f514:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f518:	2b20      	cmp	r3, #32
 800f51a:	dc4b      	bgt.n	800f5b4 <UART_SetConfig+0x9b4>
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f2c0 8087 	blt.w	800f630 <UART_SetConfig+0xa30>
 800f522:	2b20      	cmp	r3, #32
 800f524:	f200 8084 	bhi.w	800f630 <UART_SetConfig+0xa30>
 800f528:	a201      	add	r2, pc, #4	; (adr r2, 800f530 <UART_SetConfig+0x930>)
 800f52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f52e:	bf00      	nop
 800f530:	0800f5bb 	.word	0x0800f5bb
 800f534:	0800f5d5 	.word	0x0800f5d5
 800f538:	0800f631 	.word	0x0800f631
 800f53c:	0800f631 	.word	0x0800f631
 800f540:	0800f5dd 	.word	0x0800f5dd
 800f544:	0800f631 	.word	0x0800f631
 800f548:	0800f631 	.word	0x0800f631
 800f54c:	0800f631 	.word	0x0800f631
 800f550:	0800f5ed 	.word	0x0800f5ed
 800f554:	0800f631 	.word	0x0800f631
 800f558:	0800f631 	.word	0x0800f631
 800f55c:	0800f631 	.word	0x0800f631
 800f560:	0800f631 	.word	0x0800f631
 800f564:	0800f631 	.word	0x0800f631
 800f568:	0800f631 	.word	0x0800f631
 800f56c:	0800f631 	.word	0x0800f631
 800f570:	0800f5fd 	.word	0x0800f5fd
 800f574:	0800f631 	.word	0x0800f631
 800f578:	0800f631 	.word	0x0800f631
 800f57c:	0800f631 	.word	0x0800f631
 800f580:	0800f631 	.word	0x0800f631
 800f584:	0800f631 	.word	0x0800f631
 800f588:	0800f631 	.word	0x0800f631
 800f58c:	0800f631 	.word	0x0800f631
 800f590:	0800f631 	.word	0x0800f631
 800f594:	0800f631 	.word	0x0800f631
 800f598:	0800f631 	.word	0x0800f631
 800f59c:	0800f631 	.word	0x0800f631
 800f5a0:	0800f631 	.word	0x0800f631
 800f5a4:	0800f631 	.word	0x0800f631
 800f5a8:	0800f631 	.word	0x0800f631
 800f5ac:	0800f631 	.word	0x0800f631
 800f5b0:	0800f623 	.word	0x0800f623
 800f5b4:	2b40      	cmp	r3, #64	; 0x40
 800f5b6:	d037      	beq.n	800f628 <UART_SetConfig+0xa28>
 800f5b8:	e03a      	b.n	800f630 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5ba:	f7fa fe8f 	bl	800a2dc <HAL_RCC_GetPCLK1Freq>
 800f5be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f5c0:	e03c      	b.n	800f63c <UART_SetConfig+0xa3c>
 800f5c2:	bf00      	nop
 800f5c4:	003d0900 	.word	0x003d0900
 800f5c8:	08011f28 	.word	0x08011f28
 800f5cc:	58024400 	.word	0x58024400
 800f5d0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5d4:	f7fa fe98 	bl	800a308 <HAL_RCC_GetPCLK2Freq>
 800f5d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f5da:	e02f      	b.n	800f63c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5dc:	f107 0314 	add.w	r3, r7, #20
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7fc facf 	bl	800bb84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5ea:	e027      	b.n	800f63c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5ec:	f107 0308 	add.w	r3, r7, #8
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fc fc1b 	bl	800be2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5fa:	e01f      	b.n	800f63c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5fc:	4b2c      	ldr	r3, [pc, #176]	; (800f6b0 <UART_SetConfig+0xab0>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f003 0320 	and.w	r3, r3, #32
 800f604:	2b00      	cmp	r3, #0
 800f606:	d009      	beq.n	800f61c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f608:	4b29      	ldr	r3, [pc, #164]	; (800f6b0 <UART_SetConfig+0xab0>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	08db      	lsrs	r3, r3, #3
 800f60e:	f003 0303 	and.w	r3, r3, #3
 800f612:	4a28      	ldr	r2, [pc, #160]	; (800f6b4 <UART_SetConfig+0xab4>)
 800f614:	fa22 f303 	lsr.w	r3, r2, r3
 800f618:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f61a:	e00f      	b.n	800f63c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f61c:	4b25      	ldr	r3, [pc, #148]	; (800f6b4 <UART_SetConfig+0xab4>)
 800f61e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f620:	e00c      	b.n	800f63c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f622:	4b25      	ldr	r3, [pc, #148]	; (800f6b8 <UART_SetConfig+0xab8>)
 800f624:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f626:	e009      	b.n	800f63c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f62c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f62e:	e005      	b.n	800f63c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f630:	2300      	movs	r3, #0
 800f632:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f634:	2301      	movs	r3, #1
 800f636:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f63a:	bf00      	nop
    }

    if (pclk != 0U)
 800f63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d021      	beq.n	800f686 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f646:	4a1d      	ldr	r2, [pc, #116]	; (800f6bc <UART_SetConfig+0xabc>)
 800f648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f64c:	461a      	mov	r2, r3
 800f64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f650:	fbb3 f2f2 	udiv	r2, r3, r2
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	085b      	lsrs	r3, r3, #1
 800f65a:	441a      	add	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	fbb2 f3f3 	udiv	r3, r2, r3
 800f664:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	2b0f      	cmp	r3, #15
 800f66a:	d909      	bls.n	800f680 <UART_SetConfig+0xa80>
 800f66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f672:	d205      	bcs.n	800f680 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f676:	b29a      	uxth	r2, r3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	60da      	str	r2, [r3, #12]
 800f67e:	e002      	b.n	800f686 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f680:	2301      	movs	r3, #1
 800f682:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2201      	movs	r2, #1
 800f692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f6a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3738      	adds	r7, #56	; 0x38
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bdb0      	pop	{r4, r5, r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	58024400 	.word	0x58024400
 800f6b4:	03d09000 	.word	0x03d09000
 800f6b8:	003d0900 	.word	0x003d0900
 800f6bc:	08011f28 	.word	0x08011f28

0800f6c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6cc:	f003 0301 	and.w	r3, r3, #1
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d00a      	beq.n	800f6ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	430a      	orrs	r2, r1
 800f6e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ee:	f003 0302 	and.w	r3, r3, #2
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00a      	beq.n	800f70c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	430a      	orrs	r2, r1
 800f70a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f710:	f003 0304 	and.w	r3, r3, #4
 800f714:	2b00      	cmp	r3, #0
 800f716:	d00a      	beq.n	800f72e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	430a      	orrs	r2, r1
 800f72c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f732:	f003 0308 	and.w	r3, r3, #8
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00a      	beq.n	800f750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	430a      	orrs	r2, r1
 800f74e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f754:	f003 0310 	and.w	r3, r3, #16
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00a      	beq.n	800f772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	689b      	ldr	r3, [r3, #8]
 800f762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	430a      	orrs	r2, r1
 800f770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f776:	f003 0320 	and.w	r3, r3, #32
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00a      	beq.n	800f794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	689b      	ldr	r3, [r3, #8]
 800f784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	430a      	orrs	r2, r1
 800f792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d01a      	beq.n	800f7d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	430a      	orrs	r2, r1
 800f7b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7be:	d10a      	bne.n	800f7d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	430a      	orrs	r2, r1
 800f7d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00a      	beq.n	800f7f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	430a      	orrs	r2, r1
 800f7f6:	605a      	str	r2, [r3, #4]
  }
}
 800f7f8:	bf00      	nop
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b086      	sub	sp, #24
 800f808:	af02      	add	r7, sp, #8
 800f80a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f814:	f7f4 ff14 	bl	8004640 <HAL_GetTick>
 800f818:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f003 0308 	and.w	r3, r3, #8
 800f824:	2b08      	cmp	r3, #8
 800f826:	d10e      	bne.n	800f846 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2200      	movs	r2, #0
 800f832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 f82f 	bl	800f89a <UART_WaitOnFlagUntilTimeout>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d001      	beq.n	800f846 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f842:	2303      	movs	r3, #3
 800f844:	e025      	b.n	800f892 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f003 0304 	and.w	r3, r3, #4
 800f850:	2b04      	cmp	r3, #4
 800f852:	d10e      	bne.n	800f872 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f819 	bl	800f89a <UART_WaitOnFlagUntilTimeout>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d001      	beq.n	800f872 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f86e:	2303      	movs	r3, #3
 800f870:	e00f      	b.n	800f892 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2220      	movs	r2, #32
 800f876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2220      	movs	r2, #32
 800f87e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2200      	movs	r2, #0
 800f886:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2200      	movs	r2, #0
 800f88c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f890:	2300      	movs	r3, #0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3710      	adds	r7, #16
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b09c      	sub	sp, #112	; 0x70
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	60f8      	str	r0, [r7, #12]
 800f8a2:	60b9      	str	r1, [r7, #8]
 800f8a4:	603b      	str	r3, [r7, #0]
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8aa:	e0a9      	b.n	800fa00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8b2:	f000 80a5 	beq.w	800fa00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8b6:	f7f4 fec3 	bl	8004640 <HAL_GetTick>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d302      	bcc.n	800f8cc <UART_WaitOnFlagUntilTimeout+0x32>
 800f8c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d140      	bne.n	800f94e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8d4:	e853 3f00 	ldrex	r3, [r3]
 800f8d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f8e0:	667b      	str	r3, [r7, #100]	; 0x64
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f8f2:	e841 2300 	strex	r3, r2, [r1]
 800f8f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f8f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d1e6      	bne.n	800f8cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	3308      	adds	r3, #8
 800f904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f908:	e853 3f00 	ldrex	r3, [r3]
 800f90c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	f023 0301 	bic.w	r3, r3, #1
 800f914:	663b      	str	r3, [r7, #96]	; 0x60
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	3308      	adds	r3, #8
 800f91c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f91e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f926:	e841 2300 	strex	r3, r2, [r1]
 800f92a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1e5      	bne.n	800f8fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2220      	movs	r2, #32
 800f936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2220      	movs	r2, #32
 800f93e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2200      	movs	r2, #0
 800f946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f94a:	2303      	movs	r3, #3
 800f94c:	e069      	b.n	800fa22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f003 0304 	and.w	r3, r3, #4
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d051      	beq.n	800fa00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	69db      	ldr	r3, [r3, #28]
 800f962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f96a:	d149      	bne.n	800fa00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f974:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97e:	e853 3f00 	ldrex	r3, [r3]
 800f982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f986:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f98a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	461a      	mov	r2, r3
 800f992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f994:	637b      	str	r3, [r7, #52]	; 0x34
 800f996:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f99a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f99c:	e841 2300 	strex	r3, r2, [r1]
 800f9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1e6      	bne.n	800f976 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	3308      	adds	r3, #8
 800f9ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	e853 3f00 	ldrex	r3, [r3]
 800f9b6:	613b      	str	r3, [r7, #16]
   return(result);
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	f023 0301 	bic.w	r3, r3, #1
 800f9be:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	3308      	adds	r3, #8
 800f9c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f9c8:	623a      	str	r2, [r7, #32]
 800f9ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9cc:	69f9      	ldr	r1, [r7, #28]
 800f9ce:	6a3a      	ldr	r2, [r7, #32]
 800f9d0:	e841 2300 	strex	r3, r2, [r1]
 800f9d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9d6:	69bb      	ldr	r3, [r7, #24]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1e5      	bne.n	800f9a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2220      	movs	r2, #32
 800f9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2220      	movs	r2, #32
 800f9e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2220      	movs	r2, #32
 800f9f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f9fc:	2303      	movs	r3, #3
 800f9fe:	e010      	b.n	800fa22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	69da      	ldr	r2, [r3, #28]
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	4013      	ands	r3, r2
 800fa0a:	68ba      	ldr	r2, [r7, #8]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	bf0c      	ite	eq
 800fa10:	2301      	moveq	r3, #1
 800fa12:	2300      	movne	r3, #0
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	461a      	mov	r2, r3
 800fa18:	79fb      	ldrb	r3, [r7, #7]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	f43f af46 	beq.w	800f8ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3770      	adds	r7, #112	; 0x70
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
	...

0800fa2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b096      	sub	sp, #88	; 0x58
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	4613      	mov	r3, r2
 800fa38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	68ba      	ldr	r2, [r7, #8]
 800fa3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	88fa      	ldrh	r2, [r7, #6]
 800fa44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2222      	movs	r2, #34	; 0x22
 800fa54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d02c      	beq.n	800faba <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa64:	4a42      	ldr	r2, [pc, #264]	; (800fb70 <UART_Start_Receive_DMA+0x144>)
 800fa66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa6c:	4a41      	ldr	r2, [pc, #260]	; (800fb74 <UART_Start_Receive_DMA+0x148>)
 800fa6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa74:	4a40      	ldr	r2, [pc, #256]	; (800fb78 <UART_Start_Receive_DMA+0x14c>)
 800fa76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	3324      	adds	r3, #36	; 0x24
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa90:	461a      	mov	r2, r3
 800fa92:	88fb      	ldrh	r3, [r7, #6]
 800fa94:	f7f6 fa2c 	bl	8005ef0 <HAL_DMA_Start_IT>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00d      	beq.n	800faba <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2210      	movs	r2, #16
 800faa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2200      	movs	r2, #0
 800faaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2220      	movs	r2, #32
 800fab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800fab6:	2301      	movs	r3, #1
 800fab8:	e055      	b.n	800fb66 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2200      	movs	r2, #0
 800fabe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	691b      	ldr	r3, [r3, #16]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d018      	beq.n	800fafc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fad2:	e853 3f00 	ldrex	r3, [r3]
 800fad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fade:	657b      	str	r3, [r7, #84]	; 0x54
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	461a      	mov	r2, r3
 800fae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fae8:	64bb      	str	r3, [r7, #72]	; 0x48
 800faea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800faee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800faf0:	e841 2300 	strex	r3, r2, [r1]
 800faf4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800faf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d1e6      	bne.n	800faca <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	3308      	adds	r3, #8
 800fb02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb06:	e853 3f00 	ldrex	r3, [r3]
 800fb0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0e:	f043 0301 	orr.w	r3, r3, #1
 800fb12:	653b      	str	r3, [r7, #80]	; 0x50
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	3308      	adds	r3, #8
 800fb1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb1c:	637a      	str	r2, [r7, #52]	; 0x34
 800fb1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb24:	e841 2300 	strex	r3, r2, [r1]
 800fb28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d1e5      	bne.n	800fafc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	3308      	adds	r3, #8
 800fb36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	e853 3f00 	ldrex	r3, [r3]
 800fb3e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	3308      	adds	r3, #8
 800fb4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb50:	623a      	str	r2, [r7, #32]
 800fb52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb54:	69f9      	ldr	r1, [r7, #28]
 800fb56:	6a3a      	ldr	r2, [r7, #32]
 800fb58:	e841 2300 	strex	r3, r2, [r1]
 800fb5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d1e5      	bne.n	800fb30 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800fb64:	2300      	movs	r3, #0
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3758      	adds	r7, #88	; 0x58
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	0800fccd 	.word	0x0800fccd
 800fb74:	0800fdef 	.word	0x0800fdef
 800fb78:	0800fe27 	.word	0x0800fe27

0800fb7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b08f      	sub	sp, #60	; 0x3c
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8a:	6a3b      	ldr	r3, [r7, #32]
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fb98:	637b      	str	r3, [r7, #52]	; 0x34
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	461a      	mov	r2, r3
 800fba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fba4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbaa:	e841 2300 	strex	r3, r2, [r1]
 800fbae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1e6      	bne.n	800fb84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	3308      	adds	r3, #8
 800fbbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	e853 3f00 	ldrex	r3, [r3]
 800fbc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fbcc:	633b      	str	r3, [r7, #48]	; 0x30
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	3308      	adds	r3, #8
 800fbd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbd6:	61ba      	str	r2, [r7, #24]
 800fbd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbda:	6979      	ldr	r1, [r7, #20]
 800fbdc:	69ba      	ldr	r2, [r7, #24]
 800fbde:	e841 2300 	strex	r3, r2, [r1]
 800fbe2:	613b      	str	r3, [r7, #16]
   return(result);
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1e5      	bne.n	800fbb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2220      	movs	r2, #32
 800fbee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800fbf2:	bf00      	nop
 800fbf4:	373c      	adds	r7, #60	; 0x3c
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
	...

0800fc00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b095      	sub	sp, #84	; 0x54
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc10:	e853 3f00 	ldrex	r3, [r3]
 800fc14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	461a      	mov	r2, r3
 800fc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc26:	643b      	str	r3, [r7, #64]	; 0x40
 800fc28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc2e:	e841 2300 	strex	r3, r2, [r1]
 800fc32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1e6      	bne.n	800fc08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	3308      	adds	r3, #8
 800fc40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc42:	6a3b      	ldr	r3, [r7, #32]
 800fc44:	e853 3f00 	ldrex	r3, [r3]
 800fc48:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc4a:	69fa      	ldr	r2, [r7, #28]
 800fc4c:	4b1e      	ldr	r3, [pc, #120]	; (800fcc8 <UART_EndRxTransfer+0xc8>)
 800fc4e:	4013      	ands	r3, r2
 800fc50:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	3308      	adds	r3, #8
 800fc58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc62:	e841 2300 	strex	r3, r2, [r1]
 800fc66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1e5      	bne.n	800fc3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d118      	bne.n	800fca8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	e853 3f00 	ldrex	r3, [r3]
 800fc82:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	f023 0310 	bic.w	r3, r3, #16
 800fc8a:	647b      	str	r3, [r7, #68]	; 0x44
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	461a      	mov	r2, r3
 800fc92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc94:	61bb      	str	r3, [r7, #24]
 800fc96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc98:	6979      	ldr	r1, [r7, #20]
 800fc9a:	69ba      	ldr	r2, [r7, #24]
 800fc9c:	e841 2300 	strex	r3, r2, [r1]
 800fca0:	613b      	str	r3, [r7, #16]
   return(result);
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1e6      	bne.n	800fc76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2220      	movs	r2, #32
 800fcac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fcbc:	bf00      	nop
 800fcbe:	3754      	adds	r7, #84	; 0x54
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr
 800fcc8:	effffffe 	.word	0xeffffffe

0800fccc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b09c      	sub	sp, #112	; 0x70
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	69db      	ldr	r3, [r3, #28]
 800fcde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fce2:	d071      	beq.n	800fdc8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fce6:	2200      	movs	r2, #0
 800fce8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcf4:	e853 3f00 	ldrex	r3, [r3]
 800fcf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fcfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd00:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	461a      	mov	r2, r3
 800fd08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd0a:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd12:	e841 2300 	strex	r3, r2, [r1]
 800fd16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d1e6      	bne.n	800fcec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	3308      	adds	r3, #8
 800fd24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd28:	e853 3f00 	ldrex	r3, [r3]
 800fd2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd30:	f023 0301 	bic.w	r3, r3, #1
 800fd34:	667b      	str	r3, [r7, #100]	; 0x64
 800fd36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	3308      	adds	r3, #8
 800fd3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd3e:	647a      	str	r2, [r7, #68]	; 0x44
 800fd40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd46:	e841 2300 	strex	r3, r2, [r1]
 800fd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1e5      	bne.n	800fd1e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	3308      	adds	r3, #8
 800fd58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5c:	e853 3f00 	ldrex	r3, [r3]
 800fd60:	623b      	str	r3, [r7, #32]
   return(result);
 800fd62:	6a3b      	ldr	r3, [r7, #32]
 800fd64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd68:	663b      	str	r3, [r7, #96]	; 0x60
 800fd6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	3308      	adds	r3, #8
 800fd70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd72:	633a      	str	r2, [r7, #48]	; 0x30
 800fd74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd7a:	e841 2300 	strex	r3, r2, [r1]
 800fd7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d1e5      	bne.n	800fd52 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd88:	2220      	movs	r2, #32
 800fd8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d118      	bne.n	800fdc8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	e853 3f00 	ldrex	r3, [r3]
 800fda2:	60fb      	str	r3, [r7, #12]
   return(result);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f023 0310 	bic.w	r3, r3, #16
 800fdaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdb4:	61fb      	str	r3, [r7, #28]
 800fdb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb8:	69b9      	ldr	r1, [r7, #24]
 800fdba:	69fa      	ldr	r2, [r7, #28]
 800fdbc:	e841 2300 	strex	r3, r2, [r1]
 800fdc0:	617b      	str	r3, [r7, #20]
   return(result);
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1e6      	bne.n	800fd96 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d107      	bne.n	800fde0 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fdda:	f7fe ff05 	bl	800ebe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdde:	e002      	b.n	800fde6 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800fde0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fde2:	f7f3 fbc1 	bl	8003568 <HAL_UART_RxCpltCallback>
}
 800fde6:	bf00      	nop
 800fde8:	3770      	adds	r7, #112	; 0x70
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdee:	b580      	push	{r7, lr}
 800fdf0:	b084      	sub	sp, #16
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdfa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d109      	bne.n	800fe18 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe0a:	085b      	lsrs	r3, r3, #1
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	4619      	mov	r1, r3
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f7fe fee9 	bl	800ebe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe16:	e002      	b.n	800fe1e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f7fe fed1 	bl	800ebc0 <HAL_UART_RxHalfCpltCallback>
}
 800fe1e:	bf00      	nop
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b086      	sub	sp, #24
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	689b      	ldr	r3, [r3, #8]
 800fe4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe4e:	2b80      	cmp	r3, #128	; 0x80
 800fe50:	d109      	bne.n	800fe66 <UART_DMAError+0x40>
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	2b21      	cmp	r3, #33	; 0x21
 800fe56:	d106      	bne.n	800fe66 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fe60:	6978      	ldr	r0, [r7, #20]
 800fe62:	f7ff fe8b 	bl	800fb7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe70:	2b40      	cmp	r3, #64	; 0x40
 800fe72:	d109      	bne.n	800fe88 <UART_DMAError+0x62>
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2b22      	cmp	r3, #34	; 0x22
 800fe78:	d106      	bne.n	800fe88 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fe82:	6978      	ldr	r0, [r7, #20]
 800fe84:	f7ff febc 	bl	800fc00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe8e:	f043 0210 	orr.w	r2, r3, #16
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe98:	6978      	ldr	r0, [r7, #20]
 800fe9a:	f7fe fe9b 	bl	800ebd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe9e:	bf00      	nop
 800fea0:	3718      	adds	r7, #24
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b084      	sub	sp, #16
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2200      	movs	r2, #0
 800fec0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f7fe fe85 	bl	800ebd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800feca:	bf00      	nop
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b088      	sub	sp, #32
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	e853 3f00 	ldrex	r3, [r3]
 800fee6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800feee:	61fb      	str	r3, [r7, #28]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	461a      	mov	r2, r3
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	61bb      	str	r3, [r7, #24]
 800fefa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fefc:	6979      	ldr	r1, [r7, #20]
 800fefe:	69ba      	ldr	r2, [r7, #24]
 800ff00:	e841 2300 	strex	r3, r2, [r1]
 800ff04:	613b      	str	r3, [r7, #16]
   return(result);
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d1e6      	bne.n	800feda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2220      	movs	r2, #32
 800ff10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7fe fe46 	bl	800ebac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff20:	bf00      	nop
 800ff22:	3720      	adds	r7, #32
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff44:	bf00      	nop
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff58:	bf00      	nop
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b085      	sub	sp, #20
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d101      	bne.n	800ff7a <HAL_UARTEx_DisableFifoMode+0x16>
 800ff76:	2302      	movs	r3, #2
 800ff78:	e027      	b.n	800ffca <HAL_UARTEx_DisableFifoMode+0x66>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2224      	movs	r2, #36	; 0x24
 800ff86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f022 0201 	bic.w	r2, r2, #1
 800ffa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ffa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2200      	movs	r2, #0
 800ffae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2220      	movs	r2, #32
 800ffbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ffc8:	2300      	movs	r3, #0
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3714      	adds	r7, #20
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr

0800ffd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffd6:	b580      	push	{r7, lr}
 800ffd8:	b084      	sub	sp, #16
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
 800ffde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d101      	bne.n	800ffee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ffea:	2302      	movs	r3, #2
 800ffec:	e02d      	b.n	801004a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2201      	movs	r2, #1
 800fff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2224      	movs	r2, #36	; 0x24
 800fffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	f022 0201 	bic.w	r2, r2, #1
 8010014:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	683a      	ldr	r2, [r7, #0]
 8010026:	430a      	orrs	r2, r1
 8010028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 f850 	bl	80100d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68fa      	ldr	r2, [r7, #12]
 8010036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2220      	movs	r2, #32
 801003c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2200      	movs	r2, #0
 8010044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010048:	2300      	movs	r3, #0
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010052:	b580      	push	{r7, lr}
 8010054:	b084      	sub	sp, #16
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
 801005a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010062:	2b01      	cmp	r3, #1
 8010064:	d101      	bne.n	801006a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010066:	2302      	movs	r3, #2
 8010068:	e02d      	b.n	80100c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2201      	movs	r2, #1
 801006e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2224      	movs	r2, #36	; 0x24
 8010076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f022 0201 	bic.w	r2, r2, #1
 8010090:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	689b      	ldr	r3, [r3, #8]
 8010098:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	683a      	ldr	r2, [r7, #0]
 80100a2:	430a      	orrs	r2, r1
 80100a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 f812 	bl	80100d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2220      	movs	r2, #32
 80100b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80100c4:	2300      	movs	r3, #0
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
	...

080100d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b085      	sub	sp, #20
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d108      	bne.n	80100f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2201      	movs	r2, #1
 80100e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2201      	movs	r2, #1
 80100ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100f0:	e031      	b.n	8010156 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100f2:	2310      	movs	r3, #16
 80100f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100f6:	2310      	movs	r3, #16
 80100f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	0e5b      	lsrs	r3, r3, #25
 8010102:	b2db      	uxtb	r3, r3
 8010104:	f003 0307 	and.w	r3, r3, #7
 8010108:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	0f5b      	lsrs	r3, r3, #29
 8010112:	b2db      	uxtb	r3, r3
 8010114:	f003 0307 	and.w	r3, r3, #7
 8010118:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801011a:	7bbb      	ldrb	r3, [r7, #14]
 801011c:	7b3a      	ldrb	r2, [r7, #12]
 801011e:	4911      	ldr	r1, [pc, #68]	; (8010164 <UARTEx_SetNbDataToProcess+0x94>)
 8010120:	5c8a      	ldrb	r2, [r1, r2]
 8010122:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010126:	7b3a      	ldrb	r2, [r7, #12]
 8010128:	490f      	ldr	r1, [pc, #60]	; (8010168 <UARTEx_SetNbDataToProcess+0x98>)
 801012a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801012c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010130:	b29a      	uxth	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010138:	7bfb      	ldrb	r3, [r7, #15]
 801013a:	7b7a      	ldrb	r2, [r7, #13]
 801013c:	4909      	ldr	r1, [pc, #36]	; (8010164 <UARTEx_SetNbDataToProcess+0x94>)
 801013e:	5c8a      	ldrb	r2, [r1, r2]
 8010140:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010144:	7b7a      	ldrb	r2, [r7, #13]
 8010146:	4908      	ldr	r1, [pc, #32]	; (8010168 <UARTEx_SetNbDataToProcess+0x98>)
 8010148:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801014a:	fb93 f3f2 	sdiv	r3, r3, r2
 801014e:	b29a      	uxth	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010156:	bf00      	nop
 8010158:	3714      	adds	r7, #20
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	08011f40 	.word	0x08011f40
 8010168:	08011f48 	.word	0x08011f48

0801016c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801016c:	b084      	sub	sp, #16
 801016e:	b580      	push	{r7, lr}
 8010170:	b084      	sub	sp, #16
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]
 8010176:	f107 001c 	add.w	r0, r7, #28
 801017a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801017e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010180:	2b01      	cmp	r3, #1
 8010182:	d120      	bne.n	80101c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	68da      	ldr	r2, [r3, #12]
 8010194:	4b2a      	ldr	r3, [pc, #168]	; (8010240 <USB_CoreInit+0xd4>)
 8010196:	4013      	ands	r3, r2
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80101a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d105      	bne.n	80101ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 faa8 	bl	8010710 <USB_CoreReset>
 80101c0:	4603      	mov	r3, r0
 80101c2:	73fb      	strb	r3, [r7, #15]
 80101c4:	e01a      	b.n	80101fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	68db      	ldr	r3, [r3, #12]
 80101ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 fa9c 	bl	8010710 <USB_CoreReset>
 80101d8:	4603      	mov	r3, r0
 80101da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80101dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d106      	bne.n	80101f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	639a      	str	r2, [r3, #56]	; 0x38
 80101ee:	e005      	b.n	80101fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80101fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d116      	bne.n	8010230 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010206:	b29a      	uxth	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010210:	4b0c      	ldr	r3, [pc, #48]	; (8010244 <USB_CoreInit+0xd8>)
 8010212:	4313      	orrs	r3, r2
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	f043 0206 	orr.w	r2, r3, #6
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	689b      	ldr	r3, [r3, #8]
 8010228:	f043 0220 	orr.w	r2, r3, #32
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010230:	7bfb      	ldrb	r3, [r7, #15]
}
 8010232:	4618      	mov	r0, r3
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801023c:	b004      	add	sp, #16
 801023e:	4770      	bx	lr
 8010240:	ffbdffbf 	.word	0xffbdffbf
 8010244:	03ee0000 	.word	0x03ee0000

08010248 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	f023 0201 	bic.w	r2, r3, #1
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801025c:	2300      	movs	r3, #0
}
 801025e:	4618      	mov	r0, r3
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr

0801026a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801026a:	b580      	push	{r7, lr}
 801026c:	b084      	sub	sp, #16
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
 8010272:	460b      	mov	r3, r1
 8010274:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010276:	2300      	movs	r3, #0
 8010278:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	68db      	ldr	r3, [r3, #12]
 801027e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010286:	78fb      	ldrb	r3, [r7, #3]
 8010288:	2b01      	cmp	r3, #1
 801028a:	d115      	bne.n	80102b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010298:	2001      	movs	r0, #1
 801029a:	f7f4 f9dd 	bl	8004658 <HAL_Delay>
      ms++;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	3301      	adds	r3, #1
 80102a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f000 fa25 	bl	80106f4 <USB_GetMode>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d01e      	beq.n	80102ee <USB_SetCurrentMode+0x84>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2b31      	cmp	r3, #49	; 0x31
 80102b4:	d9f0      	bls.n	8010298 <USB_SetCurrentMode+0x2e>
 80102b6:	e01a      	b.n	80102ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80102b8:	78fb      	ldrb	r3, [r7, #3]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d115      	bne.n	80102ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80102ca:	2001      	movs	r0, #1
 80102cc:	f7f4 f9c4 	bl	8004658 <HAL_Delay>
      ms++;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	3301      	adds	r3, #1
 80102d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 fa0c 	bl	80106f4 <USB_GetMode>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d005      	beq.n	80102ee <USB_SetCurrentMode+0x84>
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2b31      	cmp	r3, #49	; 0x31
 80102e6:	d9f0      	bls.n	80102ca <USB_SetCurrentMode+0x60>
 80102e8:	e001      	b.n	80102ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80102ea:	2301      	movs	r3, #1
 80102ec:	e005      	b.n	80102fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2b32      	cmp	r3, #50	; 0x32
 80102f2:	d101      	bne.n	80102f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80102f4:	2301      	movs	r3, #1
 80102f6:	e000      	b.n	80102fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80102f8:	2300      	movs	r3, #0
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3710      	adds	r7, #16
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
	...

08010304 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010304:	b084      	sub	sp, #16
 8010306:	b580      	push	{r7, lr}
 8010308:	b086      	sub	sp, #24
 801030a:	af00      	add	r7, sp, #0
 801030c:	6078      	str	r0, [r7, #4]
 801030e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010316:	2300      	movs	r3, #0
 8010318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801031e:	2300      	movs	r3, #0
 8010320:	613b      	str	r3, [r7, #16]
 8010322:	e009      	b.n	8010338 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	3340      	adds	r3, #64	; 0x40
 801032a:	009b      	lsls	r3, r3, #2
 801032c:	4413      	add	r3, r2
 801032e:	2200      	movs	r2, #0
 8010330:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	3301      	adds	r3, #1
 8010336:	613b      	str	r3, [r7, #16]
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	2b0e      	cmp	r3, #14
 801033c:	d9f2      	bls.n	8010324 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801033e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010340:	2b00      	cmp	r3, #0
 8010342:	d11c      	bne.n	801037e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010352:	f043 0302 	orr.w	r3, r3, #2
 8010356:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801035c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	601a      	str	r2, [r3, #0]
 801037c:	e005      	b.n	801038a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010382:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010390:	461a      	mov	r2, r3
 8010392:	2300      	movs	r3, #0
 8010394:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801039c:	4619      	mov	r1, r3
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103a4:	461a      	mov	r2, r3
 80103a6:	680b      	ldr	r3, [r1, #0]
 80103a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80103aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d10c      	bne.n	80103ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d104      	bne.n	80103c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80103b6:	2100      	movs	r1, #0
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 f961 	bl	8010680 <USB_SetDevSpeed>
 80103be:	e008      	b.n	80103d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80103c0:	2101      	movs	r1, #1
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 f95c 	bl	8010680 <USB_SetDevSpeed>
 80103c8:	e003      	b.n	80103d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80103ca:	2103      	movs	r1, #3
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f000 f957 	bl	8010680 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80103d2:	2110      	movs	r1, #16
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f000 f8f3 	bl	80105c0 <USB_FlushTxFifo>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d001      	beq.n	80103e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80103e0:	2301      	movs	r3, #1
 80103e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f000 f91d 	bl	8010624 <USB_FlushRxFifo>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d001      	beq.n	80103f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80103f0:	2301      	movs	r3, #1
 80103f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103fa:	461a      	mov	r2, r3
 80103fc:	2300      	movs	r3, #0
 80103fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010406:	461a      	mov	r2, r3
 8010408:	2300      	movs	r3, #0
 801040a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010412:	461a      	mov	r2, r3
 8010414:	2300      	movs	r3, #0
 8010416:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010418:	2300      	movs	r3, #0
 801041a:	613b      	str	r3, [r7, #16]
 801041c:	e043      	b.n	80104a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	015a      	lsls	r2, r3, #5
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	4413      	add	r3, r2
 8010426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010434:	d118      	bne.n	8010468 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d10a      	bne.n	8010452 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	015a      	lsls	r2, r3, #5
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	4413      	add	r3, r2
 8010444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010448:	461a      	mov	r2, r3
 801044a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801044e:	6013      	str	r3, [r2, #0]
 8010450:	e013      	b.n	801047a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	015a      	lsls	r2, r3, #5
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	4413      	add	r3, r2
 801045a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801045e:	461a      	mov	r2, r3
 8010460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010464:	6013      	str	r3, [r2, #0]
 8010466:	e008      	b.n	801047a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	015a      	lsls	r2, r3, #5
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	4413      	add	r3, r2
 8010470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010474:	461a      	mov	r2, r3
 8010476:	2300      	movs	r3, #0
 8010478:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	015a      	lsls	r2, r3, #5
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	4413      	add	r3, r2
 8010482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010486:	461a      	mov	r2, r3
 8010488:	2300      	movs	r3, #0
 801048a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	015a      	lsls	r2, r3, #5
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	4413      	add	r3, r2
 8010494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010498:	461a      	mov	r2, r3
 801049a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801049e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	3301      	adds	r3, #1
 80104a4:	613b      	str	r3, [r7, #16]
 80104a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a8:	693a      	ldr	r2, [r7, #16]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d3b7      	bcc.n	801041e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104ae:	2300      	movs	r3, #0
 80104b0:	613b      	str	r3, [r7, #16]
 80104b2:	e043      	b.n	801053c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	015a      	lsls	r2, r3, #5
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	4413      	add	r3, r2
 80104bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104ca:	d118      	bne.n	80104fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d10a      	bne.n	80104e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	015a      	lsls	r2, r3, #5
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	4413      	add	r3, r2
 80104da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104de:	461a      	mov	r2, r3
 80104e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80104e4:	6013      	str	r3, [r2, #0]
 80104e6:	e013      	b.n	8010510 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	015a      	lsls	r2, r3, #5
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	4413      	add	r3, r2
 80104f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104f4:	461a      	mov	r2, r3
 80104f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80104fa:	6013      	str	r3, [r2, #0]
 80104fc:	e008      	b.n	8010510 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	015a      	lsls	r2, r3, #5
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	4413      	add	r3, r2
 8010506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801050a:	461a      	mov	r2, r3
 801050c:	2300      	movs	r3, #0
 801050e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	015a      	lsls	r2, r3, #5
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	4413      	add	r3, r2
 8010518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801051c:	461a      	mov	r2, r3
 801051e:	2300      	movs	r3, #0
 8010520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	015a      	lsls	r2, r3, #5
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	4413      	add	r3, r2
 801052a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801052e:	461a      	mov	r2, r3
 8010530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010534:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	3301      	adds	r3, #1
 801053a:	613b      	str	r3, [r7, #16]
 801053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053e:	693a      	ldr	r2, [r7, #16]
 8010540:	429a      	cmp	r2, r3
 8010542:	d3b7      	bcc.n	80104b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801054a:	691b      	ldr	r3, [r3, #16]
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010556:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010564:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010568:	2b00      	cmp	r3, #0
 801056a:	d105      	bne.n	8010578 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	699b      	ldr	r3, [r3, #24]
 8010570:	f043 0210 	orr.w	r2, r3, #16
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	699a      	ldr	r2, [r3, #24]
 801057c:	4b0e      	ldr	r3, [pc, #56]	; (80105b8 <USB_DevInit+0x2b4>)
 801057e:	4313      	orrs	r3, r2
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010586:	2b00      	cmp	r3, #0
 8010588:	d005      	beq.n	8010596 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	699b      	ldr	r3, [r3, #24]
 801058e:	f043 0208 	orr.w	r2, r3, #8
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010598:	2b01      	cmp	r3, #1
 801059a:	d105      	bne.n	80105a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	699a      	ldr	r2, [r3, #24]
 80105a0:	4b06      	ldr	r3, [pc, #24]	; (80105bc <USB_DevInit+0x2b8>)
 80105a2:	4313      	orrs	r3, r2
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80105a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3718      	adds	r7, #24
 80105ae:	46bd      	mov	sp, r7
 80105b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80105b4:	b004      	add	sp, #16
 80105b6:	4770      	bx	lr
 80105b8:	803c3800 	.word	0x803c3800
 80105bc:	40000004 	.word	0x40000004

080105c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b085      	sub	sp, #20
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80105ca:	2300      	movs	r3, #0
 80105cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	3301      	adds	r3, #1
 80105d2:	60fb      	str	r3, [r7, #12]
 80105d4:	4a12      	ldr	r2, [pc, #72]	; (8010620 <USB_FlushTxFifo+0x60>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d901      	bls.n	80105de <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80105da:	2303      	movs	r3, #3
 80105dc:	e01a      	b.n	8010614 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	691b      	ldr	r3, [r3, #16]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	daf3      	bge.n	80105ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80105e6:	2300      	movs	r3, #0
 80105e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	019b      	lsls	r3, r3, #6
 80105ee:	f043 0220 	orr.w	r2, r3, #32
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	3301      	adds	r3, #1
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	4a08      	ldr	r2, [pc, #32]	; (8010620 <USB_FlushTxFifo+0x60>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d901      	bls.n	8010606 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8010602:	2303      	movs	r3, #3
 8010604:	e006      	b.n	8010614 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	691b      	ldr	r3, [r3, #16]
 801060a:	f003 0320 	and.w	r3, r3, #32
 801060e:	2b20      	cmp	r3, #32
 8010610:	d0f1      	beq.n	80105f6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3714      	adds	r7, #20
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr
 8010620:	00030d40 	.word	0x00030d40

08010624 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010624:	b480      	push	{r7}
 8010626:	b085      	sub	sp, #20
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801062c:	2300      	movs	r3, #0
 801062e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	3301      	adds	r3, #1
 8010634:	60fb      	str	r3, [r7, #12]
 8010636:	4a11      	ldr	r2, [pc, #68]	; (801067c <USB_FlushRxFifo+0x58>)
 8010638:	4293      	cmp	r3, r2
 801063a:	d901      	bls.n	8010640 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 801063c:	2303      	movs	r3, #3
 801063e:	e017      	b.n	8010670 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	691b      	ldr	r3, [r3, #16]
 8010644:	2b00      	cmp	r3, #0
 8010646:	daf3      	bge.n	8010630 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010648:	2300      	movs	r3, #0
 801064a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2210      	movs	r2, #16
 8010650:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	3301      	adds	r3, #1
 8010656:	60fb      	str	r3, [r7, #12]
 8010658:	4a08      	ldr	r2, [pc, #32]	; (801067c <USB_FlushRxFifo+0x58>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d901      	bls.n	8010662 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 801065e:	2303      	movs	r3, #3
 8010660:	e006      	b.n	8010670 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	f003 0310 	and.w	r3, r3, #16
 801066a:	2b10      	cmp	r3, #16
 801066c:	d0f1      	beq.n	8010652 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 801066e:	2300      	movs	r3, #0
}
 8010670:	4618      	mov	r0, r3
 8010672:	3714      	adds	r7, #20
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr
 801067c:	00030d40 	.word	0x00030d40

08010680 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010680:	b480      	push	{r7}
 8010682:	b085      	sub	sp, #20
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	460b      	mov	r3, r1
 801068a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	78fb      	ldrb	r3, [r7, #3]
 801069a:	68f9      	ldr	r1, [r7, #12]
 801069c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106a0:	4313      	orrs	r3, r2
 80106a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr

080106b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80106b2:	b480      	push	{r7}
 80106b4:	b085      	sub	sp, #20
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	68fa      	ldr	r2, [r7, #12]
 80106c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80106cc:	f023 0303 	bic.w	r3, r3, #3
 80106d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	68fa      	ldr	r2, [r7, #12]
 80106dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80106e0:	f043 0302 	orr.w	r3, r3, #2
 80106e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3714      	adds	r7, #20
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	695b      	ldr	r3, [r3, #20]
 8010700:	f003 0301 	and.w	r3, r3, #1
}
 8010704:	4618      	mov	r0, r3
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010710:	b480      	push	{r7}
 8010712:	b085      	sub	sp, #20
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010718:	2300      	movs	r3, #0
 801071a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	3301      	adds	r3, #1
 8010720:	60fb      	str	r3, [r7, #12]
 8010722:	4a13      	ldr	r2, [pc, #76]	; (8010770 <USB_CoreReset+0x60>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d901      	bls.n	801072c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010728:	2303      	movs	r3, #3
 801072a:	e01a      	b.n	8010762 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	691b      	ldr	r3, [r3, #16]
 8010730:	2b00      	cmp	r3, #0
 8010732:	daf3      	bge.n	801071c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010734:	2300      	movs	r3, #0
 8010736:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	691b      	ldr	r3, [r3, #16]
 801073c:	f043 0201 	orr.w	r2, r3, #1
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	3301      	adds	r3, #1
 8010748:	60fb      	str	r3, [r7, #12]
 801074a:	4a09      	ldr	r2, [pc, #36]	; (8010770 <USB_CoreReset+0x60>)
 801074c:	4293      	cmp	r3, r2
 801074e:	d901      	bls.n	8010754 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8010750:	2303      	movs	r3, #3
 8010752:	e006      	b.n	8010762 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	691b      	ldr	r3, [r3, #16]
 8010758:	f003 0301 	and.w	r3, r3, #1
 801075c:	2b01      	cmp	r3, #1
 801075e:	d0f1      	beq.n	8010744 <USB_CoreReset+0x34>

  return HAL_OK;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3714      	adds	r7, #20
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	00030d40 	.word	0x00030d40

08010774 <__errno>:
 8010774:	4b01      	ldr	r3, [pc, #4]	; (801077c <__errno+0x8>)
 8010776:	6818      	ldr	r0, [r3, #0]
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	24000010 	.word	0x24000010

08010780 <__libc_init_array>:
 8010780:	b570      	push	{r4, r5, r6, lr}
 8010782:	4d0d      	ldr	r5, [pc, #52]	; (80107b8 <__libc_init_array+0x38>)
 8010784:	4c0d      	ldr	r4, [pc, #52]	; (80107bc <__libc_init_array+0x3c>)
 8010786:	1b64      	subs	r4, r4, r5
 8010788:	10a4      	asrs	r4, r4, #2
 801078a:	2600      	movs	r6, #0
 801078c:	42a6      	cmp	r6, r4
 801078e:	d109      	bne.n	80107a4 <__libc_init_array+0x24>
 8010790:	4d0b      	ldr	r5, [pc, #44]	; (80107c0 <__libc_init_array+0x40>)
 8010792:	4c0c      	ldr	r4, [pc, #48]	; (80107c4 <__libc_init_array+0x44>)
 8010794:	f001 fbae 	bl	8011ef4 <_init>
 8010798:	1b64      	subs	r4, r4, r5
 801079a:	10a4      	asrs	r4, r4, #2
 801079c:	2600      	movs	r6, #0
 801079e:	42a6      	cmp	r6, r4
 80107a0:	d105      	bne.n	80107ae <__libc_init_array+0x2e>
 80107a2:	bd70      	pop	{r4, r5, r6, pc}
 80107a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80107a8:	4798      	blx	r3
 80107aa:	3601      	adds	r6, #1
 80107ac:	e7ee      	b.n	801078c <__libc_init_array+0xc>
 80107ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80107b2:	4798      	blx	r3
 80107b4:	3601      	adds	r6, #1
 80107b6:	e7f2      	b.n	801079e <__libc_init_array+0x1e>
 80107b8:	08013a58 	.word	0x08013a58
 80107bc:	08013a58 	.word	0x08013a58
 80107c0:	08013a58 	.word	0x08013a58
 80107c4:	08013a5c 	.word	0x08013a5c

080107c8 <memset>:
 80107c8:	4402      	add	r2, r0
 80107ca:	4603      	mov	r3, r0
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d100      	bne.n	80107d2 <memset+0xa>
 80107d0:	4770      	bx	lr
 80107d2:	f803 1b01 	strb.w	r1, [r3], #1
 80107d6:	e7f9      	b.n	80107cc <memset+0x4>

080107d8 <checkint>:
 80107d8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80107dc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80107e0:	429a      	cmp	r2, r3
 80107e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107e4:	dd2b      	ble.n	801083e <checkint+0x66>
 80107e6:	f240 4333 	movw	r3, #1075	; 0x433
 80107ea:	429a      	cmp	r2, r3
 80107ec:	dc25      	bgt.n	801083a <checkint+0x62>
 80107ee:	1a9b      	subs	r3, r3, r2
 80107f0:	f1a3 0620 	sub.w	r6, r3, #32
 80107f4:	f04f 32ff 	mov.w	r2, #4294967295
 80107f8:	fa02 f606 	lsl.w	r6, r2, r6
 80107fc:	fa02 f403 	lsl.w	r4, r2, r3
 8010800:	f1c3 0520 	rsb	r5, r3, #32
 8010804:	4334      	orrs	r4, r6
 8010806:	fa22 f505 	lsr.w	r5, r2, r5
 801080a:	432c      	orrs	r4, r5
 801080c:	409a      	lsls	r2, r3
 801080e:	ea20 0602 	bic.w	r6, r0, r2
 8010812:	ea21 0704 	bic.w	r7, r1, r4
 8010816:	ea56 0207 	orrs.w	r2, r6, r7
 801081a:	f1a3 0420 	sub.w	r4, r3, #32
 801081e:	f1c3 0220 	rsb	r2, r3, #32
 8010822:	d10c      	bne.n	801083e <checkint+0x66>
 8010824:	40d8      	lsrs	r0, r3
 8010826:	fa01 f302 	lsl.w	r3, r1, r2
 801082a:	4318      	orrs	r0, r3
 801082c:	40e1      	lsrs	r1, r4
 801082e:	4308      	orrs	r0, r1
 8010830:	f000 0301 	and.w	r3, r0, #1
 8010834:	f1c3 0002 	rsb	r0, r3, #2
 8010838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801083a:	2002      	movs	r0, #2
 801083c:	e7fc      	b.n	8010838 <checkint+0x60>
 801083e:	2000      	movs	r0, #0
 8010840:	e7fa      	b.n	8010838 <checkint+0x60>
 8010842:	0000      	movs	r0, r0
 8010844:	0000      	movs	r0, r0
	...

08010848 <pow>:
 8010848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801084c:	ed2d 8b0a 	vpush	{d8-d12}
 8010850:	b09b      	sub	sp, #108	; 0x6c
 8010852:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010856:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801085a:	ed8d 1b00 	vstr	d1, [sp]
 801085e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8010862:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010866:	f109 30ff 	add.w	r0, r9, #4294967295
 801086a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 801086e:	4288      	cmp	r0, r1
 8010870:	46cc      	mov	ip, r9
 8010872:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8010876:	d806      	bhi.n	8010886 <pow+0x3e>
 8010878:	f3c8 010a 	ubfx	r1, r8, #0, #11
 801087c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8010880:	297f      	cmp	r1, #127	; 0x7f
 8010882:	f240 81ab 	bls.w	8010bdc <pow+0x394>
 8010886:	19b1      	adds	r1, r6, r6
 8010888:	9104      	str	r1, [sp, #16]
 801088a:	eb47 0107 	adc.w	r1, r7, r7
 801088e:	9105      	str	r1, [sp, #20]
 8010890:	9904      	ldr	r1, [sp, #16]
 8010892:	f111 31ff 	adds.w	r1, r1, #4294967295
 8010896:	460a      	mov	r2, r1
 8010898:	9905      	ldr	r1, [sp, #20]
 801089a:	f141 31ff 	adc.w	r1, r1, #4294967295
 801089e:	460b      	mov	r3, r1
 80108a0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 80108a4:	f06f 0001 	mvn.w	r0, #1
 80108a8:	4299      	cmp	r1, r3
 80108aa:	bf08      	it	eq
 80108ac:	4290      	cmpeq	r0, r2
 80108ae:	d260      	bcs.n	8010972 <pow+0x12a>
 80108b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108b4:	4313      	orrs	r3, r2
 80108b6:	d11a      	bne.n	80108ee <pow+0xa6>
 80108b8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 80108bc:	1923      	adds	r3, r4, r4
 80108be:	930c      	str	r3, [sp, #48]	; 0x30
 80108c0:	eb42 0302 	adc.w	r3, r2, r2
 80108c4:	930d      	str	r3, [sp, #52]	; 0x34
 80108c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108ca:	4bcf      	ldr	r3, [pc, #828]	; (8010c08 <pow+0x3c0>)
 80108cc:	2200      	movs	r2, #0
 80108ce:	428b      	cmp	r3, r1
 80108d0:	bf08      	it	eq
 80108d2:	4282      	cmpeq	r2, r0
 80108d4:	f080 8265 	bcs.w	8010da2 <pow+0x55a>
 80108d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108dc:	ed9d 6b00 	vldr	d6, [sp]
 80108e0:	ee37 0b06 	vadd.f64	d0, d7, d6
 80108e4:	b01b      	add	sp, #108	; 0x6c
 80108e6:	ecbd 8b0a 	vpop	{d8-d12}
 80108ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ee:	49c7      	ldr	r1, [pc, #796]	; (8010c0c <pow+0x3c4>)
 80108f0:	2000      	movs	r0, #0
 80108f2:	428d      	cmp	r5, r1
 80108f4:	bf08      	it	eq
 80108f6:	4284      	cmpeq	r4, r0
 80108f8:	d10b      	bne.n	8010912 <pow+0xca>
 80108fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80108fe:	19b3      	adds	r3, r6, r6
 8010900:	930e      	str	r3, [sp, #56]	; 0x38
 8010902:	eb42 0302 	adc.w	r3, r2, r2
 8010906:	930f      	str	r3, [sp, #60]	; 0x3c
 8010908:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801090c:	4bbe      	ldr	r3, [pc, #760]	; (8010c08 <pow+0x3c0>)
 801090e:	2200      	movs	r2, #0
 8010910:	e7dd      	b.n	80108ce <pow+0x86>
 8010912:	1921      	adds	r1, r4, r4
 8010914:	9106      	str	r1, [sp, #24]
 8010916:	eb45 0105 	adc.w	r1, r5, r5
 801091a:	9107      	str	r1, [sp, #28]
 801091c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010920:	49bb      	ldr	r1, [pc, #748]	; (8010c10 <pow+0x3c8>)
 8010922:	2000      	movs	r0, #0
 8010924:	42a1      	cmp	r1, r4
 8010926:	bf08      	it	eq
 8010928:	4298      	cmpeq	r0, r3
 801092a:	d3d5      	bcc.n	80108d8 <pow+0x90>
 801092c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010930:	428c      	cmp	r4, r1
 8010932:	bf08      	it	eq
 8010934:	4283      	cmpeq	r3, r0
 8010936:	d1cf      	bne.n	80108d8 <pow+0x90>
 8010938:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801093c:	49b5      	ldr	r1, [pc, #724]	; (8010c14 <pow+0x3cc>)
 801093e:	2000      	movs	r0, #0
 8010940:	428c      	cmp	r4, r1
 8010942:	bf08      	it	eq
 8010944:	4283      	cmpeq	r3, r0
 8010946:	f000 822c 	beq.w	8010da2 <pow+0x55a>
 801094a:	49b3      	ldr	r1, [pc, #716]	; (8010c18 <pow+0x3d0>)
 801094c:	f04f 30ff 	mov.w	r0, #4294967295
 8010950:	42a1      	cmp	r1, r4
 8010952:	bf08      	it	eq
 8010954:	4298      	cmpeq	r0, r3
 8010956:	ea6f 0307 	mvn.w	r3, r7
 801095a:	bf34      	ite	cc
 801095c:	2201      	movcc	r2, #1
 801095e:	2200      	movcs	r2, #0
 8010960:	0fdb      	lsrs	r3, r3, #31
 8010962:	429a      	cmp	r2, r3
 8010964:	f040 821a 	bne.w	8010d9c <pow+0x554>
 8010968:	ed9d 7b00 	vldr	d7, [sp]
 801096c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8010970:	e7b8      	b.n	80108e4 <pow+0x9c>
 8010972:	1923      	adds	r3, r4, r4
 8010974:	9308      	str	r3, [sp, #32]
 8010976:	eb45 0305 	adc.w	r3, r5, r5
 801097a:	9309      	str	r3, [sp, #36]	; 0x24
 801097c:	9b08      	ldr	r3, [sp, #32]
 801097e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8010982:	9310      	str	r3, [sp, #64]	; 0x40
 8010984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010986:	f143 33ff 	adc.w	r3, r3, #4294967295
 801098a:	9311      	str	r3, [sp, #68]	; 0x44
 801098c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010990:	4299      	cmp	r1, r3
 8010992:	bf08      	it	eq
 8010994:	4290      	cmpeq	r0, r2
 8010996:	d22d      	bcs.n	80109f4 <pow+0x1ac>
 8010998:	ed9d 7b02 	vldr	d7, [sp, #8]
 801099c:	2c00      	cmp	r4, #0
 801099e:	f175 0300 	sbcs.w	r3, r5, #0
 80109a2:	ee27 0b07 	vmul.f64	d0, d7, d7
 80109a6:	da16      	bge.n	80109d6 <pow+0x18e>
 80109a8:	4630      	mov	r0, r6
 80109aa:	4639      	mov	r1, r7
 80109ac:	f7ff ff14 	bl	80107d8 <checkint>
 80109b0:	2801      	cmp	r0, #1
 80109b2:	d110      	bne.n	80109d6 <pow+0x18e>
 80109b4:	eeb1 0b40 	vneg.f64	d0, d0
 80109b8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80109bc:	4323      	orrs	r3, r4
 80109be:	d10c      	bne.n	80109da <pow+0x192>
 80109c0:	2e00      	cmp	r6, #0
 80109c2:	f177 0300 	sbcs.w	r3, r7, #0
 80109c6:	da8d      	bge.n	80108e4 <pow+0x9c>
 80109c8:	b01b      	add	sp, #108	; 0x6c
 80109ca:	ecbd 8b0a 	vpop	{d8-d12}
 80109ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d2:	f001 b841 	b.w	8011a58 <__math_divzero>
 80109d6:	2000      	movs	r0, #0
 80109d8:	e7ee      	b.n	80109b8 <pow+0x170>
 80109da:	2e00      	cmp	r6, #0
 80109dc:	f177 0300 	sbcs.w	r3, r7, #0
 80109e0:	da80      	bge.n	80108e4 <pow+0x9c>
 80109e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80109e6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80109ea:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80109ee:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80109f2:	e777      	b.n	80108e4 <pow+0x9c>
 80109f4:	2c00      	cmp	r4, #0
 80109f6:	f175 0300 	sbcs.w	r3, r5, #0
 80109fa:	da35      	bge.n	8010a68 <pow+0x220>
 80109fc:	4630      	mov	r0, r6
 80109fe:	4639      	mov	r1, r7
 8010a00:	f7ff feea 	bl	80107d8 <checkint>
 8010a04:	b940      	cbnz	r0, 8010a18 <pow+0x1d0>
 8010a06:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010a0a:	b01b      	add	sp, #108	; 0x6c
 8010a0c:	ecbd 8b0a 	vpop	{d8-d12}
 8010a10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	f001 b838 	b.w	8011a88 <__math_invalid>
 8010a18:	2801      	cmp	r0, #1
 8010a1a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010a1e:	bf14      	ite	ne
 8010a20:	2000      	movne	r0, #0
 8010a22:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010a26:	461d      	mov	r5, r3
 8010a28:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8010a2c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8010a30:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8010a34:	2a7f      	cmp	r2, #127	; 0x7f
 8010a36:	d933      	bls.n	8010aa0 <pow+0x258>
 8010a38:	4974      	ldr	r1, [pc, #464]	; (8010c0c <pow+0x3c4>)
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	428d      	cmp	r5, r1
 8010a3e:	bf08      	it	eq
 8010a40:	4284      	cmpeq	r4, r0
 8010a42:	f000 81ae 	beq.w	8010da2 <pow+0x55a>
 8010a46:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d80e      	bhi.n	8010a6c <pow+0x224>
 8010a4e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010a52:	ed9d 7b00 	vldr	d7, [sp]
 8010a56:	42a9      	cmp	r1, r5
 8010a58:	bf08      	it	eq
 8010a5a:	42a0      	cmpeq	r0, r4
 8010a5c:	bf34      	ite	cc
 8010a5e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8010a62:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8010a66:	e73d      	b.n	80108e4 <pow+0x9c>
 8010a68:	2000      	movs	r0, #0
 8010a6a:	e7df      	b.n	8010a2c <pow+0x1e4>
 8010a6c:	42a9      	cmp	r1, r5
 8010a6e:	bf08      	it	eq
 8010a70:	42a0      	cmpeq	r0, r4
 8010a72:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010a76:	bf2c      	ite	cs
 8010a78:	2301      	movcs	r3, #1
 8010a7a:	2300      	movcc	r3, #0
 8010a7c:	4590      	cmp	r8, r2
 8010a7e:	bf8c      	ite	hi
 8010a80:	f04f 0800 	movhi.w	r8, #0
 8010a84:	f04f 0801 	movls.w	r8, #1
 8010a88:	4543      	cmp	r3, r8
 8010a8a:	f04f 0000 	mov.w	r0, #0
 8010a8e:	f000 80af 	beq.w	8010bf0 <pow+0x3a8>
 8010a92:	b01b      	add	sp, #108	; 0x6c
 8010a94:	ecbd 8b0a 	vpop	{d8-d12}
 8010a98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9c:	f000 bfd4 	b.w	8011a48 <__math_oflow>
 8010aa0:	f1bc 0f00 	cmp.w	ip, #0
 8010aa4:	d10e      	bne.n	8010ac4 <pow+0x27c>
 8010aa6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010c00 <pow+0x3b8>
 8010aaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010aae:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010ab2:	ec57 6b17 	vmov	r6, r7, d7
 8010ab6:	4b59      	ldr	r3, [pc, #356]	; (8010c1c <pow+0x3d4>)
 8010ab8:	2100      	movs	r1, #0
 8010aba:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010abe:	1874      	adds	r4, r6, r1
 8010ac0:	eb42 0503 	adc.w	r5, r2, r3
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	18e3      	adds	r3, r4, r3
 8010ac8:	4b55      	ldr	r3, [pc, #340]	; (8010c20 <pow+0x3d8>)
 8010aca:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010ace:	eb45 0303 	adc.w	r3, r5, r3
 8010ad2:	1519      	asrs	r1, r3, #20
 8010ad4:	ee03 1a10 	vmov	s6, r1
 8010ad8:	0d1e      	lsrs	r6, r3, #20
 8010ada:	2100      	movs	r1, #0
 8010adc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010ae0:	0536      	lsls	r6, r6, #20
 8010ae2:	1a63      	subs	r3, r4, r1
 8010ae4:	9312      	str	r3, [sp, #72]	; 0x48
 8010ae6:	eb65 0306 	sbc.w	r3, r5, r6
 8010aea:	9313      	str	r3, [sp, #76]	; 0x4c
 8010aec:	4b4d      	ldr	r3, [pc, #308]	; (8010c24 <pow+0x3dc>)
 8010aee:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8010af2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010af6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8010afa:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010afe:	ed93 7b00 	vldr	d7, [r3]
 8010b02:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8010b06:	ed93 4b02 	vldr	d4, [r3, #8]
 8010b0a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8010b0e:	eea3 5b07 	vfma.f64	d5, d3, d7
 8010b12:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8010b16:	ee36 9b05 	vadd.f64	d9, d6, d5
 8010b1a:	ee35 5b49 	vsub.f64	d5, d5, d9
 8010b1e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8010b22:	ed93 4b04 	vldr	d4, [r3, #16]
 8010b26:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010b2a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010b2e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8010b32:	ed93 3b08 	vldr	d3, [r3, #32]
 8010b36:	ee26 0b04 	vmul.f64	d0, d6, d4
 8010b3a:	eeb0 8b40 	vmov.f64	d8, d0
 8010b3e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8010b42:	ed93 4b06 	vldr	d4, [r3, #24]
 8010b46:	ee26 ab00 	vmul.f64	d10, d6, d0
 8010b4a:	ee39 1b00 	vadd.f64	d1, d9, d0
 8010b4e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8010b52:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010b56:	ee39 9b41 	vsub.f64	d9, d9, d1
 8010b5a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8010b5e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8010b62:	ee39 9b00 	vadd.f64	d9, d9, d0
 8010b66:	eea6 3b02 	vfma.f64	d3, d6, d2
 8010b6a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010b6e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8010b72:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8010b76:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8010b7a:	ed9d 6b00 	vldr	d6, [sp]
 8010b7e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8010b82:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010b86:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8010b8a:	ee31 7b09 	vadd.f64	d7, d1, d9
 8010b8e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010b92:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010b96:	eeb0 3b46 	vmov.f64	d3, d6
 8010b9a:	ee31 1b47 	vsub.f64	d1, d1, d7
 8010b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ba2:	ee31 9b09 	vadd.f64	d9, d1, d9
 8010ba6:	ed9d 6b00 	vldr	d6, [sp]
 8010baa:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8010bae:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8010bb2:	193c      	adds	r4, r7, r4
 8010bb4:	2c3e      	cmp	r4, #62	; 0x3e
 8010bb6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8010bba:	eea6 3b09 	vfma.f64	d3, d6, d9
 8010bbe:	d934      	bls.n	8010c2a <pow+0x3e2>
 8010bc0:	428c      	cmp	r4, r1
 8010bc2:	da0d      	bge.n	8010be0 <pow+0x398>
 8010bc4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010bc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bcc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	f43f ae87 	beq.w	80108e4 <pow+0x9c>
 8010bd6:	eeb1 0b40 	vneg.f64	d0, d0
 8010bda:	e683      	b.n	80108e4 <pow+0x9c>
 8010bdc:	2000      	movs	r0, #0
 8010bde:	e771      	b.n	8010ac4 <pow+0x27c>
 8010be0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8010be4:	d920      	bls.n	8010c28 <pow+0x3e0>
 8010be6:	2a00      	cmp	r2, #0
 8010be8:	f173 0300 	sbcs.w	r3, r3, #0
 8010bec:	f6bf af51 	bge.w	8010a92 <pow+0x24a>
 8010bf0:	b01b      	add	sp, #108	; 0x6c
 8010bf2:	ecbd 8b0a 	vpop	{d8-d12}
 8010bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bfa:	f000 bf1d 	b.w	8011a38 <__math_uflow>
 8010bfe:	bf00      	nop
 8010c00:	00000000 	.word	0x00000000
 8010c04:	43300000 	.word	0x43300000
 8010c08:	fff00000 	.word	0xfff00000
 8010c0c:	3ff00000 	.word	0x3ff00000
 8010c10:	ffe00000 	.word	0xffe00000
 8010c14:	7fe00000 	.word	0x7fe00000
 8010c18:	7fdfffff 	.word	0x7fdfffff
 8010c1c:	fcc00000 	.word	0xfcc00000
 8010c20:	c0196aab 	.word	0xc0196aab
 8010c24:	08011f50 	.word	0x08011f50
 8010c28:	460f      	mov	r7, r1
 8010c2a:	4e65      	ldr	r6, [pc, #404]	; (8010dc0 <pow+0x578>)
 8010c2c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8010c30:	ed96 6b02 	vldr	d6, [r6, #8]
 8010c34:	ed96 7b00 	vldr	d7, [r6]
 8010c38:	eeb0 5b46 	vmov.f64	d5, d6
 8010c3c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010c40:	ed8d 5b00 	vstr	d5, [sp]
 8010c44:	ee35 6b46 	vsub.f64	d6, d5, d6
 8010c48:	eeb0 5b44 	vmov.f64	d5, d4
 8010c4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c50:	ed96 7b04 	vldr	d7, [r6, #16]
 8010c54:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8010c58:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010c5c:	eeb0 7b45 	vmov.f64	d7, d5
 8010c60:	ed96 5b06 	vldr	d5, [r6, #24]
 8010c64:	1849      	adds	r1, r1, r1
 8010c66:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8010c6a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8010c6e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010c72:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8010c76:	ee33 3b07 	vadd.f64	d3, d3, d7
 8010c7a:	ee23 6b03 	vmul.f64	d6, d3, d3
 8010c7e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8010c82:	ed96 5b08 	vldr	d5, [r6, #32]
 8010c86:	ee33 7b07 	vadd.f64	d7, d3, d7
 8010c8a:	1814      	adds	r4, r2, r0
 8010c8c:	0365      	lsls	r5, r4, #13
 8010c8e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8010c92:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010c96:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010c9a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8010c9e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010ca2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	eb10 0a04 	adds.w	sl, r0, r4
 8010cac:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010cb0:	eb45 0b0c 	adc.w	fp, r5, ip
 8010cb4:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010cb8:	2f00      	cmp	r7, #0
 8010cba:	d16a      	bne.n	8010d92 <pow+0x54a>
 8010cbc:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8010cc0:	4639      	mov	r1, r7
 8010cc2:	ea50 0301 	orrs.w	r3, r0, r1
 8010cc6:	f04f 0300 	mov.w	r3, #0
 8010cca:	d115      	bne.n	8010cf8 <pow+0x4b0>
 8010ccc:	eb1a 0303 	adds.w	r3, sl, r3
 8010cd0:	ee0b 3a10 	vmov	s22, r3
 8010cd4:	4b3b      	ldr	r3, [pc, #236]	; (8010dc4 <pow+0x57c>)
 8010cd6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8010da8 <pow+0x560>
 8010cda:	eb4b 0303 	adc.w	r3, fp, r3
 8010cde:	ee0b 3a90 	vmov	s23, r3
 8010ce2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8010ce6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8010cea:	b01b      	add	sp, #108	; 0x6c
 8010cec:	ecbd 8b0a 	vpop	{d8-d12}
 8010cf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf4:	f000 bee0 	b.w	8011ab8 <__math_check_oflow>
 8010cf8:	eb1a 0303 	adds.w	r3, sl, r3
 8010cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8010cfe:	4b32      	ldr	r3, [pc, #200]	; (8010dc8 <pow+0x580>)
 8010d00:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010d04:	eb4b 0303 	adc.w	r3, fp, r3
 8010d08:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d0a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010d0e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010d12:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010d16:	eeb0 3bc7 	vabs.f64	d3, d7
 8010d1a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d22:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8010db0 <pow+0x568>
 8010d26:	d52b      	bpl.n	8010d80 <pow+0x538>
 8010d28:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010d2c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d34:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010d38:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010d3c:	bf48      	it	mi
 8010d3e:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010d42:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010d46:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010d4a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010d4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010d52:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010d56:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010d5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d62:	d105      	bne.n	8010d70 <pow+0x528>
 8010d64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d66:	463a      	mov	r2, r7
 8010d68:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010d6c:	ec43 2b17 	vmov	d7, r2, r3
 8010d70:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8010d74:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8010d78:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010d7c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8010d80:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010d84:	b01b      	add	sp, #108	; 0x6c
 8010d86:	ecbd 8b0a 	vpop	{d8-d12}
 8010d8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8e:	f000 be8a 	b.w	8011aa6 <__math_check_uflow>
 8010d92:	ec4b ab10 	vmov	d0, sl, fp
 8010d96:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010d9a:	e5a3      	b.n	80108e4 <pow+0x9c>
 8010d9c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8010db8 <pow+0x570>
 8010da0:	e5a0      	b.n	80108e4 <pow+0x9c>
 8010da2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010da6:	e59d      	b.n	80108e4 <pow+0x9c>
 8010da8:	00000000 	.word	0x00000000
 8010dac:	7f000000 	.word	0x7f000000
 8010db0:	00000000 	.word	0x00000000
 8010db4:	00100000 	.word	0x00100000
	...
 8010dc0:	08013150 	.word	0x08013150
 8010dc4:	c0f00000 	.word	0xc0f00000
 8010dc8:	3fe00000 	.word	0x3fe00000
 8010dcc:	00000000 	.word	0x00000000

08010dd0 <cos>:
 8010dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010dd2:	eeb0 7b40 	vmov.f64	d7, d0
 8010dd6:	ee17 3a90 	vmov	r3, s15
 8010dda:	4a1f      	ldr	r2, [pc, #124]	; (8010e58 <cos+0x88>)
 8010ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010de0:	4293      	cmp	r3, r2
 8010de2:	dc04      	bgt.n	8010dee <cos+0x1e>
 8010de4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010e50 <cos+0x80>
 8010de8:	f000 fac6 	bl	8011378 <__kernel_cos>
 8010dec:	e004      	b.n	8010df8 <cos+0x28>
 8010dee:	4a1b      	ldr	r2, [pc, #108]	; (8010e5c <cos+0x8c>)
 8010df0:	4293      	cmp	r3, r2
 8010df2:	dd04      	ble.n	8010dfe <cos+0x2e>
 8010df4:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010df8:	b005      	add	sp, #20
 8010dfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dfe:	4668      	mov	r0, sp
 8010e00:	f000 f976 	bl	80110f0 <__ieee754_rem_pio2>
 8010e04:	f000 0003 	and.w	r0, r0, #3
 8010e08:	2801      	cmp	r0, #1
 8010e0a:	d007      	beq.n	8010e1c <cos+0x4c>
 8010e0c:	2802      	cmp	r0, #2
 8010e0e:	d00e      	beq.n	8010e2e <cos+0x5e>
 8010e10:	b9a0      	cbnz	r0, 8010e3c <cos+0x6c>
 8010e12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e16:	ed9d 0b00 	vldr	d0, [sp]
 8010e1a:	e7e5      	b.n	8010de8 <cos+0x18>
 8010e1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e20:	ed9d 0b00 	vldr	d0, [sp]
 8010e24:	f000 fd94 	bl	8011950 <__kernel_sin>
 8010e28:	eeb1 0b40 	vneg.f64	d0, d0
 8010e2c:	e7e4      	b.n	8010df8 <cos+0x28>
 8010e2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e32:	ed9d 0b00 	vldr	d0, [sp]
 8010e36:	f000 fa9f 	bl	8011378 <__kernel_cos>
 8010e3a:	e7f5      	b.n	8010e28 <cos+0x58>
 8010e3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e40:	ed9d 0b00 	vldr	d0, [sp]
 8010e44:	2001      	movs	r0, #1
 8010e46:	f000 fd83 	bl	8011950 <__kernel_sin>
 8010e4a:	e7d5      	b.n	8010df8 <cos+0x28>
 8010e4c:	f3af 8000 	nop.w
	...
 8010e58:	3fe921fb 	.word	0x3fe921fb
 8010e5c:	7fefffff 	.word	0x7fefffff

08010e60 <sin>:
 8010e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e62:	eeb0 7b40 	vmov.f64	d7, d0
 8010e66:	ee17 3a90 	vmov	r3, s15
 8010e6a:	4a1f      	ldr	r2, [pc, #124]	; (8010ee8 <sin+0x88>)
 8010e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e70:	4293      	cmp	r3, r2
 8010e72:	dc05      	bgt.n	8010e80 <sin+0x20>
 8010e74:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010ee0 <sin+0x80>
 8010e78:	2000      	movs	r0, #0
 8010e7a:	f000 fd69 	bl	8011950 <__kernel_sin>
 8010e7e:	e004      	b.n	8010e8a <sin+0x2a>
 8010e80:	4a1a      	ldr	r2, [pc, #104]	; (8010eec <sin+0x8c>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	dd04      	ble.n	8010e90 <sin+0x30>
 8010e86:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010e8a:	b005      	add	sp, #20
 8010e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e90:	4668      	mov	r0, sp
 8010e92:	f000 f92d 	bl	80110f0 <__ieee754_rem_pio2>
 8010e96:	f000 0003 	and.w	r0, r0, #3
 8010e9a:	2801      	cmp	r0, #1
 8010e9c:	d008      	beq.n	8010eb0 <sin+0x50>
 8010e9e:	2802      	cmp	r0, #2
 8010ea0:	d00d      	beq.n	8010ebe <sin+0x5e>
 8010ea2:	b9b0      	cbnz	r0, 8010ed2 <sin+0x72>
 8010ea4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ea8:	ed9d 0b00 	vldr	d0, [sp]
 8010eac:	2001      	movs	r0, #1
 8010eae:	e7e4      	b.n	8010e7a <sin+0x1a>
 8010eb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010eb4:	ed9d 0b00 	vldr	d0, [sp]
 8010eb8:	f000 fa5e 	bl	8011378 <__kernel_cos>
 8010ebc:	e7e5      	b.n	8010e8a <sin+0x2a>
 8010ebe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ec2:	ed9d 0b00 	vldr	d0, [sp]
 8010ec6:	2001      	movs	r0, #1
 8010ec8:	f000 fd42 	bl	8011950 <__kernel_sin>
 8010ecc:	eeb1 0b40 	vneg.f64	d0, d0
 8010ed0:	e7db      	b.n	8010e8a <sin+0x2a>
 8010ed2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ed6:	ed9d 0b00 	vldr	d0, [sp]
 8010eda:	f000 fa4d 	bl	8011378 <__kernel_cos>
 8010ede:	e7f5      	b.n	8010ecc <sin+0x6c>
	...
 8010ee8:	3fe921fb 	.word	0x3fe921fb
 8010eec:	7fefffff 	.word	0x7fefffff

08010ef0 <atan2>:
 8010ef0:	f000 b82e 	b.w	8010f50 <__ieee754_atan2>
 8010ef4:	0000      	movs	r0, r0
	...

08010ef8 <sqrt>:
 8010ef8:	b508      	push	{r3, lr}
 8010efa:	ed2d 8b04 	vpush	{d8-d9}
 8010efe:	eeb0 8b40 	vmov.f64	d8, d0
 8010f02:	f000 fa35 	bl	8011370 <__ieee754_sqrt>
 8010f06:	4b10      	ldr	r3, [pc, #64]	; (8010f48 <sqrt+0x50>)
 8010f08:	f993 3000 	ldrsb.w	r3, [r3]
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	d011      	beq.n	8010f34 <sqrt+0x3c>
 8010f10:	eeb4 8b48 	vcmp.f64	d8, d8
 8010f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f18:	d60c      	bvs.n	8010f34 <sqrt+0x3c>
 8010f1a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8010f40 <sqrt+0x48>
 8010f1e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f26:	d505      	bpl.n	8010f34 <sqrt+0x3c>
 8010f28:	f7ff fc24 	bl	8010774 <__errno>
 8010f2c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010f30:	2321      	movs	r3, #33	; 0x21
 8010f32:	6003      	str	r3, [r0, #0]
 8010f34:	ecbd 8b04 	vpop	{d8-d9}
 8010f38:	bd08      	pop	{r3, pc}
 8010f3a:	bf00      	nop
 8010f3c:	f3af 8000 	nop.w
	...
 8010f48:	24000074 	.word	0x24000074
 8010f4c:	00000000 	.word	0x00000000

08010f50 <__ieee754_atan2>:
 8010f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f52:	ee11 6a10 	vmov	r6, s2
 8010f56:	ee11 0a90 	vmov	r0, s3
 8010f5a:	4273      	negs	r3, r6
 8010f5c:	4f60      	ldr	r7, [pc, #384]	; (80110e0 <__ieee754_atan2+0x190>)
 8010f5e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8010f62:	4333      	orrs	r3, r6
 8010f64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010f68:	42bb      	cmp	r3, r7
 8010f6a:	ed8d 0b00 	vstr	d0, [sp]
 8010f6e:	d80b      	bhi.n	8010f88 <__ieee754_atan2+0x38>
 8010f70:	e9dd c500 	ldrd	ip, r5, [sp]
 8010f74:	f1cc 0100 	rsb	r1, ip, #0
 8010f78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010f7c:	ea41 010c 	orr.w	r1, r1, ip
 8010f80:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8010f84:	42b9      	cmp	r1, r7
 8010f86:	d906      	bls.n	8010f96 <__ieee754_atan2+0x46>
 8010f88:	ed9d 7b00 	vldr	d7, [sp]
 8010f8c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8010f90:	ed8d 7b00 	vstr	d7, [sp]
 8010f94:	e054      	b.n	8011040 <__ieee754_atan2+0xf0>
 8010f96:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8010f9a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8010f9e:	4331      	orrs	r1, r6
 8010fa0:	d104      	bne.n	8010fac <__ieee754_atan2+0x5c>
 8010fa2:	b003      	add	sp, #12
 8010fa4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010fa8:	f000 bd9a 	b.w	8011ae0 <atan>
 8010fac:	1784      	asrs	r4, r0, #30
 8010fae:	f004 0402 	and.w	r4, r4, #2
 8010fb2:	ea53 010c 	orrs.w	r1, r3, ip
 8010fb6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8010fba:	d109      	bne.n	8010fd0 <__ieee754_atan2+0x80>
 8010fbc:	2c02      	cmp	r4, #2
 8010fbe:	d069      	beq.n	8011094 <__ieee754_atan2+0x144>
 8010fc0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80110a8 <__ieee754_atan2+0x158>
 8010fc4:	ed9d 6b00 	vldr	d6, [sp]
 8010fc8:	2c03      	cmp	r4, #3
 8010fca:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8010fce:	e7df      	b.n	8010f90 <__ieee754_atan2+0x40>
 8010fd0:	ea52 0106 	orrs.w	r1, r2, r6
 8010fd4:	d107      	bne.n	8010fe6 <__ieee754_atan2+0x96>
 8010fd6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80110b0 <__ieee754_atan2+0x160>
 8010fda:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80110b8 <__ieee754_atan2+0x168>
 8010fde:	2d00      	cmp	r5, #0
 8010fe0:	fe26 7b07 	vselge.f64	d7, d6, d7
 8010fe4:	e7d4      	b.n	8010f90 <__ieee754_atan2+0x40>
 8010fe6:	42ba      	cmp	r2, r7
 8010fe8:	d10f      	bne.n	801100a <__ieee754_atan2+0xba>
 8010fea:	4293      	cmp	r3, r2
 8010fec:	f104 34ff 	add.w	r4, r4, #4294967295
 8010ff0:	d107      	bne.n	8011002 <__ieee754_atan2+0xb2>
 8010ff2:	2c02      	cmp	r4, #2
 8010ff4:	d851      	bhi.n	801109a <__ieee754_atan2+0x14a>
 8010ff6:	4b3b      	ldr	r3, [pc, #236]	; (80110e4 <__ieee754_atan2+0x194>)
 8010ff8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010ffc:	ed94 7b00 	vldr	d7, [r4]
 8011000:	e7c6      	b.n	8010f90 <__ieee754_atan2+0x40>
 8011002:	2c02      	cmp	r4, #2
 8011004:	d84c      	bhi.n	80110a0 <__ieee754_atan2+0x150>
 8011006:	4b38      	ldr	r3, [pc, #224]	; (80110e8 <__ieee754_atan2+0x198>)
 8011008:	e7f6      	b.n	8010ff8 <__ieee754_atan2+0xa8>
 801100a:	42bb      	cmp	r3, r7
 801100c:	d0e3      	beq.n	8010fd6 <__ieee754_atan2+0x86>
 801100e:	1a9b      	subs	r3, r3, r2
 8011010:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011014:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011018:	da16      	bge.n	8011048 <__ieee754_atan2+0xf8>
 801101a:	2800      	cmp	r0, #0
 801101c:	da01      	bge.n	8011022 <__ieee754_atan2+0xd2>
 801101e:	323c      	adds	r2, #60	; 0x3c
 8011020:	db17      	blt.n	8011052 <__ieee754_atan2+0x102>
 8011022:	ed9d 7b00 	vldr	d7, [sp]
 8011026:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801102a:	f000 fe53 	bl	8011cd4 <fabs>
 801102e:	f000 fd57 	bl	8011ae0 <atan>
 8011032:	ed8d 0b00 	vstr	d0, [sp]
 8011036:	2c01      	cmp	r4, #1
 8011038:	d00e      	beq.n	8011058 <__ieee754_atan2+0x108>
 801103a:	2c02      	cmp	r4, #2
 801103c:	d014      	beq.n	8011068 <__ieee754_atan2+0x118>
 801103e:	b9f4      	cbnz	r4, 801107e <__ieee754_atan2+0x12e>
 8011040:	ed9d 0b00 	vldr	d0, [sp]
 8011044:	b003      	add	sp, #12
 8011046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011048:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80110b0 <__ieee754_atan2+0x160>
 801104c:	ed8d 7b00 	vstr	d7, [sp]
 8011050:	e7f1      	b.n	8011036 <__ieee754_atan2+0xe6>
 8011052:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 80110c0 <__ieee754_atan2+0x170>
 8011056:	e7f9      	b.n	801104c <__ieee754_atan2+0xfc>
 8011058:	e9dd 2300 	ldrd	r2, r3, [sp]
 801105c:	9901      	ldr	r1, [sp, #4]
 801105e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011062:	e9cd 2300 	strd	r2, r3, [sp]
 8011066:	e7eb      	b.n	8011040 <__ieee754_atan2+0xf0>
 8011068:	ed9d 6b00 	vldr	d6, [sp]
 801106c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80110c8 <__ieee754_atan2+0x178>
 8011070:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011074:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80110d0 <__ieee754_atan2+0x180>
 8011078:	ee36 7b47 	vsub.f64	d7, d6, d7
 801107c:	e788      	b.n	8010f90 <__ieee754_atan2+0x40>
 801107e:	ed9d 6b00 	vldr	d6, [sp]
 8011082:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80110c8 <__ieee754_atan2+0x178>
 8011086:	ee36 7b47 	vsub.f64	d7, d6, d7
 801108a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80110d0 <__ieee754_atan2+0x180>
 801108e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011092:	e77d      	b.n	8010f90 <__ieee754_atan2+0x40>
 8011094:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80110d0 <__ieee754_atan2+0x180>
 8011098:	e77a      	b.n	8010f90 <__ieee754_atan2+0x40>
 801109a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80110d8 <__ieee754_atan2+0x188>
 801109e:	e777      	b.n	8010f90 <__ieee754_atan2+0x40>
 80110a0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80110c0 <__ieee754_atan2+0x170>
 80110a4:	e774      	b.n	8010f90 <__ieee754_atan2+0x40>
 80110a6:	bf00      	nop
 80110a8:	54442d18 	.word	0x54442d18
 80110ac:	c00921fb 	.word	0xc00921fb
 80110b0:	54442d18 	.word	0x54442d18
 80110b4:	3ff921fb 	.word	0x3ff921fb
 80110b8:	54442d18 	.word	0x54442d18
 80110bc:	bff921fb 	.word	0xbff921fb
	...
 80110c8:	33145c07 	.word	0x33145c07
 80110cc:	3ca1a626 	.word	0x3ca1a626
 80110d0:	54442d18 	.word	0x54442d18
 80110d4:	400921fb 	.word	0x400921fb
 80110d8:	54442d18 	.word	0x54442d18
 80110dc:	3fe921fb 	.word	0x3fe921fb
 80110e0:	7ff00000 	.word	0x7ff00000
 80110e4:	08012f98 	.word	0x08012f98
 80110e8:	08012fb0 	.word	0x08012fb0
 80110ec:	00000000 	.word	0x00000000

080110f0 <__ieee754_rem_pio2>:
 80110f0:	b570      	push	{r4, r5, r6, lr}
 80110f2:	eeb0 7b40 	vmov.f64	d7, d0
 80110f6:	ee17 5a90 	vmov	r5, s15
 80110fa:	4b97      	ldr	r3, [pc, #604]	; (8011358 <__ieee754_rem_pio2+0x268>)
 80110fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011100:	429e      	cmp	r6, r3
 8011102:	b088      	sub	sp, #32
 8011104:	4604      	mov	r4, r0
 8011106:	dc07      	bgt.n	8011118 <__ieee754_rem_pio2+0x28>
 8011108:	2200      	movs	r2, #0
 801110a:	2300      	movs	r3, #0
 801110c:	ed84 0b00 	vstr	d0, [r4]
 8011110:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011114:	2000      	movs	r0, #0
 8011116:	e01b      	b.n	8011150 <__ieee754_rem_pio2+0x60>
 8011118:	4b90      	ldr	r3, [pc, #576]	; (801135c <__ieee754_rem_pio2+0x26c>)
 801111a:	429e      	cmp	r6, r3
 801111c:	dc3b      	bgt.n	8011196 <__ieee754_rem_pio2+0xa6>
 801111e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011122:	2d00      	cmp	r5, #0
 8011124:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011318 <__ieee754_rem_pio2+0x228>
 8011128:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801112c:	dd19      	ble.n	8011162 <__ieee754_rem_pio2+0x72>
 801112e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011132:	429e      	cmp	r6, r3
 8011134:	d00e      	beq.n	8011154 <__ieee754_rem_pio2+0x64>
 8011136:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011320 <__ieee754_rem_pio2+0x230>
 801113a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801113e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011142:	ed84 5b00 	vstr	d5, [r4]
 8011146:	ee37 7b46 	vsub.f64	d7, d7, d6
 801114a:	ed84 7b02 	vstr	d7, [r4, #8]
 801114e:	2001      	movs	r0, #1
 8011150:	b008      	add	sp, #32
 8011152:	bd70      	pop	{r4, r5, r6, pc}
 8011154:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011328 <__ieee754_rem_pio2+0x238>
 8011158:	ee37 7b46 	vsub.f64	d7, d7, d6
 801115c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011330 <__ieee754_rem_pio2+0x240>
 8011160:	e7eb      	b.n	801113a <__ieee754_rem_pio2+0x4a>
 8011162:	429e      	cmp	r6, r3
 8011164:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011168:	d00e      	beq.n	8011188 <__ieee754_rem_pio2+0x98>
 801116a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8011320 <__ieee754_rem_pio2+0x230>
 801116e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011172:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011176:	ed84 5b00 	vstr	d5, [r4]
 801117a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801117e:	f04f 30ff 	mov.w	r0, #4294967295
 8011182:	ed84 7b02 	vstr	d7, [r4, #8]
 8011186:	e7e3      	b.n	8011150 <__ieee754_rem_pio2+0x60>
 8011188:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011328 <__ieee754_rem_pio2+0x238>
 801118c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011190:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011330 <__ieee754_rem_pio2+0x240>
 8011194:	e7eb      	b.n	801116e <__ieee754_rem_pio2+0x7e>
 8011196:	4b72      	ldr	r3, [pc, #456]	; (8011360 <__ieee754_rem_pio2+0x270>)
 8011198:	429e      	cmp	r6, r3
 801119a:	dc6e      	bgt.n	801127a <__ieee754_rem_pio2+0x18a>
 801119c:	f000 fd9a 	bl	8011cd4 <fabs>
 80111a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80111a4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8011338 <__ieee754_rem_pio2+0x248>
 80111a8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80111ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80111b0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80111b4:	ee17 0a90 	vmov	r0, s15
 80111b8:	eeb1 4b45 	vneg.f64	d4, d5
 80111bc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011318 <__ieee754_rem_pio2+0x228>
 80111c0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80111c4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011320 <__ieee754_rem_pio2+0x230>
 80111c8:	281f      	cmp	r0, #31
 80111ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80111ce:	ee30 6b47 	vsub.f64	d6, d0, d7
 80111d2:	dc08      	bgt.n	80111e6 <__ieee754_rem_pio2+0xf6>
 80111d4:	4b63      	ldr	r3, [pc, #396]	; (8011364 <__ieee754_rem_pio2+0x274>)
 80111d6:	1e42      	subs	r2, r0, #1
 80111d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111dc:	42b3      	cmp	r3, r6
 80111de:	d002      	beq.n	80111e6 <__ieee754_rem_pio2+0xf6>
 80111e0:	ed84 6b00 	vstr	d6, [r4]
 80111e4:	e024      	b.n	8011230 <__ieee754_rem_pio2+0x140>
 80111e6:	ee16 3a90 	vmov	r3, s13
 80111ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80111ee:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80111f2:	2b10      	cmp	r3, #16
 80111f4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80111f8:	ddf2      	ble.n	80111e0 <__ieee754_rem_pio2+0xf0>
 80111fa:	eeb0 6b40 	vmov.f64	d6, d0
 80111fe:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8011328 <__ieee754_rem_pio2+0x238>
 8011202:	eea4 6b03 	vfma.f64	d6, d4, d3
 8011206:	ee30 7b46 	vsub.f64	d7, d0, d6
 801120a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801120e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8011330 <__ieee754_rem_pio2+0x240>
 8011212:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8011216:	ee36 3b47 	vsub.f64	d3, d6, d7
 801121a:	ee13 3a90 	vmov	r3, s7
 801121e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	2b31      	cmp	r3, #49	; 0x31
 8011226:	dc17      	bgt.n	8011258 <__ieee754_rem_pio2+0x168>
 8011228:	eeb0 0b46 	vmov.f64	d0, d6
 801122c:	ed84 3b00 	vstr	d3, [r4]
 8011230:	ed94 6b00 	vldr	d6, [r4]
 8011234:	2d00      	cmp	r5, #0
 8011236:	ee30 0b46 	vsub.f64	d0, d0, d6
 801123a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801123e:	ed84 7b02 	vstr	d7, [r4, #8]
 8011242:	da85      	bge.n	8011150 <__ieee754_rem_pio2+0x60>
 8011244:	eeb1 6b46 	vneg.f64	d6, d6
 8011248:	ed84 6b00 	vstr	d6, [r4]
 801124c:	eeb1 7b47 	vneg.f64	d7, d7
 8011250:	4240      	negs	r0, r0
 8011252:	ed84 7b02 	vstr	d7, [r4, #8]
 8011256:	e77b      	b.n	8011150 <__ieee754_rem_pio2+0x60>
 8011258:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8011340 <__ieee754_rem_pio2+0x250>
 801125c:	eeb0 0b46 	vmov.f64	d0, d6
 8011260:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011264:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011268:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8011348 <__ieee754_rem_pio2+0x258>
 801126c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011270:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011274:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011278:	e7b2      	b.n	80111e0 <__ieee754_rem_pio2+0xf0>
 801127a:	4b3b      	ldr	r3, [pc, #236]	; (8011368 <__ieee754_rem_pio2+0x278>)
 801127c:	429e      	cmp	r6, r3
 801127e:	dd06      	ble.n	801128e <__ieee754_rem_pio2+0x19e>
 8011280:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011284:	ed80 7b02 	vstr	d7, [r0, #8]
 8011288:	ed80 7b00 	vstr	d7, [r0]
 801128c:	e742      	b.n	8011114 <__ieee754_rem_pio2+0x24>
 801128e:	1532      	asrs	r2, r6, #20
 8011290:	ee10 0a10 	vmov	r0, s0
 8011294:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011298:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801129c:	ec41 0b17 	vmov	d7, r0, r1
 80112a0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80112a4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8011350 <__ieee754_rem_pio2+0x260>
 80112a8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80112ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112b0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80112b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80112b8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80112bc:	a902      	add	r1, sp, #8
 80112be:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80112c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112c6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80112ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 80112ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80112d2:	2603      	movs	r6, #3
 80112d4:	4608      	mov	r0, r1
 80112d6:	ed91 7b04 	vldr	d7, [r1, #16]
 80112da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80112de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e2:	4633      	mov	r3, r6
 80112e4:	f1a1 0108 	sub.w	r1, r1, #8
 80112e8:	f106 36ff 	add.w	r6, r6, #4294967295
 80112ec:	d0f3      	beq.n	80112d6 <__ieee754_rem_pio2+0x1e6>
 80112ee:	491f      	ldr	r1, [pc, #124]	; (801136c <__ieee754_rem_pio2+0x27c>)
 80112f0:	9101      	str	r1, [sp, #4]
 80112f2:	2102      	movs	r1, #2
 80112f4:	9100      	str	r1, [sp, #0]
 80112f6:	4621      	mov	r1, r4
 80112f8:	f000 f8aa 	bl	8011450 <__kernel_rem_pio2>
 80112fc:	2d00      	cmp	r5, #0
 80112fe:	f6bf af27 	bge.w	8011150 <__ieee754_rem_pio2+0x60>
 8011302:	ed94 7b00 	vldr	d7, [r4]
 8011306:	eeb1 7b47 	vneg.f64	d7, d7
 801130a:	ed84 7b00 	vstr	d7, [r4]
 801130e:	ed94 7b02 	vldr	d7, [r4, #8]
 8011312:	e79b      	b.n	801124c <__ieee754_rem_pio2+0x15c>
 8011314:	f3af 8000 	nop.w
 8011318:	54400000 	.word	0x54400000
 801131c:	3ff921fb 	.word	0x3ff921fb
 8011320:	1a626331 	.word	0x1a626331
 8011324:	3dd0b461 	.word	0x3dd0b461
 8011328:	1a600000 	.word	0x1a600000
 801132c:	3dd0b461 	.word	0x3dd0b461
 8011330:	2e037073 	.word	0x2e037073
 8011334:	3ba3198a 	.word	0x3ba3198a
 8011338:	6dc9c883 	.word	0x6dc9c883
 801133c:	3fe45f30 	.word	0x3fe45f30
 8011340:	2e000000 	.word	0x2e000000
 8011344:	3ba3198a 	.word	0x3ba3198a
 8011348:	252049c1 	.word	0x252049c1
 801134c:	397b839a 	.word	0x397b839a
 8011350:	00000000 	.word	0x00000000
 8011354:	41700000 	.word	0x41700000
 8011358:	3fe921fb 	.word	0x3fe921fb
 801135c:	4002d97b 	.word	0x4002d97b
 8011360:	413921fb 	.word	0x413921fb
 8011364:	08012fc8 	.word	0x08012fc8
 8011368:	7fefffff 	.word	0x7fefffff
 801136c:	08013048 	.word	0x08013048

08011370 <__ieee754_sqrt>:
 8011370:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011374:	4770      	bx	lr
	...

08011378 <__kernel_cos>:
 8011378:	ee10 1a90 	vmov	r1, s1
 801137c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011380:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011384:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011388:	da05      	bge.n	8011396 <__kernel_cos+0x1e>
 801138a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801138e:	ee17 3a90 	vmov	r3, s15
 8011392:	2b00      	cmp	r3, #0
 8011394:	d03d      	beq.n	8011412 <__kernel_cos+0x9a>
 8011396:	ee20 3b00 	vmul.f64	d3, d0, d0
 801139a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011418 <__kernel_cos+0xa0>
 801139e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011420 <__kernel_cos+0xa8>
 80113a2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80113a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011428 <__kernel_cos+0xb0>
 80113aa:	eea6 7b03 	vfma.f64	d7, d6, d3
 80113ae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011430 <__kernel_cos+0xb8>
 80113b2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80113b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011438 <__kernel_cos+0xc0>
 80113ba:	4b23      	ldr	r3, [pc, #140]	; (8011448 <__kernel_cos+0xd0>)
 80113bc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80113c0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011440 <__kernel_cos+0xc8>
 80113c4:	4299      	cmp	r1, r3
 80113c6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80113ca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80113ce:	ee26 5b03 	vmul.f64	d5, d6, d3
 80113d2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80113d6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80113da:	eea3 6b05 	vfma.f64	d6, d3, d5
 80113de:	dc04      	bgt.n	80113ea <__kernel_cos+0x72>
 80113e0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80113e4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80113e8:	4770      	bx	lr
 80113ea:	4b18      	ldr	r3, [pc, #96]	; (801144c <__kernel_cos+0xd4>)
 80113ec:	4299      	cmp	r1, r3
 80113ee:	dc0d      	bgt.n	801140c <__kernel_cos+0x94>
 80113f0:	2200      	movs	r2, #0
 80113f2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80113f6:	ec43 2b15 	vmov	d5, r2, r3
 80113fa:	ee34 0b45 	vsub.f64	d0, d4, d5
 80113fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011402:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011406:	ee30 0b47 	vsub.f64	d0, d0, d7
 801140a:	4770      	bx	lr
 801140c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011410:	e7f3      	b.n	80113fa <__kernel_cos+0x82>
 8011412:	eeb0 0b44 	vmov.f64	d0, d4
 8011416:	4770      	bx	lr
 8011418:	be8838d4 	.word	0xbe8838d4
 801141c:	bda8fae9 	.word	0xbda8fae9
 8011420:	bdb4b1c4 	.word	0xbdb4b1c4
 8011424:	3e21ee9e 	.word	0x3e21ee9e
 8011428:	809c52ad 	.word	0x809c52ad
 801142c:	be927e4f 	.word	0xbe927e4f
 8011430:	19cb1590 	.word	0x19cb1590
 8011434:	3efa01a0 	.word	0x3efa01a0
 8011438:	16c15177 	.word	0x16c15177
 801143c:	bf56c16c 	.word	0xbf56c16c
 8011440:	5555554c 	.word	0x5555554c
 8011444:	3fa55555 	.word	0x3fa55555
 8011448:	3fd33332 	.word	0x3fd33332
 801144c:	3fe90000 	.word	0x3fe90000

08011450 <__kernel_rem_pio2>:
 8011450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011454:	ed2d 8b06 	vpush	{d8-d10}
 8011458:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 801145c:	469b      	mov	fp, r3
 801145e:	460f      	mov	r7, r1
 8011460:	4bcf      	ldr	r3, [pc, #828]	; (80117a0 <__kernel_rem_pio2+0x350>)
 8011462:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8011464:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8011468:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801146c:	9000      	str	r0, [sp, #0]
 801146e:	f112 0f14 	cmn.w	r2, #20
 8011472:	bfa8      	it	ge
 8011474:	2318      	movge	r3, #24
 8011476:	f10b 31ff 	add.w	r1, fp, #4294967295
 801147a:	bfb8      	it	lt
 801147c:	2300      	movlt	r3, #0
 801147e:	f06f 0417 	mvn.w	r4, #23
 8011482:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8011788 <__kernel_rem_pio2+0x338>
 8011486:	bfa4      	itt	ge
 8011488:	f1a2 0a03 	subge.w	sl, r2, #3
 801148c:	fb9a f3f3 	sdivge	r3, sl, r3
 8011490:	fb03 4404 	mla	r4, r3, r4, r4
 8011494:	1a5d      	subs	r5, r3, r1
 8011496:	4414      	add	r4, r2
 8011498:	eb09 0601 	add.w	r6, r9, r1
 801149c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80114a0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80114a4:	2200      	movs	r2, #0
 80114a6:	42b2      	cmp	r2, r6
 80114a8:	dd12      	ble.n	80114d0 <__kernel_rem_pio2+0x80>
 80114aa:	aa18      	add	r2, sp, #96	; 0x60
 80114ac:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80114b0:	460e      	mov	r6, r1
 80114b2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80114b6:	f1cb 0a01 	rsb	sl, fp, #1
 80114ba:	eb0a 0006 	add.w	r0, sl, r6
 80114be:	4581      	cmp	r9, r0
 80114c0:	db25      	blt.n	801150e <__kernel_rem_pio2+0xbe>
 80114c2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8011788 <__kernel_rem_pio2+0x338>
 80114c6:	f8dd e000 	ldr.w	lr, [sp]
 80114ca:	4615      	mov	r5, r2
 80114cc:	2000      	movs	r0, #0
 80114ce:	e015      	b.n	80114fc <__kernel_rem_pio2+0xac>
 80114d0:	42d5      	cmn	r5, r2
 80114d2:	d409      	bmi.n	80114e8 <__kernel_rem_pio2+0x98>
 80114d4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80114d8:	ee07 0a90 	vmov	s15, r0
 80114dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80114e0:	eca8 7b02 	vstmia	r8!, {d7}
 80114e4:	3201      	adds	r2, #1
 80114e6:	e7de      	b.n	80114a6 <__kernel_rem_pio2+0x56>
 80114e8:	eeb0 7b46 	vmov.f64	d7, d6
 80114ec:	e7f8      	b.n	80114e0 <__kernel_rem_pio2+0x90>
 80114ee:	ecbe 5b02 	vldmia	lr!, {d5}
 80114f2:	ed95 6b00 	vldr	d6, [r5]
 80114f6:	3001      	adds	r0, #1
 80114f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80114fc:	4288      	cmp	r0, r1
 80114fe:	f1a5 0508 	sub.w	r5, r5, #8
 8011502:	ddf4      	ble.n	80114ee <__kernel_rem_pio2+0x9e>
 8011504:	eca8 7b02 	vstmia	r8!, {d7}
 8011508:	3208      	adds	r2, #8
 801150a:	3601      	adds	r6, #1
 801150c:	e7d5      	b.n	80114ba <__kernel_rem_pio2+0x6a>
 801150e:	aa04      	add	r2, sp, #16
 8011510:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8011790 <__kernel_rem_pio2+0x340>
 8011514:	ed9f aba0 	vldr	d10, [pc, #640]	; 8011798 <__kernel_rem_pio2+0x348>
 8011518:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801151c:	9201      	str	r2, [sp, #4]
 801151e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8011522:	464e      	mov	r6, r9
 8011524:	ab90      	add	r3, sp, #576	; 0x240
 8011526:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801152a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801152e:	ab04      	add	r3, sp, #16
 8011530:	4618      	mov	r0, r3
 8011532:	4632      	mov	r2, r6
 8011534:	2a00      	cmp	r2, #0
 8011536:	dc4e      	bgt.n	80115d6 <__kernel_rem_pio2+0x186>
 8011538:	4620      	mov	r0, r4
 801153a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801153e:	f000 fc47 	bl	8011dd0 <scalbn>
 8011542:	eeb0 8b40 	vmov.f64	d8, d0
 8011546:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801154a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801154e:	f000 fbcb 	bl	8011ce8 <floor>
 8011552:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011556:	eea0 8b47 	vfms.f64	d8, d0, d7
 801155a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801155e:	2c00      	cmp	r4, #0
 8011560:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011564:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8011568:	ee38 8b40 	vsub.f64	d8, d8, d0
 801156c:	ee17 8a90 	vmov	r8, s15
 8011570:	dd46      	ble.n	8011600 <__kernel_rem_pio2+0x1b0>
 8011572:	1e70      	subs	r0, r6, #1
 8011574:	aa04      	add	r2, sp, #16
 8011576:	f1c4 0c18 	rsb	ip, r4, #24
 801157a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 801157e:	fa45 f20c 	asr.w	r2, r5, ip
 8011582:	4490      	add	r8, r2
 8011584:	fa02 f20c 	lsl.w	r2, r2, ip
 8011588:	1aad      	subs	r5, r5, r2
 801158a:	aa04      	add	r2, sp, #16
 801158c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8011590:	f1c4 0217 	rsb	r2, r4, #23
 8011594:	4115      	asrs	r5, r2
 8011596:	2d00      	cmp	r5, #0
 8011598:	dd41      	ble.n	801161e <__kernel_rem_pio2+0x1ce>
 801159a:	f04f 0c00 	mov.w	ip, #0
 801159e:	f108 0801 	add.w	r8, r8, #1
 80115a2:	4660      	mov	r0, ip
 80115a4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80115a8:	4566      	cmp	r6, ip
 80115aa:	dc69      	bgt.n	8011680 <__kernel_rem_pio2+0x230>
 80115ac:	2c00      	cmp	r4, #0
 80115ae:	dd03      	ble.n	80115b8 <__kernel_rem_pio2+0x168>
 80115b0:	2c01      	cmp	r4, #1
 80115b2:	d076      	beq.n	80116a2 <__kernel_rem_pio2+0x252>
 80115b4:	2c02      	cmp	r4, #2
 80115b6:	d07f      	beq.n	80116b8 <__kernel_rem_pio2+0x268>
 80115b8:	2d02      	cmp	r5, #2
 80115ba:	d130      	bne.n	801161e <__kernel_rem_pio2+0x1ce>
 80115bc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80115c0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80115c4:	b358      	cbz	r0, 801161e <__kernel_rem_pio2+0x1ce>
 80115c6:	4620      	mov	r0, r4
 80115c8:	9102      	str	r1, [sp, #8]
 80115ca:	f000 fc01 	bl	8011dd0 <scalbn>
 80115ce:	9902      	ldr	r1, [sp, #8]
 80115d0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80115d4:	e023      	b.n	801161e <__kernel_rem_pio2+0x1ce>
 80115d6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80115da:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80115de:	3a01      	subs	r2, #1
 80115e0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80115e4:	ad68      	add	r5, sp, #416	; 0x1a0
 80115e6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80115ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80115ee:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80115f2:	eca0 0a01 	vstmia	r0!, {s0}
 80115f6:	ed95 0b00 	vldr	d0, [r5]
 80115fa:	ee37 0b00 	vadd.f64	d0, d7, d0
 80115fe:	e799      	b.n	8011534 <__kernel_rem_pio2+0xe4>
 8011600:	d105      	bne.n	801160e <__kernel_rem_pio2+0x1be>
 8011602:	1e72      	subs	r2, r6, #1
 8011604:	a804      	add	r0, sp, #16
 8011606:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 801160a:	15ed      	asrs	r5, r5, #23
 801160c:	e7c3      	b.n	8011596 <__kernel_rem_pio2+0x146>
 801160e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011612:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801161a:	da2f      	bge.n	801167c <__kernel_rem_pio2+0x22c>
 801161c:	2500      	movs	r5, #0
 801161e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011626:	f040 8087 	bne.w	8011738 <__kernel_rem_pio2+0x2e8>
 801162a:	1e73      	subs	r3, r6, #1
 801162c:	4618      	mov	r0, r3
 801162e:	f04f 0c00 	mov.w	ip, #0
 8011632:	4548      	cmp	r0, r9
 8011634:	da47      	bge.n	80116c6 <__kernel_rem_pio2+0x276>
 8011636:	f1bc 0f00 	cmp.w	ip, #0
 801163a:	d070      	beq.n	801171e <__kernel_rem_pio2+0x2ce>
 801163c:	aa04      	add	r2, sp, #16
 801163e:	3c18      	subs	r4, #24
 8011640:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011644:	2a00      	cmp	r2, #0
 8011646:	d075      	beq.n	8011734 <__kernel_rem_pio2+0x2e4>
 8011648:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801164c:	4620      	mov	r0, r4
 801164e:	9300      	str	r3, [sp, #0]
 8011650:	f000 fbbe 	bl	8011dd0 <scalbn>
 8011654:	9b00      	ldr	r3, [sp, #0]
 8011656:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011790 <__kernel_rem_pio2+0x340>
 801165a:	461a      	mov	r2, r3
 801165c:	2a00      	cmp	r2, #0
 801165e:	f280 80ac 	bge.w	80117ba <__kernel_rem_pio2+0x36a>
 8011662:	4619      	mov	r1, r3
 8011664:	2000      	movs	r0, #0
 8011666:	2900      	cmp	r1, #0
 8011668:	f2c0 80cd 	blt.w	8011806 <__kernel_rem_pio2+0x3b6>
 801166c:	aa68      	add	r2, sp, #416	; 0x1a0
 801166e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8011672:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8011788 <__kernel_rem_pio2+0x338>
 8011676:	4e4b      	ldr	r6, [pc, #300]	; (80117a4 <__kernel_rem_pio2+0x354>)
 8011678:	2200      	movs	r2, #0
 801167a:	e0b8      	b.n	80117ee <__kernel_rem_pio2+0x39e>
 801167c:	2502      	movs	r5, #2
 801167e:	e78c      	b.n	801159a <__kernel_rem_pio2+0x14a>
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	b948      	cbnz	r0, 8011698 <__kernel_rem_pio2+0x248>
 8011684:	b11a      	cbz	r2, 801168e <__kernel_rem_pio2+0x23e>
 8011686:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801168a:	601a      	str	r2, [r3, #0]
 801168c:	2201      	movs	r2, #1
 801168e:	f10c 0c01 	add.w	ip, ip, #1
 8011692:	3304      	adds	r3, #4
 8011694:	4610      	mov	r0, r2
 8011696:	e787      	b.n	80115a8 <__kernel_rem_pio2+0x158>
 8011698:	ebae 0202 	sub.w	r2, lr, r2
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	4602      	mov	r2, r0
 80116a0:	e7f5      	b.n	801168e <__kernel_rem_pio2+0x23e>
 80116a2:	1e72      	subs	r2, r6, #1
 80116a4:	ab04      	add	r3, sp, #16
 80116a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80116ae:	f10d 0c10 	add.w	ip, sp, #16
 80116b2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80116b6:	e77f      	b.n	80115b8 <__kernel_rem_pio2+0x168>
 80116b8:	1e72      	subs	r2, r6, #1
 80116ba:	ab04      	add	r3, sp, #16
 80116bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80116c4:	e7f3      	b.n	80116ae <__kernel_rem_pio2+0x25e>
 80116c6:	aa04      	add	r2, sp, #16
 80116c8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80116cc:	3801      	subs	r0, #1
 80116ce:	ea4c 0c02 	orr.w	ip, ip, r2
 80116d2:	e7ae      	b.n	8011632 <__kernel_rem_pio2+0x1e2>
 80116d4:	3001      	adds	r0, #1
 80116d6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80116da:	2a00      	cmp	r2, #0
 80116dc:	d0fa      	beq.n	80116d4 <__kernel_rem_pio2+0x284>
 80116de:	eb06 020b 	add.w	r2, r6, fp
 80116e2:	ad18      	add	r5, sp, #96	; 0x60
 80116e4:	1c73      	adds	r3, r6, #1
 80116e6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80116ea:	4406      	add	r6, r0
 80116ec:	429e      	cmp	r6, r3
 80116ee:	f6ff af19 	blt.w	8011524 <__kernel_rem_pio2+0xd4>
 80116f2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80116f6:	9d00      	ldr	r5, [sp, #0]
 80116f8:	ee07 0a90 	vmov	s15, r0
 80116fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011700:	2000      	movs	r0, #0
 8011702:	eca2 7b02 	vstmia	r2!, {d7}
 8011706:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011788 <__kernel_rem_pio2+0x338>
 801170a:	4694      	mov	ip, r2
 801170c:	4288      	cmp	r0, r1
 801170e:	dd09      	ble.n	8011724 <__kernel_rem_pio2+0x2d4>
 8011710:	a868      	add	r0, sp, #416	; 0x1a0
 8011712:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8011716:	ed80 7b00 	vstr	d7, [r0]
 801171a:	3301      	adds	r3, #1
 801171c:	e7e6      	b.n	80116ec <__kernel_rem_pio2+0x29c>
 801171e:	9b01      	ldr	r3, [sp, #4]
 8011720:	2001      	movs	r0, #1
 8011722:	e7d8      	b.n	80116d6 <__kernel_rem_pio2+0x286>
 8011724:	ecb5 5b02 	vldmia	r5!, {d5}
 8011728:	ed3c 6b02 	vldmdb	ip!, {d6}
 801172c:	3001      	adds	r0, #1
 801172e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011732:	e7eb      	b.n	801170c <__kernel_rem_pio2+0x2bc>
 8011734:	3b01      	subs	r3, #1
 8011736:	e781      	b.n	801163c <__kernel_rem_pio2+0x1ec>
 8011738:	4260      	negs	r0, r4
 801173a:	eeb0 0b48 	vmov.f64	d0, d8
 801173e:	f000 fb47 	bl	8011dd0 <scalbn>
 8011742:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011798 <__kernel_rem_pio2+0x348>
 8011746:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801174e:	db2b      	blt.n	80117a8 <__kernel_rem_pio2+0x358>
 8011750:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011790 <__kernel_rem_pio2+0x340>
 8011754:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011758:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801175c:	aa04      	add	r2, sp, #16
 801175e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011762:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011766:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801176a:	a904      	add	r1, sp, #16
 801176c:	ee10 3a10 	vmov	r3, s0
 8011770:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011774:	ee17 2a10 	vmov	r2, s14
 8011778:	1c73      	adds	r3, r6, #1
 801177a:	3418      	adds	r4, #24
 801177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011780:	e762      	b.n	8011648 <__kernel_rem_pio2+0x1f8>
 8011782:	bf00      	nop
 8011784:	f3af 8000 	nop.w
	...
 8011794:	3e700000 	.word	0x3e700000
 8011798:	00000000 	.word	0x00000000
 801179c:	41700000 	.word	0x41700000
 80117a0:	08013a00 	.word	0x08013a00
 80117a4:	080139c0 	.word	0x080139c0
 80117a8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80117ac:	aa04      	add	r2, sp, #16
 80117ae:	ee10 3a10 	vmov	r3, s0
 80117b2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80117b6:	4633      	mov	r3, r6
 80117b8:	e746      	b.n	8011648 <__kernel_rem_pio2+0x1f8>
 80117ba:	a804      	add	r0, sp, #16
 80117bc:	a968      	add	r1, sp, #416	; 0x1a0
 80117be:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80117c2:	9000      	str	r0, [sp, #0]
 80117c4:	ee07 0a90 	vmov	s15, r0
 80117c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80117cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80117d0:	3a01      	subs	r2, #1
 80117d2:	ee27 7b00 	vmul.f64	d7, d7, d0
 80117d6:	ee20 0b06 	vmul.f64	d0, d0, d6
 80117da:	ed81 7b00 	vstr	d7, [r1]
 80117de:	e73d      	b.n	801165c <__kernel_rem_pio2+0x20c>
 80117e0:	ecb6 5b02 	vldmia	r6!, {d5}
 80117e4:	ecb4 6b02 	vldmia	r4!, {d6}
 80117e8:	3201      	adds	r2, #1
 80117ea:	eea5 7b06 	vfma.f64	d7, d5, d6
 80117ee:	454a      	cmp	r2, r9
 80117f0:	dc01      	bgt.n	80117f6 <__kernel_rem_pio2+0x3a6>
 80117f2:	4290      	cmp	r0, r2
 80117f4:	daf4      	bge.n	80117e0 <__kernel_rem_pio2+0x390>
 80117f6:	aa40      	add	r2, sp, #256	; 0x100
 80117f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80117fc:	ed82 7b00 	vstr	d7, [r2]
 8011800:	3901      	subs	r1, #1
 8011802:	3001      	adds	r0, #1
 8011804:	e72f      	b.n	8011666 <__kernel_rem_pio2+0x216>
 8011806:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011808:	2a02      	cmp	r2, #2
 801180a:	dc0a      	bgt.n	8011822 <__kernel_rem_pio2+0x3d2>
 801180c:	2a00      	cmp	r2, #0
 801180e:	dc5a      	bgt.n	80118c6 <__kernel_rem_pio2+0x476>
 8011810:	d039      	beq.n	8011886 <__kernel_rem_pio2+0x436>
 8011812:	f008 0007 	and.w	r0, r8, #7
 8011816:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 801181a:	ecbd 8b06 	vpop	{d8-d10}
 801181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011822:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011824:	2a03      	cmp	r2, #3
 8011826:	d1f4      	bne.n	8011812 <__kernel_rem_pio2+0x3c2>
 8011828:	aa40      	add	r2, sp, #256	; 0x100
 801182a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801182e:	4611      	mov	r1, r2
 8011830:	4618      	mov	r0, r3
 8011832:	2800      	cmp	r0, #0
 8011834:	f1a1 0108 	sub.w	r1, r1, #8
 8011838:	dc52      	bgt.n	80118e0 <__kernel_rem_pio2+0x490>
 801183a:	4619      	mov	r1, r3
 801183c:	2901      	cmp	r1, #1
 801183e:	f1a2 0208 	sub.w	r2, r2, #8
 8011842:	dc5d      	bgt.n	8011900 <__kernel_rem_pio2+0x4b0>
 8011844:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8011948 <__kernel_rem_pio2+0x4f8>
 8011848:	2b01      	cmp	r3, #1
 801184a:	dc69      	bgt.n	8011920 <__kernel_rem_pio2+0x4d0>
 801184c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8011850:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8011854:	2d00      	cmp	r5, #0
 8011856:	d16c      	bne.n	8011932 <__kernel_rem_pio2+0x4e2>
 8011858:	ed87 5b00 	vstr	d5, [r7]
 801185c:	ed87 6b02 	vstr	d6, [r7, #8]
 8011860:	ed87 7b04 	vstr	d7, [r7, #16]
 8011864:	e7d5      	b.n	8011812 <__kernel_rem_pio2+0x3c2>
 8011866:	aa40      	add	r2, sp, #256	; 0x100
 8011868:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801186c:	ed92 6b00 	vldr	d6, [r2]
 8011870:	3b01      	subs	r3, #1
 8011872:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011876:	2b00      	cmp	r3, #0
 8011878:	daf5      	bge.n	8011866 <__kernel_rem_pio2+0x416>
 801187a:	b10d      	cbz	r5, 8011880 <__kernel_rem_pio2+0x430>
 801187c:	eeb1 7b47 	vneg.f64	d7, d7
 8011880:	ed87 7b00 	vstr	d7, [r7]
 8011884:	e7c5      	b.n	8011812 <__kernel_rem_pio2+0x3c2>
 8011886:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011948 <__kernel_rem_pio2+0x4f8>
 801188a:	e7f4      	b.n	8011876 <__kernel_rem_pio2+0x426>
 801188c:	a940      	add	r1, sp, #256	; 0x100
 801188e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011892:	ed91 7b00 	vldr	d7, [r1]
 8011896:	3a01      	subs	r2, #1
 8011898:	ee36 6b07 	vadd.f64	d6, d6, d7
 801189c:	2a00      	cmp	r2, #0
 801189e:	daf5      	bge.n	801188c <__kernel_rem_pio2+0x43c>
 80118a0:	b1ad      	cbz	r5, 80118ce <__kernel_rem_pio2+0x47e>
 80118a2:	eeb1 7b46 	vneg.f64	d7, d6
 80118a6:	ed87 7b00 	vstr	d7, [r7]
 80118aa:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80118ae:	a942      	add	r1, sp, #264	; 0x108
 80118b0:	2201      	movs	r2, #1
 80118b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118b6:	4293      	cmp	r3, r2
 80118b8:	da0c      	bge.n	80118d4 <__kernel_rem_pio2+0x484>
 80118ba:	b10d      	cbz	r5, 80118c0 <__kernel_rem_pio2+0x470>
 80118bc:	eeb1 7b47 	vneg.f64	d7, d7
 80118c0:	ed87 7b02 	vstr	d7, [r7, #8]
 80118c4:	e7a5      	b.n	8011812 <__kernel_rem_pio2+0x3c2>
 80118c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011948 <__kernel_rem_pio2+0x4f8>
 80118ca:	461a      	mov	r2, r3
 80118cc:	e7e6      	b.n	801189c <__kernel_rem_pio2+0x44c>
 80118ce:	eeb0 7b46 	vmov.f64	d7, d6
 80118d2:	e7e8      	b.n	80118a6 <__kernel_rem_pio2+0x456>
 80118d4:	ecb1 6b02 	vldmia	r1!, {d6}
 80118d8:	3201      	adds	r2, #1
 80118da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118de:	e7ea      	b.n	80118b6 <__kernel_rem_pio2+0x466>
 80118e0:	ed91 7b00 	vldr	d7, [r1]
 80118e4:	ed91 5b02 	vldr	d5, [r1, #8]
 80118e8:	3801      	subs	r0, #1
 80118ea:	ee37 6b05 	vadd.f64	d6, d7, d5
 80118ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118f2:	ed81 6b00 	vstr	d6, [r1]
 80118f6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80118fa:	ed81 7b02 	vstr	d7, [r1, #8]
 80118fe:	e798      	b.n	8011832 <__kernel_rem_pio2+0x3e2>
 8011900:	ed92 7b00 	vldr	d7, [r2]
 8011904:	ed92 5b02 	vldr	d5, [r2, #8]
 8011908:	3901      	subs	r1, #1
 801190a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801190e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011912:	ed82 6b00 	vstr	d6, [r2]
 8011916:	ee37 7b05 	vadd.f64	d7, d7, d5
 801191a:	ed82 7b02 	vstr	d7, [r2, #8]
 801191e:	e78d      	b.n	801183c <__kernel_rem_pio2+0x3ec>
 8011920:	aa40      	add	r2, sp, #256	; 0x100
 8011922:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011926:	ed92 6b00 	vldr	d6, [r2]
 801192a:	3b01      	subs	r3, #1
 801192c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011930:	e78a      	b.n	8011848 <__kernel_rem_pio2+0x3f8>
 8011932:	eeb1 5b45 	vneg.f64	d5, d5
 8011936:	eeb1 6b46 	vneg.f64	d6, d6
 801193a:	ed87 5b00 	vstr	d5, [r7]
 801193e:	eeb1 7b47 	vneg.f64	d7, d7
 8011942:	ed87 6b02 	vstr	d6, [r7, #8]
 8011946:	e78b      	b.n	8011860 <__kernel_rem_pio2+0x410>
	...

08011950 <__kernel_sin>:
 8011950:	ee10 3a90 	vmov	r3, s1
 8011954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011958:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801195c:	da04      	bge.n	8011968 <__kernel_sin+0x18>
 801195e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011962:	ee17 3a90 	vmov	r3, s15
 8011966:	b35b      	cbz	r3, 80119c0 <__kernel_sin+0x70>
 8011968:	ee20 6b00 	vmul.f64	d6, d0, d0
 801196c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011970:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80119c8 <__kernel_sin+0x78>
 8011974:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119d0 <__kernel_sin+0x80>
 8011978:	eea6 4b07 	vfma.f64	d4, d6, d7
 801197c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80119d8 <__kernel_sin+0x88>
 8011980:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011984:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119e0 <__kernel_sin+0x90>
 8011988:	eea7 4b06 	vfma.f64	d4, d7, d6
 801198c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80119e8 <__kernel_sin+0x98>
 8011990:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011994:	b930      	cbnz	r0, 80119a4 <__kernel_sin+0x54>
 8011996:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80119f0 <__kernel_sin+0xa0>
 801199a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801199e:	eea4 0b05 	vfma.f64	d0, d4, d5
 80119a2:	4770      	bx	lr
 80119a4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80119a8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80119ac:	eea1 7b04 	vfma.f64	d7, d1, d4
 80119b0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80119b4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80119f8 <__kernel_sin+0xa8>
 80119b8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80119bc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop
 80119c4:	f3af 8000 	nop.w
 80119c8:	5acfd57c 	.word	0x5acfd57c
 80119cc:	3de5d93a 	.word	0x3de5d93a
 80119d0:	8a2b9ceb 	.word	0x8a2b9ceb
 80119d4:	be5ae5e6 	.word	0xbe5ae5e6
 80119d8:	57b1fe7d 	.word	0x57b1fe7d
 80119dc:	3ec71de3 	.word	0x3ec71de3
 80119e0:	19c161d5 	.word	0x19c161d5
 80119e4:	bf2a01a0 	.word	0xbf2a01a0
 80119e8:	1110f8a6 	.word	0x1110f8a6
 80119ec:	3f811111 	.word	0x3f811111
 80119f0:	55555549 	.word	0x55555549
 80119f4:	bfc55555 	.word	0xbfc55555
 80119f8:	55555549 	.word	0x55555549
 80119fc:	3fc55555 	.word	0x3fc55555

08011a00 <with_errno>:
 8011a00:	b513      	push	{r0, r1, r4, lr}
 8011a02:	4604      	mov	r4, r0
 8011a04:	ed8d 0b00 	vstr	d0, [sp]
 8011a08:	f7fe feb4 	bl	8010774 <__errno>
 8011a0c:	ed9d 0b00 	vldr	d0, [sp]
 8011a10:	6004      	str	r4, [r0, #0]
 8011a12:	b002      	add	sp, #8
 8011a14:	bd10      	pop	{r4, pc}

08011a16 <xflow>:
 8011a16:	b082      	sub	sp, #8
 8011a18:	b158      	cbz	r0, 8011a32 <xflow+0x1c>
 8011a1a:	eeb1 7b40 	vneg.f64	d7, d0
 8011a1e:	ed8d 7b00 	vstr	d7, [sp]
 8011a22:	ed9d 7b00 	vldr	d7, [sp]
 8011a26:	2022      	movs	r0, #34	; 0x22
 8011a28:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011a2c:	b002      	add	sp, #8
 8011a2e:	f7ff bfe7 	b.w	8011a00 <with_errno>
 8011a32:	eeb0 7b40 	vmov.f64	d7, d0
 8011a36:	e7f2      	b.n	8011a1e <xflow+0x8>

08011a38 <__math_uflow>:
 8011a38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a40 <__math_uflow+0x8>
 8011a3c:	f7ff bfeb 	b.w	8011a16 <xflow>
 8011a40:	00000000 	.word	0x00000000
 8011a44:	10000000 	.word	0x10000000

08011a48 <__math_oflow>:
 8011a48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a50 <__math_oflow+0x8>
 8011a4c:	f7ff bfe3 	b.w	8011a16 <xflow>
 8011a50:	00000000 	.word	0x00000000
 8011a54:	70000000 	.word	0x70000000

08011a58 <__math_divzero>:
 8011a58:	b082      	sub	sp, #8
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a60:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011a64:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011a68:	ed8d 7b00 	vstr	d7, [sp]
 8011a6c:	ed9d 0b00 	vldr	d0, [sp]
 8011a70:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011a80 <__math_divzero+0x28>
 8011a74:	2022      	movs	r0, #34	; 0x22
 8011a76:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011a7a:	b002      	add	sp, #8
 8011a7c:	f7ff bfc0 	b.w	8011a00 <with_errno>
	...

08011a88 <__math_invalid>:
 8011a88:	eeb0 7b40 	vmov.f64	d7, d0
 8011a8c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a94:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011a98:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011a9c:	d602      	bvs.n	8011aa4 <__math_invalid+0x1c>
 8011a9e:	2021      	movs	r0, #33	; 0x21
 8011aa0:	f7ff bfae 	b.w	8011a00 <with_errno>
 8011aa4:	4770      	bx	lr

08011aa6 <__math_check_uflow>:
 8011aa6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aae:	d102      	bne.n	8011ab6 <__math_check_uflow+0x10>
 8011ab0:	2022      	movs	r0, #34	; 0x22
 8011ab2:	f7ff bfa5 	b.w	8011a00 <with_errno>
 8011ab6:	4770      	bx	lr

08011ab8 <__math_check_oflow>:
 8011ab8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011ad8 <__math_check_oflow+0x20>
 8011abc:	eeb0 7bc0 	vabs.f64	d7, d0
 8011ac0:	eeb4 7b46 	vcmp.f64	d7, d6
 8011ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac8:	dd02      	ble.n	8011ad0 <__math_check_oflow+0x18>
 8011aca:	2022      	movs	r0, #34	; 0x22
 8011acc:	f7ff bf98 	b.w	8011a00 <with_errno>
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop
 8011ad4:	f3af 8000 	nop.w
 8011ad8:	ffffffff 	.word	0xffffffff
 8011adc:	7fefffff 	.word	0x7fefffff

08011ae0 <atan>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	eeb0 7b40 	vmov.f64	d7, d0
 8011ae6:	ee17 5a90 	vmov	r5, s15
 8011aea:	4b73      	ldr	r3, [pc, #460]	; (8011cb8 <atan+0x1d8>)
 8011aec:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011af0:	429c      	cmp	r4, r3
 8011af2:	dd13      	ble.n	8011b1c <atan+0x3c>
 8011af4:	4b71      	ldr	r3, [pc, #452]	; (8011cbc <atan+0x1dc>)
 8011af6:	429c      	cmp	r4, r3
 8011af8:	dc03      	bgt.n	8011b02 <atan+0x22>
 8011afa:	d107      	bne.n	8011b0c <atan+0x2c>
 8011afc:	ee10 3a10 	vmov	r3, s0
 8011b00:	b123      	cbz	r3, 8011b0c <atan+0x2c>
 8011b02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011b06:	eeb0 0b47 	vmov.f64	d0, d7
 8011b0a:	bd38      	pop	{r3, r4, r5, pc}
 8011b0c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011c48 <atan+0x168>
 8011b10:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011c50 <atan+0x170>
 8011b14:	2d00      	cmp	r5, #0
 8011b16:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8011b1a:	e7f4      	b.n	8011b06 <atan+0x26>
 8011b1c:	4b68      	ldr	r3, [pc, #416]	; (8011cc0 <atan+0x1e0>)
 8011b1e:	429c      	cmp	r4, r3
 8011b20:	dc11      	bgt.n	8011b46 <atan+0x66>
 8011b22:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011b26:	429c      	cmp	r4, r3
 8011b28:	dc0a      	bgt.n	8011b40 <atan+0x60>
 8011b2a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8011b2e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8011c58 <atan+0x178>
 8011b32:	ee30 6b06 	vadd.f64	d6, d0, d6
 8011b36:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b3e:	dce2      	bgt.n	8011b06 <atan+0x26>
 8011b40:	f04f 33ff 	mov.w	r3, #4294967295
 8011b44:	e013      	b.n	8011b6e <atan+0x8e>
 8011b46:	f000 f8c5 	bl	8011cd4 <fabs>
 8011b4a:	4b5e      	ldr	r3, [pc, #376]	; (8011cc4 <atan+0x1e4>)
 8011b4c:	429c      	cmp	r4, r3
 8011b4e:	dc4f      	bgt.n	8011bf0 <atan+0x110>
 8011b50:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011b54:	429c      	cmp	r4, r3
 8011b56:	dc41      	bgt.n	8011bdc <atan+0xfc>
 8011b58:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011b5c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011b60:	2300      	movs	r3, #0
 8011b62:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011b66:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b6a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011b6e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c60 <atan+0x180>
 8011b72:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011b76:	ee24 5b04 	vmul.f64	d5, d4, d4
 8011b7a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011c68 <atan+0x188>
 8011b7e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8011b82:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011c70 <atan+0x190>
 8011b86:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011b8a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011c78 <atan+0x198>
 8011b8e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011b92:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011c80 <atan+0x1a0>
 8011b96:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011b9a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011c88 <atan+0x1a8>
 8011b9e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011c90 <atan+0x1b0>
 8011ba2:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011ba6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011c98 <atan+0x1b8>
 8011baa:	eea5 2b06 	vfma.f64	d2, d5, d6
 8011bae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011ca0 <atan+0x1c0>
 8011bb2:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011bb6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011ca8 <atan+0x1c8>
 8011bba:	eea6 2b05 	vfma.f64	d2, d6, d5
 8011bbe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011cb0 <atan+0x1d0>
 8011bc2:	1c5a      	adds	r2, r3, #1
 8011bc4:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011bc8:	ee26 6b05 	vmul.f64	d6, d6, d5
 8011bcc:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011bd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011bd4:	d121      	bne.n	8011c1a <atan+0x13a>
 8011bd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011bda:	e794      	b.n	8011b06 <atan+0x26>
 8011bdc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011be0:	2301      	movs	r3, #1
 8011be2:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011be6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011bea:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011bee:	e7be      	b.n	8011b6e <atan+0x8e>
 8011bf0:	4b35      	ldr	r3, [pc, #212]	; (8011cc8 <atan+0x1e8>)
 8011bf2:	429c      	cmp	r4, r3
 8011bf4:	da0b      	bge.n	8011c0e <atan+0x12e>
 8011bf6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011bfa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011bfe:	ee30 5b47 	vsub.f64	d5, d0, d7
 8011c02:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011c06:	2302      	movs	r3, #2
 8011c08:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011c0c:	e7af      	b.n	8011b6e <atan+0x8e>
 8011c0e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011c12:	2303      	movs	r3, #3
 8011c14:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011c18:	e7a9      	b.n	8011b6e <atan+0x8e>
 8011c1a:	4a2c      	ldr	r2, [pc, #176]	; (8011ccc <atan+0x1ec>)
 8011c1c:	492c      	ldr	r1, [pc, #176]	; (8011cd0 <atan+0x1f0>)
 8011c1e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011c22:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011c26:	ed93 5b00 	vldr	d5, [r3]
 8011c2a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011c2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011c32:	ed92 6b00 	vldr	d6, [r2]
 8011c36:	2d00      	cmp	r5, #0
 8011c38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011c3c:	bfb8      	it	lt
 8011c3e:	eeb1 7b47 	vneglt.f64	d7, d7
 8011c42:	e760      	b.n	8011b06 <atan+0x26>
 8011c44:	f3af 8000 	nop.w
 8011c48:	54442d18 	.word	0x54442d18
 8011c4c:	3ff921fb 	.word	0x3ff921fb
 8011c50:	54442d18 	.word	0x54442d18
 8011c54:	bff921fb 	.word	0xbff921fb
 8011c58:	8800759c 	.word	0x8800759c
 8011c5c:	7e37e43c 	.word	0x7e37e43c
 8011c60:	e322da11 	.word	0xe322da11
 8011c64:	3f90ad3a 	.word	0x3f90ad3a
 8011c68:	24760deb 	.word	0x24760deb
 8011c6c:	3fa97b4b 	.word	0x3fa97b4b
 8011c70:	a0d03d51 	.word	0xa0d03d51
 8011c74:	3fb10d66 	.word	0x3fb10d66
 8011c78:	c54c206e 	.word	0xc54c206e
 8011c7c:	3fb745cd 	.word	0x3fb745cd
 8011c80:	920083ff 	.word	0x920083ff
 8011c84:	3fc24924 	.word	0x3fc24924
 8011c88:	5555550d 	.word	0x5555550d
 8011c8c:	3fd55555 	.word	0x3fd55555
 8011c90:	52defd9a 	.word	0x52defd9a
 8011c94:	bfadde2d 	.word	0xbfadde2d
 8011c98:	2c6a6c2f 	.word	0x2c6a6c2f
 8011c9c:	bfa2b444 	.word	0xbfa2b444
 8011ca0:	af749a6d 	.word	0xaf749a6d
 8011ca4:	bfb3b0f2 	.word	0xbfb3b0f2
 8011ca8:	fe231671 	.word	0xfe231671
 8011cac:	bfbc71c6 	.word	0xbfbc71c6
 8011cb0:	9998ebc4 	.word	0x9998ebc4
 8011cb4:	bfc99999 	.word	0xbfc99999
 8011cb8:	440fffff 	.word	0x440fffff
 8011cbc:	7ff00000 	.word	0x7ff00000
 8011cc0:	3fdbffff 	.word	0x3fdbffff
 8011cc4:	3ff2ffff 	.word	0x3ff2ffff
 8011cc8:	40038000 	.word	0x40038000
 8011ccc:	08013a10 	.word	0x08013a10
 8011cd0:	08013a30 	.word	0x08013a30

08011cd4 <fabs>:
 8011cd4:	ec51 0b10 	vmov	r0, r1, d0
 8011cd8:	ee10 2a10 	vmov	r2, s0
 8011cdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ce0:	ec43 2b10 	vmov	d0, r2, r3
 8011ce4:	4770      	bx	lr
	...

08011ce8 <floor>:
 8011ce8:	ee10 1a90 	vmov	r1, s1
 8011cec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011cf0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011cf4:	2b13      	cmp	r3, #19
 8011cf6:	b530      	push	{r4, r5, lr}
 8011cf8:	ee10 0a10 	vmov	r0, s0
 8011cfc:	ee10 5a10 	vmov	r5, s0
 8011d00:	dc31      	bgt.n	8011d66 <floor+0x7e>
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	da15      	bge.n	8011d32 <floor+0x4a>
 8011d06:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011dc0 <floor+0xd8>
 8011d0a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011d0e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d16:	dd07      	ble.n	8011d28 <floor+0x40>
 8011d18:	2900      	cmp	r1, #0
 8011d1a:	da4e      	bge.n	8011dba <floor+0xd2>
 8011d1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d20:	4318      	orrs	r0, r3
 8011d22:	d001      	beq.n	8011d28 <floor+0x40>
 8011d24:	4928      	ldr	r1, [pc, #160]	; (8011dc8 <floor+0xe0>)
 8011d26:	2000      	movs	r0, #0
 8011d28:	460b      	mov	r3, r1
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	ec43 2b10 	vmov	d0, r2, r3
 8011d30:	e020      	b.n	8011d74 <floor+0x8c>
 8011d32:	4a26      	ldr	r2, [pc, #152]	; (8011dcc <floor+0xe4>)
 8011d34:	411a      	asrs	r2, r3
 8011d36:	ea01 0402 	and.w	r4, r1, r2
 8011d3a:	4304      	orrs	r4, r0
 8011d3c:	d01a      	beq.n	8011d74 <floor+0x8c>
 8011d3e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011dc0 <floor+0xd8>
 8011d42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011d46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4e:	ddeb      	ble.n	8011d28 <floor+0x40>
 8011d50:	2900      	cmp	r1, #0
 8011d52:	bfbe      	ittt	lt
 8011d54:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011d58:	fa40 f303 	asrlt.w	r3, r0, r3
 8011d5c:	18c9      	addlt	r1, r1, r3
 8011d5e:	ea21 0102 	bic.w	r1, r1, r2
 8011d62:	2000      	movs	r0, #0
 8011d64:	e7e0      	b.n	8011d28 <floor+0x40>
 8011d66:	2b33      	cmp	r3, #51	; 0x33
 8011d68:	dd05      	ble.n	8011d76 <floor+0x8e>
 8011d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d6e:	d101      	bne.n	8011d74 <floor+0x8c>
 8011d70:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011d74:	bd30      	pop	{r4, r5, pc}
 8011d76:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d7e:	40e2      	lsrs	r2, r4
 8011d80:	4202      	tst	r2, r0
 8011d82:	d0f7      	beq.n	8011d74 <floor+0x8c>
 8011d84:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011dc0 <floor+0xd8>
 8011d88:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011d8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d94:	ddc8      	ble.n	8011d28 <floor+0x40>
 8011d96:	2900      	cmp	r1, #0
 8011d98:	da02      	bge.n	8011da0 <floor+0xb8>
 8011d9a:	2b14      	cmp	r3, #20
 8011d9c:	d103      	bne.n	8011da6 <floor+0xbe>
 8011d9e:	3101      	adds	r1, #1
 8011da0:	ea20 0002 	bic.w	r0, r0, r2
 8011da4:	e7c0      	b.n	8011d28 <floor+0x40>
 8011da6:	2401      	movs	r4, #1
 8011da8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011dac:	fa04 f303 	lsl.w	r3, r4, r3
 8011db0:	4418      	add	r0, r3
 8011db2:	42a8      	cmp	r0, r5
 8011db4:	bf38      	it	cc
 8011db6:	1909      	addcc	r1, r1, r4
 8011db8:	e7f2      	b.n	8011da0 <floor+0xb8>
 8011dba:	2000      	movs	r0, #0
 8011dbc:	4601      	mov	r1, r0
 8011dbe:	e7b3      	b.n	8011d28 <floor+0x40>
 8011dc0:	8800759c 	.word	0x8800759c
 8011dc4:	7e37e43c 	.word	0x7e37e43c
 8011dc8:	bff00000 	.word	0xbff00000
 8011dcc:	000fffff 	.word	0x000fffff

08011dd0 <scalbn>:
 8011dd0:	b082      	sub	sp, #8
 8011dd2:	ed8d 0b00 	vstr	d0, [sp]
 8011dd6:	9b01      	ldr	r3, [sp, #4]
 8011dd8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011ddc:	b9a2      	cbnz	r2, 8011e08 <scalbn+0x38>
 8011dde:	9a00      	ldr	r2, [sp, #0]
 8011de0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011de4:	4313      	orrs	r3, r2
 8011de6:	d03a      	beq.n	8011e5e <scalbn+0x8e>
 8011de8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011ec0 <scalbn+0xf0>
 8011dec:	4b40      	ldr	r3, [pc, #256]	; (8011ef0 <scalbn+0x120>)
 8011dee:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011df2:	4298      	cmp	r0, r3
 8011df4:	ed8d 7b00 	vstr	d7, [sp]
 8011df8:	da11      	bge.n	8011e1e <scalbn+0x4e>
 8011dfa:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011ec8 <scalbn+0xf8>
 8011dfe:	ed9d 6b00 	vldr	d6, [sp]
 8011e02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e06:	e007      	b.n	8011e18 <scalbn+0x48>
 8011e08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011e0c:	428a      	cmp	r2, r1
 8011e0e:	d10a      	bne.n	8011e26 <scalbn+0x56>
 8011e10:	ed9d 7b00 	vldr	d7, [sp]
 8011e14:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011e18:	ed8d 7b00 	vstr	d7, [sp]
 8011e1c:	e01f      	b.n	8011e5e <scalbn+0x8e>
 8011e1e:	9b01      	ldr	r3, [sp, #4]
 8011e20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011e24:	3a36      	subs	r2, #54	; 0x36
 8011e26:	4402      	add	r2, r0
 8011e28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011e2c:	428a      	cmp	r2, r1
 8011e2e:	dd0a      	ble.n	8011e46 <scalbn+0x76>
 8011e30:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011ed0 <scalbn+0x100>
 8011e34:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011ed8 <scalbn+0x108>
 8011e38:	eeb0 6b47 	vmov.f64	d6, d7
 8011e3c:	9b01      	ldr	r3, [sp, #4]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011e44:	e7dd      	b.n	8011e02 <scalbn+0x32>
 8011e46:	2a00      	cmp	r2, #0
 8011e48:	dd0d      	ble.n	8011e66 <scalbn+0x96>
 8011e4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011e52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011e56:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8011e5e:	ed9d 0b00 	vldr	d0, [sp]
 8011e62:	b002      	add	sp, #8
 8011e64:	4770      	bx	lr
 8011e66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011e6a:	da18      	bge.n	8011e9e <scalbn+0xce>
 8011e6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011e70:	4298      	cmp	r0, r3
 8011e72:	9b01      	ldr	r3, [sp, #4]
 8011e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e78:	dd09      	ble.n	8011e8e <scalbn+0xbe>
 8011e7a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011ed0 <scalbn+0x100>
 8011e7e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011ed8 <scalbn+0x108>
 8011e82:	eeb0 6b47 	vmov.f64	d6, d7
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8011e8c:	e7b9      	b.n	8011e02 <scalbn+0x32>
 8011e8e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011ec8 <scalbn+0xf8>
 8011e92:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011ee0 <scalbn+0x110>
 8011e96:	eeb0 6b47 	vmov.f64	d6, d7
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	e7f4      	b.n	8011e88 <scalbn+0xb8>
 8011e9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ea2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011ea6:	3236      	adds	r2, #54	; 0x36
 8011ea8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011eac:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011eb0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8011ee8 <scalbn+0x118>
 8011eb4:	ec41 0b17 	vmov	d7, r0, r1
 8011eb8:	e7a3      	b.n	8011e02 <scalbn+0x32>
 8011eba:	bf00      	nop
 8011ebc:	f3af 8000 	nop.w
 8011ec0:	00000000 	.word	0x00000000
 8011ec4:	43500000 	.word	0x43500000
 8011ec8:	c2f8f359 	.word	0xc2f8f359
 8011ecc:	01a56e1f 	.word	0x01a56e1f
 8011ed0:	8800759c 	.word	0x8800759c
 8011ed4:	7e37e43c 	.word	0x7e37e43c
 8011ed8:	8800759c 	.word	0x8800759c
 8011edc:	fe37e43c 	.word	0xfe37e43c
 8011ee0:	c2f8f359 	.word	0xc2f8f359
 8011ee4:	81a56e1f 	.word	0x81a56e1f
 8011ee8:	00000000 	.word	0x00000000
 8011eec:	3c900000 	.word	0x3c900000
 8011ef0:	ffff3cb0 	.word	0xffff3cb0

08011ef4 <_init>:
 8011ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ef6:	bf00      	nop
 8011ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011efa:	bc08      	pop	{r3}
 8011efc:	469e      	mov	lr, r3
 8011efe:	4770      	bx	lr

08011f00 <_fini>:
 8011f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f02:	bf00      	nop
 8011f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f06:	bc08      	pop	{r3}
 8011f08:	469e      	mov	lr, r3
 8011f0a:	4770      	bx	lr
