
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011344  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080115e0  080115e0  000215e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011868  08011868  00021868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011870  08011870  00021870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011874  08011874  00021874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08011878  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  080118f0  00030078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  08011950  000300d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fcc  24000138  080119b0  00030138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24001104  080119b0  00031104  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038ecf  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000527e  00000000  00000000  00069035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc0  00000000  00000000  0006e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b18  00000000  00000000  0006ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006cc8  00000000  00000000  00071a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026ae3  00000000  00000000  00078758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185f25  00000000  00000000  0009f23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00225160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eb8  00000000  00000000  002251b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000138 	.word	0x24000138
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080115c4 	.word	0x080115c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400013c 	.word	0x2400013c
 80002d4:	080115c4 	.word	0x080115c4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <IK>:
 */

static ik_state iks[NUM_IK];

void IK(double pos[3], double oriz, double gram)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	ed2d 8b02 	vpush	{d8}
 80005d6:	b08e      	sub	sp, #56	; 0x38
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6178      	str	r0, [r7, #20]
 80005dc:	ed87 0b02 	vstr	d0, [r7, #8]
 80005e0:	ed87 1b00 	vstr	d1, [r7]
	ik_state * ik = &iks[0];
 80005e4:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <IK+0x190>)
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  double c2;
  double q2;
  double s2;
  c2 = (((pos[0] * pos[0] + pos[1] * pos[1]) - 61504.0) - 170362.5625) /
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	ed93 6b00 	vldr	d6, [r3]
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	ed93 7b00 	vldr	d7, [r3]
 80005f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3308      	adds	r3, #8
 80005fc:	ed93 5b00 	vldr	d5, [r3]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3308      	adds	r3, #8
 8000604:	ed93 7b00 	vldr	d7, [r3]
 8000608:	ee25 7b07 	vmul.f64	d7, d5, d7
 800060c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000610:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8000730 <IK+0x160>
 8000614:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000618:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8000738 <IK+0x168>
 800061c:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000620:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8000740 <IK+0x170>
 8000624:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000628:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    204724.0;
  s2 = 1.0 - c2 * c2;
 800062c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000630:	ee27 7b07 	vmul.f64	d7, d7, d7
 8000634:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000638:	ee36 7b47 	vsub.f64	d7, d6, d7
 800063c:	ed87 7b08 	vstr	d7, [r7, #32]
  if (s2 >= 0.0) {
 8000640:	ed97 7b08 	vldr	d7, [r7, #32]
 8000644:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064c:	db64      	blt.n	8000718 <IK+0x148>
    ik->check = 1;
 800064e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000650:	2201      	movs	r2, #1
 8000652:	621a      	str	r2, [r3, #32]
    s2 = gram * sqrt(s2);
 8000654:	ed97 0b08 	vldr	d0, [r7, #32]
 8000658:	f010 f826 	bl	80106a8 <sqrt>
 800065c:	eeb0 6b40 	vmov.f64	d6, d0
 8000660:	ed97 7b00 	vldr	d7, [r7]
 8000664:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000668:	ed87 7b08 	vstr	d7, [r7, #32]
    q2 = atan2(s2, c2);
 800066c:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8000670:	ed97 0b08 	vldr	d0, [r7, #32]
 8000674:	f010 f814 	bl	80106a0 <atan2>
 8000678:	ed87 0b06 	vstr	d0, [r7, #24]

    ik->q2 = q2;
 800067c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800067e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000682:	e9c1 2302 	strd	r2, r3, [r1, #8]
    s2 = atan2(pos[1], pos[0]) - atan2(412.75 * s2, 412.75 * c2
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3308      	adds	r3, #8
 800068a:	ed93 7b00 	vldr	d7, [r3]
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	ed93 6b00 	vldr	d6, [r3]
 8000694:	eeb0 1b46 	vmov.f64	d1, d6
 8000698:	eeb0 0b47 	vmov.f64	d0, d7
 800069c:	f010 f800 	bl	80106a0 <atan2>
 80006a0:	eeb0 8b40 	vmov.f64	d8, d0
 80006a4:	ed97 7b08 	vldr	d7, [r7, #32]
 80006a8:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000748 <IK+0x178>
 80006ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006b0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80006b4:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8000748 <IK+0x178>
 80006b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80006bc:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8000750 <IK+0x180>
 80006c0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80006c4:	eeb0 1b47 	vmov.f64	d1, d7
 80006c8:	eeb0 0b46 	vmov.f64	d0, d6
 80006cc:	f00f ffe8 	bl	80106a0 <atan2>
 80006d0:	eeb0 7b40 	vmov.f64	d7, d0
 80006d4:	ee38 7b47 	vsub.f64	d7, d8, d7
 80006d8:	ed87 7b08 	vstr	d7, [r7, #32]
      + 248.0);
    ik->q1 = s2;
 80006dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80006de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
    ik->q3 = 249.25 - pos[2];
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3310      	adds	r3, #16
 80006ea:	ed93 7b00 	vldr	d7, [r3]
 80006ee:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000758 <IK+0x188>
 80006f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f8:	ed83 7b04 	vstr	d7, [r3, #16]
    ik->q4 = (oriz - s2) - q2;
 80006fc:	ed97 6b02 	vldr	d6, [r7, #8]
 8000700:	ed97 7b08 	vldr	d7, [r7, #32]
 8000704:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000708:	ed97 7b06 	vldr	d7, [r7, #24]
 800070c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000712:	ed83 7b06 	vstr	d7, [r3, #24]
  } else {
    ik->check = 0;
  }
}
 8000716:	e002      	b.n	800071e <IK+0x14e>
    ik->check = 0;
 8000718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
}
 800071e:	bf00      	nop
 8000720:	3738      	adds	r7, #56	; 0x38
 8000722:	46bd      	mov	sp, r7
 8000724:	ecbd 8b02 	vpop	{d8}
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	f3af 8000 	nop.w
 8000730:	00000000 	.word	0x00000000
 8000734:	40ee0800 	.word	0x40ee0800
 8000738:	80000000 	.word	0x80000000
 800073c:	4104cbd4 	.word	0x4104cbd4
 8000740:	00000000 	.word	0x00000000
 8000744:	4108fda0 	.word	0x4108fda0
 8000748:	00000000 	.word	0x00000000
 800074c:	4079cc00 	.word	0x4079cc00
 8000750:	00000000 	.word	0x00000000
 8000754:	406f0000 	.word	0x406f0000
 8000758:	00000000 	.word	0x00000000
 800075c:	406f2800 	.word	0x406f2800
 8000760:	24000158 	.word	0x24000158

08000764 <get_ik_q1>:

double get_ik_q1(){
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	ik_state * ik = &iks[0];
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <get_ik_q1+0x24>)
 800076c:	607b      	str	r3, [r7, #4]
	return ik->q1;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000774:	ec43 2b17 	vmov	d7, r2, r3
}
 8000778:	eeb0 0b47 	vmov.f64	d0, d7
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	24000158 	.word	0x24000158

0800078c <get_ik_q2>:

double get_ik_q2(){
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
	ik_state * ik = &iks[0];
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <get_ik_q2+0x24>)
 8000794:	607b      	str	r3, [r7, #4]
	return ik->q2;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800079c:	ec43 2b17 	vmov	d7, r2, r3
}
 80007a0:	eeb0 0b47 	vmov.f64	d0, d7
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	24000158 	.word	0x24000158

080007b4 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 80007b4:	b480      	push	{r7}
 80007b6:	b08b      	sub	sp, #44	; 0x2c
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	61f8      	str	r0, [r7, #28]
 80007bc:	ed87 0a06 	vstr	s0, [r7, #24]
 80007c0:	edc7 0a05 	vstr	s1, [r7, #20]
 80007c4:	ed87 1a04 	vstr	s2, [r7, #16]
 80007c8:	edc7 1a03 	vstr	s3, [r7, #12]
 80007cc:	ed87 2a02 	vstr	s4, [r7, #8]
 80007d0:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	222c      	movs	r2, #44	; 0x2c
 80007d8:	fb02 f303 	mul.w	r3, r2, r3
 80007dc:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <setupPID+0x64>)
 80007de:	4413      	add	r3, r2
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	69fa      	ldr	r2, [r7, #28]
 80007e6:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	69ba      	ldr	r2, [r7, #24]
 80007ec:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	697a      	ldr	r2, [r7, #20]
 80007f8:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	611a      	str	r2, [r3, #16]
}
 800080c:	bf00      	nop
 800080e:	372c      	adds	r7, #44	; 0x2c
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	24000180 	.word	0x24000180

0800081c <calculator>:


float calculator(int num, int input, float setpoint){
 800081c:	b480      	push	{r7}
 800081e:	b08b      	sub	sp, #44	; 0x2c
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	222c      	movs	r2, #44	; 0x2c
 800082e:	fb02 f303 	mul.w	r3, r2, r3
 8000832:	4a50      	ldr	r2, [pc, #320]	; (8000974 <calculator+0x158>)
 8000834:	4413      	add	r3, r2
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000842:	ed97 7a01 	vldr	s14, [r7, #4]
 8000846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	ed93 7a02 	vldr	s14, [r3, #8]
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800085c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000860:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000876:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800087a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	ed93 7a03 	vldr	s14, [r3, #12]
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000894:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800089e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000978 <calculator+0x15c>
 80008a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008aa:	dd02      	ble.n	80008b2 <calculator+0x96>
		pid->integral = 4095;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	4a33      	ldr	r2, [pc, #204]	; (800097c <calculator+0x160>)
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 80008b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80008b8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000980 <calculator+0x164>
 80008bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	d502      	bpl.n	80008cc <calculator+0xb0>
		pid->integral = -4095;
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	4a2e      	ldr	r2, [pc, #184]	; (8000984 <calculator+0x168>)
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80008d8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	ed93 7a01 	vldr	s14, [r3, #4]
 80008e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008e6:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80008f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80008f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f8:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 80008fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8000900:	edd7 7a07 	vldr	s15, [r7, #28]
 8000904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000908:	edd7 7a05 	vldr	s15, [r7, #20]
 800090c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	ed93 7a07 	vldr	s14, [r3, #28]
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092a:	dd04      	ble.n	8000936 <calculator+0x11a>
		pid->output = pid->Vmax;}
 800092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	61da      	str	r2, [r3, #28]
 8000934:	e00e      	b.n	8000954 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	ed93 7a07 	vldr	s14, [r3, #28]
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094a:	d503      	bpl.n	8000954 <calculator+0x138>
		pid->output = pid->Vmin;}
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	699a      	ldr	r2, [r3, #24]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	621a      	str	r2, [r3, #32]

	return pid->output;
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	ee07 3a90 	vmov	s15, r3
}
 8000964:	eeb0 0a67 	vmov.f32	s0, s15
 8000968:	372c      	adds	r7, #44	; 0x2c
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	24000180 	.word	0x24000180
 8000978:	457ff000 	.word	0x457ff000
 800097c:	457ff000 	.word	0x457ff000
 8000980:	c57ff000 	.word	0xc57ff000
 8000984:	c57ff000 	.word	0xc57ff000

08000988 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000992:	4802      	ldr	r0, [pc, #8]	; (800099c <enable_Encoder_OE+0x14>)
 8000994:	f008 fa22 	bl	8008ddc <HAL_GPIO_WritePin>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	58020400 	.word	0x58020400

080009a0 <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <Encoder_Start+0x48>)
 80009b8:	4413      	add	r3, r2
 80009ba:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	68b8      	ldr	r0, [r7, #8]
 80009c0:	f00c f9ac 	bl	800cd1c <HAL_TIM_Encoder_Start>
	encoder->number = num;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 80009d6:	f7ff ffd7 	bl	8000988 <enable_Encoder_OE>
	Set_Encoder_Zero(num);
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f000 f822 	bl	8000a24 <Set_Encoder_Zero>
}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2400025c 	.word	0x2400025c

080009ec <Get_Value_Encoder>:

uint32_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <Get_Value_Encoder+0x34>)
 8000a00:	4413      	add	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	2400025c 	.word	0x2400025c

08000a24 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num){
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <Set_Encoder_Zero+0x30>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, OFFSET);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f247 5230 	movw	r2, #30000	; 0x7530
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	2400025c 	.word	0x2400025c

08000a58 <Stepper_Setup>:
#include "TASKSPACE.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000a58:	b480      	push	{r7}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2258      	movs	r2, #88	; 0x58
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <Stepper_Setup+0x54>)
 8000a70:	4413      	add	r3, r2
 8000a72:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	8c3a      	ldrh	r2, [r7, #32]
 8000a90:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	return SERR_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	371c      	adds	r7, #28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	24000298 	.word	0x24000298

08000ab0 <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d02d      	beq.n	8000b1c <Stepper_SetStepTimer+0x6c>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d028      	beq.n	8000b1c <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <Stepper_SetStepTimer+0x78>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae2:	d30b      	bcc.n	8000afc <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <Stepper_SetStepTimer+0x7c>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	0bdb      	lsrs	r3, r3, #15
 8000aee:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	0852      	lsrs	r2, r2, #1
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	24000e6c 	.word	0x24000e6c
 8000b2c:	80008001 	.word	0x80008001

08000b30 <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2258      	movs	r2, #88	; 0x58
 8000b3c:	fb02 f303 	mul.w	r3, r2, r3
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <Stepper_DefaultState+0x60>)
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2201      	movs	r2, #1
 8000b52:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <Stepper_DefaultState+0x64>)
 8000b58:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	699a      	ldr	r2, [r3, #24]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f247 5230 	movw	r2, #30000	; 0x7530
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f7ff ffa0 	bl	8000ab0 <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	f00b fe84 	bl	800c888 <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 8000b80:	f000 f99c 	bl	8000ebc <enable_Stepper_OE>

	return SERR_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000298 	.word	0x24000298
 8000b94:	00061a80 	.word	0x00061a80

08000b98 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, float_t value){
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2258      	movs	r2, #88	; 0x58
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <Stepper_SetMinPosition+0x30>)
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	621a      	str	r2, [r3, #32]
	return SERR_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	24000298 	.word	0x24000298

08000bcc <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, float_t value){
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2258      	movs	r2, #88	; 0x58
 8000bdc:	fb02 f303 	mul.w	r3, r2, r3
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <Stepper_SetMaxPosition+0x30>)
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	24000298 	.word	0x24000298

08000c00 <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2258      	movs	r2, #88	; 0x58
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <Stepper_SetMinSpeed+0x30>)
 8000c16:	4413      	add	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	619a      	str	r2, [r3, #24]
	return SERR_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	24000298 	.word	0x24000298

08000c34 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2258      	movs	r2, #88	; 0x58
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <Stepper_SetMaxSpeed+0x30>)
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000c4e:	887a      	ldrh	r2, [r7, #2]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	61da      	str	r2, [r3, #28]
	return SERR_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	24000298 	.word	0x24000298

08000c68 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, float_t value){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	ed87 0a00 	vstr	s0, [r7]
	//value is mm or degree unit
	stepper_state * stepper = &steppers[num];
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2258      	movs	r2, #88	; 0x58
 8000c78:	fb02 f303 	mul.w	r3, r2, r3
 8000c7c:	4a34      	ldr	r2, [pc, #208]	; (8000d50 <Stepper_SetTraget+0xe8>)
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b80      	cmp	r3, #128	; 0x80
 8000c8c:	d05b      	beq.n	8000d46 <Stepper_SetTraget+0xde>
		if(value<stepper->minPosition){
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	edd3 7a08 	vldr	s15, [r3, #32]
 8000c94:	ed97 7a00 	vldr	s14, [r7]
 8000c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca0:	d517      	bpl.n	8000cd2 <Stepper_SetTraget+0x6a>
			stepper->targetPosition_real = stepper->minPosition;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6a1a      	ldr	r2, [r3, #32]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->minPosition)*100.00) + OFFSET;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	edd3 7a08 	vldr	s15, [r3, #32]
 8000cb0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000d54 <Stepper_SetTraget+0xec>
 8000cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 faa3 	bl	8001208 <joint_to_encoder>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	f247 5330 	movw	r3, #30000	; 0x7530
 8000cc8:	4413      	add	r3, r2
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	e03a      	b.n	8000d48 <Stepper_SetTraget+0xe0>
		}
		else if (value>stepper->maxPosition) {
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000cd8:	ed97 7a00 	vldr	s14, [r7]
 8000cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce4:	dd17      	ble.n	8000d16 <Stepper_SetTraget+0xae>
			stepper->targetPosition_real = stepper->maxPosition;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->maxPosition)*100.00) + OFFSET;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000cf4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000d54 <Stepper_SetTraget+0xec>
 8000cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 fa81 	bl	8001208 <joint_to_encoder>
 8000d06:	4602      	mov	r2, r0
 8000d08:	f247 5330 	movw	r3, #30000	; 0x7530
 8000d0c:	4413      	add	r3, r2
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000d12:	2304      	movs	r3, #4
 8000d14:	e018      	b.n	8000d48 <Stepper_SetTraget+0xe0>
		}
		else {
			stepper->targetPosition_real = value; //input mm or degree unit
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, value*100.00) + OFFSET; //convert to encoder count
 8000d1c:	edd7 7a00 	vldr	s15, [r7]
 8000d20:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000d54 <Stepper_SetTraget+0xec>
 8000d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d28:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 fa6b 	bl	8001208 <joint_to_encoder>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f247 5330 	movw	r3, #30000	; 0x7530
 8000d38:	4413      	add	r3, r2
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	6353      	str	r3, [r2, #52]	; 0x34
			stepper->status = SS_STARTING;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2204      	movs	r2, #4
 8000d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
	}
	return SERR_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	24000298 	.word	0x24000298
 8000d54:	42c80000 	.word	0x42c80000

08000d58 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2258      	movs	r2, #88	; 0x58
 8000d66:	fb02 f303 	mul.w	r3, r2, r3
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <Stepper_SetSpeed+0x54>)
 8000d6c:	4413      	add	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	da04      	bge.n	8000d84 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	699a      	ldr	r2, [r3, #24]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d82:	e00c      	b.n	8000d9e <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dd04      	ble.n	8000d98 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	69da      	ldr	r2, [r3, #28]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d96:	e002      	b.n	8000d9e <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000d9e:	bf00      	nop
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	24000298 	.word	0x24000298

08000db0 <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681c      	ldr	r4, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fe13 	bl	80009ec <Get_Value_Encoder>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f7ff fd1d 	bl	800081c <calculator>
 8000de2:	eef0 7a40 	vmov.f32	s15, s0
 8000de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dea:	ee17 3a90 	vmov	r3, s15
 8000dee:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bfb8      	it	lt
 8000dfa:	425b      	neglt	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4610      	mov	r0, r2
 8000e00:	f7ff ffaa 	bl	8000d58 <Stepper_SetSpeed>
	if(input>0){
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	dd29      	ble.n	8000e5e <Stepper_Direction+0xae>
		if(stepper->number == 1){
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d108      	bne.n	8000e24 <Stepper_Direction+0x74>
			stepper->status = SS_RUNNING_BACKWARD;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	8a1a      	ldrh	r2, [r3, #16]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 2){
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d10a      	bne.n	8000e42 <Stepper_Direction+0x92>
			stepper->status = SS_RUNNING_FORWARD;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	8a1b      	ldrh	r3, [r3, #16]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	0412      	lsls	r2, r2, #16
 8000e40:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 3){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d134      	bne.n	8000eb4 <Stepper_Direction+0x104>
			stepper->status = SS_RUNNING_FORWARD;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	8a1a      	ldrh	r2, [r3, #16]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
			stepper->status = SS_RUNNING_BACKWARD;
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
		}
	}
}
 8000e5c:	e02a      	b.n	8000eb4 <Stepper_Direction+0x104>
		if(stepper->number == 1){
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d10a      	bne.n	8000e7c <Stepper_Direction+0xcc>
			stepper->status = SS_RUNNING_FORWARD;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	8a1b      	ldrh	r3, [r3, #16]
 8000e72:	461a      	mov	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0412      	lsls	r2, r2, #16
 8000e7a:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d108      	bne.n	8000e96 <Stepper_Direction+0xe6>
			stepper->status = SS_RUNNING_BACKWARD;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	8a1a      	ldrh	r2, [r3, #16]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d10a      	bne.n	8000eb4 <Stepper_Direction+0x104>
			stepper->status = SS_RUNNING_BACKWARD;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	8a1b      	ldrh	r3, [r3, #16]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	619a      	str	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}

08000ebc <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec6:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <enable_Stepper_OE+0x14>)
 8000ec8:	f007 ff88 	bl	8008ddc <HAL_GPIO_WritePin>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	58020400 	.word	0x58020400

08000ed4 <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2258      	movs	r2, #88	; 0x58
 8000ee0:	fb02 f303 	mul.w	r3, r2, r3
 8000ee4:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <Stepper_runStep+0x70>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
	Stepper_currentPosition(num);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f8c8 	bl	8001080 <Stepper_currentPosition>
	Stepper_currentPosition_real(num);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f8df 	bl	80010b4 <Stepper_currentPosition_real>
//	update_FK_real();
	if(stepper->status != SS_STOPPED){
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b80      	cmp	r3, #128	; 0x80
 8000f00:	d014      	beq.n	8000f2c <Stepper_runStep+0x58>
//		enable_Stepper_OE();
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	f00b fcbb 	bl	800c888 <HAL_TIM_PWM_Start>
		if(stepper->home_status){
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00e      	beq.n	8000f3c <Stepper_runStep+0x68>
			Stepper_Direction(stepper);
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff ff46 	bl	8000db0 <Stepper_Direction>
			Stepper_SetStepTimer(stepper);
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f7ff fdc3 	bl	8000ab0 <Stepper_SetStepTimer>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8000f2a:	e007      	b.n	8000f3c <Stepper_runStep+0x68>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4610      	mov	r0, r2
 8000f38:	f00b fdb4 	bl	800caa4 <HAL_TIM_PWM_Stop>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	24000298 	.word	0x24000298

08000f48 <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2258      	movs	r2, #88	; 0x58
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <Stepper_StartStop+0x40>)
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d104      	bne.n	8000f72 <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8000f70:	e003      	b.n	8000f7a <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	24000298 	.word	0x24000298

08000f8c <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2258      	movs	r2, #88	; 0x58
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <Stepper_updateHome+0x4c>)
 8000fa0:	4413      	add	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 0){
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10e      	bne.n	8000fce <Stepper_updateHome+0x42>
		Set_Encoder_Zero(num);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fd37 	bl	8000a24 <Set_Encoder_Zero>
		stepper->home_status = value;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Stepper_DefaultState(num);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fdb5 	bl	8000b30 <Stepper_DefaultState>
		stepper -> status = SS_STARTING;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	24000298 	.word	0x24000298

08000fdc <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper-> home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2258      	movs	r2, #88	; 0x58
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <Stepper_SetHome+0xa0>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]
	if(on){
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d039      	beq.n	8001070 <Stepper_SetHome+0x94>
		if(num == 3){
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d11c      	bne.n	800103c <Stepper_SetHome+0x60>
			stepper-> home_status = 0;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	8a1b      	ldrh	r3, [r3, #16]
 800100e:	461a      	mov	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0412      	lsls	r2, r2, #16
 8001016:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2219      	movs	r2, #25
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001038:	635a      	str	r2, [r3, #52]	; 0x34
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
		}
	}
}
 800103a:	e019      	b.n	8001070 <Stepper_SetHome+0x94>
			stepper-> home_status = 0;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	8a1a      	ldrh	r2, [r3, #16]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2219      	movs	r2, #25
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	24000298 	.word	0x24000298

08001080 <Stepper_currentPosition>:

int32_t Stepper_currentPosition(int num){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	//update current real encoder of robot
	stepper_state * stepper = &steppers[num];
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2258      	movs	r2, #88	; 0x58
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <Stepper_currentPosition+0x30>)
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition = Get_Value_Encoder(num);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fca8 	bl	80009ec <Get_Value_Encoder>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
	return stepper->currentPosition;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	24000298 	.word	0x24000298

080010b4 <Stepper_currentPosition_real>:

float_t Stepper_currentPosition_real(int num){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	//update current real position of robot
	stepper_state * stepper = &steppers[num];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2258      	movs	r2, #88	; 0x58
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <Stepper_currentPosition_real+0x50>)
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
//	stepper->currentPosition_real = encoder_to_joint(num, abs(Stepper_currentPosition(num)-OFFSET))/100.00;
	stepper->currentPosition_real = encoder_to_joint(num, Stepper_currentPosition(num)-OFFSET)/100.00;
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffd8 	bl	8001080 <Stepper_currentPosition>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <Stepper_currentPosition_real+0x54>)
 80010d4:	4413      	add	r3, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f831 	bl	8001140 <encoder_to_joint>
 80010de:	eeb0 7a40 	vmov.f32	s14, s0
 80010e2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800110c <Stepper_currentPosition_real+0x58>
 80010e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	return stepper->currentPosition_real;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	ee07 3a90 	vmov	s15, r3
}
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000298 	.word	0x24000298
 8001108:	ffff8ad0 	.word	0xffff8ad0
 800110c:	42c80000 	.word	0x42c80000

08001110 <Stepper_targetPosition_real>:

float_t Stepper_targetPosition_real(int num){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	//send target real position of robot
	stepper_state * stepper = &steppers[num];
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2258      	movs	r2, #88	; 0x58
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <Stepper_targetPosition_real+0x2c>)
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
	return stepper->targetPosition_real;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112a:	ee07 3a90 	vmov	s15, r3
}
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	24000298 	.word	0x24000298

08001140 <encoder_to_joint>:

float_t encoder_to_joint(int num, int32_t value){
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	//convert to mm or degree
	float_t ans;
	if(num == 1){
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d111      	bne.n	8001174 <encoder_to_joint+0x34>
		ans = value*ENCODER1_TO_ANGLE;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800115a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80011e0 <encoder_to_joint+0xa0>
 800115e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001162:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80011e8 <encoder_to_joint+0xa8>
 8001166:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800116a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800116e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001172:	e028      	b.n	80011c6 <encoder_to_joint+0x86>
	}
	else if(num == 2){
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d111      	bne.n	800119e <encoder_to_joint+0x5e>
		ans = value*ENCODER2_TO_ANGLE;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001184:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80011e0 <encoder_to_joint+0xa0>
 8001188:	ee27 6b06 	vmul.f64	d6, d7, d6
 800118c:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80011f0 <encoder_to_joint+0xb0>
 8001190:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001194:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001198:	edc7 7a03 	vstr	s15, [r7, #12]
 800119c:	e013      	b.n	80011c6 <encoder_to_joint+0x86>
	}
	else if(num == 3){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d110      	bne.n	80011c6 <encoder_to_joint+0x86>
		ans = value*ENCODER3_TO_SCALAR;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011ae:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80011f8 <encoder_to_joint+0xb8>
 80011b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b6:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001200 <encoder_to_joint+0xc0>
 80011ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011c2:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ans;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	ee07 3a90 	vmov	s15, r3
}
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40e19400 	.word	0x40e19400
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40bf8700 	.word	0x40bf8700
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40ce0480 	.word	0x40ce0480
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40c4cd00 	.word	0x40c4cd00
 8001200:	00000000 	.word	0x00000000
 8001204:	40d21880 	.word	0x40d21880

08001208 <joint_to_encoder>:

int32_t joint_to_encoder(int num, float_t value){
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	ed87 0a00 	vstr	s0, [r7]
	//convert to encoder count
	int32_t ans;
	if(num == 1){
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d111      	bne.n	800123e <joint_to_encoder+0x36>
		ans = value*ANGLE_TO_ENCODER1;
 800121a:	edd7 7a00 	vldr	s15, [r7]
 800121e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001222:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80012a0 <joint_to_encoder+0x98>
 8001226:	ee27 6b06 	vmul.f64	d6, d7, d6
 800122a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80012a8 <joint_to_encoder+0xa0>
 800122e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001232:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001236:	ee17 3a90 	vmov	r3, s15
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e028      	b.n	8001290 <joint_to_encoder+0x88>
	}
	else if(num == 2){
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d111      	bne.n	8001268 <joint_to_encoder+0x60>
		ans = value*ANGLE_TO_ENCODER2;
 8001244:	edd7 7a00 	vldr	s15, [r7]
 8001248:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800124c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80012b0 <joint_to_encoder+0xa8>
 8001250:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001254:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80012a8 <joint_to_encoder+0xa0>
 8001258:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800125c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001260:	ee17 3a90 	vmov	r3, s15
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e013      	b.n	8001290 <joint_to_encoder+0x88>
	}
	else if(num == 3){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b03      	cmp	r3, #3
 800126c:	d110      	bne.n	8001290 <joint_to_encoder+0x88>
		ans = value*SCALAR_TO_ENCODER3;
 800126e:	edd7 7a00 	vldr	s15, [r7]
 8001272:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001276:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80012b8 <joint_to_encoder+0xb0>
 800127a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800127e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80012c0 <joint_to_encoder+0xb8>
 8001282:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001286:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800128a:	ee17 3a90 	vmov	r3, s15
 800128e:	60fb      	str	r3, [r7, #12]
	}
	return ans;
 8001290:	68fb      	ldr	r3, [r7, #12]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40bf8700 	.word	0x40bf8700
 80012a8:	00000000 	.word	0x00000000
 80012ac:	40e19400 	.word	0x40e19400
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40ce0480 	.word	0x40ce0480
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40d21880 	.word	0x40d21880
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40c4cd00 	.word	0x40c4cd00

080012c8 <Serial_Setup>:
#include "STEPPER.h"
#include "TASKSPACE.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2258      	movs	r2, #88	; 0x58
 80012d6:	fb02 f303 	mul.w	r3, r2, r3
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <Serial_Setup+0x3c>)
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6858      	ldr	r0, [r3, #4]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3335      	adds	r3, #53	; 0x35
 80012f4:	220e      	movs	r2, #14
 80012f6:	4619      	mov	r1, r3
 80012f8:	f00c ff36 	bl	800e168 <HAL_UART_Receive_DMA>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2400050c 	.word	0x2400050c

08001308 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	e00b      	b.n	8001332 <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4413      	add	r3, r2
 8001320:	3326      	adds	r3, #38	; 0x26
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b29a      	uxth	r2, r3
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	4413      	add	r3, r2
 800132a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	3301      	adds	r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001338:	3304      	adds	r3, #4
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	429a      	cmp	r2, r3
 800133e:	ddec      	ble.n	800131a <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 8001340:	89fb      	ldrh	r3, [r7, #14]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	b2db      	uxtb	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	b2db      	uxtb	r3, r3
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	b29b      	uxth	r3, r3
 800137e:	b2db      	uxtb	r3, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <Servo_gripperChess>:
//
//	}
//	return
//}

void Servo_gripperChess(int num, uint16_t value){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2258      	movs	r2, #88	; 0x58
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <Servo_gripperChess+0x6c>)
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2202      	movs	r2, #2
 80013aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2202      	movs	r2, #2
 80013b2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2214      	movs	r2, #20
 80013ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ffc7 	bl	8001354 <SHIFT_TO_LSB>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ffcb 	bl	800136e <SHIFT_TO_MSB>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f87a 	bl	80014dc <iWrite>
	sendIPacket(serial);
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 f8c6 	bl	800157a <sendIPacket>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2400050c 	.word	0x2400050c

080013fc <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2258      	movs	r2, #88	; 0x58
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	4a15      	ldr	r2, [pc, #84]	; (8001468 <Servo_tragetPos+0x6c>)
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2202      	movs	r2, #2
 8001422:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2220      	movs	r2, #32
 800142a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff8f 	bl	8001354 <SHIFT_TO_LSB>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff93 	bl	800136e <SHIFT_TO_MSB>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 f842 	bl	80014dc <iWrite>
	sendIPacket(serial);
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 f88e 	bl	800157a <sendIPacket>
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2400050c 	.word	0x2400050c

0800146c <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2258      	movs	r2, #88	; 0x58
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <Servo_StartStop+0x6c>)
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2211      	movs	r2, #17
 800149a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff57 	bl	8001354 <SHIFT_TO_LSB>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff5b 	bl	800136e <SHIFT_TO_MSB>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f80a 	bl	80014dc <iWrite>
	sendIPacket(serial);
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f856 	bl	800157a <sendIPacket>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2400050c 	.word	0x2400050c

080014dc <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	22ff      	movs	r2, #255	; 0xff
 80014e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	22fd      	movs	r2, #253	; 0xfd
 80014f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80014fa:	3303      	adds	r3, #3
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 800151c:	2305      	movs	r3, #5
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e00e      	b.n	8001540 <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3b05      	subs	r3, #5
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	3326      	adds	r3, #38	; 0x26
 8001536:	460a      	mov	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001546:	3304      	adds	r3, #4
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	429a      	cmp	r2, r3
 800154c:	dde9      	ble.n	8001522 <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff feda 	bl	8001308 <Cal_sum>
 8001554:	4603      	mov	r3, r0
 8001556:	4619      	mov	r1, r3
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	3326      	adds	r3, #38	; 0x26
 8001560:	460a      	mov	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3301      	adds	r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <sendIPacket>:

void sendIPacket(serial_state * serial){
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6858      	ldr	r0, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001592:	b29a      	uxth	r2, r3
 8001594:	230a      	movs	r3, #10
 8001596:	f00c fd51 	bl	800e03c <HAL_UART_Transmit>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2258      	movs	r2, #88	; 0x58
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <data_in+0x2c>)
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	2400050c 	.word	0x2400050c

080015d4 <selectPacket>:

void selectPacket(int num){
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2258      	movs	r2, #88	; 0x58
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4ab9      	ldr	r2, [pc, #740]	; (80018cc <selectPacket+0x2f8>)
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 8225 	beq.w	8001a40 <selectPacket+0x46c>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fc:	2bff      	cmp	r3, #255	; 0xff
 80015fe:	f040 8216 	bne.w	8001a2e <selectPacket+0x45a>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001608:	2bfd      	cmp	r3, #253	; 0xfd
 800160a:	f040 8210 	bne.w	8001a2e <selectPacket+0x45a>
			switch (serial->rPacket[3]) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001614:	2b03      	cmp	r3, #3
 8001616:	f000 820c 	beq.w	8001a32 <selectPacket+0x45e>
 800161a:	2b03      	cmp	r3, #3
 800161c:	f300 820b 	bgt.w	8001a36 <selectPacket+0x462>
 8001620:	2b01      	cmp	r3, #1
 8001622:	d002      	beq.n	800162a <selectPacket+0x56>
 8001624:	2b02      	cmp	r3, #2
 8001626:	d009      	beq.n	800163c <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 8001628:	e205      	b.n	8001a36 <selectPacket+0x462>
				switch (serial->rPacket[4]) {
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001630:	2b15      	cmp	r3, #21
 8001632:	d001      	beq.n	8001638 <selectPacket+0x64>
 8001634:	2b16      	cmp	r3, #22
					break;
 8001636:	e000      	b.n	800163a <selectPacket+0x66>
					break;
 8001638:	bf00      	nop
				break;
 800163a:	e1fd      	b.n	8001a38 <selectPacket+0x464>
					switch (serial->rPacket[4]) {
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001642:	3b02      	subs	r3, #2
 8001644:	2b12      	cmp	r3, #18
 8001646:	f200 81f0 	bhi.w	8001a2a <selectPacket+0x456>
 800164a:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <selectPacket+0x7c>)
 800164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001650:	08001a2b 	.word	0x08001a2b
 8001654:	0800169d 	.word	0x0800169d
 8001658:	08001705 	.word	0x08001705
 800165c:	0800176d 	.word	0x0800176d
 8001660:	080017cf 	.word	0x080017cf
 8001664:	08001a2b 	.word	0x08001a2b
 8001668:	08001a2b 	.word	0x08001a2b
 800166c:	08001a2b 	.word	0x08001a2b
 8001670:	08001a2b 	.word	0x08001a2b
 8001674:	08001a2b 	.word	0x08001a2b
 8001678:	08001a2b 	.word	0x08001a2b
 800167c:	08001a2b 	.word	0x08001a2b
 8001680:	08001a2b 	.word	0x08001a2b
 8001684:	08001a2b 	.word	0x08001a2b
 8001688:	08001831 	.word	0x08001831
 800168c:	08001881 	.word	0x08001881
 8001690:	080018d5 	.word	0x080018d5
 8001694:	08001993 	.word	0x08001993
 8001698:	08001a09 	.word	0x08001a09
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80016aa:	4413      	add	r3, r2
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff fa6d 	bl	8000b98 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80016cc:	4413      	add	r3, r2
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	2002      	movs	r0, #2
 80016dc:	f7ff fa5c 	bl	8000b98 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80016ee:	4413      	add	r3, r2
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	2003      	movs	r0, #3
 80016fe:	f7ff fa4b 	bl	8000b98 <Stepper_SetMinPosition>
						break;
 8001702:	e193      	b.n	8001a2c <selectPacket+0x458>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001712:	4413      	add	r3, r2
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	2001      	movs	r0, #1
 8001722:	f7ff fa53 	bl	8000bcc <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001734:	4413      	add	r3, r2
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	2002      	movs	r0, #2
 8001744:	f7ff fa42 	bl	8000bcc <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001756:	4413      	add	r3, r2
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001760:	eeb0 0a67 	vmov.f32	s0, s15
 8001764:	2003      	movs	r0, #3
 8001766:	f7ff fa31 	bl	8000bcc <Stepper_SetMaxPosition>
						break;
 800176a:	e15f      	b.n	8001a2c <selectPacket+0x458>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001772:	b29b      	uxth	r3, r3
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800177e:	b29b      	uxth	r3, r3
 8001780:	4413      	add	r3, r2
 8001782:	b29b      	uxth	r3, r3
 8001784:	4619      	mov	r1, r3
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff fa3a 	bl	8000c00 <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001792:	b29b      	uxth	r3, r3
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4619      	mov	r1, r3
 80017a6:	2002      	movs	r0, #2
 80017a8:	f7ff fa2a 	bl	8000c00 <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4619      	mov	r1, r3
 80017c6:	2003      	movs	r0, #3
 80017c8:	f7ff fa1a 	bl	8000c00 <Stepper_SetMinSpeed>
						break;
 80017cc:	e12e      	b.n	8001a2c <selectPacket+0x458>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4619      	mov	r1, r3
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff fa23 	bl	8000c34 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	4619      	mov	r1, r3
 8001808:	2002      	movs	r0, #2
 800180a:	f7ff fa13 	bl	8000c34 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001814:	b29b      	uxth	r3, r3
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001820:	b29b      	uxth	r3, r3
 8001822:	4413      	add	r3, r2
 8001824:	b29b      	uxth	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	2003      	movs	r0, #3
 800182a:	f7ff fa03 	bl	8000c34 <Stepper_SetMaxSpeed>
						break;
 800182e:	e0fd      	b.n	8001a2c <selectPacket+0x458>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800183e:	4413      	add	r3, r2
 8001840:	461a      	mov	r2, r3
 8001842:	2100      	movs	r1, #0
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff fbc9 	bl	8000fdc <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001858:	4413      	add	r3, r2
 800185a:	461a      	mov	r2, r3
 800185c:	2100      	movs	r1, #0
 800185e:	2002      	movs	r0, #2
 8001860:	f7ff fbbc 	bl	8000fdc <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001872:	4413      	add	r3, r2
 8001874:	461a      	mov	r2, r3
 8001876:	2100      	movs	r1, #0
 8001878:	2003      	movs	r0, #3
 800187a:	f7ff fbaf 	bl	8000fdc <Stepper_SetHome>
						break;
 800187e:	e0d5      	b.n	8001a2c <selectPacket+0x458>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001886:	4619      	mov	r1, r3
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff fb5d 	bl	8000f48 <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001894:	4619      	mov	r1, r3
 8001896:	2002      	movs	r0, #2
 8001898:	f7ff fb56 	bl	8000f48 <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018a2:	4619      	mov	r1, r3
 80018a4:	2003      	movs	r0, #3
 80018a6:	f7ff fb4f 	bl	8000f48 <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	2002      	movs	r0, #2
 80018c6:	f7ff fdd1 	bl	800146c <Servo_StartStop>
						break;
 80018ca:	e0af      	b.n	8001a2c <selectPacket+0x458>
 80018cc:	2400050c 	.word	0x2400050c
 80018d0:	42c80000 	.word	0x42c80000
						Stepper_SetTraget(1, ((float_t)(int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]))/100.00);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80018da:	b29b      	uxth	r3, r3
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f6:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 80018d0 <selectPacket+0x2fc>
 80018fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001902:	2001      	movs	r0, #1
 8001904:	f7ff f9b0 	bl	8000c68 <Stepper_SetTraget>
						Stepper_SetTraget(2, ((float_t)(int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]))/100.00);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190e:	b29b      	uxth	r3, r3
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191a:	b29b      	uxth	r3, r3
 800191c:	4413      	add	r3, r2
 800191e:	b29b      	uxth	r3, r3
 8001920:	b21b      	sxth	r3, r3
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 80018d0 <selectPacket+0x2fc>
 800192e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001932:	eeb0 0a47 	vmov.f32	s0, s14
 8001936:	2002      	movs	r0, #2
 8001938:	f7ff f996 	bl	8000c68 <Stepper_SetTraget>
						Stepper_SetTraget(3, ((float_t)(int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]))/100.00);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800194e:	b29b      	uxth	r3, r3
 8001950:	4413      	add	r3, r2
 8001952:	b29b      	uxth	r3, r3
 8001954:	b21b      	sxth	r3, r3
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195e:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 80018d0 <selectPacket+0x2fc>
 8001962:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001966:	eeb0 0a47 	vmov.f32	s0, s14
 800196a:	2003      	movs	r0, #3
 800196c:	f7ff f97c 	bl	8000c68 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001976:	b29b      	uxth	r3, r3
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001982:	b29b      	uxth	r3, r3
 8001984:	4413      	add	r3, r2
 8001986:	b29b      	uxth	r3, r3
 8001988:	4619      	mov	r1, r3
 800198a:	2002      	movs	r0, #2
 800198c:	f7ff fd36 	bl	80013fc <Servo_tragetPos>
						break;
 8001990:	e04c      	b.n	8001a2c <selectPacket+0x458>
						updateJoint((int16_t)((serial->rPacket[12]<<8) + serial->rPacket[11]), (int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]), (int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]), (int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]));
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001998:	b29b      	uxth	r3, r3
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4619      	mov	r1, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4413      	add	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	461c      	mov	r4, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	4622      	mov	r2, r4
 8001a02:	f000 f861 	bl	8001ac8 <updateJoint>
						break;
 8001a06:	e011      	b.n	8001a2c <selectPacket+0x458>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	2002      	movs	r0, #2
 8001a24:	f7ff fcb2 	bl	800138c <Servo_gripperChess>
						break;
 8001a28:	e000      	b.n	8001a2c <selectPacket+0x458>
						break;
 8001a2a:	bf00      	nop
					break;
 8001a2c:	e004      	b.n	8001a38 <selectPacket+0x464>
			}
		}
 8001a2e:	bf00      	nop
 8001a30:	e002      	b.n	8001a38 <selectPacket+0x464>
						break;
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <selectPacket+0x464>
						break;
 8001a36:	bf00      	nop
		serial->state = 0;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd90      	pop	{r4, r7, pc}

08001a48 <to_degree>:

void updateXYZ(int32_t x, int32_t y, int32_t z){
//	taskspace_state * taskspace = &taskspaces[0];
}

double to_degree(double value){
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	ed87 0b00 	vstr	d0, [r7]
	return value * 180.0 / M_PI;
 8001a52:	ed97 7b00 	vldr	d7, [r7]
 8001a56:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001a78 <to_degree+0x30>
 8001a5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a5e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001a80 <to_degree+0x38>
 8001a62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001a66:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001a6a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	40668000 	.word	0x40668000
 8001a80:	54442d18 	.word	0x54442d18
 8001a84:	400921fb 	.word	0x400921fb

08001a88 <to_radian>:

double to_radian(double value){
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	ed87 0b00 	vstr	d0, [r7]
	return value * M_PI / 180.0;
 8001a92:	ed97 7b00 	vldr	d7, [r7]
 8001a96:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001ab8 <to_radian+0x30>
 8001a9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a9e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001ac0 <to_radian+0x38>
 8001aa2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001aa6:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001aaa:	eeb0 0b47 	vmov.f64	d0, d7
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	54442d18 	.word	0x54442d18
 8001abc:	400921fb 	.word	0x400921fb
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40668000 	.word	0x40668000

08001ac8 <updateJoint>:

void updateJoint(int32_t roll, int32_t x, int32_t y, int32_t z){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0a0      	sub	sp, #128	; 0x80
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
	taskspace_state * taskspace = &taskspaces[0];
 8001ad6:	4b8e      	ldr	r3, [pc, #568]	; (8001d10 <updateJoint+0x248>)
 8001ad8:	67fb      	str	r3, [r7, #124]	; 0x7c
//	taskspace->qi1 = to_radian((double)Stepper_currentPosition_real(1));
//	taskspace->qi2 = to_radian((double)Stepper_currentPosition_real(2));
//	taskspace->qi3 = (double)Stepper_currentPosition_real(3);
//	taskspace->qi4 = to_radian((double)0.0);

	taskspace->qi1 = to_radian((double)Stepper_targetPosition_real(1));
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7ff fb18 	bl	8001110 <Stepper_targetPosition_real>
 8001ae0:	eef0 7a40 	vmov.f32	s15, s0
 8001ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ae8:	eeb0 0b47 	vmov.f64	d0, d7
 8001aec:	f7ff ffcc 	bl	8001a88 <to_radian>
 8001af0:	eeb0 7b40 	vmov.f64	d7, d0
 8001af4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001af6:	ed83 7b08 	vstr	d7, [r3, #32]
	taskspace->qi2 = to_radian((double)Stepper_targetPosition_real(2));
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7ff fb08 	bl	8001110 <Stepper_targetPosition_real>
 8001b00:	eef0 7a40 	vmov.f32	s15, s0
 8001b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b08:	eeb0 0b47 	vmov.f64	d0, d7
 8001b0c:	f7ff ffbc 	bl	8001a88 <to_radian>
 8001b10:	eeb0 7b40 	vmov.f64	d7, d0
 8001b14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b16:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	taskspace->qi3 = (double)Stepper_targetPosition_real(3);
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	f7ff faf8 	bl	8001110 <Stepper_targetPosition_real>
 8001b20:	eef0 7a40 	vmov.f32	s15, s0
 8001b24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b2a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	taskspace->qi4 = to_radian((double)0.0);
 8001b2e:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8001cf8 <updateJoint+0x230>
 8001b32:	f7ff ffa9 	bl	8001a88 <to_radian>
 8001b36:	eeb0 7b40 	vmov.f64	d7, d0
 8001b3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b3c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	double qi_all[4] = {taskspace->qi1, taskspace->qi2, taskspace->qi3, taskspace->qi4};
 8001b40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b46:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001b4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b4c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b50:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b56:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b5a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b64:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
//	double qi_all[4] = {0.0, M_PI / 2.0, 0.0, 0.0};
//	double q_0[4] = {0.0, 0.0, 0.0, 0.0};
	forwardKinematic(qi_all);
 8001b68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fa3f 	bl	8001ff0 <forwardKinematic>

	taskspace->d1 = (double)(roll/100.00);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b7c:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8001d00 <updateJoint+0x238>
 8001b80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b86:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	taskspace->d2 = (double)(x/100.00);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b94:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001d00 <updateJoint+0x238>
 8001b98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b9e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	taskspace->d3 = (double)(y/100.00);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001bac:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8001d00 <updateJoint+0x238>
 8001bb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bb6:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	taskspace->d4 = (double)(z/100.00);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001bc4:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8001d00 <updateJoint+0x238>
 8001bc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bce:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	double delta[4] = {taskspace->d1, taskspace->d2, taskspace->d3, taskspace->d4};
 8001bd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bd4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001bd8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bde:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001be2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001be8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001bec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001bf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bf2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001bf6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
//	double delta[4] = {(double)(roll/100.00), (double)(x/100.00), (double)(y/100.00), (double)(z/100.00)};
	cartesianJog(qi_all, delta);
 8001bfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f887 	bl	8001d18 <cartesianJog>
	taskspace->q1 = get_cartesian_q1();
 8001c0a:	f000 f99f 	bl	8001f4c <get_cartesian_q1>
 8001c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8001c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c14:	ed83 7b00 	vstr	d7, [r3]
	taskspace->q2 = get_cartesian_q2();
 8001c18:	f000 f9ac 	bl	8001f74 <get_cartesian_q2>
 8001c1c:	eeb0 7b40 	vmov.f64	d7, d0
 8001c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c22:	ed83 7b02 	vstr	d7, [r3, #8]
	taskspace->q3 = get_cartesian_q3();
 8001c26:	f000 f9b9 	bl	8001f9c <get_cartesian_q3>
 8001c2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c30:	ed83 7b04 	vstr	d7, [r3, #16]
	taskspace->q4 = get_cartesian_q4();
 8001c34:	f000 f9c6 	bl	8001fc4 <get_cartesian_q4>
 8001c38:	eeb0 7b40 	vmov.f64	d7, d0
 8001c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c3e:	ed83 7b06 	vstr	d7, [r3, #24]
//		taskspace->q2 = to_radian((double)Stepper_targetPosition_real(2));
//		taskspace->q3 = (double)Stepper_targetPosition_real(3);
//		taskspace->q4 = to_radian((double)0.0);
//		double qq[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
//		forwardKinematic(qq);
		double x_target = get_fk_X() - cos(2.0*0.0001)*50.0;
 8001c42:	f000 fa83 	bl	800214c <get_fk_X>
 8001c46:	eeb0 7b40 	vmov.f64	d7, d0
 8001c4a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001d08 <updateJoint+0x240>
 8001c4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c52:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
		double y_target = get_fk_Y() - cos(2.0*0.0001)*50.0;
 8001c56:	f000 fa8d 	bl	8002174 <get_fk_Y>
 8001c5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c5e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001d08 <updateJoint+0x240>
 8001c62:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c66:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
		taskspace->t1 = x_target;
 8001c6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001c6c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001c70:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		taskspace->t2 = y_target;
 8001c74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001c76:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c7a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		double xyz[3] = {x_target, y_target, 0};
 8001c7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001c82:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001c86:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9c7 2308 	strd	r2, r3, [r7, #32]
		IK(xyz, 0, 1);
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
 8001ca2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001cf8 <updateJoint+0x230>
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc92 	bl	80005d0 <IK>
		Stepper_SetTraget(1, to_degree(get_ik_q1()));
 8001cac:	f7fe fd5a 	bl	8000764 <get_ik_q1>
 8001cb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001cb4:	eeb0 0b47 	vmov.f64	d0, d7
 8001cb8:	f7ff fec6 	bl	8001a48 <to_degree>
 8001cbc:	eeb0 7b40 	vmov.f64	d7, d0
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f7fe ffcd 	bl	8000c68 <Stepper_SetTraget>
		Stepper_SetTraget(2, to_degree(get_ik_q2()));
 8001cce:	f7fe fd5d 	bl	800078c <get_ik_q2>
 8001cd2:	eeb0 7b40 	vmov.f64	d7, d0
 8001cd6:	eeb0 0b47 	vmov.f64	d0, d7
 8001cda:	f7ff feb5 	bl	8001a48 <to_degree>
 8001cde:	eeb0 7b40 	vmov.f64	d7, d0
 8001ce2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cea:	2002      	movs	r0, #2
 8001cec:	f7fe ffbc 	bl	8000c68 <Stepper_SetTraget>
}
 8001cf0:	bf00      	nop
 8001cf2:	3780      	adds	r7, #128	; 0x80
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
	...
 8001d04:	40590000 	.word	0x40590000
 8001d08:	f79c8430 	.word	0xf79c8430
 8001d0c:	4048ffff 	.word	0x4048ffff
 8001d10:	24000450 	.word	0x24000450
 8001d14:	00000000 	.word	0x00000000

08001d18 <cartesianJog>:
 */

static cartesian_state cartesians[NUM_CARTESIAN];

void cartesianJog(const double qi[4], const double deltak[4])
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	ed2d 8b04 	vpush	{d8-d9}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	cartesian_state * cartesian = &cartesians[0];
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <cartesianJog+0x230>)
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
	double b_qf_tmp;
	double c_qf_tmp;
	double d_qf_tmp;
	double qf_tmp;
	double qf_tmp_tmp;
	qf_tmp = sin(qi[1]);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	ed93 7b00 	vldr	d7, [r3]
 8001d32:	eeb0 0b47 	vmov.f64	d0, d7
 8001d36:	f00e fc6b 	bl	8010610 <sin>
 8001d3a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	qf_tmp_tmp = qi[0] + qi[1];
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	ed93 6b00 	vldr	d6, [r3]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3308      	adds	r3, #8
 8001d48:	ed93 7b00 	vldr	d7, [r3]
 8001d4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d50:	ed87 7b08 	vstr	d7, [r7, #32]
	b_qf_tmp = cos(qf_tmp_tmp);
 8001d54:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d58:	f00e fc12 	bl	8010580 <cos>
 8001d5c:	ed87 0b06 	vstr	d0, [r7, #24]
	qf_tmp_tmp = sin(qf_tmp_tmp);
 8001d60:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d64:	f00e fc54 	bl	8010610 <sin>
 8001d68:	ed87 0b08 	vstr	d0, [r7, #32]
	c_qf_tmp = cos(qi[0]);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	ed93 7b00 	vldr	d7, [r3]
 8001d72:	eeb0 0b47 	vmov.f64	d0, d7
 8001d76:	f00e fc03 	bl	8010580 <cos>
 8001d7a:	ed87 0b04 	vstr	d0, [r7, #16]
	d_qf_tmp = sin(qi[0]);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	ed93 7b00 	vldr	d7, [r3]
 8001d84:	eeb0 0b47 	vmov.f64	d0, d7
 8001d88:	f00e fc42 	bl	8010610 <sin>
 8001d8c:	ed87 0b02 	vstr	d0, [r7, #8]

	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] * qf_tmp) / (248.0 * qf_tmp);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	3308      	adds	r3, #8
 8001d94:	ed93 6b00 	vldr	d6, [r3]
 8001d98:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	3310      	adds	r3, #16
 8001da4:	ed93 5b00 	vldr	d5, [r3]
 8001da8:	ed97 7b08 	vldr	d7, [r7, #32]
 8001dac:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001db0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	ed93 7b00 	vldr	d7, [r3]
 8001dba:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8001f30 <cartesianJog+0x218>
 8001dbe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001dc2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001dc6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001dca:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001dce:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001dd2:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001f30 <cartesianJog+0x218>
 8001dd6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dda:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de0:	ed83 7b00 	vstr	d7, [r3]
	cartesian->q2 = (qi[1] - deltak[1] * (1651.0 * b_qf_tmp / 4.0 + 248.0 * c_qf_tmp) / (102362.0 * qf_tmp)) - deltak[2] * (1651.0 * qf_tmp_tmp / 4.0 + 248.0 * d_qf_tmp) / (102362.0 * sin(qi[1]));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3308      	adds	r3, #8
 8001de8:	ed93 6b00 	vldr	d6, [r3]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	3308      	adds	r3, #8
 8001df0:	ed93 5b00 	vldr	d5, [r3]
 8001df4:	ed97 7b06 	vldr	d7, [r7, #24]
 8001df8:	ed9f 4b4f 	vldr	d4, [pc, #316]	; 8001f38 <cartesianJog+0x220>
 8001dfc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001e00:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 8001e04:	ee87 4b03 	vdiv.f64	d4, d7, d3
 8001e08:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e0c:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8001f30 <cartesianJog+0x218>
 8001e10:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001e14:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001e18:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001e1c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001e20:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001f40 <cartesianJog+0x228>
 8001e24:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001e28:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001e2c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	3310      	adds	r3, #16
 8001e34:	ed93 6b00 	vldr	d6, [r3]
 8001e38:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e3c:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001f38 <cartesianJog+0x220>
 8001e40:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001e44:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001e48:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001e4c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e50:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8001f30 <cartesianJog+0x218>
 8001e54:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001e58:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001e5c:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3308      	adds	r3, #8
 8001e64:	ed93 7b00 	vldr	d7, [r3]
 8001e68:	eeb0 0b47 	vmov.f64	d0, d7
 8001e6c:	f00e fbd0 	bl	8010610 <sin>
 8001e70:	eeb0 7b40 	vmov.f64	d7, d0
 8001e74:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001f40 <cartesianJog+0x228>
 8001e78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e7c:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001e80:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	ed83 7b02 	vstr	d7, [r3, #8]
	cartesian->q3 = qi[2] - deltak[3];
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	ed93 6b00 	vldr	d6, [r3]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3318      	adds	r3, #24
 8001e96:	ed93 7b00 	vldr	d7, [r3]
 8001e9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	ed83 7b04 	vstr	d7, [r3, #16]
	cartesian->q4 = (((4.0 * deltak[1] * c_qf_tmp + 1651.0 * deltak[0] * qf_tmp) + 4.0 * deltak[2] * d_qf_tmp) + 1651.0 * qi[3] * qf_tmp) / (1651.0 * qf_tmp);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	ed93 7b00 	vldr	d7, [r3]
 8001eac:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001eb0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001eb4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001eb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	ed93 7b00 	vldr	d7, [r3]
 8001ec2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001f38 <cartesianJog+0x220>
 8001ec6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001eca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ece:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ed2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3310      	adds	r3, #16
 8001eda:	ed93 7b00 	vldr	d7, [r3]
 8001ede:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001ee2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001ee6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001eea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001eee:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3318      	adds	r3, #24
 8001ef6:	ed93 7b00 	vldr	d7, [r3]
 8001efa:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001f38 <cartesianJog+0x220>
 8001efe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001f02:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f06:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001f0a:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001f0e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f12:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001f38 <cartesianJog+0x220>
 8001f16:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f20:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	3738      	adds	r7, #56	; 0x38
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	ecbd 8b04 	vpop	{d8-d9}
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	00000000 	.word	0x00000000
 8001f34:	406f0000 	.word	0x406f0000
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	4099cc00 	.word	0x4099cc00
 8001f40:	00000000 	.word	0x00000000
 8001f44:	40f8fda0 	.word	0x40f8fda0
 8001f48:	240004c0 	.word	0x240004c0

08001f4c <get_cartesian_q1>:

double get_cartesian_q1(){
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <get_cartesian_q1+0x24>)
 8001f54:	607b      	str	r3, [r7, #4]
	return cartesian->q1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f60:	eeb0 0b47 	vmov.f64	d0, d7
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	240004c0 	.word	0x240004c0

08001f74 <get_cartesian_q2>:

double get_cartesian_q2(){
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <get_cartesian_q2+0x24>)
 8001f7c:	607b      	str	r3, [r7, #4]
	return cartesian->q2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f84:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f88:	eeb0 0b47 	vmov.f64	d0, d7
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	240004c0 	.word	0x240004c0

08001f9c <get_cartesian_q3>:

double get_cartesian_q3(){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <get_cartesian_q3+0x24>)
 8001fa4:	607b      	str	r3, [r7, #4]
	return cartesian->q3;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fac:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	240004c0 	.word	0x240004c0

08001fc4 <get_cartesian_q4>:

double get_cartesian_q4(){
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <get_cartesian_q4+0x24>)
 8001fcc:	607b      	str	r3, [r7, #4]
	return cartesian->q4;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fd4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fd8:	eeb0 0b47 	vmov.f64	d0, d7
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	240004c0 	.word	0x240004c0
 8001fec:	00000000 	.word	0x00000000

08001ff0 <forwardKinematic>:
#include <math.h>

static fk_state fks[NUM_FK];

void forwardKinematic(const double q[4])
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	ed2d 8b02 	vpush	{d8}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[0];
 8001ffc:	4b52      	ldr	r3, [pc, #328]	; (8002148 <forwardKinematic+0x158>)
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  double Rota_idx_1;
  double Rota_tmp;
  double Rota_tmp_tmp_tmp;
  double eulShaped_idx_2;
  Rota_tmp_tmp_tmp = q[0] + q[1];
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	ed93 6b00 	vldr	d6, [r3]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3308      	adds	r3, #8
 800200a:	ed93 7b00 	vldr	d7, [r3]
 800200e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002012:	ed87 7b06 	vstr	d7, [r7, #24]
  Rota_idx_1 = Rota_tmp_tmp_tmp + q[3];
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3318      	adds	r3, #24
 800201a:	ed93 7b00 	vldr	d7, [r3]
 800201e:	ed97 6b06 	vldr	d6, [r7, #24]
 8002022:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002026:	ed87 7b04 	vstr	d7, [r7, #16]
  Rota_tmp = cos(Rota_idx_1);
 800202a:	ed97 0b04 	vldr	d0, [r7, #16]
 800202e:	f00e faa7 	bl	8010580 <cos>
 8002032:	ed87 0b02 	vstr	d0, [r7, #8]
  Rota_idx_1 = sin(Rota_idx_1);
 8002036:	ed97 0b04 	vldr	d0, [r7, #16]
 800203a:	f00e fae9 	bl	8010610 <sin>
 800203e:	ed87 0b04 	vstr	d0, [r7, #16]
  eulShaped_idx_2 = atan2(Rota_idx_1, Rota_tmp);
 8002042:	ed97 1b02 	vldr	d1, [r7, #8]
 8002046:	ed97 0b04 	vldr	d0, [r7, #16]
 800204a:	f00e fb29 	bl	80106a0 <atan2>
 800204e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
  if (sqrt(Rota_tmp * Rota_tmp + Rota_idx_1 * Rota_idx_1) <
 8002052:	ed97 7b02 	vldr	d7, [r7, #8]
 8002056:	ee27 6b07 	vmul.f64	d6, d7, d7
 800205a:	ed97 7b04 	vldr	d7, [r7, #16]
 800205e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002062:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002066:	eeb0 0b47 	vmov.f64	d0, d7
 800206a:	f00e fb1d 	bl	80106a8 <sqrt>
 800206e:	eeb0 7b40 	vmov.f64	d7, d0
 8002072:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002128 <forwardKinematic+0x138>
 8002076:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	d505      	bpl.n	800208c <forwardKinematic+0x9c>
      2.2204460492503131E-15) {
    eulShaped_idx_2 = 0.0;
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  fk->roll = eulShaped_idx_2; //radian
 800208c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800208e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002092:	e9c1 2300 	strd	r2, r3, [r1]
  fk->X = 412.75 * cos(Rota_tmp_tmp_tmp) + 248.0 * cos(q[0]); //mm
 8002096:	ed97 0b06 	vldr	d0, [r7, #24]
 800209a:	f00e fa71 	bl	8010580 <cos>
 800209e:	eeb0 7b40 	vmov.f64	d7, d0
 80020a2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002130 <forwardKinematic+0x140>
 80020a6:	ee27 8b06 	vmul.f64	d8, d7, d6
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	ed93 7b00 	vldr	d7, [r3]
 80020b0:	eeb0 0b47 	vmov.f64	d0, d7
 80020b4:	f00e fa64 	bl	8010580 <cos>
 80020b8:	eeb0 7b40 	vmov.f64	d7, d0
 80020bc:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002138 <forwardKinematic+0x148>
 80020c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020c4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	ed83 7b02 	vstr	d7, [r3, #8]
  fk->Y = 412.75 * sin(Rota_tmp_tmp_tmp) + 248.0 * sin(q[0]); //mm
 80020ce:	ed97 0b06 	vldr	d0, [r7, #24]
 80020d2:	f00e fa9d 	bl	8010610 <sin>
 80020d6:	eeb0 7b40 	vmov.f64	d7, d0
 80020da:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002130 <forwardKinematic+0x140>
 80020de:	ee27 8b06 	vmul.f64	d8, d7, d6
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	ed93 7b00 	vldr	d7, [r3]
 80020e8:	eeb0 0b47 	vmov.f64	d0, d7
 80020ec:	f00e fa90 	bl	8010610 <sin>
 80020f0:	eeb0 7b40 	vmov.f64	d7, d0
 80020f4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002138 <forwardKinematic+0x148>
 80020f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020fc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	ed83 7b04 	vstr	d7, [r3, #16]
  fk->Z = 249.25 - q[2]; //mm
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3310      	adds	r3, #16
 800210a:	ed93 7b00 	vldr	d7, [r3]
 800210e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002140 <forwardKinematic+0x150>
 8002112:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	ed83 7b06 	vstr	d7, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	ecbd 8b02 	vpop	{d8}
 8002126:	bd80      	pop	{r7, pc}
 8002128:	00000000 	.word	0x00000000
 800212c:	3ce40000 	.word	0x3ce40000
 8002130:	00000000 	.word	0x00000000
 8002134:	4079cc00 	.word	0x4079cc00
 8002138:	00000000 	.word	0x00000000
 800213c:	406f0000 	.word	0x406f0000
 8002140:	00000000 	.word	0x00000000
 8002144:	406f2800 	.word	0x406f2800
 8002148:	240004e0 	.word	0x240004e0

0800214c <get_fk_X>:
double get_fk_roll(){
	fk_state * fk = &fks[0];
	return fk->roll;
}

double get_fk_X(){
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
	fk_state * fk = &fks[0];
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <get_fk_X+0x24>)
 8002154:	607b      	str	r3, [r7, #4]
	return fk->X;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800215c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002160:	eeb0 0b47 	vmov.f64	d0, d7
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	240004e0 	.word	0x240004e0

08002174 <get_fk_Y>:

double get_fk_Y(){
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
	fk_state * fk = &fks[0];
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <get_fk_Y+0x24>)
 800217c:	607b      	str	r3, [r7, #4]
	return fk->Y;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002184:	ec43 2b17 	vmov	d7, r2, r3
}
 8002188:	eeb0 0b47 	vmov.f64	d0, d7
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	240004e0 	.word	0x240004e0

0800219c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a2:	f002 f899 	bl	80042d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a6:	f000 f94f 	bl	8002448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021aa:	f000 ff3f 	bl	800302c <MX_GPIO_Init>
  MX_BDMA_Init();
 80021ae:	f000 fef5 	bl	8002f9c <MX_BDMA_Init>
  MX_DMA_Init();
 80021b2:	f000 ff13 	bl	8002fdc <MX_DMA_Init>
  MX_ETH_Init();
 80021b6:	f000 fa33 	bl	8002620 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80021ba:	f000 febd 	bl	8002f38 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80021be:	f000 fb2b 	bl	8002818 <MX_TIM2_Init>
  MX_TIM3_Init();
 80021c2:	f000 fb7d 	bl	80028c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021c6:	f000 fbd1 	bl	800296c <MX_TIM4_Init>
  MX_TIM1_Init();
 80021ca:	f000 facb 	bl	8002764 <MX_TIM1_Init>
  MX_SPI3_Init();
 80021ce:	f000 fa73 	bl	80026b8 <MX_SPI3_Init>
  MX_ADC3_Init();
 80021d2:	f000 f9bf 	bl	8002554 <MX_ADC3_Init>
  MX_TIM5_Init();
 80021d6:	f000 fc1f 	bl	8002a18 <MX_TIM5_Init>
  MX_UART7_Init();
 80021da:	f000 fe5f 	bl	8002e9c <MX_UART7_Init>
  MX_TIM12_Init();
 80021de:	f000 fc69 	bl	8002ab4 <MX_TIM12_Init>
  MX_TIM13_Init();
 80021e2:	f000 fccb 	bl	8002b7c <MX_TIM13_Init>
  MX_TIM16_Init();
 80021e6:	f000 fd17 	bl	8002c18 <MX_TIM16_Init>
  MX_TIM17_Init();
 80021ea:	f000 fd8f 	bl	8002d0c <MX_TIM17_Init>
  MX_UART5_Init();
 80021ee:	f000 fe07 	bl	8002e00 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 80021f2:	f007 ff15 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4a76      	ldr	r2, [pc, #472]	; (80023d4 <main+0x238>)
 80021fa:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 80021fc:	f007 ff10 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b75      	ldr	r3, [pc, #468]	; (80023d8 <main+0x23c>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4a74      	ldr	r2, [pc, #464]	; (80023dc <main+0x240>)
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	4a73      	ldr	r2, [pc, #460]	; (80023e0 <main+0x244>)
 8002212:	6013      	str	r3, [r2, #0]
  //htim17 stepper 2
  //htim13 stepper 3
  //htim12 stepper 4

  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 8002214:	2300      	movs	r3, #0
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	2320      	movs	r3, #32
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	4b71      	ldr	r3, [pc, #452]	; (80023e4 <main+0x248>)
 800221e:	2200      	movs	r2, #0
 8002220:	4971      	ldr	r1, [pc, #452]	; (80023e8 <main+0x24c>)
 8002222:	2001      	movs	r0, #1
 8002224:	f7fe fc18 	bl	8000a58 <Stepper_Setup>
  Stepper_SetMinPosition(1, -180.00);
 8002228:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80023ec <main+0x250>
 800222c:	2001      	movs	r0, #1
 800222e:	f7fe fcb3 	bl	8000b98 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 360.00);
 8002232:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80023f0 <main+0x254>
 8002236:	2001      	movs	r0, #1
 8002238:	f7fe fcc8 	bl	8000bcc <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 800223c:	2300      	movs	r3, #0
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2310      	movs	r3, #16
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <main+0x248>)
 8002246:	2200      	movs	r2, #0
 8002248:	496a      	ldr	r1, [pc, #424]	; (80023f4 <main+0x258>)
 800224a:	2002      	movs	r0, #2
 800224c:	f7fe fc04 	bl	8000a58 <Stepper_Setup>
  Stepper_SetMinPosition(2, -180.00);
 8002250:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80023ec <main+0x250>
 8002254:	2002      	movs	r0, #2
 8002256:	f7fe fc9f 	bl	8000b98 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 360.00);
 800225a:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80023f0 <main+0x254>
 800225e:	2002      	movs	r0, #2
 8002260:	f7fe fcb4 	bl	8000bcc <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 8002264:	2301      	movs	r3, #1
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	4b62      	ldr	r3, [pc, #392]	; (80023f8 <main+0x25c>)
 8002270:	2200      	movs	r2, #0
 8002272:	4962      	ldr	r1, [pc, #392]	; (80023fc <main+0x260>)
 8002274:	2003      	movs	r0, #3
 8002276:	f7fe fbef 	bl	8000a58 <Stepper_Setup>
  Stepper_SetMinPosition(3, -106.00);
 800227a:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8002400 <main+0x264>
 800227e:	2003      	movs	r0, #3
 8002280:	f7fe fc8a 	bl	8000b98 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 106.00);
 8002284:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8002404 <main+0x268>
 8002288:	2003      	movs	r0, #3
 800228a:	f7fe fc9f 	bl	8000bcc <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 800228e:	2301      	movs	r3, #1
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	4b52      	ldr	r3, [pc, #328]	; (80023e4 <main+0x248>)
 800229a:	2204      	movs	r2, #4
 800229c:	495a      	ldr	r1, [pc, #360]	; (8002408 <main+0x26c>)
 800229e:	2004      	movs	r0, #4
 80022a0:	f7fe fbda 	bl	8000a58 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 80022a4:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800240c <main+0x270>
 80022a8:	2004      	movs	r0, #4
 80022aa:	f7fe fc75 	bl	8000b98 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 150.00);
 80022ae:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002410 <main+0x274>
 80022b2:	2004      	movs	r0, #4
 80022b4:	f7fe fc8a 	bl	8000bcc <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f7fe fc39 	bl	8000b30 <Stepper_DefaultState>
  Stepper_DefaultState(2);
 80022be:	2002      	movs	r0, #2
 80022c0:	f7fe fc36 	bl	8000b30 <Stepper_DefaultState>
  Stepper_DefaultState(3);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f7fe fc33 	bl	8000b30 <Stepper_DefaultState>
  Stepper_DefaultState(4);
 80022ca:	2004      	movs	r0, #4
 80022cc:	f7fe fc30 	bl	8000b30 <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 80022d0:	4841      	ldr	r0, [pc, #260]	; (80023d8 <main+0x23c>)
 80022d2:	f00a f9ff 	bl	800c6d4 <HAL_TIM_Base_Start_IT>

  //PID Setup
  setupPID(1, 0.001, -50, 50, 0.5, 0, 0);
 80022d6:	eddf 2a4d 	vldr	s5, [pc, #308]	; 800240c <main+0x270>
 80022da:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 800240c <main+0x270>
 80022de:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80022e2:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8002414 <main+0x278>
 80022e6:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8002418 <main+0x27c>
 80022ea:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800241c <main+0x280>
 80022ee:	2001      	movs	r0, #1
 80022f0:	f7fe fa60 	bl	80007b4 <setupPID>
  setupPID(2, 0.001, -50, 50, 0.5, 0, 0);
 80022f4:	eddf 2a45 	vldr	s5, [pc, #276]	; 800240c <main+0x270>
 80022f8:	ed9f 2a44 	vldr	s4, [pc, #272]	; 800240c <main+0x270>
 80022fc:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002300:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8002414 <main+0x278>
 8002304:	eddf 0a44 	vldr	s1, [pc, #272]	; 8002418 <main+0x27c>
 8002308:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800241c <main+0x280>
 800230c:	2002      	movs	r0, #2
 800230e:	f7fe fa51 	bl	80007b4 <setupPID>
  setupPID(3, 0.05, -800, 800, 1.0, 0, 0);
 8002312:	eddf 2a3e 	vldr	s5, [pc, #248]	; 800240c <main+0x270>
 8002316:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 800240c <main+0x270>
 800231a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800231e:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8002420 <main+0x284>
 8002322:	eddf 0a40 	vldr	s1, [pc, #256]	; 8002424 <main+0x288>
 8002326:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8002428 <main+0x28c>
 800232a:	2003      	movs	r0, #3
 800232c:	f7fe fa42 	bl	80007b4 <setupPID>
  setupPID(4, 0.05, -800, 800, 1.0, 0, 0);
 8002330:	eddf 2a36 	vldr	s5, [pc, #216]	; 800240c <main+0x270>
 8002334:	ed9f 2a35 	vldr	s4, [pc, #212]	; 800240c <main+0x270>
 8002338:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800233c:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8002420 <main+0x284>
 8002340:	eddf 0a38 	vldr	s1, [pc, #224]	; 8002424 <main+0x288>
 8002344:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002428 <main+0x28c>
 8002348:	2004      	movs	r0, #4
 800234a:	f7fe fa33 	bl	80007b4 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 800234e:	223c      	movs	r2, #60	; 0x3c
 8002350:	4936      	ldr	r1, [pc, #216]	; (800242c <main+0x290>)
 8002352:	2001      	movs	r0, #1
 8002354:	f7fe fb24 	bl	80009a0 <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 8002358:	223c      	movs	r2, #60	; 0x3c
 800235a:	4935      	ldr	r1, [pc, #212]	; (8002430 <main+0x294>)
 800235c:	2002      	movs	r0, #2
 800235e:	f7fe fb1f 	bl	80009a0 <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 8002362:	223c      	movs	r2, #60	; 0x3c
 8002364:	4933      	ldr	r1, [pc, #204]	; (8002434 <main+0x298>)
 8002366:	2003      	movs	r0, #3
 8002368:	f7fe fb1a 	bl	80009a0 <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 800236c:	223c      	movs	r2, #60	; 0x3c
 800236e:	4932      	ldr	r1, [pc, #200]	; (8002438 <main+0x29c>)
 8002370:	2004      	movs	r0, #4
 8002372:	f7fe fb15 	bl	80009a0 <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 8002376:	4931      	ldr	r1, [pc, #196]	; (800243c <main+0x2a0>)
 8002378:	2001      	movs	r0, #1
 800237a:	f7fe ffa5 	bl	80012c8 <Serial_Setup>
  Serial_Setup(2, &huart7);
 800237e:	4930      	ldr	r1, [pc, #192]	; (8002440 <main+0x2a4>)
 8002380:	2002      	movs	r0, #2
 8002382:	f7fe ffa1 	bl	80012c8 <Serial_Setup>

  Stepper_updateHome(1, 1);
 8002386:	2101      	movs	r1, #1
 8002388:	2001      	movs	r0, #1
 800238a:	f7fe fdff 	bl	8000f8c <Stepper_updateHome>
  Stepper_updateHome(2, 1);
 800238e:	2101      	movs	r1, #1
 8002390:	2002      	movs	r0, #2
 8002392:	f7fe fdfb 	bl	8000f8c <Stepper_updateHome>
  Stepper_updateHome(3, 1);
 8002396:	2101      	movs	r1, #1
 8002398:	2003      	movs	r0, #3
 800239a:	f7fe fdf7 	bl	8000f8c <Stepper_updateHome>
//	  a = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
//	  Stepper_runStep(1);
//	  Stepper_runStep(2);
//	  Stepper_runStep(3);
//	  Stepper_runStep(4);
	  if(state){
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <main+0x2a8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d011      	beq.n	80023ca <main+0x22e>
//		  run_tarjectory();
		  updateJoint(0,0,0,0);
 80023a6:	2300      	movs	r3, #0
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fb8b 	bl	8001ac8 <updateJoint>
		  Stepper_runStep(1);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7fe fd8e 	bl	8000ed4 <Stepper_runStep>
		  Stepper_runStep(2);
 80023b8:	2002      	movs	r0, #2
 80023ba:	f7fe fd8b 	bl	8000ed4 <Stepper_runStep>
		  Stepper_runStep(3);
 80023be:	2003      	movs	r0, #3
 80023c0:	f7fe fd88 	bl	8000ed4 <Stepper_runStep>
//		  Stepper_runStep(4);
		  state = 0;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <main+0x2a8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
	  }
	  selectPacket(1);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7ff f902 	bl	80015d4 <selectPacket>
	  if(state){
 80023d0:	e7e5      	b.n	800239e <main+0x202>
 80023d2:	bf00      	nop
 80023d4:	24000e6c 	.word	0x24000e6c
 80023d8:	24000bbc 	.word	0x24000bbc
 80023dc:	000f4240 	.word	0x000f4240
 80023e0:	24000e1c 	.word	0x24000e1c
 80023e4:	58021400 	.word	0x58021400
 80023e8:	2400103c 	.word	0x2400103c
 80023ec:	c3340000 	.word	0xc3340000
 80023f0:	43b40000 	.word	0x43b40000
 80023f4:	24000af8 	.word	0x24000af8
 80023f8:	58021000 	.word	0x58021000
 80023fc:	24000dd0 	.word	0x24000dd0
 8002400:	c2d40000 	.word	0xc2d40000
 8002404:	42d40000 	.word	0x42d40000
 8002408:	24000f34 	.word	0x24000f34
 800240c:	00000000 	.word	0x00000000
 8002410:	43160000 	.word	0x43160000
 8002414:	42480000 	.word	0x42480000
 8002418:	c2480000 	.word	0xc2480000
 800241c:	3a83126f 	.word	0x3a83126f
 8002420:	44480000 	.word	0x44480000
 8002424:	c4480000 	.word	0xc4480000
 8002428:	3d4ccccd 	.word	0x3d4ccccd
 800242c:	24000e20 	.word	0x24000e20
 8002430:	24000c08 	.word	0x24000c08
 8002434:	240006a4 	.word	0x240006a4
 8002438:	24000e70 	.word	0x24000e70
 800243c:	24000cdc 	.word	0x24000cdc
 8002440:	24000614 	.word	0x24000614
 8002444:	24000500 	.word	0x24000500

08002448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b09c      	sub	sp, #112	; 0x70
 800244c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002452:	224c      	movs	r2, #76	; 0x4c
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f00e f888 	bl	801056c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2220      	movs	r2, #32
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f00e f882 	bl	801056c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002468:	2002      	movs	r0, #2
 800246a:	f006 fe33 	bl	80090d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4b35      	ldr	r3, [pc, #212]	; (8002548 <SystemClock_Config+0x100>)
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	4a34      	ldr	r2, [pc, #208]	; (8002548 <SystemClock_Config+0x100>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <SystemClock_Config+0x100>)
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4b30      	ldr	r3, [pc, #192]	; (800254c <SystemClock_Config+0x104>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <SystemClock_Config+0x104>)
 8002492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b2c      	ldr	r3, [pc, #176]	; (800254c <SystemClock_Config+0x104>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80024a4:	bf00      	nop
 80024a6:	4b29      	ldr	r3, [pc, #164]	; (800254c <SystemClock_Config+0x104>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b2:	d1f8      	bne.n	80024a6 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80024b4:	4b26      	ldr	r3, [pc, #152]	; (8002550 <SystemClock_Config+0x108>)
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	4a25      	ldr	r2, [pc, #148]	; (8002550 <SystemClock_Config+0x108>)
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80024c0:	2322      	movs	r3, #34	; 0x22
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c8:	2340      	movs	r3, #64	; 0x40
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80024cc:	2301      	movs	r3, #1
 80024ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d0:	2302      	movs	r3, #2
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d4:	2300      	movs	r3, #0
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024d8:	2304      	movs	r3, #4
 80024da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80024dc:	2319      	movs	r3, #25
 80024de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80024e0:	2302      	movs	r3, #2
 80024e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024e4:	2304      	movs	r3, #4
 80024e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024e8:	2302      	movs	r3, #2
 80024ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80024ec:	230c      	movs	r3, #12
 80024ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fc:	4618      	mov	r0, r3
 80024fe:	f006 fe33 	bl	8009168 <HAL_RCC_OscConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002508:	f000 ff4e 	bl	80033a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250c:	233f      	movs	r3, #63	; 0x3f
 800250e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002510:	2303      	movs	r3, #3
 8002512:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002518:	2308      	movs	r3, #8
 800251a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002520:	2340      	movs	r3, #64	; 0x40
 8002522:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2102      	movs	r1, #2
 8002530:	4618      	mov	r0, r3
 8002532:	f007 fa45 	bl	80099c0 <HAL_RCC_ClockConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800253c:	f000 ff34 	bl	80033a8 <Error_Handler>
  }
}
 8002540:	bf00      	nop
 8002542:	3770      	adds	r7, #112	; 0x70
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	58000400 	.word	0x58000400
 800254c:	58024800 	.word	0x58024800
 8002550:	58024400 	.word	0x58024400

08002554 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
 8002568:	615a      	str	r2, [r3, #20]
 800256a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <MX_ADC3_Init+0xc0>)
 800256e:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <MX_ADC3_Init+0xc4>)
 8002570:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002572:	4b28      	ldr	r3, [pc, #160]	; (8002614 <MX_ADC3_Init+0xc0>)
 8002574:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002578:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <MX_ADC3_Init+0xc0>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002580:	4b24      	ldr	r3, [pc, #144]	; (8002614 <MX_ADC3_Init+0xc0>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <MX_ADC3_Init+0xc0>)
 8002588:	2204      	movs	r2, #4
 800258a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800258c:	4b21      	ldr	r3, [pc, #132]	; (8002614 <MX_ADC3_Init+0xc0>)
 800258e:	2200      	movs	r2, #0
 8002590:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <MX_ADC3_Init+0xc0>)
 8002594:	2201      	movs	r2, #1
 8002596:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <MX_ADC3_Init+0xc0>)
 800259a:	2201      	movs	r2, #1
 800259c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <MX_ADC3_Init+0xc0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <MX_ADC3_Init+0xc0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_ADC3_Init+0xc0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <MX_ADC3_Init+0xc0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_ADC3_Init+0xc0>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <MX_ADC3_Init+0xc0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_ADC3_Init+0xc0>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80025ca:	4812      	ldr	r0, [pc, #72]	; (8002614 <MX_ADC3_Init+0xc0>)
 80025cc:	f002 f8fc 	bl	80047c8 <HAL_ADC_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80025d6:	f000 fee7 	bl	80033a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <MX_ADC3_Init+0xc8>)
 80025dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025de:	2306      	movs	r3, #6
 80025e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80025ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025ec:	2304      	movs	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_ADC3_Init+0xc0>)
 80025fe:	f002 fa83 	bl	8004b08 <HAL_ADC_ConfigChannel>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8002608:	f000 fece 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800260c:	bf00      	nop
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	24000d6c 	.word	0x24000d6c
 8002618:	58026000 	.word	0x58026000
 800261c:	04300002 	.word	0x04300002

08002620 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <MX_ETH_Init+0x80>)
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <MX_ETH_Init+0x84>)
 8002628:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <MX_ETH_Init+0x88>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <MX_ETH_Init+0x88>)
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <MX_ETH_Init+0x88>)
 8002638:	22e1      	movs	r2, #225	; 0xe1
 800263a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <MX_ETH_Init+0x88>)
 800263e:	2200      	movs	r2, #0
 8002640:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <MX_ETH_Init+0x88>)
 8002644:	2200      	movs	r2, #0
 8002646:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <MX_ETH_Init+0x88>)
 800264a:	2200      	movs	r2, #0
 800264c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <MX_ETH_Init+0x80>)
 8002650:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <MX_ETH_Init+0x88>)
 8002652:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <MX_ETH_Init+0x80>)
 8002656:	2201      	movs	r2, #1
 8002658:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_ETH_Init+0x80>)
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <MX_ETH_Init+0x8c>)
 800265e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <MX_ETH_Init+0x80>)
 8002662:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <MX_ETH_Init+0x90>)
 8002664:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_ETH_Init+0x80>)
 8002668:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800266c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800266e:	480c      	ldr	r0, [pc, #48]	; (80026a0 <MX_ETH_Init+0x80>)
 8002670:	f005 fdee 	bl	8008250 <HAL_ETH_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800267a:	f000 fe95 	bl	80033a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800267e:	2234      	movs	r2, #52	; 0x34
 8002680:	2100      	movs	r1, #0
 8002682:	480c      	ldr	r0, [pc, #48]	; (80026b4 <MX_ETH_Init+0x94>)
 8002684:	f00d ff72 	bl	801056c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <MX_ETH_Init+0x94>)
 800268a:	2221      	movs	r2, #33	; 0x21
 800268c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <MX_ETH_Init+0x94>)
 8002690:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002694:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <MX_ETH_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	24000f80 	.word	0x24000f80
 80026a4:	40028000 	.word	0x40028000
 80026a8:	24000504 	.word	0x24000504
 80026ac:	240000d8 	.word	0x240000d8
 80026b0:	24000078 	.word	0x24000078
 80026b4:	24001008 	.word	0x24001008

080026b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <MX_SPI3_Init+0xa4>)
 80026be:	4a28      	ldr	r2, [pc, #160]	; (8002760 <MX_SPI3_Init+0xa8>)
 80026c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <MX_SPI3_Init+0xa4>)
 80026c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <MX_SPI3_Init+0xa4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80026d0:	4b22      	ldr	r3, [pc, #136]	; (800275c <MX_SPI3_Init+0xa4>)
 80026d2:	2203      	movs	r2, #3
 80026d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <MX_SPI3_Init+0xa4>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <MX_SPI3_Init+0xa4>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <MX_SPI3_Init+0xa4>)
 80026e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <MX_SPI3_Init+0xa4>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <MX_SPI3_Init+0xa4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <MX_SPI3_Init+0xa4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <MX_SPI3_Init+0xa4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <MX_SPI3_Init+0xa4>)
 8002704:	2200      	movs	r2, #0
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <MX_SPI3_Init+0xa4>)
 800270a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800270e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <MX_SPI3_Init+0xa4>)
 8002712:	2200      	movs	r2, #0
 8002714:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_SPI3_Init+0xa4>)
 8002718:	2200      	movs	r2, #0
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <MX_SPI3_Init+0xa4>)
 800271e:	2200      	movs	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_SPI3_Init+0xa4>)
 8002724:	2200      	movs	r2, #0
 8002726:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_SPI3_Init+0xa4>)
 800272a:	2200      	movs	r2, #0
 800272c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MX_SPI3_Init+0xa4>)
 8002730:	2200      	movs	r2, #0
 8002732:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_SPI3_Init+0xa4>)
 8002736:	2200      	movs	r2, #0
 8002738:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <MX_SPI3_Init+0xa4>)
 800273c:	2200      	movs	r2, #0
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_SPI3_Init+0xa4>)
 8002742:	2200      	movs	r2, #0
 8002744:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_SPI3_Init+0xa4>)
 8002748:	f009 fe4c 	bl	800c3e4 <HAL_SPI_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8002752:	f000 fe29 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	24000c54 	.word	0x24000c54
 8002760:	40003c00 	.word	0x40003c00

08002764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	; 0x30
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	2224      	movs	r2, #36	; 0x24
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f00d fefa 	bl	801056c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002778:	463b      	mov	r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002782:	4b23      	ldr	r3, [pc, #140]	; (8002810 <MX_TIM1_Init+0xac>)
 8002784:	4a23      	ldr	r2, [pc, #140]	; (8002814 <MX_TIM1_Init+0xb0>)
 8002786:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <MX_TIM1_Init+0xac>)
 800278a:	2200      	movs	r2, #0
 800278c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <MX_TIM1_Init+0xac>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <MX_TIM1_Init+0xac>)
 8002796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800279a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279c:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <MX_TIM1_Init+0xac>)
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <MX_TIM1_Init+0xac>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <MX_TIM1_Init+0xac>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027ae:	2303      	movs	r3, #3
 80027b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027b6:	2301      	movs	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027c6:	2301      	movs	r3, #1
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	4619      	mov	r1, r3
 80027d8:	480d      	ldr	r0, [pc, #52]	; (8002810 <MX_TIM1_Init+0xac>)
 80027da:	f00a f9f9 	bl	800cbd0 <HAL_TIM_Encoder_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80027e4:	f000 fde0 	bl	80033a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e8:	2300      	movs	r3, #0
 80027ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027f4:	463b      	mov	r3, r7
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	; (8002810 <MX_TIM1_Init+0xac>)
 80027fa:	f00b faa5 	bl	800dd48 <HAL_TIMEx_MasterConfigSynchronization>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002804:	f000 fdd0 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	3730      	adds	r7, #48	; 0x30
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	24000e20 	.word	0x24000e20
 8002814:	40010000 	.word	0x40010000

08002818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f00d fea0 	bl	801056c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282c:	463b      	mov	r3, r7
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <MX_TIM2_Init+0xa4>)
 8002838:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800283c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <MX_TIM2_Init+0xa4>)
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_TIM2_Init+0xa4>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <MX_TIM2_Init+0xa4>)
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <MX_TIM2_Init+0xa4>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <MX_TIM2_Init+0xa4>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800285e:	2301      	movs	r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002866:	2301      	movs	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002876:	2301      	movs	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800287a:	2300      	movs	r3, #0
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	4619      	mov	r1, r3
 8002888:	480c      	ldr	r0, [pc, #48]	; (80028bc <MX_TIM2_Init+0xa4>)
 800288a:	f00a f9a1 	bl	800cbd0 <HAL_TIM_Encoder_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002894:	f000 fd88 	bl	80033a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028a0:	463b      	mov	r3, r7
 80028a2:	4619      	mov	r1, r3
 80028a4:	4805      	ldr	r0, [pc, #20]	; (80028bc <MX_TIM2_Init+0xa4>)
 80028a6:	f00b fa4f 	bl	800dd48 <HAL_TIMEx_MasterConfigSynchronization>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80028b0:	f000 fd7a 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	3730      	adds	r7, #48	; 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	24000e70 	.word	0x24000e70

080028c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	; 0x30
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f00d fe4c 	bl	801056c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d4:	463b      	mov	r3, r7
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <MX_TIM3_Init+0xa4>)
 80028e0:	4a21      	ldr	r2, [pc, #132]	; (8002968 <MX_TIM3_Init+0xa8>)
 80028e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <MX_TIM3_Init+0xa4>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <MX_TIM3_Init+0xa4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <MX_TIM3_Init+0xa4>)
 80028f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <MX_TIM3_Init+0xa4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <MX_TIM3_Init+0xa4>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002904:	2303      	movs	r3, #3
 8002906:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800290c:	2301      	movs	r3, #1
 800290e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002918:	2300      	movs	r3, #0
 800291a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800291c:	2301      	movs	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	4619      	mov	r1, r3
 800292e:	480d      	ldr	r0, [pc, #52]	; (8002964 <MX_TIM3_Init+0xa4>)
 8002930:	f00a f94e 	bl	800cbd0 <HAL_TIM_Encoder_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800293a:	f000 fd35 	bl	80033a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002946:	463b      	mov	r3, r7
 8002948:	4619      	mov	r1, r3
 800294a:	4806      	ldr	r0, [pc, #24]	; (8002964 <MX_TIM3_Init+0xa4>)
 800294c:	f00b f9fc 	bl	800dd48 <HAL_TIMEx_MasterConfigSynchronization>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002956:	f000 fd27 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	3730      	adds	r7, #48	; 0x30
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	24000c08 	.word	0x24000c08
 8002968:	40000400 	.word	0x40000400

0800296c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f00d fdf6 	bl	801056c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002980:	463b      	mov	r3, r7
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <MX_TIM4_Init+0xa4>)
 800298c:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <MX_TIM4_Init+0xa8>)
 800298e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <MX_TIM4_Init+0xa4>)
 8002992:	2200      	movs	r2, #0
 8002994:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <MX_TIM4_Init+0xa4>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <MX_TIM4_Init+0xa4>)
 800299e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <MX_TIM4_Init+0xa4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <MX_TIM4_Init+0xa4>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029b0:	2303      	movs	r3, #3
 80029b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b8:	2301      	movs	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	4619      	mov	r1, r3
 80029da:	480d      	ldr	r0, [pc, #52]	; (8002a10 <MX_TIM4_Init+0xa4>)
 80029dc:	f00a f8f8 	bl	800cbd0 <HAL_TIM_Encoder_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80029e6:	f000 fcdf 	bl	80033a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029f2:	463b      	mov	r3, r7
 80029f4:	4619      	mov	r1, r3
 80029f6:	4806      	ldr	r0, [pc, #24]	; (8002a10 <MX_TIM4_Init+0xa4>)
 80029f8:	f00b f9a6 	bl	800dd48 <HAL_TIMEx_MasterConfigSynchronization>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002a02:	f000 fcd1 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	3730      	adds	r7, #48	; 0x30
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	240006a4 	.word	0x240006a4
 8002a14:	40000800 	.word	0x40000800

08002a18 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <MX_TIM5_Init+0x94>)
 8002a38:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <MX_TIM5_Init+0x98>)
 8002a3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <MX_TIM5_Init+0x94>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <MX_TIM5_Init+0x94>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <MX_TIM5_Init+0x94>)
 8002a4a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002a4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <MX_TIM5_Init+0x94>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_TIM5_Init+0x94>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a5c:	4813      	ldr	r0, [pc, #76]	; (8002aac <MX_TIM5_Init+0x94>)
 8002a5e:	f009 fde2 	bl	800c626 <HAL_TIM_Base_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002a68:	f000 fc9e 	bl	80033a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a72:	f107 0310 	add.w	r3, r7, #16
 8002a76:	4619      	mov	r1, r3
 8002a78:	480c      	ldr	r0, [pc, #48]	; (8002aac <MX_TIM5_Init+0x94>)
 8002a7a:	f00a fc11 	bl	800d2a0 <HAL_TIM_ConfigClockSource>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002a84:	f000 fc90 	bl	80033a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	4619      	mov	r1, r3
 8002a94:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_TIM5_Init+0x94>)
 8002a96:	f00b f957 	bl	800dd48 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002aa0:	f000 fc82 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	24000bbc 	.word	0x24000bbc
 8002ab0:	40000c00 	.word	0x40000c00

08002ab4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	; 0x30
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aba:	f107 0320 	add.w	r3, r7, #32
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	615a      	str	r2, [r3, #20]
 8002ad8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002adc:	4a26      	ldr	r2, [pc, #152]	; (8002b78 <MX_TIM12_Init+0xc4>)
 8002ade:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8002aec:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002aee:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002af2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002afc:	2280      	movs	r2, #128	; 0x80
 8002afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002b00:	481c      	ldr	r0, [pc, #112]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002b02:	f009 fd90 	bl	800c626 <HAL_TIM_Base_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002b0c:	f000 fc4c 	bl	80033a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b14:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002b16:	f107 0320 	add.w	r3, r7, #32
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4815      	ldr	r0, [pc, #84]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002b1e:	f00a fbbf 	bl	800d2a0 <HAL_TIM_ConfigClockSource>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002b28:	f000 fc3e 	bl	80033a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002b2c:	4811      	ldr	r0, [pc, #68]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002b2e:	f009 fe49 	bl	800c7c4 <HAL_TIM_PWM_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002b38:	f000 fc36 	bl	80033a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3c:	2360      	movs	r3, #96	; 0x60
 8002b3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002b40:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002b44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2204      	movs	r2, #4
 8002b52:	4619      	mov	r1, r3
 8002b54:	4807      	ldr	r0, [pc, #28]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002b56:	f00a fa8f 	bl	800d078 <HAL_TIM_PWM_ConfigChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002b60:	f000 fc22 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002b64:	4803      	ldr	r0, [pc, #12]	; (8002b74 <MX_TIM12_Init+0xc0>)
 8002b66:	f001 f80d 	bl	8003b84 <HAL_TIM_MspPostInit>

}
 8002b6a:	bf00      	nop
 8002b6c:	3730      	adds	r7, #48	; 0x30
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	24000f34 	.word	0x24000f34
 8002b78:	40001800 	.word	0x40001800

08002b7c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
 8002b90:	615a      	str	r2, [r3, #20]
 8002b92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002b96:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <MX_TIM13_Init+0x98>)
 8002b98:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002ba8:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002bac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bb4:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002bba:	4815      	ldr	r0, [pc, #84]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002bbc:	f009 fd33 	bl	800c626 <HAL_TIM_Base_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002bc6:	f000 fbef 	bl	80033a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002bca:	4811      	ldr	r0, [pc, #68]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002bcc:	f009 fdfa 	bl	800c7c4 <HAL_TIM_PWM_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002bd6:	f000 fbe7 	bl	80033a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bda:	2360      	movs	r3, #96	; 0x60
 8002bdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002bde:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002be2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	2200      	movs	r2, #0
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4807      	ldr	r0, [pc, #28]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002bf4:	f00a fa40 	bl	800d078 <HAL_TIM_PWM_ConfigChannel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002bfe:	f000 fbd3 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002c02:	4803      	ldr	r0, [pc, #12]	; (8002c10 <MX_TIM13_Init+0x94>)
 8002c04:	f000 ffbe 	bl	8003b84 <HAL_TIM_MspPostInit>

}
 8002c08:	bf00      	nop
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	24000dd0 	.word	0x24000dd0
 8002c14:	40001c00 	.word	0x40001c00

08002c18 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b092      	sub	sp, #72	; 0x48
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
 8002c2c:	611a      	str	r2, [r3, #16]
 8002c2e:	615a      	str	r2, [r3, #20]
 8002c30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c32:	463b      	mov	r3, r7
 8002c34:	222c      	movs	r2, #44	; 0x2c
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f00d fc97 	bl	801056c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002c3e:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002c40:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <MX_TIM16_Init+0xf0>)
 8002c42:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002c44:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 8002c50:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002c52:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002c56:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c58:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002c6a:	4826      	ldr	r0, [pc, #152]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002c6c:	f009 fcdb 	bl	800c626 <HAL_TIM_Base_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002c76:	f000 fb97 	bl	80033a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002c7a:	4822      	ldr	r0, [pc, #136]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002c7c:	f009 fda2 	bl	800c7c4 <HAL_TIM_PWM_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002c86:	f000 fb8f 	bl	80033a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c8a:	2360      	movs	r3, #96	; 0x60
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002c8e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c94:	2300      	movs	r3, #0
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cac:	2200      	movs	r2, #0
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4814      	ldr	r0, [pc, #80]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002cb2:	f00a f9e1 	bl	800d078 <HAL_TIM_PWM_ConfigChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002cbc:	f000 fb74 	bl	80033a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4807      	ldr	r0, [pc, #28]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002ce8:	f00b f8bc 	bl	800de64 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002cf2:	f000 fb59 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002cf6:	4803      	ldr	r0, [pc, #12]	; (8002d04 <MX_TIM16_Init+0xec>)
 8002cf8:	f000 ff44 	bl	8003b84 <HAL_TIM_MspPostInit>

}
 8002cfc:	bf00      	nop
 8002cfe:	3748      	adds	r7, #72	; 0x48
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	2400103c 	.word	0x2400103c
 8002d08:	40014400 	.word	0x40014400

08002d0c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b092      	sub	sp, #72	; 0x48
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	611a      	str	r2, [r3, #16]
 8002d22:	615a      	str	r2, [r3, #20]
 8002d24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d26:	463b      	mov	r3, r7
 8002d28:	222c      	movs	r2, #44	; 0x2c
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f00d fc1d 	bl	801056c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002d32:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002d34:	4a31      	ldr	r2, [pc, #196]	; (8002dfc <MX_TIM17_Init+0xf0>)
 8002d36:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002d38:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8002d44:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002d46:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002d4a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002d52:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002d5a:	2280      	movs	r2, #128	; 0x80
 8002d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002d5e:	4826      	ldr	r0, [pc, #152]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002d60:	f009 fc61 	bl	800c626 <HAL_TIM_Base_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002d6a:	f000 fb1d 	bl	80033a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002d6e:	4822      	ldr	r0, [pc, #136]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002d70:	f009 fd28 	bl	800c7c4 <HAL_TIM_PWM_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002d7a:	f000 fb15 	bl	80033a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d7e:	2360      	movs	r3, #96	; 0x60
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002d82:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da0:	2200      	movs	r2, #0
 8002da2:	4619      	mov	r1, r3
 8002da4:	4814      	ldr	r0, [pc, #80]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002da6:	f00a f967 	bl	800d078 <HAL_TIM_PWM_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002db0:	f000 fafa 	bl	80033a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4807      	ldr	r0, [pc, #28]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002ddc:	f00b f842 	bl	800de64 <HAL_TIMEx_ConfigBreakDeadTime>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8002de6:	f000 fadf 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002dea:	4803      	ldr	r0, [pc, #12]	; (8002df8 <MX_TIM17_Init+0xec>)
 8002dec:	f000 feca 	bl	8003b84 <HAL_TIM_MspPostInit>

}
 8002df0:	bf00      	nop
 8002df2:	3748      	adds	r7, #72	; 0x48
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	24000af8 	.word	0x24000af8
 8002dfc:	40014800 	.word	0x40014800

08002e00 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e04:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e06:	4a23      	ldr	r2, [pc, #140]	; (8002e94 <MX_UART5_Init+0x94>)
 8002e08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8002e0a:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e0c:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <MX_UART5_Init+0x98>)
 8002e0e:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e24:	220c      	movs	r2, #12
 8002e26:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e46:	4812      	ldr	r0, [pc, #72]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e48:	f00b f8a8 	bl	800df9c <HAL_UART_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 8002e52:	f000 faa9 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e56:	2100      	movs	r1, #0
 8002e58:	480d      	ldr	r0, [pc, #52]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e5a:	f00c ff8e 	bl	800fd7a <HAL_UARTEx_SetTxFifoThreshold>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_UART5_Init+0x68>
  {
    Error_Handler();
 8002e64:	f000 faa0 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4809      	ldr	r0, [pc, #36]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e6c:	f00c ffc3 	bl	800fdf6 <HAL_UARTEx_SetRxFifoThreshold>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 8002e76:	f000 fa97 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_UART5_Init+0x90>)
 8002e7c:	f00c ff44 	bl	800fd08 <HAL_UARTEx_DisableFifoMode>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 8002e86:	f000 fa8f 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	24000cdc 	.word	0x24000cdc
 8002e94:	40005000 	.word	0x40005000
 8002e98:	000f4240 	.word	0x000f4240

08002e9c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ea2:	4a23      	ldr	r2, [pc, #140]	; (8002f30 <MX_UART7_Init+0x94>)
 8002ea4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8002ea6:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ea8:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <MX_UART7_Init+0x98>)
 8002eaa:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002eac:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <MX_UART7_Init+0x90>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <MX_UART7_Init+0x90>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <MX_UART7_Init+0x90>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ec0:	220c      	movs	r2, #12
 8002ec2:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eca:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002ee2:	4812      	ldr	r0, [pc, #72]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ee4:	f00b f85a 	bl	800df9c <HAL_UART_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8002eee:	f000 fa5b 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <MX_UART7_Init+0x90>)
 8002ef6:	f00c ff40 	bl	800fd7a <HAL_UARTEx_SetTxFifoThreshold>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8002f00:	f000 fa52 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f04:	2100      	movs	r1, #0
 8002f06:	4809      	ldr	r0, [pc, #36]	; (8002f2c <MX_UART7_Init+0x90>)
 8002f08:	f00c ff75 	bl	800fdf6 <HAL_UARTEx_SetRxFifoThreshold>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8002f12:	f000 fa49 	bl	80033a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002f16:	4805      	ldr	r0, [pc, #20]	; (8002f2c <MX_UART7_Init+0x90>)
 8002f18:	f00c fef6 	bl	800fd08 <HAL_UARTEx_DisableFifoMode>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8002f22:	f000 fa41 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	24000614 	.word	0x24000614
 8002f30:	40007800 	.word	0x40007800
 8002f34:	000f4240 	.word	0x000f4240

08002f38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f3e:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002f40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002f42:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f44:	2209      	movs	r2, #9
 8002f46:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f56:	2202      	movs	r2, #2
 8002f58:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002f80:	f005 ff5f 	bl	8008e42 <HAL_PCD_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002f8a:	f000 fa0d 	bl	80033a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	240006f0 	.word	0x240006f0
 8002f98:	40080000 	.word	0x40080000

08002f9c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <MX_BDMA_Init+0x3c>)
 8002fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <MX_BDMA_Init+0x3c>)
 8002faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <MX_BDMA_Init+0x3c>)
 8002fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	2081      	movs	r0, #129	; 0x81
 8002fc6:	f002 fad4 	bl	8005572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8002fca:	2081      	movs	r0, #129	; 0x81
 8002fcc:	f002 faeb 	bl	80055a6 <HAL_NVIC_EnableIRQ>

}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	58024400 	.word	0x58024400

08002fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <MX_DMA_Init+0x4c>)
 8002fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fe8:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <MX_DMA_Init+0x4c>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <MX_DMA_Init+0x4c>)
 8002ff4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003000:	2200      	movs	r2, #0
 8003002:	2100      	movs	r1, #0
 8003004:	200b      	movs	r0, #11
 8003006:	f002 fab4 	bl	8005572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800300a:	200b      	movs	r0, #11
 800300c:	f002 facb 	bl	80055a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	200c      	movs	r0, #12
 8003016:	f002 faac 	bl	8005572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800301a:	200c      	movs	r0, #12
 800301c:	f002 fac3 	bl	80055a6 <HAL_NVIC_EnableIRQ>

}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	58024400 	.word	0x58024400

0800302c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08e      	sub	sp, #56	; 0x38
 8003030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	609a      	str	r2, [r3, #8]
 800303e:	60da      	str	r2, [r3, #12]
 8003040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	4bab      	ldr	r3, [pc, #684]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003048:	4aa9      	ldr	r2, [pc, #676]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003052:	4ba7      	ldr	r3, [pc, #668]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003060:	4ba3      	ldr	r3, [pc, #652]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003066:	4aa2      	ldr	r2, [pc, #648]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003068:	f043 0320 	orr.w	r3, r3, #32
 800306c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003070:	4b9f      	ldr	r3, [pc, #636]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800307e:	4b9c      	ldr	r3, [pc, #624]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003084:	4a9a      	ldr	r2, [pc, #616]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800308e:	4b98      	ldr	r3, [pc, #608]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800309c:	4b94      	ldr	r3, [pc, #592]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 800309e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a2:	4a93      	ldr	r2, [pc, #588]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ac:	4b90      	ldr	r3, [pc, #576]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ba:	4b8d      	ldr	r3, [pc, #564]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c0:	4a8b      	ldr	r2, [pc, #556]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030c2:	f043 0302 	orr.w	r3, r3, #2
 80030c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ca:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030d8:	4b85      	ldr	r3, [pc, #532]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030de:	4a84      	ldr	r2, [pc, #528]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e8:	4b81      	ldr	r3, [pc, #516]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f6:	4b7e      	ldr	r3, [pc, #504]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fc:	4a7c      	ldr	r2, [pc, #496]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 80030fe:	f043 0310 	orr.w	r3, r3, #16
 8003102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003106:	4b7a      	ldr	r3, [pc, #488]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003114:	4b76      	ldr	r3, [pc, #472]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800311a:	4a75      	ldr	r2, [pc, #468]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 800311c:	f043 0308 	orr.w	r3, r3, #8
 8003120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003124:	4b72      	ldr	r3, [pc, #456]	; (80032f0 <MX_GPIO_Init+0x2c4>)
 8003126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8003132:	2200      	movs	r2, #0
 8003134:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8003138:	486e      	ldr	r0, [pc, #440]	; (80032f4 <MX_GPIO_Init+0x2c8>)
 800313a:	f005 fe4f 	bl	8008ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 800313e:	2200      	movs	r2, #0
 8003140:	f644 4101 	movw	r1, #19457	; 0x4c01
 8003144:	486c      	ldr	r0, [pc, #432]	; (80032f8 <MX_GPIO_Init+0x2cc>)
 8003146:	f005 fe49 	bl	8008ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800314a:	2200      	movs	r2, #0
 800314c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003150:	486a      	ldr	r0, [pc, #424]	; (80032fc <MX_GPIO_Init+0x2d0>)
 8003152:	f005 fe43 	bl	8008ddc <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003156:	2200      	movs	r2, #0
 8003158:	f44f 7181 	mov.w	r1, #258	; 0x102
 800315c:	4868      	ldr	r0, [pc, #416]	; (8003300 <MX_GPIO_Init+0x2d4>)
 800315e:	f005 fe3d 	bl	8008ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003168:	4866      	ldr	r0, [pc, #408]	; (8003304 <MX_GPIO_Init+0x2d8>)
 800316a:	f005 fe37 	bl	8008ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800316e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003174:	2300      	movs	r3, #0
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800317c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003180:	4619      	mov	r1, r3
 8003182:	4861      	ldr	r0, [pc, #388]	; (8003308 <MX_GPIO_Init+0x2dc>)
 8003184:	f005 fc7a 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|DIR4_Pin;
 8003188:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318e:	2301      	movs	r3, #1
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003192:	2301      	movs	r3, #1
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800319a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800319e:	4619      	mov	r1, r3
 80031a0:	4854      	ldr	r0, [pc, #336]	; (80032f4 <MX_GPIO_Init+0x2c8>)
 80031a2:	f005 fc6b 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b4:	2300      	movs	r3, #0
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031bc:	4619      	mov	r1, r3
 80031be:	484d      	ldr	r0, [pc, #308]	; (80032f4 <MX_GPIO_Init+0x2c8>)
 80031c0:	f005 fc5c 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 80031c4:	f644 4301 	movw	r3, #19457	; 0x4c01
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031da:	4619      	mov	r1, r3
 80031dc:	4846      	ldr	r0, [pc, #280]	; (80032f8 <MX_GPIO_Init+0x2cc>)
 80031de:	f005 fc4d 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80031e2:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e8:	2301      	movs	r3, #1
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f0:	2300      	movs	r3, #0
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f8:	4619      	mov	r1, r3
 80031fa:	4840      	ldr	r0, [pc, #256]	; (80032fc <MX_GPIO_Init+0x2d0>)
 80031fc:	f005 fc3e 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR3_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin;
 8003200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003206:	2301      	movs	r3, #1
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800320a:	2301      	movs	r3, #1
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	2300      	movs	r3, #0
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR3_GPIO_Port, &GPIO_InitStruct);
 8003212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003216:	4619      	mov	r1, r3
 8003218:	4839      	ldr	r0, [pc, #228]	; (8003300 <MX_GPIO_Init+0x2d4>)
 800321a:	f005 fc2f 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800321e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003230:	2307      	movs	r3, #7
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003238:	4619      	mov	r1, r3
 800323a:	4832      	ldr	r0, [pc, #200]	; (8003304 <MX_GPIO_Init+0x2d8>)
 800323c:	f005 fc1e 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8003240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003246:	2301      	movs	r3, #1
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324e:	2300      	movs	r3, #0
 8003250:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003256:	4619      	mov	r1, r3
 8003258:	482a      	ldr	r0, [pc, #168]	; (8003304 <MX_GPIO_Init+0x2d8>)
 800325a:	f005 fc0f 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800325e:	2304      	movs	r3, #4
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003262:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800326c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003270:	4619      	mov	r1, r3
 8003272:	4822      	ldr	r0, [pc, #136]	; (80032fc <MX_GPIO_Init+0x2d0>)
 8003274:	f005 fc02 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003278:	2308      	movs	r3, #8
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800327c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328a:	4619      	mov	r1, r3
 800328c:	481d      	ldr	r0, [pc, #116]	; (8003304 <MX_GPIO_Init+0x2d8>)
 800328e:	f005 fbf5 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 8003292:	23f0      	movs	r3, #240	; 0xf0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003296:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a4:	4619      	mov	r1, r3
 80032a6:	4817      	ldr	r0, [pc, #92]	; (8003304 <MX_GPIO_Init+0x2d8>)
 80032a8:	f005 fbe8 	bl	8008a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80032ac:	2302      	movs	r3, #2
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b0:	2301      	movs	r3, #1
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80032bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c0:	4619      	mov	r1, r3
 80032c2:	480f      	ldr	r0, [pc, #60]	; (8003300 <MX_GPIO_Init+0x2d4>)
 80032c4:	f005 fbda 	bl	8008a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	200a      	movs	r0, #10
 80032ce:	f002 f950 	bl	8005572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80032d2:	200a      	movs	r0, #10
 80032d4:	f002 f967 	bl	80055a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80032d8:	2200      	movs	r2, #0
 80032da:	2100      	movs	r1, #0
 80032dc:	2017      	movs	r0, #23
 80032de:	f002 f948 	bl	8005572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80032e2:	2017      	movs	r0, #23
 80032e4:	f002 f95f 	bl	80055a6 <HAL_NVIC_EnableIRQ>

}
 80032e8:	bf00      	nop
 80032ea:	3738      	adds	r7, #56	; 0x38
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	58024400 	.word	0x58024400
 80032f4:	58021400 	.word	0x58021400
 80032f8:	58020400 	.word	0x58020400
 80032fc:	58021800 	.word	0x58021800
 8003300:	58021000 	.word	0x58021000
 8003304:	58020c00 	.word	0x58020c00
 8003308:	58020800 	.word	0x58020800

0800330c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a08      	ldr	r2, [pc, #32]	; (8003338 <HAL_UART_RxCpltCallback+0x2c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d102      	bne.n	8003322 <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 800331c:	2001      	movs	r0, #1
 800331e:	f7fe f941 	bl	80015a4 <data_in>
	}
	if(huart==&huart7){
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a05      	ldr	r2, [pc, #20]	; (800333c <HAL_UART_RxCpltCallback+0x30>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d102      	bne.n	8003330 <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 800332a:	2002      	movs	r0, #2
 800332c:	f7fe f93a 	bl	80015a4 <data_in>
	}
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	24000cdc 	.word	0x24000cdc
 800333c:	24000614 	.word	0x24000614

08003340 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a06      	ldr	r2, [pc, #24]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d102      	bne.n	8003356 <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]
	}
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	24000bbc 	.word	0x24000bbc
 8003368:	24000500 	.word	0x24000500

0800336c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d103      	bne.n	8003384 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 1);
 800337c:	2101      	movs	r1, #1
 800337e:	2001      	movs	r0, #1
 8003380:	f7fd fe04 	bl	8000f8c <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	2b20      	cmp	r3, #32
 8003388:	d103      	bne.n	8003392 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 1);
 800338a:	2101      	movs	r1, #1
 800338c:	2002      	movs	r0, #2
 800338e:	f7fd fdfd 	bl	8000f8c <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d103      	bne.n	80033a0 <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 1);
 8003398:	2101      	movs	r1, #1
 800339a:	2003      	movs	r0, #3
 800339c:	f7fd fdf6 	bl	8000f8c <Stepper_updateHome>
    }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033ac:	b672      	cpsid	i
}
 80033ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <Error_Handler+0x8>
	...

080033b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <HAL_MspInit+0x30>)
 80033bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033c0:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <HAL_MspInit+0x30>)
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_MspInit+0x30>)
 80033cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	58024400 	.word	0x58024400

080033e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0ba      	sub	sp, #232	; 0xe8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003400:	f107 0318 	add.w	r3, r7, #24
 8003404:	22bc      	movs	r2, #188	; 0xbc
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f00d f8af 	bl	801056c <memset>
  if(hadc->Instance==ADC3)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a50      	ldr	r2, [pc, #320]	; (8003554 <HAL_ADC_MspInit+0x16c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	f040 8099 	bne.w	800354c <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800341a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800341e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8003420:	2304      	movs	r3, #4
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8003424:	230a      	movs	r3, #10
 8003426:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003428:	2302      	movs	r3, #2
 800342a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800342c:	2302      	movs	r3, #2
 800342e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8003430:	2304      	movs	r3, #4
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003434:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003438:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800343a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800343e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8003444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800344c:	f107 0318 	add.w	r3, r7, #24
 8003450:	4618      	mov	r0, r3
 8003452:	f006 fe41 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800345c:	f7ff ffa4 	bl	80033a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003460:	4b3d      	ldr	r3, [pc, #244]	; (8003558 <HAL_ADC_MspInit+0x170>)
 8003462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003466:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <HAL_ADC_MspInit+0x170>)
 8003468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003470:	4b39      	ldr	r3, [pc, #228]	; (8003558 <HAL_ADC_MspInit+0x170>)
 8003472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800347e:	4b36      	ldr	r3, [pc, #216]	; (8003558 <HAL_ADC_MspInit+0x170>)
 8003480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003484:	4a34      	ldr	r2, [pc, #208]	; (8003558 <HAL_ADC_MspInit+0x170>)
 8003486:	f043 0320 	orr.w	r3, r3, #32
 800348a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800348e:	4b32      	ldr	r3, [pc, #200]	; (8003558 <HAL_ADC_MspInit+0x170>)
 8003490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800349c:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <HAL_ADC_MspInit+0x170>)
 800349e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a2:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <HAL_ADC_MspInit+0x170>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ac:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <HAL_ADC_MspInit+0x170>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034c2:	2303      	movs	r3, #3
 80034c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034d2:	4619      	mov	r1, r3
 80034d4:	4821      	ldr	r0, [pc, #132]	; (800355c <HAL_ADC_MspInit+0x174>)
 80034d6:	f005 fad1 	bl	8008a7c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80034da:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80034de:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80034e2:	f000 ffcf 	bl	8004484 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80034e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80034ea:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80034ee:	f000 ffc9 	bl	8004484 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_ADC_MspInit+0x178>)
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_ADC_MspInit+0x17c>)
 80034f6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_ADC_MspInit+0x178>)
 80034fa:	2211      	movs	r2, #17
 80034fc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034fe:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_ADC_MspInit+0x178>)
 8003500:	2200      	movs	r2, #0
 8003502:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_ADC_MspInit+0x178>)
 8003506:	2200      	movs	r2, #0
 8003508:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_ADC_MspInit+0x178>)
 800350c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003510:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_ADC_MspInit+0x178>)
 8003514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003518:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_ADC_MspInit+0x178>)
 800351c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003520:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_ADC_MspInit+0x178>)
 8003524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003528:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_ADC_MspInit+0x178>)
 800352c:	2200      	movs	r2, #0
 800352e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003530:	480b      	ldr	r0, [pc, #44]	; (8003560 <HAL_ADC_MspInit+0x178>)
 8003532:	f002 f853 	bl	80055dc <HAL_DMA_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 800353c:	f7ff ff34 	bl	80033a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a07      	ldr	r2, [pc, #28]	; (8003560 <HAL_ADC_MspInit+0x178>)
 8003544:	64da      	str	r2, [r3, #76]	; 0x4c
 8003546:	4a06      	ldr	r2, [pc, #24]	; (8003560 <HAL_ADC_MspInit+0x178>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800354c:	bf00      	nop
 800354e:	37e8      	adds	r7, #232	; 0xe8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	58026000 	.word	0x58026000
 8003558:	58024400 	.word	0x58024400
 800355c:	58021400 	.word	0x58021400
 8003560:	24000b44 	.word	0x24000b44
 8003564:	58025408 	.word	0x58025408

08003568 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	; 0x38
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a59      	ldr	r2, [pc, #356]	; (80036ec <HAL_ETH_MspInit+0x184>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f040 80ab 	bne.w	80036e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800358c:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 800358e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003592:	4a57      	ldr	r2, [pc, #348]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 8003594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003598:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800359c:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 800359e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80035aa:	4b51      	ldr	r3, [pc, #324]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 80035ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035b0:	4a4f      	ldr	r2, [pc, #316]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 80035b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80035ba:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 80035bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80035c8:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 80035ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035ce:	4a48      	ldr	r2, [pc, #288]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80035d8:	4b45      	ldr	r3, [pc, #276]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 80035da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ec:	4a40      	ldr	r2, [pc, #256]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f6:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 80035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003604:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 8003606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800360a:	4a39      	ldr	r2, [pc, #228]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003614:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 8003616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003622:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 8003624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003628:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 800362a:	f043 0302 	orr.w	r3, r3, #2
 800362e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003632:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 8003634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 8003642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003646:	4a2a      	ldr	r2, [pc, #168]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 8003648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003650:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <HAL_ETH_MspInit+0x188>)
 8003652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800365e:	2332      	movs	r3, #50	; 0x32
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800366e:	230b      	movs	r3, #11
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003676:	4619      	mov	r1, r3
 8003678:	481e      	ldr	r0, [pc, #120]	; (80036f4 <HAL_ETH_MspInit+0x18c>)
 800367a:	f005 f9ff 	bl	8008a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800367e:	2386      	movs	r3, #134	; 0x86
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368a:	2300      	movs	r3, #0
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800368e:	230b      	movs	r3, #11
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003696:	4619      	mov	r1, r3
 8003698:	4817      	ldr	r0, [pc, #92]	; (80036f8 <HAL_ETH_MspInit+0x190>)
 800369a:	f005 f9ef 	bl	8008a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800369e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	2300      	movs	r3, #0
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036b0:	230b      	movs	r3, #11
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b8:	4619      	mov	r1, r3
 80036ba:	4810      	ldr	r0, [pc, #64]	; (80036fc <HAL_ETH_MspInit+0x194>)
 80036bc:	f005 f9de 	bl	8008a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80036c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2300      	movs	r3, #0
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036d2:	230b      	movs	r3, #11
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036da:	4619      	mov	r1, r3
 80036dc:	4808      	ldr	r0, [pc, #32]	; (8003700 <HAL_ETH_MspInit+0x198>)
 80036de:	f005 f9cd 	bl	8008a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80036e2:	bf00      	nop
 80036e4:	3738      	adds	r7, #56	; 0x38
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40028000 	.word	0x40028000
 80036f0:	58024400 	.word	0x58024400
 80036f4:	58020800 	.word	0x58020800
 80036f8:	58020000 	.word	0x58020000
 80036fc:	58020400 	.word	0x58020400
 8003700:	58021800 	.word	0x58021800

08003704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b0ba      	sub	sp, #232	; 0xe8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800371c:	f107 0318 	add.w	r3, r7, #24
 8003720:	22bc      	movs	r2, #188	; 0xbc
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f00c ff21 	bl	801056c <memset>
  if(hspi->Instance==SPI3)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a37      	ldr	r2, [pc, #220]	; (800380c <HAL_SPI_MspInit+0x108>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d166      	bne.n	8003802 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003738:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800373a:	2300      	movs	r3, #0
 800373c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800373e:	f107 0318 	add.w	r3, r7, #24
 8003742:	4618      	mov	r0, r3
 8003744:	f006 fcc8 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800374e:	f7ff fe2b 	bl	80033a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003752:	4b2f      	ldr	r3, [pc, #188]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 8003754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003758:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 800375a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003762:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 8003764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003770:	4b27      	ldr	r3, [pc, #156]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 8003772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003776:	4a26      	ldr	r2, [pc, #152]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003780:	4b23      	ldr	r3, [pc, #140]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 8003782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 8003790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003794:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800379e:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 80037a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037ac:	2310      	movs	r3, #16
 80037ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037c4:	2306      	movs	r3, #6
 80037c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037ce:	4619      	mov	r1, r3
 80037d0:	4810      	ldr	r0, [pc, #64]	; (8003814 <HAL_SPI_MspInit+0x110>)
 80037d2:	f005 f953 	bl	8008a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80037d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80037da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037f0:	2306      	movs	r3, #6
 80037f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037fa:	4619      	mov	r1, r3
 80037fc:	4806      	ldr	r0, [pc, #24]	; (8003818 <HAL_SPI_MspInit+0x114>)
 80037fe:	f005 f93d 	bl	8008a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003802:	bf00      	nop
 8003804:	37e8      	adds	r7, #232	; 0xe8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40003c00 	.word	0x40003c00
 8003810:	58024400 	.word	0x58024400
 8003814:	58020000 	.word	0x58020000
 8003818:	58020800 	.word	0x58020800

0800381c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b090      	sub	sp, #64	; 0x40
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a78      	ldr	r2, [pc, #480]	; (8003a1c <HAL_TIM_Encoder_MspInit+0x200>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d12f      	bne.n	800389e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800383e:	4b78      	ldr	r3, [pc, #480]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 8003840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003844:	4a76      	ldr	r2, [pc, #472]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800384e:	4b74      	ldr	r3, [pc, #464]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 8003850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800385c:	4b70      	ldr	r3, [pc, #448]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 800385e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003862:	4a6f      	ldr	r2, [pc, #444]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 8003864:	f043 0310 	orr.w	r3, r3, #16
 8003868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800386c:	4b6c      	ldr	r3, [pc, #432]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 800386e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 800387a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	2302      	movs	r3, #2
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003888:	2300      	movs	r3, #0
 800388a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800388c:	2301      	movs	r3, #1
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003894:	4619      	mov	r1, r3
 8003896:	4863      	ldr	r0, [pc, #396]	; (8003a24 <HAL_TIM_Encoder_MspInit+0x208>)
 8003898:	f005 f8f0 	bl	8008a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800389c:	e0ba      	b.n	8003a14 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a6:	d14d      	bne.n	8003944 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038a8:	4b5d      	ldr	r3, [pc, #372]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80038aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ae:	4a5c      	ldr	r2, [pc, #368]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038b8:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80038ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c6:	4b56      	ldr	r3, [pc, #344]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80038c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038cc:	4a54      	ldr	r2, [pc, #336]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d6:	4b52      	ldr	r3, [pc, #328]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80038d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e4:	4b4e      	ldr	r3, [pc, #312]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80038e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ea:	4a4d      	ldr	r2, [pc, #308]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038f4:	4b4a      	ldr	r3, [pc, #296]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80038f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8003902:	2320      	movs	r3, #32
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003906:	2302      	movs	r3, #2
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390a:	2300      	movs	r3, #0
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390e:	2300      	movs	r3, #0
 8003910:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003912:	2301      	movs	r3, #1
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 8003916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800391a:	4619      	mov	r1, r3
 800391c:	4842      	ldr	r0, [pc, #264]	; (8003a28 <HAL_TIM_Encoder_MspInit+0x20c>)
 800391e:	f005 f8ad 	bl	8008a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8003922:	2308      	movs	r3, #8
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003926:	2302      	movs	r3, #2
 8003928:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392e:	2300      	movs	r3, #0
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003932:	2301      	movs	r3, #1
 8003934:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 8003936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800393a:	4619      	mov	r1, r3
 800393c:	483b      	ldr	r0, [pc, #236]	; (8003a2c <HAL_TIM_Encoder_MspInit+0x210>)
 800393e:	f005 f89d 	bl	8008a7c <HAL_GPIO_Init>
}
 8003942:	e067      	b.n	8003a14 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a39      	ldr	r2, [pc, #228]	; (8003a30 <HAL_TIM_Encoder_MspInit+0x214>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d12e      	bne.n	80039ac <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800394e:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 8003950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003954:	4a32      	ldr	r2, [pc, #200]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 8003956:	f043 0302 	orr.w	r3, r3, #2
 800395a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 8003960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800396c:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 800396e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003972:	4a2b      	ldr	r2, [pc, #172]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800397c:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 800397e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 800398a:	2330      	movs	r3, #48	; 0x30
 800398c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398e:	2302      	movs	r3, #2
 8003990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003996:	2300      	movs	r3, #0
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800399a:	2302      	movs	r3, #2
 800399c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a2:	4619      	mov	r1, r3
 80039a4:	4821      	ldr	r0, [pc, #132]	; (8003a2c <HAL_TIM_Encoder_MspInit+0x210>)
 80039a6:	f005 f869 	bl	8008a7c <HAL_GPIO_Init>
}
 80039aa:	e033      	b.n	8003a14 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <HAL_TIM_Encoder_MspInit+0x218>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d12e      	bne.n	8003a14 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80039b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039bc:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80039be:	f043 0304 	orr.w	r3, r3, #4
 80039c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80039c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80039d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039da:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80039dc:	f043 0308 	orr.w	r3, r3, #8
 80039e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x204>)
 80039e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 80039f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a00:	2300      	movs	r3, #0
 8003a02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a04:	2302      	movs	r3, #2
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	480a      	ldr	r0, [pc, #40]	; (8003a38 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003a10:	f005 f834 	bl	8008a7c <HAL_GPIO_Init>
}
 8003a14:	bf00      	nop
 8003a16:	3740      	adds	r7, #64	; 0x40
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	58024400 	.word	0x58024400
 8003a24:	58021000 	.word	0x58021000
 8003a28:	58020000 	.word	0x58020000
 8003a2c:	58020400 	.word	0x58020400
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	58020c00 	.word	0x58020c00

08003a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a48      	ldr	r2, [pc, #288]	; (8003b6c <HAL_TIM_Base_MspInit+0x130>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d117      	bne.n	8003a7e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a4e:	4b48      	ldr	r3, [pc, #288]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a54:	4a46      	ldr	r2, [pc, #280]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003a56:	f043 0308 	orr.w	r3, r3, #8
 8003a5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a5e:	4b44      	ldr	r3, [pc, #272]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2032      	movs	r0, #50	; 0x32
 8003a72:	f001 fd7e 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a76:	2032      	movs	r0, #50	; 0x32
 8003a78:	f001 fd95 	bl	80055a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003a7c:	e072      	b.n	8003b64 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3c      	ldr	r2, [pc, #240]	; (8003b74 <HAL_TIM_Base_MspInit+0x138>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d117      	bne.n	8003ab8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003a88:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a8e:	4a38      	ldr	r2, [pc, #224]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a98:	4b35      	ldr	r3, [pc, #212]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	202b      	movs	r0, #43	; 0x2b
 8003aac:	f001 fd61 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003ab0:	202b      	movs	r0, #43	; 0x2b
 8003ab2:	f001 fd78 	bl	80055a6 <HAL_NVIC_EnableIRQ>
}
 8003ab6:	e055      	b.n	8003b64 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2e      	ldr	r2, [pc, #184]	; (8003b78 <HAL_TIM_Base_MspInit+0x13c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d117      	bne.n	8003af2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003ac2:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ac8:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ace:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ad2:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	202c      	movs	r0, #44	; 0x2c
 8003ae6:	f001 fd44 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003aea:	202c      	movs	r0, #44	; 0x2c
 8003aec:	f001 fd5b 	bl	80055a6 <HAL_NVIC_EnableIRQ>
}
 8003af0:	e038      	b.n	8003b64 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a21      	ldr	r2, [pc, #132]	; (8003b7c <HAL_TIM_Base_MspInit+0x140>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d117      	bne.n	8003b2c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b02:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b0c:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	2075      	movs	r0, #117	; 0x75
 8003b20:	f001 fd27 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003b24:	2075      	movs	r0, #117	; 0x75
 8003b26:	f001 fd3e 	bl	80055a6 <HAL_NVIC_EnableIRQ>
}
 8003b2a:	e01b      	b.n	8003b64 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <HAL_TIM_Base_MspInit+0x144>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d116      	bne.n	8003b64 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b3c:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <HAL_TIM_Base_MspInit+0x134>)
 8003b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	2100      	movs	r1, #0
 8003b58:	2076      	movs	r0, #118	; 0x76
 8003b5a:	f001 fd0a 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003b5e:	2076      	movs	r0, #118	; 0x76
 8003b60:	f001 fd21 	bl	80055a6 <HAL_NVIC_EnableIRQ>
}
 8003b64:	bf00      	nop
 8003b66:	3720      	adds	r7, #32
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40000c00 	.word	0x40000c00
 8003b70:	58024400 	.word	0x58024400
 8003b74:	40001800 	.word	0x40001800
 8003b78:	40001c00 	.word	0x40001c00
 8003b7c:	40014400 	.word	0x40014400
 8003b80:	40014800 	.word	0x40014800

08003b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a4b      	ldr	r2, [pc, #300]	; (8003cd0 <HAL_TIM_MspPostInit+0x14c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d120      	bne.n	8003be8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba6:	4b4b      	ldr	r3, [pc, #300]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bac:	4a49      	ldr	r2, [pc, #292]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003bae:	f043 0302 	orr.w	r3, r3, #2
 8003bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bb6:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8003bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 8003bda:	f107 031c 	add.w	r3, r7, #28
 8003bde:	4619      	mov	r1, r3
 8003be0:	483d      	ldr	r0, [pc, #244]	; (8003cd8 <HAL_TIM_MspPostInit+0x154>)
 8003be2:	f004 ff4b 	bl	8008a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003be6:	e06f      	b.n	8003cc8 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3b      	ldr	r2, [pc, #236]	; (8003cdc <HAL_TIM_MspPostInit+0x158>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d11f      	bne.n	8003c32 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf2:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bf8:	4a36      	ldr	r2, [pc, #216]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c02:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8003c10:	2340      	movs	r3, #64	; 0x40
 8003c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c14:	2302      	movs	r3, #2
 8003c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003c20:	2309      	movs	r3, #9
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8003c24:	f107 031c 	add.w	r3, r7, #28
 8003c28:	4619      	mov	r1, r3
 8003c2a:	482d      	ldr	r0, [pc, #180]	; (8003ce0 <HAL_TIM_MspPostInit+0x15c>)
 8003c2c:	f004 ff26 	bl	8008a7c <HAL_GPIO_Init>
}
 8003c30:	e04a      	b.n	8003cc8 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2b      	ldr	r2, [pc, #172]	; (8003ce4 <HAL_TIM_MspPostInit+0x160>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d120      	bne.n	8003c7e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c42:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 8003c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c64:	2301      	movs	r3, #1
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	4619      	mov	r1, r3
 8003c76:	4818      	ldr	r0, [pc, #96]	; (8003cd8 <HAL_TIM_MspPostInit+0x154>)
 8003c78:	f004 ff00 	bl	8008a7c <HAL_GPIO_Init>
}
 8003c7c:	e024      	b.n	8003cc8 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <HAL_TIM_MspPostInit+0x164>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d11f      	bne.n	8003cc8 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c8e:	4a11      	ldr	r2, [pc, #68]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c98:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <HAL_TIM_MspPostInit+0x150>)
 8003c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8003ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cac:	2302      	movs	r3, #2
 8003cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	f107 031c 	add.w	r3, r7, #28
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <HAL_TIM_MspPostInit+0x154>)
 8003cc4:	f004 feda 	bl	8008a7c <HAL_GPIO_Init>
}
 8003cc8:	bf00      	nop
 8003cca:	3730      	adds	r7, #48	; 0x30
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40001800 	.word	0x40001800
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	58020400 	.word	0x58020400
 8003cdc:	40001c00 	.word	0x40001c00
 8003ce0:	58020000 	.word	0x58020000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800

08003cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b0ba      	sub	sp, #232	; 0xe8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d04:	f107 0318 	add.w	r3, r7, #24
 8003d08:	22bc      	movs	r2, #188	; 0xbc
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f00c fc2d 	bl	801056c <memset>
  if(huart->Instance==UART5)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a7f      	ldr	r2, [pc, #508]	; (8003f14 <HAL_UART_MspInit+0x228>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	f040 80a8 	bne.w	8003e6e <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d28:	f107 0318 	add.w	r3, r7, #24
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f006 f9d3 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003d38:	f7ff fb36 	bl	80033a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003d3c:	4b76      	ldr	r3, [pc, #472]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d42:	4a75      	ldr	r2, [pc, #468]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d4c:	4b72      	ldr	r3, [pc, #456]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d5a:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d60:	4a6d      	ldr	r2, [pc, #436]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003d62:	f043 0302 	orr.w	r3, r3, #2
 8003d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d6a:	4b6b      	ldr	r3, [pc, #428]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003d78:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d80:	2302      	movs	r3, #2
 8003d82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003d92:	230e      	movs	r3, #14
 8003d94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	485f      	ldr	r0, [pc, #380]	; (8003f1c <HAL_UART_MspInit+0x230>)
 8003da0:	f004 fe6c 	bl	8008a7c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8003da4:	4b5e      	ldr	r3, [pc, #376]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003da6:	4a5f      	ldr	r2, [pc, #380]	; (8003f24 <HAL_UART_MspInit+0x238>)
 8003da8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8003daa:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003dac:	2241      	movs	r2, #65	; 0x41
 8003dae:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003db0:	4b5b      	ldr	r3, [pc, #364]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003db6:	4b5a      	ldr	r3, [pc, #360]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dbc:	4b58      	ldr	r3, [pc, #352]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dc2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dc4:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dca:	4b55      	ldr	r3, [pc, #340]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003dd0:	4b53      	ldr	r3, [pc, #332]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003dd8:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dde:	4b50      	ldr	r3, [pc, #320]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003de4:	484e      	ldr	r0, [pc, #312]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003de6:	f001 fbf9 	bl	80055dc <HAL_DMA_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003df0:	f7ff fada 	bl	80033a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a4a      	ldr	r2, [pc, #296]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003df8:	67da      	str	r2, [r3, #124]	; 0x7c
 8003dfa:	4a49      	ldr	r2, [pc, #292]	; (8003f20 <HAL_UART_MspInit+0x234>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 8003e00:	4b49      	ldr	r3, [pc, #292]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e02:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <HAL_UART_MspInit+0x240>)
 8003e04:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8003e06:	4b48      	ldr	r3, [pc, #288]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e08:	2242      	movs	r2, #66	; 0x42
 8003e0a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e0c:	4b46      	ldr	r3, [pc, #280]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e0e:	2240      	movs	r2, #64	; 0x40
 8003e10:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e12:	4b45      	ldr	r3, [pc, #276]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e18:	4b43      	ldr	r3, [pc, #268]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e1e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e20:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e26:	4b40      	ldr	r3, [pc, #256]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8003e2c:	4b3e      	ldr	r3, [pc, #248]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e32:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e34:	4b3c      	ldr	r3, [pc, #240]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003e40:	4839      	ldr	r0, [pc, #228]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e42:	f001 fbcb 	bl	80055dc <HAL_DMA_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8003e4c:	f7ff faac 	bl	80033a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a35      	ldr	r2, [pc, #212]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e54:	679a      	str	r2, [r3, #120]	; 0x78
 8003e56:	4a34      	ldr	r2, [pc, #208]	; (8003f28 <HAL_UART_MspInit+0x23c>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	2035      	movs	r0, #53	; 0x35
 8003e62:	f001 fb86 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003e66:	2035      	movs	r0, #53	; 0x35
 8003e68:	f001 fb9d 	bl	80055a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003e6c:	e04e      	b.n	8003f0c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <HAL_UART_MspInit+0x244>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d149      	bne.n	8003f0c <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e82:	f107 0318 	add.w	r3, r7, #24
 8003e86:	4618      	mov	r0, r3
 8003e88:	f006 f926 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003e92:	f7ff fa89 	bl	80033a8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eb4:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eba:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003ebc:	f043 0320 	orr.w	r3, r3, #32
 8003ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <HAL_UART_MspInit+0x22c>)
 8003ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 8003ed2:	23c0      	movs	r3, #192	; 0xc0
 8003ed4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003eea:	2307      	movs	r3, #7
 8003eec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ef0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	480f      	ldr	r0, [pc, #60]	; (8003f34 <HAL_UART_MspInit+0x248>)
 8003ef8:	f004 fdc0 	bl	8008a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003efc:	2200      	movs	r2, #0
 8003efe:	2100      	movs	r1, #0
 8003f00:	2052      	movs	r0, #82	; 0x52
 8003f02:	f001 fb36 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003f06:	2052      	movs	r0, #82	; 0x52
 8003f08:	f001 fb4d 	bl	80055a6 <HAL_NVIC_EnableIRQ>
}
 8003f0c:	bf00      	nop
 8003f0e:	37e8      	adds	r7, #232	; 0xe8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40005000 	.word	0x40005000
 8003f18:	58024400 	.word	0x58024400
 8003f1c:	58020400 	.word	0x58020400
 8003f20:	24000ebc 	.word	0x24000ebc
 8003f24:	40020028 	.word	0x40020028
 8003f28:	24001088 	.word	0x24001088
 8003f2c:	40020010 	.word	0x40020010
 8003f30:	40007800 	.word	0x40007800
 8003f34:	58021400 	.word	0x58021400

08003f38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b0b8      	sub	sp, #224	; 0xe0
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f50:	f107 0310 	add.w	r3, r7, #16
 8003f54:	22bc      	movs	r2, #188	; 0xbc
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f00c fb07 	bl	801056c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2f      	ldr	r2, [pc, #188]	; (8004020 <HAL_PCD_MspInit+0xe8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d156      	bne.n	8004016 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003f68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003f6e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8003f72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f76:	f107 0310 	add.w	r3, r7, #16
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f006 f8ac 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8003f86:	f7ff fa0f 	bl	80033a8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003f8a:	f005 f8dd 	bl	8009148 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8e:	4b25      	ldr	r3, [pc, #148]	; (8004024 <HAL_PCD_MspInit+0xec>)
 8003f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <HAL_PCD_MspInit+0xec>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f9e:	4b21      	ldr	r3, [pc, #132]	; (8004024 <HAL_PCD_MspInit+0xec>)
 8003fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003fac:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003fc6:	230a      	movs	r3, #10
 8003fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4815      	ldr	r0, [pc, #84]	; (8004028 <HAL_PCD_MspInit+0xf0>)
 8003fd4:	f004 fd52 	bl	8008a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	480d      	ldr	r0, [pc, #52]	; (8004028 <HAL_PCD_MspInit+0xf0>)
 8003ff4:	f004 fd42 	bl	8008a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_PCD_MspInit+0xec>)
 8003ffa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ffe:	4a09      	ldr	r2, [pc, #36]	; (8004024 <HAL_PCD_MspInit+0xec>)
 8004000:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004004:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_PCD_MspInit+0xec>)
 800400a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800400e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004016:	bf00      	nop
 8004018:	37e0      	adds	r7, #224	; 0xe0
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40080000 	.word	0x40080000
 8004024:	58024400 	.word	0x58024400
 8004028:	58020000 	.word	0x58020000

0800402c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004030:	e7fe      	b.n	8004030 <NMI_Handler+0x4>

08004032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004036:	e7fe      	b.n	8004036 <HardFault_Handler+0x4>

08004038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800403c:	e7fe      	b.n	800403c <MemManage_Handler+0x4>

0800403e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004042:	e7fe      	b.n	8004042 <BusFault_Handler+0x4>

08004044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004048:	e7fe      	b.n	8004048 <UsageFault_Handler+0x4>

0800404a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004078:	f000 f9a0 	bl	80043bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800407c:	bf00      	nop
 800407e:	bd80      	pop	{r7, pc}

08004080 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004084:	2010      	movs	r0, #16
 8004086:	f004 fec2 	bl	8008e0e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <DMA1_Stream0_IRQHandler+0x10>)
 8004096:	f002 fdc9 	bl	8006c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	24001088 	.word	0x24001088

080040a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <DMA1_Stream1_IRQHandler+0x10>)
 80040aa:	f002 fdbf 	bl	8006c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	24000ebc 	.word	0x24000ebc

080040b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80040bc:	2020      	movs	r0, #32
 80040be:	f004 fea6 	bl	8008e0e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80040c2:	2040      	movs	r0, #64	; 0x40
 80040c4:	f004 fea3 	bl	8008e0e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80040c8:	2080      	movs	r0, #128	; 0x80
 80040ca:	f004 fea0 	bl	8008e0e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80040d8:	4802      	ldr	r0, [pc, #8]	; (80040e4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80040da:	f008 fead 	bl	800ce38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	24000f34 	.word	0x24000f34

080040e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80040ec:	4802      	ldr	r0, [pc, #8]	; (80040f8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80040ee:	f008 fea3 	bl	800ce38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	24000dd0 	.word	0x24000dd0

080040fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004100:	4802      	ldr	r0, [pc, #8]	; (800410c <TIM5_IRQHandler+0x10>)
 8004102:	f008 fe99 	bl	800ce38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	24000bbc 	.word	0x24000bbc

08004110 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004114:	4802      	ldr	r0, [pc, #8]	; (8004120 <UART5_IRQHandler+0x10>)
 8004116:	f00a f87d 	bl	800e214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	24000cdc 	.word	0x24000cdc

08004124 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004128:	4802      	ldr	r0, [pc, #8]	; (8004134 <UART7_IRQHandler+0x10>)
 800412a:	f00a f873 	bl	800e214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	24000614 	.word	0x24000614

08004138 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800413c:	4802      	ldr	r0, [pc, #8]	; (8004148 <TIM16_IRQHandler+0x10>)
 800413e:	f008 fe7b 	bl	800ce38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2400103c 	.word	0x2400103c

0800414c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004150:	4802      	ldr	r0, [pc, #8]	; (800415c <TIM17_IRQHandler+0x10>)
 8004152:	f008 fe71 	bl	800ce38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	24000af8 	.word	0x24000af8

08004160 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004164:	4802      	ldr	r0, [pc, #8]	; (8004170 <BDMA_Channel0_IRQHandler+0x10>)
 8004166:	f002 fd61 	bl	8006c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	24000b44 	.word	0x24000b44

08004174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004178:	4b37      	ldr	r3, [pc, #220]	; (8004258 <SystemInit+0xe4>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	4a36      	ldr	r2, [pc, #216]	; (8004258 <SystemInit+0xe4>)
 8004180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004188:	4b34      	ldr	r3, [pc, #208]	; (800425c <SystemInit+0xe8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	2b06      	cmp	r3, #6
 8004192:	d807      	bhi.n	80041a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004194:	4b31      	ldr	r3, [pc, #196]	; (800425c <SystemInit+0xe8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 030f 	bic.w	r3, r3, #15
 800419c:	4a2f      	ldr	r2, [pc, #188]	; (800425c <SystemInit+0xe8>)
 800419e:	f043 0307 	orr.w	r3, r3, #7
 80041a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80041a4:	4b2e      	ldr	r3, [pc, #184]	; (8004260 <SystemInit+0xec>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2d      	ldr	r2, [pc, #180]	; (8004260 <SystemInit+0xec>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041b0:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <SystemInit+0xec>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <SystemInit+0xec>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4929      	ldr	r1, [pc, #164]	; (8004260 <SystemInit+0xec>)
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <SystemInit+0xf0>)
 80041be:	4013      	ands	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80041c2:	4b26      	ldr	r3, [pc, #152]	; (800425c <SystemInit+0xe8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <SystemInit+0xe8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 030f 	bic.w	r3, r3, #15
 80041d6:	4a21      	ldr	r2, [pc, #132]	; (800425c <SystemInit+0xe8>)
 80041d8:	f043 0307 	orr.w	r3, r3, #7
 80041dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <SystemInit+0xec>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80041e4:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <SystemInit+0xec>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80041ea:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <SystemInit+0xec>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <SystemInit+0xec>)
 80041f2:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <SystemInit+0xf4>)
 80041f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80041f6:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <SystemInit+0xec>)
 80041f8:	4a1c      	ldr	r2, [pc, #112]	; (800426c <SystemInit+0xf8>)
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80041fc:	4b18      	ldr	r3, [pc, #96]	; (8004260 <SystemInit+0xec>)
 80041fe:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <SystemInit+0xfc>)
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004202:	4b17      	ldr	r3, [pc, #92]	; (8004260 <SystemInit+0xec>)
 8004204:	2200      	movs	r2, #0
 8004206:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <SystemInit+0xec>)
 800420a:	4a19      	ldr	r2, [pc, #100]	; (8004270 <SystemInit+0xfc>)
 800420c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800420e:	4b14      	ldr	r3, [pc, #80]	; (8004260 <SystemInit+0xec>)
 8004210:	2200      	movs	r2, #0
 8004212:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <SystemInit+0xec>)
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <SystemInit+0xfc>)
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800421a:	4b11      	ldr	r3, [pc, #68]	; (8004260 <SystemInit+0xec>)
 800421c:	2200      	movs	r2, #0
 800421e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <SystemInit+0xec>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <SystemInit+0xec>)
 8004226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800422a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <SystemInit+0xec>)
 800422e:	2200      	movs	r2, #0
 8004230:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <SystemInit+0x100>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <SystemInit+0x104>)
 8004238:	4013      	ands	r3, r2
 800423a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423e:	d202      	bcs.n	8004246 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004240:	4b0e      	ldr	r3, [pc, #56]	; (800427c <SystemInit+0x108>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004246:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <SystemInit+0x10c>)
 8004248:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800424c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00
 800425c:	52002000 	.word	0x52002000
 8004260:	58024400 	.word	0x58024400
 8004264:	eaf6ed7f 	.word	0xeaf6ed7f
 8004268:	02020200 	.word	0x02020200
 800426c:	01ff0000 	.word	0x01ff0000
 8004270:	01010280 	.word	0x01010280
 8004274:	5c001000 	.word	0x5c001000
 8004278:	ffff0000 	.word	0xffff0000
 800427c:	51008108 	.word	0x51008108
 8004280:	52004000 	.word	0x52004000

08004284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004288:	f7ff ff74 	bl	8004174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800428c:	480c      	ldr	r0, [pc, #48]	; (80042c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800428e:	490d      	ldr	r1, [pc, #52]	; (80042c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004294:	e002      	b.n	800429c <LoopCopyDataInit>

08004296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429a:	3304      	adds	r3, #4

0800429c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800429c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800429e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a0:	d3f9      	bcc.n	8004296 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042a4:	4c0a      	ldr	r4, [pc, #40]	; (80042d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042a8:	e001      	b.n	80042ae <LoopFillZerobss>

080042aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042ac:	3204      	adds	r2, #4

080042ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b0:	d3fb      	bcc.n	80042aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042b2:	f00c f937 	bl	8010524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042b6:	f7fd ff71 	bl	800219c <main>
  bx  lr
 80042ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80042c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80042c4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80042c8:	08011878 	.word	0x08011878
  ldr r2, =_sbss
 80042cc:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80042d0:	24001104 	.word	0x24001104

080042d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d4:	e7fe      	b.n	80042d4 <ADC3_IRQHandler>
	...

080042d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042de:	2003      	movs	r0, #3
 80042e0:	f001 f93c 	bl	800555c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042e4:	f005 fd22 	bl	8009d2c <HAL_RCC_GetSysClockFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b15      	ldr	r3, [pc, #84]	; (8004340 <HAL_Init+0x68>)
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	4913      	ldr	r1, [pc, #76]	; (8004344 <HAL_Init+0x6c>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004302:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_Init+0x68>)
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <HAL_Init+0x6c>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	4a0b      	ldr	r2, [pc, #44]	; (8004348 <HAL_Init+0x70>)
 800431a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <HAL_Init+0x74>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004322:	2000      	movs	r0, #0
 8004324:	f000 f814 	bl	8004350 <HAL_InitTick>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e002      	b.n	8004338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004332:	f7ff f83f 	bl	80033b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	58024400 	.word	0x58024400
 8004344:	080115e0 	.word	0x080115e0
 8004348:	24000004 	.word	0x24000004
 800434c:	24000000 	.word	0x24000000

08004350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004358:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <HAL_InitTick+0x60>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e021      	b.n	80043a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_InitTick+0x64>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <HAL_InitTick+0x60>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	4619      	mov	r1, r3
 800436e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004372:	fbb3 f3f1 	udiv	r3, r3, r1
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	4618      	mov	r0, r3
 800437c:	f001 f921 	bl	80055c2 <HAL_SYSTICK_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e00e      	b.n	80043a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b0f      	cmp	r3, #15
 800438e:	d80a      	bhi.n	80043a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004390:	2200      	movs	r2, #0
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	f001 f8eb 	bl	8005572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800439c:	4a06      	ldr	r2, [pc, #24]	; (80043b8 <HAL_InitTick+0x68>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e000      	b.n	80043a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	2400000c 	.word	0x2400000c
 80043b4:	24000000 	.word	0x24000000
 80043b8:	24000008 	.word	0x24000008

080043bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_IncTick+0x20>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_IncTick+0x24>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4413      	add	r3, r2
 80043cc:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <HAL_IncTick+0x24>)
 80043ce:	6013      	str	r3, [r2, #0]
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	2400000c 	.word	0x2400000c
 80043e0:	24001100 	.word	0x24001100

080043e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return uwTick;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_GetTick+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	24001100 	.word	0x24001100

080043fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004404:	f7ff ffee 	bl	80043e4 <HAL_GetTick>
 8004408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d005      	beq.n	8004422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <HAL_Delay+0x44>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004422:	bf00      	nop
 8004424:	f7ff ffde 	bl	80043e4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	429a      	cmp	r2, r3
 8004432:	d8f7      	bhi.n	8004424 <HAL_Delay+0x28>
  {
  }
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2400000c 	.word	0x2400000c

08004444 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_GetREVID+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0c1b      	lsrs	r3, r3, #16
}
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	5c001000 	.word	0x5c001000

0800445c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800446c:	4904      	ldr	r1, [pc, #16]	; (8004480 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	58000400 	.word	0x58000400

08004484 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	43db      	mvns	r3, r3
 8004496:	401a      	ands	r2, r3
 8004498:	4904      	ldr	r1, [pc, #16]	; (80044ac <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	58000400 	.word	0x58000400

080044b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	609a      	str	r2, [r3, #8]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	609a      	str	r2, [r3, #8]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3360      	adds	r3, #96	; 0x60
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	430b      	orrs	r3, r1
 8004546:	431a      	orrs	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	611a      	str	r2, [r3, #16]
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3360      	adds	r3, #96	; 0x60
 800459a:	461a      	mov	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	601a      	str	r2, [r3, #0]
  }
}
 80045b4:	bf00      	nop
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3330      	adds	r3, #48	; 0x30
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	0a1b      	lsrs	r3, r3, #8
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	4413      	add	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	211f      	movs	r1, #31
 80045ec:	fa01 f303 	lsl.w	r3, r1, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0e9b      	lsrs	r3, r3, #26
 80045f8:	f003 011f 	and.w	r1, r3, #31
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	431a      	orrs	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3314      	adds	r3, #20
 8004628:	461a      	mov	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	0e5b      	lsrs	r3, r3, #25
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	4413      	add	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0d1b      	lsrs	r3, r3, #20
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2107      	movs	r1, #7
 8004646:	fa01 f303 	lsl.w	r3, r1, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	401a      	ands	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	0d1b      	lsrs	r3, r3, #20
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	431a      	orrs	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004688:	43db      	mvns	r3, r3
 800468a:	401a      	ands	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f003 0318 	and.w	r3, r3, #24
 8004692:	4908      	ldr	r1, [pc, #32]	; (80046b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004694:	40d9      	lsrs	r1, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	400b      	ands	r3, r1
 800469a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800469e:	431a      	orrs	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	000fffff 	.word	0x000fffff

080046b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6093      	str	r3, [r2, #8]
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	5fffffc0 	.word	0x5fffffc0

080046dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f0:	d101      	bne.n	80046f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <LL_ADC_EnableInternalRegulator+0x24>)
 8004712:	4013      	ands	r3, r2
 8004714:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	6fffffc0 	.word	0x6fffffc0

0800472c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004740:	d101      	bne.n	8004746 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <LL_ADC_IsEnabled+0x18>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <LL_ADC_IsEnabled+0x1a>
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b04      	cmp	r3, #4
 800478c:	d101      	bne.n	8004792 <LL_ADC_REG_IsConversionOngoing+0x18>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d101      	bne.n	80047b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e18e      	b.n	8004b00 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fe fdf9 	bl	80033e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff ff67 	bl	80046dc <LL_ADC_IsDeepPowerDownEnabled>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff ff4d 	bl	80046b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff ff82 	bl	800472c <LL_ADC_IsInternalRegulatorEnabled>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d114      	bne.n	8004858 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff ff66 	bl	8004704 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004838:	4b9a      	ldr	r3, [pc, #616]	; (8004aa4 <HAL_ADC_Init+0x2dc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	4a9a      	ldr	r2, [pc, #616]	; (8004aa8 <HAL_ADC_Init+0x2e0>)
 8004840:	fba2 2303 	umull	r2, r3, r2, r3
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	3301      	adds	r3, #1
 8004848:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800484a:	e002      	b.n	8004852 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3b01      	subs	r3, #1
 8004850:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f9      	bne.n	800484c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff65 	bl	800472c <LL_ADC_IsInternalRegulatorEnabled>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10d      	bne.n	8004884 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f043 0210 	orr.w	r2, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	f043 0201 	orr.w	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff76 	bl	800477a <LL_ADC_REG_IsConversionOngoing>
 800488e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	f040 8128 	bne.w	8004aee <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f040 8124 	bne.w	8004aee <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048ae:	f043 0202 	orr.w	r2, r3, #2
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ff4a 	bl	8004754 <LL_ADC_IsEnabled>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d136      	bne.n	8004934 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a78      	ldr	r2, [pc, #480]	; (8004aac <HAL_ADC_Init+0x2e4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_ADC_Init+0x112>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a76      	ldr	r2, [pc, #472]	; (8004ab0 <HAL_ADC_Init+0x2e8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d10e      	bne.n	80048f8 <HAL_ADC_Init+0x130>
 80048da:	4874      	ldr	r0, [pc, #464]	; (8004aac <HAL_ADC_Init+0x2e4>)
 80048dc:	f7ff ff3a 	bl	8004754 <LL_ADC_IsEnabled>
 80048e0:	4604      	mov	r4, r0
 80048e2:	4873      	ldr	r0, [pc, #460]	; (8004ab0 <HAL_ADC_Init+0x2e8>)
 80048e4:	f7ff ff36 	bl	8004754 <LL_ADC_IsEnabled>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4323      	orrs	r3, r4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e008      	b.n	800490a <HAL_ADC_Init+0x142>
 80048f8:	486e      	ldr	r0, [pc, #440]	; (8004ab4 <HAL_ADC_Init+0x2ec>)
 80048fa:	f7ff ff2b 	bl	8004754 <LL_ADC_IsEnabled>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d012      	beq.n	8004934 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a66      	ldr	r2, [pc, #408]	; (8004aac <HAL_ADC_Init+0x2e4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_ADC_Init+0x15a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a64      	ldr	r2, [pc, #400]	; (8004ab0 <HAL_ADC_Init+0x2e8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_ADC_Init+0x15e>
 8004922:	4a65      	ldr	r2, [pc, #404]	; (8004ab8 <HAL_ADC_Init+0x2f0>)
 8004924:	e000      	b.n	8004928 <HAL_ADC_Init+0x160>
 8004926:	4a65      	ldr	r2, [pc, #404]	; (8004abc <HAL_ADC_Init+0x2f4>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f7ff fdbe 	bl	80044b0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004934:	f7ff fd86 	bl	8004444 <HAL_GetREVID>
 8004938:	4603      	mov	r3, r0
 800493a:	f241 0203 	movw	r2, #4099	; 0x1003
 800493e:	4293      	cmp	r3, r2
 8004940:	d914      	bls.n	800496c <HAL_ADC_Init+0x1a4>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b10      	cmp	r3, #16
 8004948:	d110      	bne.n	800496c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	7d5b      	ldrb	r3, [r3, #21]
 800494e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004954:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800495a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7f1b      	ldrb	r3, [r3, #28]
 8004960:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004962:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004964:	f043 030c 	orr.w	r3, r3, #12
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	e00d      	b.n	8004988 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	7d5b      	ldrb	r3, [r3, #21]
 8004970:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004976:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800497c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7f1b      	ldrb	r3, [r3, #28]
 8004982:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	7f1b      	ldrb	r3, [r3, #28]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d106      	bne.n	800499e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	3b01      	subs	r3, #1
 8004996:	045b      	lsls	r3, r3, #17
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d009      	beq.n	80049ba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	4b3f      	ldr	r3, [pc, #252]	; (8004ac0 <HAL_ADC_Init+0x2f8>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	69b9      	ldr	r1, [r7, #24]
 80049ca:	430b      	orrs	r3, r1
 80049cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fed1 	bl	800477a <LL_ADC_REG_IsConversionOngoing>
 80049d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fede 	bl	80047a0 <LL_ADC_INJ_IsConversionOngoing>
 80049e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d14a      	bne.n	8004a82 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d147      	bne.n	8004a82 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	7d1b      	ldrb	r3, [r3, #20]
 80049f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	4b2f      	ldr	r3, [pc, #188]	; (8004ac4 <HAL_ADC_Init+0x2fc>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	69b9      	ldr	r1, [r7, #24]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d11b      	bne.n	8004a56 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <HAL_ADC_Init+0x300>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a32:	3a01      	subs	r2, #1
 8004a34:	0411      	lsls	r1, r2, #16
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a3a:	4311      	orrs	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a40:	4311      	orrs	r1, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a46:	430a      	orrs	r2, r1
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	611a      	str	r2, [r3, #16]
 8004a54:	e007      	b.n	8004a66 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fb93 	bl	80051a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d120      	bne.n	8004acc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	f023 010f 	bic.w	r1, r3, #15
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	1e5a      	subs	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8004aa2:	e01b      	b.n	8004adc <HAL_ADC_Init+0x314>
 8004aa4:	24000000 	.word	0x24000000
 8004aa8:	053e2d63 	.word	0x053e2d63
 8004aac:	40022000 	.word	0x40022000
 8004ab0:	40022100 	.word	0x40022100
 8004ab4:	58026000 	.word	0x58026000
 8004ab8:	40022300 	.word	0x40022300
 8004abc:	58026300 	.word	0x58026300
 8004ac0:	fff0c003 	.word	0xfff0c003
 8004ac4:	ffffbffc 	.word	0xffffbffc
 8004ac8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 020f 	bic.w	r2, r2, #15
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae0:	f023 0303 	bic.w	r3, r3, #3
 8004ae4:	f043 0201 	orr.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	655a      	str	r2, [r3, #84]	; 0x54
 8004aec:	e007      	b.n	8004afe <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af2:	f043 0210 	orr.w	r2, r3, #16
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3724      	adds	r7, #36	; 0x24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b0a1      	sub	sp, #132	; 0x84
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a9d      	ldr	r2, [pc, #628]	; (8004d98 <HAL_ADC_ConfigChannel+0x290>)
 8004b22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x2a>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e321      	b.n	8005176 <HAL_ADC_ConfigChannel+0x66e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fe1b 	bl	800477a <LL_ADC_REG_IsConversionOngoing>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 8306 	bne.w	8005158 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d108      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x62>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	0e9b      	lsrs	r3, r3, #26
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	2201      	movs	r2, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	e016      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x90>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b7a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004b82:	2320      	movs	r3, #32
 8004b84:	e003      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b88:	fab3 f383 	clz	r3, r3
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	2201      	movs	r2, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	69d1      	ldr	r1, [r2, #28]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f7ff fd04 	bl	80045c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fddc 	bl	800477a <LL_ADC_REG_IsConversionOngoing>
 8004bc2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fde9 	bl	80047a0 <LL_ADC_INJ_IsConversionOngoing>
 8004bce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f040 80b3 	bne.w	8004d3e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f040 80af 	bne.w	8004d3e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6819      	ldr	r1, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	461a      	mov	r2, r3
 8004bee:	f7ff fd13 	bl	8004618 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bf2:	4b6a      	ldr	r3, [pc, #424]	; (8004d9c <HAL_ADC_ConfigChannel+0x294>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bfe:	d10b      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x110>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	e01d      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x14c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0x136>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	089b      	lsrs	r3, r3, #2
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	e00a      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x14c>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	089b      	lsrs	r3, r3, #2
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d027      	beq.n	8004cae <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6919      	ldr	r1, [r3, #16]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c6c:	f7ff fc54 	bl	8004518 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6919      	ldr	r1, [r3, #16]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	7e5b      	ldrb	r3, [r3, #25]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d102      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x17e>
 8004c80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c84:	e000      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x180>
 8004c86:	2300      	movs	r3, #0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f7ff fc7e 	bl	800458a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6919      	ldr	r1, [r3, #16]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	7e1b      	ldrb	r3, [r3, #24]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d102      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x19c>
 8004c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ca2:	e000      	b.n	8004ca6 <HAL_ADC_ConfigChannel+0x19e>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7ff fc56 	bl	8004558 <LL_ADC_SetDataRightShift>
 8004cac:	e047      	b.n	8004d3e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	069b      	lsls	r3, r3, #26
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d107      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	069b      	lsls	r3, r3, #26
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d107      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cf4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	069b      	lsls	r3, r3, #26
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d107      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d18:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	069b      	lsls	r3, r3, #26
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d107      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d3c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fd06 	bl	8004754 <LL_ADC_IsEnabled>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f040 820d 	bne.w	800516a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6819      	ldr	r1, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f7ff fc87 	bl	8004670 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	4a0c      	ldr	r2, [pc, #48]	; (8004d98 <HAL_ADC_ConfigChannel+0x290>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	f040 8133 	bne.w	8004fd4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d110      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x298>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	0e9b      	lsrs	r3, r3, #26
 8004d84:	3301      	adds	r3, #1
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	2b09      	cmp	r3, #9
 8004d8c:	bf94      	ite	ls
 8004d8e:	2301      	movls	r3, #1
 8004d90:	2300      	movhi	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e01e      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x2cc>
 8004d96:	bf00      	nop
 8004d98:	47ff0000 	.word	0x47ff0000
 8004d9c:	5c001000 	.word	0x5c001000
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004da8:	fa93 f3a3 	rbit	r3, r3
 8004dac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004db8:	2320      	movs	r3, #32
 8004dba:	e003      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	2b09      	cmp	r3, #9
 8004dcc:	bf94      	ite	ls
 8004dce:	2301      	movls	r3, #1
 8004dd0:	2300      	movhi	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d079      	beq.n	8004ecc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d107      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x2ec>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0e9b      	lsrs	r3, r3, #26
 8004dea:	3301      	adds	r3, #1
 8004dec:	069b      	lsls	r3, r3, #26
 8004dee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004df2:	e015      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x318>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfc:	fa93 f3a3 	rbit	r3, r3
 8004e00:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e04:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004e0c:	2320      	movs	r3, #32
 8004e0e:	e003      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e12:	fab3 f383 	clz	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	3301      	adds	r3, #1
 8004e1a:	069b      	lsls	r3, r3, #26
 8004e1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x338>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	0e9b      	lsrs	r3, r3, #26
 8004e32:	3301      	adds	r3, #1
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	e017      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x368>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e48:	fa93 f3a3 	rbit	r3, r3
 8004e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004e58:	2320      	movs	r3, #32
 8004e5a:	e003      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	3301      	adds	r3, #1
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e70:	ea42 0103 	orr.w	r1, r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x38e>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0e9b      	lsrs	r3, r3, #26
 8004e86:	3301      	adds	r3, #1
 8004e88:	f003 021f 	and.w	r2, r3, #31
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	4413      	add	r3, r2
 8004e92:	051b      	lsls	r3, r3, #20
 8004e94:	e018      	b.n	8004ec8 <HAL_ADC_ConfigChannel+0x3c0>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9e:	fa93 f3a3 	rbit	r3, r3
 8004ea2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004eae:	2320      	movs	r3, #32
 8004eb0:	e003      	b.n	8004eba <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f003 021f 	and.w	r2, r3, #31
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	e07e      	b.n	8004fca <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d107      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x3e0>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	0e9b      	lsrs	r3, r3, #26
 8004ede:	3301      	adds	r3, #1
 8004ee0:	069b      	lsls	r3, r3, #26
 8004ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ee6:	e015      	b.n	8004f14 <HAL_ADC_ConfigChannel+0x40c>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	fa93 f3a3 	rbit	r3, r3
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004f00:	2320      	movs	r3, #32
 8004f02:	e003      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	069b      	lsls	r3, r3, #26
 8004f10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x42c>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	0e9b      	lsrs	r3, r3, #26
 8004f26:	3301      	adds	r3, #1
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	e017      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x45c>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	fa93 f3a3 	rbit	r3, r3
 8004f40:	61bb      	str	r3, [r7, #24]
  return result;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	e003      	b.n	8004f58 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	fab3 f383 	clz	r3, r3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	ea42 0103 	orr.w	r1, r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10d      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x488>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	0e9b      	lsrs	r3, r3, #26
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	f003 021f 	and.w	r2, r3, #31
 8004f80:	4613      	mov	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4413      	add	r3, r2
 8004f86:	3b1e      	subs	r3, #30
 8004f88:	051b      	lsls	r3, r3, #20
 8004f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	e01b      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x4c0>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	fa93 f3a3 	rbit	r3, r3
 8004f9c:	60fb      	str	r3, [r7, #12]
  return result;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004fa8:	2320      	movs	r3, #32
 8004faa:	e003      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	fab3 f383 	clz	r3, r3
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f003 021f 	and.w	r2, r3, #31
 8004fba:	4613      	mov	r3, r2
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3b1e      	subs	r3, #30
 8004fc2:	051b      	lsls	r3, r3, #20
 8004fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	6892      	ldr	r2, [r2, #8]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7ff fb22 	bl	8004618 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f280 80c6 	bge.w	800516a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a67      	ldr	r2, [pc, #412]	; (8005180 <HAL_ADC_ConfigChannel+0x678>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_ADC_ConfigChannel+0x4ea>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a65      	ldr	r2, [pc, #404]	; (8005184 <HAL_ADC_ConfigChannel+0x67c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d101      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x4ee>
 8004ff2:	4b65      	ldr	r3, [pc, #404]	; (8005188 <HAL_ADC_ConfigChannel+0x680>)
 8004ff4:	e000      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x4f0>
 8004ff6:	4b65      	ldr	r3, [pc, #404]	; (800518c <HAL_ADC_ConfigChannel+0x684>)
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fa7f 	bl	80044fc <LL_ADC_GetCommonPathInternalCh>
 8004ffe:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a5e      	ldr	r2, [pc, #376]	; (8005180 <HAL_ADC_ConfigChannel+0x678>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_ADC_ConfigChannel+0x50c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a5d      	ldr	r2, [pc, #372]	; (8005184 <HAL_ADC_ConfigChannel+0x67c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d10e      	bne.n	8005032 <HAL_ADC_ConfigChannel+0x52a>
 8005014:	485a      	ldr	r0, [pc, #360]	; (8005180 <HAL_ADC_ConfigChannel+0x678>)
 8005016:	f7ff fb9d 	bl	8004754 <LL_ADC_IsEnabled>
 800501a:	4604      	mov	r4, r0
 800501c:	4859      	ldr	r0, [pc, #356]	; (8005184 <HAL_ADC_ConfigChannel+0x67c>)
 800501e:	f7ff fb99 	bl	8004754 <LL_ADC_IsEnabled>
 8005022:	4603      	mov	r3, r0
 8005024:	4323      	orrs	r3, r4
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	e008      	b.n	8005044 <HAL_ADC_ConfigChannel+0x53c>
 8005032:	4857      	ldr	r0, [pc, #348]	; (8005190 <HAL_ADC_ConfigChannel+0x688>)
 8005034:	f7ff fb8e 	bl	8004754 <LL_ADC_IsEnabled>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	bf0c      	ite	eq
 800503e:	2301      	moveq	r3, #1
 8005040:	2300      	movne	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d07d      	beq.n	8005144 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a51      	ldr	r2, [pc, #324]	; (8005194 <HAL_ADC_ConfigChannel+0x68c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d130      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x5ac>
 8005052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d12b      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a4b      	ldr	r2, [pc, #300]	; (8005190 <HAL_ADC_ConfigChannel+0x688>)
 8005062:	4293      	cmp	r3, r2
 8005064:	f040 8081 	bne.w	800516a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a44      	ldr	r2, [pc, #272]	; (8005180 <HAL_ADC_ConfigChannel+0x678>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_ADC_ConfigChannel+0x574>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a43      	ldr	r2, [pc, #268]	; (8005184 <HAL_ADC_ConfigChannel+0x67c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d101      	bne.n	8005080 <HAL_ADC_ConfigChannel+0x578>
 800507c:	4a42      	ldr	r2, [pc, #264]	; (8005188 <HAL_ADC_ConfigChannel+0x680>)
 800507e:	e000      	b.n	8005082 <HAL_ADC_ConfigChannel+0x57a>
 8005080:	4a42      	ldr	r2, [pc, #264]	; (800518c <HAL_ADC_ConfigChannel+0x684>)
 8005082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005084:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7ff fa23 	bl	80044d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005090:	4b41      	ldr	r3, [pc, #260]	; (8005198 <HAL_ADC_ConfigChannel+0x690>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	099b      	lsrs	r3, r3, #6
 8005096:	4a41      	ldr	r2, [pc, #260]	; (800519c <HAL_ADC_ConfigChannel+0x694>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	099b      	lsrs	r3, r3, #6
 800509e:	3301      	adds	r3, #1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80050a4:	e002      	b.n	80050ac <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f9      	bne.n	80050a6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050b2:	e05a      	b.n	800516a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a39      	ldr	r2, [pc, #228]	; (80051a0 <HAL_ADC_ConfigChannel+0x698>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d11e      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x5f4>
 80050be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d119      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a30      	ldr	r2, [pc, #192]	; (8005190 <HAL_ADC_ConfigChannel+0x688>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d14b      	bne.n	800516a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <HAL_ADC_ConfigChannel+0x678>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_ADC_ConfigChannel+0x5de>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a28      	ldr	r2, [pc, #160]	; (8005184 <HAL_ADC_ConfigChannel+0x67c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_ADC_ConfigChannel+0x5e2>
 80050e6:	4a28      	ldr	r2, [pc, #160]	; (8005188 <HAL_ADC_ConfigChannel+0x680>)
 80050e8:	e000      	b.n	80050ec <HAL_ADC_ConfigChannel+0x5e4>
 80050ea:	4a28      	ldr	r2, [pc, #160]	; (800518c <HAL_ADC_ConfigChannel+0x684>)
 80050ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f7ff f9ee 	bl	80044d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050fa:	e036      	b.n	800516a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a28      	ldr	r2, [pc, #160]	; (80051a4 <HAL_ADC_ConfigChannel+0x69c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d131      	bne.n	800516a <HAL_ADC_ConfigChannel+0x662>
 8005106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d12c      	bne.n	800516a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1e      	ldr	r2, [pc, #120]	; (8005190 <HAL_ADC_ConfigChannel+0x688>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d127      	bne.n	800516a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_ADC_ConfigChannel+0x678>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_ADC_ConfigChannel+0x626>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a16      	ldr	r2, [pc, #88]	; (8005184 <HAL_ADC_ConfigChannel+0x67c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x62a>
 800512e:	4a16      	ldr	r2, [pc, #88]	; (8005188 <HAL_ADC_ConfigChannel+0x680>)
 8005130:	e000      	b.n	8005134 <HAL_ADC_ConfigChannel+0x62c>
 8005132:	4a16      	ldr	r2, [pc, #88]	; (800518c <HAL_ADC_ConfigChannel+0x684>)
 8005134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005136:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f7ff f9ca 	bl	80044d6 <LL_ADC_SetCommonPathInternalCh>
 8005142:	e012      	b.n	800516a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	f043 0220 	orr.w	r2, r3, #32
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005156:	e008      	b.n	800516a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	f043 0220 	orr.w	r2, r3, #32
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005172:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005176:	4618      	mov	r0, r3
 8005178:	3784      	adds	r7, #132	; 0x84
 800517a:	46bd      	mov	sp, r7
 800517c:	bd90      	pop	{r4, r7, pc}
 800517e:	bf00      	nop
 8005180:	40022000 	.word	0x40022000
 8005184:	40022100 	.word	0x40022100
 8005188:	40022300 	.word	0x40022300
 800518c:	58026300 	.word	0x58026300
 8005190:	58026000 	.word	0x58026000
 8005194:	cb840000 	.word	0xcb840000
 8005198:	24000000 	.word	0x24000000
 800519c:	053e2d63 	.word	0x053e2d63
 80051a0:	c7520000 	.word	0xc7520000
 80051a4:	cfb80000 	.word	0xcfb80000

080051a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a79      	ldr	r2, [pc, #484]	; (800539c <ADC_ConfigureBoostMode+0x1f4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <ADC_ConfigureBoostMode+0x1c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a78      	ldr	r2, [pc, #480]	; (80053a0 <ADC_ConfigureBoostMode+0x1f8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d109      	bne.n	80051d8 <ADC_ConfigureBoostMode+0x30>
 80051c4:	4b77      	ldr	r3, [pc, #476]	; (80053a4 <ADC_ConfigureBoostMode+0x1fc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e008      	b.n	80051ea <ADC_ConfigureBoostMode+0x42>
 80051d8:	4b73      	ldr	r3, [pc, #460]	; (80053a8 <ADC_ConfigureBoostMode+0x200>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01c      	beq.n	8005228 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80051ee:	f004 ff17 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 80051f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051fc:	d010      	beq.n	8005220 <ADC_ConfigureBoostMode+0x78>
 80051fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005202:	d871      	bhi.n	80052e8 <ADC_ConfigureBoostMode+0x140>
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005208:	d002      	beq.n	8005210 <ADC_ConfigureBoostMode+0x68>
 800520a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800520e:	d16b      	bne.n	80052e8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	60fb      	str	r3, [r7, #12]
        break;
 800521e:	e066      	b.n	80052ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	60fb      	str	r3, [r7, #12]
        break;
 8005226:	e062      	b.n	80052ee <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005228:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800522c:	f005 fe94 	bl	800af58 <HAL_RCCEx_GetPeriphCLKFreq>
 8005230:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800523a:	d051      	beq.n	80052e0 <ADC_ConfigureBoostMode+0x138>
 800523c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005240:	d854      	bhi.n	80052ec <ADC_ConfigureBoostMode+0x144>
 8005242:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005246:	d047      	beq.n	80052d8 <ADC_ConfigureBoostMode+0x130>
 8005248:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800524c:	d84e      	bhi.n	80052ec <ADC_ConfigureBoostMode+0x144>
 800524e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005252:	d03d      	beq.n	80052d0 <ADC_ConfigureBoostMode+0x128>
 8005254:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005258:	d848      	bhi.n	80052ec <ADC_ConfigureBoostMode+0x144>
 800525a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800525e:	d033      	beq.n	80052c8 <ADC_ConfigureBoostMode+0x120>
 8005260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005264:	d842      	bhi.n	80052ec <ADC_ConfigureBoostMode+0x144>
 8005266:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800526a:	d029      	beq.n	80052c0 <ADC_ConfigureBoostMode+0x118>
 800526c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005270:	d83c      	bhi.n	80052ec <ADC_ConfigureBoostMode+0x144>
 8005272:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005276:	d01a      	beq.n	80052ae <ADC_ConfigureBoostMode+0x106>
 8005278:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800527c:	d836      	bhi.n	80052ec <ADC_ConfigureBoostMode+0x144>
 800527e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005282:	d014      	beq.n	80052ae <ADC_ConfigureBoostMode+0x106>
 8005284:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005288:	d830      	bhi.n	80052ec <ADC_ConfigureBoostMode+0x144>
 800528a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800528e:	d00e      	beq.n	80052ae <ADC_ConfigureBoostMode+0x106>
 8005290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005294:	d82a      	bhi.n	80052ec <ADC_ConfigureBoostMode+0x144>
 8005296:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800529a:	d008      	beq.n	80052ae <ADC_ConfigureBoostMode+0x106>
 800529c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80052a0:	d824      	bhi.n	80052ec <ADC_ConfigureBoostMode+0x144>
 80052a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052a6:	d002      	beq.n	80052ae <ADC_ConfigureBoostMode+0x106>
 80052a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052ac:	d11e      	bne.n	80052ec <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	0c9b      	lsrs	r3, r3, #18
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	60fb      	str	r3, [r7, #12]
        break;
 80052be:	e016      	b.n	80052ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	60fb      	str	r3, [r7, #12]
        break;
 80052c6:	e012      	b.n	80052ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	60fb      	str	r3, [r7, #12]
        break;
 80052ce:	e00e      	b.n	80052ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	60fb      	str	r3, [r7, #12]
        break;
 80052d6:	e00a      	b.n	80052ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	09db      	lsrs	r3, r3, #7
 80052dc:	60fb      	str	r3, [r7, #12]
        break;
 80052de:	e006      	b.n	80052ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	60fb      	str	r3, [r7, #12]
        break;
 80052e6:	e002      	b.n	80052ee <ADC_ConfigureBoostMode+0x146>
        break;
 80052e8:	bf00      	nop
 80052ea:	e000      	b.n	80052ee <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80052ec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80052ee:	f7ff f8a9 	bl	8004444 <HAL_GetREVID>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d815      	bhi.n	8005328 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a2b      	ldr	r2, [pc, #172]	; (80053ac <ADC_ConfigureBoostMode+0x204>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d908      	bls.n	8005316 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005312:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005314:	e03e      	b.n	8005394 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005324:	609a      	str	r2, [r3, #8]
}
 8005326:	e035      	b.n	8005394 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <ADC_ConfigureBoostMode+0x208>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d808      	bhi.n	8005348 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005344:	609a      	str	r2, [r3, #8]
}
 8005346:	e025      	b.n	8005394 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4a1a      	ldr	r2, [pc, #104]	; (80053b4 <ADC_ConfigureBoostMode+0x20c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d80a      	bhi.n	8005366 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	e016      	b.n	8005394 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <ADC_ConfigureBoostMode+0x210>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d80a      	bhi.n	8005384 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005380:	609a      	str	r2, [r3, #8]
}
 8005382:	e007      	b.n	8005394 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005392:	609a      	str	r2, [r3, #8]
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40022000 	.word	0x40022000
 80053a0:	40022100 	.word	0x40022100
 80053a4:	40022300 	.word	0x40022300
 80053a8:	58026300 	.word	0x58026300
 80053ac:	01312d00 	.word	0x01312d00
 80053b0:	005f5e10 	.word	0x005f5e10
 80053b4:	00bebc20 	.word	0x00bebc20
 80053b8:	017d7840 	.word	0x017d7840

080053bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <__NVIC_SetPriorityGrouping+0x40>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053d8:	4013      	ands	r3, r2
 80053da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <__NVIC_SetPriorityGrouping+0x44>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ea:	4a04      	ldr	r2, [pc, #16]	; (80053fc <__NVIC_SetPriorityGrouping+0x40>)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	60d3      	str	r3, [r2, #12]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	e000ed00 	.word	0xe000ed00
 8005400:	05fa0000 	.word	0x05fa0000

08005404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <__NVIC_GetPriorityGrouping+0x18>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	0a1b      	lsrs	r3, r3, #8
 800540e:	f003 0307 	and.w	r3, r3, #7
}
 8005412:	4618      	mov	r0, r3
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	e000ed00 	.word	0xe000ed00

08005420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800542a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800542e:	2b00      	cmp	r3, #0
 8005430:	db0b      	blt.n	800544a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	f003 021f 	and.w	r2, r3, #31
 8005438:	4907      	ldr	r1, [pc, #28]	; (8005458 <__NVIC_EnableIRQ+0x38>)
 800543a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2001      	movs	r0, #1
 8005442:	fa00 f202 	lsl.w	r2, r0, r2
 8005446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	e000e100 	.word	0xe000e100

0800545c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	6039      	str	r1, [r7, #0]
 8005466:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800546c:	2b00      	cmp	r3, #0
 800546e:	db0a      	blt.n	8005486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	490c      	ldr	r1, [pc, #48]	; (80054a8 <__NVIC_SetPriority+0x4c>)
 8005476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800547a:	0112      	lsls	r2, r2, #4
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	440b      	add	r3, r1
 8005480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005484:	e00a      	b.n	800549c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	4908      	ldr	r1, [pc, #32]	; (80054ac <__NVIC_SetPriority+0x50>)
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	3b04      	subs	r3, #4
 8005494:	0112      	lsls	r2, r2, #4
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	440b      	add	r3, r1
 800549a:	761a      	strb	r2, [r3, #24]
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	e000e100 	.word	0xe000e100
 80054ac:	e000ed00 	.word	0xe000ed00

080054b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b089      	sub	sp, #36	; 0x24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f1c3 0307 	rsb	r3, r3, #7
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	bf28      	it	cs
 80054ce:	2304      	movcs	r3, #4
 80054d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d902      	bls.n	80054e0 <NVIC_EncodePriority+0x30>
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3b03      	subs	r3, #3
 80054de:	e000      	b.n	80054e2 <NVIC_EncodePriority+0x32>
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e4:	f04f 32ff 	mov.w	r2, #4294967295
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43da      	mvns	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	401a      	ands	r2, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054f8:	f04f 31ff 	mov.w	r1, #4294967295
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	43d9      	mvns	r1, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005508:	4313      	orrs	r3, r2
         );
}
 800550a:	4618      	mov	r0, r3
 800550c:	3724      	adds	r7, #36	; 0x24
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005528:	d301      	bcc.n	800552e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800552a:	2301      	movs	r3, #1
 800552c:	e00f      	b.n	800554e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <SysTick_Config+0x40>)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3b01      	subs	r3, #1
 8005534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005536:	210f      	movs	r1, #15
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	f7ff ff8e 	bl	800545c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <SysTick_Config+0x40>)
 8005542:	2200      	movs	r2, #0
 8005544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005546:	4b04      	ldr	r3, [pc, #16]	; (8005558 <SysTick_Config+0x40>)
 8005548:	2207      	movs	r2, #7
 800554a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	e000e010 	.word	0xe000e010

0800555c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff ff29 	bl	80053bc <__NVIC_SetPriorityGrouping>
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	4603      	mov	r3, r0
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005580:	f7ff ff40 	bl	8005404 <__NVIC_GetPriorityGrouping>
 8005584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	6978      	ldr	r0, [r7, #20]
 800558c:	f7ff ff90 	bl	80054b0 <NVIC_EncodePriority>
 8005590:	4602      	mov	r2, r0
 8005592:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff ff5f 	bl	800545c <__NVIC_SetPriority>
}
 800559e:	bf00      	nop
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	4603      	mov	r3, r0
 80055ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff ff33 	bl	8005420 <__NVIC_EnableIRQ>
}
 80055ba:	bf00      	nop
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff ffa4 	bl	8005518 <SysTick_Config>
 80055d0:	4603      	mov	r3, r0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80055e4:	f7fe fefe 	bl	80043e4 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e316      	b.n	8005c22 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a66      	ldr	r2, [pc, #408]	; (8005794 <HAL_DMA_Init+0x1b8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d04a      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a65      	ldr	r2, [pc, #404]	; (8005798 <HAL_DMA_Init+0x1bc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d045      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a63      	ldr	r2, [pc, #396]	; (800579c <HAL_DMA_Init+0x1c0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d040      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a62      	ldr	r2, [pc, #392]	; (80057a0 <HAL_DMA_Init+0x1c4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d03b      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a60      	ldr	r2, [pc, #384]	; (80057a4 <HAL_DMA_Init+0x1c8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d036      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a5f      	ldr	r2, [pc, #380]	; (80057a8 <HAL_DMA_Init+0x1cc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d031      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a5d      	ldr	r2, [pc, #372]	; (80057ac <HAL_DMA_Init+0x1d0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d02c      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a5c      	ldr	r2, [pc, #368]	; (80057b0 <HAL_DMA_Init+0x1d4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d027      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a5a      	ldr	r2, [pc, #360]	; (80057b4 <HAL_DMA_Init+0x1d8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d022      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a59      	ldr	r2, [pc, #356]	; (80057b8 <HAL_DMA_Init+0x1dc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d01d      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a57      	ldr	r2, [pc, #348]	; (80057bc <HAL_DMA_Init+0x1e0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d018      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a56      	ldr	r2, [pc, #344]	; (80057c0 <HAL_DMA_Init+0x1e4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a54      	ldr	r2, [pc, #336]	; (80057c4 <HAL_DMA_Init+0x1e8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a53      	ldr	r2, [pc, #332]	; (80057c8 <HAL_DMA_Init+0x1ec>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a51      	ldr	r2, [pc, #324]	; (80057cc <HAL_DMA_Init+0x1f0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_DMA_Init+0xb8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a50      	ldr	r2, [pc, #320]	; (80057d0 <HAL_DMA_Init+0x1f4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d101      	bne.n	8005698 <HAL_DMA_Init+0xbc>
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <HAL_DMA_Init+0xbe>
 8005698:	2300      	movs	r3, #0
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 813b 	beq.w	8005916 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a37      	ldr	r2, [pc, #220]	; (8005794 <HAL_DMA_Init+0x1b8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d04a      	beq.n	8005750 <HAL_DMA_Init+0x174>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a36      	ldr	r2, [pc, #216]	; (8005798 <HAL_DMA_Init+0x1bc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d045      	beq.n	8005750 <HAL_DMA_Init+0x174>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a34      	ldr	r2, [pc, #208]	; (800579c <HAL_DMA_Init+0x1c0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d040      	beq.n	8005750 <HAL_DMA_Init+0x174>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a33      	ldr	r2, [pc, #204]	; (80057a0 <HAL_DMA_Init+0x1c4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d03b      	beq.n	8005750 <HAL_DMA_Init+0x174>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a31      	ldr	r2, [pc, #196]	; (80057a4 <HAL_DMA_Init+0x1c8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d036      	beq.n	8005750 <HAL_DMA_Init+0x174>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a30      	ldr	r2, [pc, #192]	; (80057a8 <HAL_DMA_Init+0x1cc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d031      	beq.n	8005750 <HAL_DMA_Init+0x174>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2e      	ldr	r2, [pc, #184]	; (80057ac <HAL_DMA_Init+0x1d0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d02c      	beq.n	8005750 <HAL_DMA_Init+0x174>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2d      	ldr	r2, [pc, #180]	; (80057b0 <HAL_DMA_Init+0x1d4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d027      	beq.n	8005750 <HAL_DMA_Init+0x174>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2b      	ldr	r2, [pc, #172]	; (80057b4 <HAL_DMA_Init+0x1d8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d022      	beq.n	8005750 <HAL_DMA_Init+0x174>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a2a      	ldr	r2, [pc, #168]	; (80057b8 <HAL_DMA_Init+0x1dc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d01d      	beq.n	8005750 <HAL_DMA_Init+0x174>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a28      	ldr	r2, [pc, #160]	; (80057bc <HAL_DMA_Init+0x1e0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d018      	beq.n	8005750 <HAL_DMA_Init+0x174>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a27      	ldr	r2, [pc, #156]	; (80057c0 <HAL_DMA_Init+0x1e4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d013      	beq.n	8005750 <HAL_DMA_Init+0x174>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a25      	ldr	r2, [pc, #148]	; (80057c4 <HAL_DMA_Init+0x1e8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00e      	beq.n	8005750 <HAL_DMA_Init+0x174>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a24      	ldr	r2, [pc, #144]	; (80057c8 <HAL_DMA_Init+0x1ec>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d009      	beq.n	8005750 <HAL_DMA_Init+0x174>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a22      	ldr	r2, [pc, #136]	; (80057cc <HAL_DMA_Init+0x1f0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <HAL_DMA_Init+0x174>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a21      	ldr	r2, [pc, #132]	; (80057d0 <HAL_DMA_Init+0x1f4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d108      	bne.n	8005762 <HAL_DMA_Init+0x186>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e007      	b.n	8005772 <HAL_DMA_Init+0x196>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005772:	e02f      	b.n	80057d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005774:	f7fe fe36 	bl	80043e4 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b05      	cmp	r3, #5
 8005780:	d928      	bls.n	80057d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2203      	movs	r2, #3
 800578c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e246      	b.n	8005c22 <HAL_DMA_Init+0x646>
 8005794:	40020010 	.word	0x40020010
 8005798:	40020028 	.word	0x40020028
 800579c:	40020040 	.word	0x40020040
 80057a0:	40020058 	.word	0x40020058
 80057a4:	40020070 	.word	0x40020070
 80057a8:	40020088 	.word	0x40020088
 80057ac:	400200a0 	.word	0x400200a0
 80057b0:	400200b8 	.word	0x400200b8
 80057b4:	40020410 	.word	0x40020410
 80057b8:	40020428 	.word	0x40020428
 80057bc:	40020440 	.word	0x40020440
 80057c0:	40020458 	.word	0x40020458
 80057c4:	40020470 	.word	0x40020470
 80057c8:	40020488 	.word	0x40020488
 80057cc:	400204a0 	.word	0x400204a0
 80057d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1c8      	bne.n	8005774 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4b83      	ldr	r3, [pc, #524]	; (80059fc <HAL_DMA_Init+0x420>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80057fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005806:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005812:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b04      	cmp	r3, #4
 8005826:	d107      	bne.n	8005838 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	4313      	orrs	r3, r2
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005838:	4b71      	ldr	r3, [pc, #452]	; (8005a00 <HAL_DMA_Init+0x424>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4b71      	ldr	r3, [pc, #452]	; (8005a04 <HAL_DMA_Init+0x428>)
 800583e:	4013      	ands	r3, r2
 8005840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005844:	d328      	bcc.n	8005898 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b28      	cmp	r3, #40	; 0x28
 800584c:	d903      	bls.n	8005856 <HAL_DMA_Init+0x27a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b2e      	cmp	r3, #46	; 0x2e
 8005854:	d917      	bls.n	8005886 <HAL_DMA_Init+0x2aa>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b3e      	cmp	r3, #62	; 0x3e
 800585c:	d903      	bls.n	8005866 <HAL_DMA_Init+0x28a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b42      	cmp	r3, #66	; 0x42
 8005864:	d90f      	bls.n	8005886 <HAL_DMA_Init+0x2aa>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b46      	cmp	r3, #70	; 0x46
 800586c:	d903      	bls.n	8005876 <HAL_DMA_Init+0x29a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b48      	cmp	r3, #72	; 0x48
 8005874:	d907      	bls.n	8005886 <HAL_DMA_Init+0x2aa>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b4e      	cmp	r3, #78	; 0x4e
 800587c:	d905      	bls.n	800588a <HAL_DMA_Init+0x2ae>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b52      	cmp	r3, #82	; 0x52
 8005884:	d801      	bhi.n	800588a <HAL_DMA_Init+0x2ae>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_DMA_Init+0x2b0>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005896:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d117      	bne.n	80058f2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00e      	beq.n	80058f2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f002 fb31 	bl	8007f3c <DMA_CheckFifoParam>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2240      	movs	r2, #64	; 0x40
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e197      	b.n	8005c22 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f002 fa6c 	bl	8007dd8 <DMA_CalcBaseAndBitshift>
 8005900:	4603      	mov	r3, r0
 8005902:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	223f      	movs	r2, #63	; 0x3f
 800590e:	409a      	lsls	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	609a      	str	r2, [r3, #8]
 8005914:	e0cd      	b.n	8005ab2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a3b      	ldr	r2, [pc, #236]	; (8005a08 <HAL_DMA_Init+0x42c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d022      	beq.n	8005966 <HAL_DMA_Init+0x38a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a39      	ldr	r2, [pc, #228]	; (8005a0c <HAL_DMA_Init+0x430>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01d      	beq.n	8005966 <HAL_DMA_Init+0x38a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a38      	ldr	r2, [pc, #224]	; (8005a10 <HAL_DMA_Init+0x434>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d018      	beq.n	8005966 <HAL_DMA_Init+0x38a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a36      	ldr	r2, [pc, #216]	; (8005a14 <HAL_DMA_Init+0x438>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <HAL_DMA_Init+0x38a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a35      	ldr	r2, [pc, #212]	; (8005a18 <HAL_DMA_Init+0x43c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00e      	beq.n	8005966 <HAL_DMA_Init+0x38a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a33      	ldr	r2, [pc, #204]	; (8005a1c <HAL_DMA_Init+0x440>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d009      	beq.n	8005966 <HAL_DMA_Init+0x38a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a32      	ldr	r2, [pc, #200]	; (8005a20 <HAL_DMA_Init+0x444>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d004      	beq.n	8005966 <HAL_DMA_Init+0x38a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a30      	ldr	r2, [pc, #192]	; (8005a24 <HAL_DMA_Init+0x448>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <HAL_DMA_Init+0x38e>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <HAL_DMA_Init+0x390>
 800596a:	2300      	movs	r3, #0
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8097 	beq.w	8005aa0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <HAL_DMA_Init+0x42c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d021      	beq.n	80059c0 <HAL_DMA_Init+0x3e4>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <HAL_DMA_Init+0x430>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01c      	beq.n	80059c0 <HAL_DMA_Init+0x3e4>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <HAL_DMA_Init+0x434>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d017      	beq.n	80059c0 <HAL_DMA_Init+0x3e4>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <HAL_DMA_Init+0x438>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d012      	beq.n	80059c0 <HAL_DMA_Init+0x3e4>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <HAL_DMA_Init+0x43c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00d      	beq.n	80059c0 <HAL_DMA_Init+0x3e4>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <HAL_DMA_Init+0x440>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d008      	beq.n	80059c0 <HAL_DMA_Init+0x3e4>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <HAL_DMA_Init+0x444>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <HAL_DMA_Init+0x3e4>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <HAL_DMA_Init+0x448>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_DMA_Init+0x44c>)
 80059de:	4013      	ands	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b40      	cmp	r3, #64	; 0x40
 80059e8:	d020      	beq.n	8005a2c <HAL_DMA_Init+0x450>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b80      	cmp	r3, #128	; 0x80
 80059f0:	d102      	bne.n	80059f8 <HAL_DMA_Init+0x41c>
 80059f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059f6:	e01a      	b.n	8005a2e <HAL_DMA_Init+0x452>
 80059f8:	2300      	movs	r3, #0
 80059fa:	e018      	b.n	8005a2e <HAL_DMA_Init+0x452>
 80059fc:	fe10803f 	.word	0xfe10803f
 8005a00:	5c001000 	.word	0x5c001000
 8005a04:	ffff0000 	.word	0xffff0000
 8005a08:	58025408 	.word	0x58025408
 8005a0c:	5802541c 	.word	0x5802541c
 8005a10:	58025430 	.word	0x58025430
 8005a14:	58025444 	.word	0x58025444
 8005a18:	58025458 	.word	0x58025458
 8005a1c:	5802546c 	.word	0x5802546c
 8005a20:	58025480 	.word	0x58025480
 8005a24:	58025494 	.word	0x58025494
 8005a28:	fffe000f 	.word	0xfffe000f
 8005a2c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	68d2      	ldr	r2, [r2, #12]
 8005a32:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a5c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	4b6e      	ldr	r3, [pc, #440]	; (8005c2c <HAL_DMA_Init+0x650>)
 8005a74:	4413      	add	r3, r2
 8005a76:	4a6e      	ldr	r2, [pc, #440]	; (8005c30 <HAL_DMA_Init+0x654>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	009a      	lsls	r2, r3, #2
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f002 f9a7 	bl	8007dd8 <DMA_CalcBaseAndBitshift>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2201      	movs	r2, #1
 8005a98:	409a      	lsls	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	e008      	b.n	8005ab2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2240      	movs	r2, #64	; 0x40
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e0b7      	b.n	8005c22 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a5f      	ldr	r2, [pc, #380]	; (8005c34 <HAL_DMA_Init+0x658>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d072      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a5d      	ldr	r2, [pc, #372]	; (8005c38 <HAL_DMA_Init+0x65c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d06d      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a5c      	ldr	r2, [pc, #368]	; (8005c3c <HAL_DMA_Init+0x660>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d068      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a5a      	ldr	r2, [pc, #360]	; (8005c40 <HAL_DMA_Init+0x664>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d063      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a59      	ldr	r2, [pc, #356]	; (8005c44 <HAL_DMA_Init+0x668>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d05e      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a57      	ldr	r2, [pc, #348]	; (8005c48 <HAL_DMA_Init+0x66c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d059      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a56      	ldr	r2, [pc, #344]	; (8005c4c <HAL_DMA_Init+0x670>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d054      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a54      	ldr	r2, [pc, #336]	; (8005c50 <HAL_DMA_Init+0x674>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d04f      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a53      	ldr	r2, [pc, #332]	; (8005c54 <HAL_DMA_Init+0x678>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d04a      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a51      	ldr	r2, [pc, #324]	; (8005c58 <HAL_DMA_Init+0x67c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d045      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a50      	ldr	r2, [pc, #320]	; (8005c5c <HAL_DMA_Init+0x680>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d040      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a4e      	ldr	r2, [pc, #312]	; (8005c60 <HAL_DMA_Init+0x684>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d03b      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a4d      	ldr	r2, [pc, #308]	; (8005c64 <HAL_DMA_Init+0x688>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d036      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a4b      	ldr	r2, [pc, #300]	; (8005c68 <HAL_DMA_Init+0x68c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d031      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a4a      	ldr	r2, [pc, #296]	; (8005c6c <HAL_DMA_Init+0x690>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d02c      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a48      	ldr	r2, [pc, #288]	; (8005c70 <HAL_DMA_Init+0x694>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d027      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a47      	ldr	r2, [pc, #284]	; (8005c74 <HAL_DMA_Init+0x698>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d022      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a45      	ldr	r2, [pc, #276]	; (8005c78 <HAL_DMA_Init+0x69c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01d      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a44      	ldr	r2, [pc, #272]	; (8005c7c <HAL_DMA_Init+0x6a0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d018      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a42      	ldr	r2, [pc, #264]	; (8005c80 <HAL_DMA_Init+0x6a4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a41      	ldr	r2, [pc, #260]	; (8005c84 <HAL_DMA_Init+0x6a8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3f      	ldr	r2, [pc, #252]	; (8005c88 <HAL_DMA_Init+0x6ac>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3e      	ldr	r2, [pc, #248]	; (8005c8c <HAL_DMA_Init+0x6b0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_DMA_Init+0x5c6>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a3c      	ldr	r2, [pc, #240]	; (8005c90 <HAL_DMA_Init+0x6b4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d101      	bne.n	8005ba6 <HAL_DMA_Init+0x5ca>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <HAL_DMA_Init+0x5cc>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d032      	beq.n	8005c12 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f002 fa41 	bl	8008034 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b80      	cmp	r3, #128	; 0x80
 8005bb8:	d102      	bne.n	8005bc0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bd4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d010      	beq.n	8005c00 <HAL_DMA_Init+0x624>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d80c      	bhi.n	8005c00 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f002 fabe 	bl	8008168 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	e008      	b.n	8005c12 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	a7fdabf8 	.word	0xa7fdabf8
 8005c30:	cccccccd 	.word	0xcccccccd
 8005c34:	40020010 	.word	0x40020010
 8005c38:	40020028 	.word	0x40020028
 8005c3c:	40020040 	.word	0x40020040
 8005c40:	40020058 	.word	0x40020058
 8005c44:	40020070 	.word	0x40020070
 8005c48:	40020088 	.word	0x40020088
 8005c4c:	400200a0 	.word	0x400200a0
 8005c50:	400200b8 	.word	0x400200b8
 8005c54:	40020410 	.word	0x40020410
 8005c58:	40020428 	.word	0x40020428
 8005c5c:	40020440 	.word	0x40020440
 8005c60:	40020458 	.word	0x40020458
 8005c64:	40020470 	.word	0x40020470
 8005c68:	40020488 	.word	0x40020488
 8005c6c:	400204a0 	.word	0x400204a0
 8005c70:	400204b8 	.word	0x400204b8
 8005c74:	58025408 	.word	0x58025408
 8005c78:	5802541c 	.word	0x5802541c
 8005c7c:	58025430 	.word	0x58025430
 8005c80:	58025444 	.word	0x58025444
 8005c84:	58025458 	.word	0x58025458
 8005c88:	5802546c 	.word	0x5802546c
 8005c8c:	58025480 	.word	0x58025480
 8005c90:	58025494 	.word	0x58025494

08005c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e226      	b.n	80060fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_DMA_Start_IT+0x2a>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e21f      	b.n	80060fe <HAL_DMA_Start_IT+0x46a>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	f040 820a 	bne.w	80060e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a68      	ldr	r2, [pc, #416]	; (8005e88 <HAL_DMA_Start_IT+0x1f4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d04a      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a66      	ldr	r2, [pc, #408]	; (8005e8c <HAL_DMA_Start_IT+0x1f8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d045      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a65      	ldr	r2, [pc, #404]	; (8005e90 <HAL_DMA_Start_IT+0x1fc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d040      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a63      	ldr	r2, [pc, #396]	; (8005e94 <HAL_DMA_Start_IT+0x200>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d03b      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a62      	ldr	r2, [pc, #392]	; (8005e98 <HAL_DMA_Start_IT+0x204>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d036      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a60      	ldr	r2, [pc, #384]	; (8005e9c <HAL_DMA_Start_IT+0x208>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d031      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a5f      	ldr	r2, [pc, #380]	; (8005ea0 <HAL_DMA_Start_IT+0x20c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d02c      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a5d      	ldr	r2, [pc, #372]	; (8005ea4 <HAL_DMA_Start_IT+0x210>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d027      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a5c      	ldr	r2, [pc, #368]	; (8005ea8 <HAL_DMA_Start_IT+0x214>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d022      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a5a      	ldr	r2, [pc, #360]	; (8005eac <HAL_DMA_Start_IT+0x218>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01d      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a59      	ldr	r2, [pc, #356]	; (8005eb0 <HAL_DMA_Start_IT+0x21c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d018      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a57      	ldr	r2, [pc, #348]	; (8005eb4 <HAL_DMA_Start_IT+0x220>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a56      	ldr	r2, [pc, #344]	; (8005eb8 <HAL_DMA_Start_IT+0x224>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a54      	ldr	r2, [pc, #336]	; (8005ebc <HAL_DMA_Start_IT+0x228>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a53      	ldr	r2, [pc, #332]	; (8005ec0 <HAL_DMA_Start_IT+0x22c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a51      	ldr	r2, [pc, #324]	; (8005ec4 <HAL_DMA_Start_IT+0x230>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d108      	bne.n	8005d94 <HAL_DMA_Start_IT+0x100>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e007      	b.n	8005da4 <HAL_DMA_Start_IT+0x110>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f001 fe68 	bl	8007a80 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a34      	ldr	r2, [pc, #208]	; (8005e88 <HAL_DMA_Start_IT+0x1f4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d04a      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a33      	ldr	r2, [pc, #204]	; (8005e8c <HAL_DMA_Start_IT+0x1f8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d045      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a31      	ldr	r2, [pc, #196]	; (8005e90 <HAL_DMA_Start_IT+0x1fc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d040      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a30      	ldr	r2, [pc, #192]	; (8005e94 <HAL_DMA_Start_IT+0x200>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d03b      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2e      	ldr	r2, [pc, #184]	; (8005e98 <HAL_DMA_Start_IT+0x204>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d036      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2d      	ldr	r2, [pc, #180]	; (8005e9c <HAL_DMA_Start_IT+0x208>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d031      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <HAL_DMA_Start_IT+0x20c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d02c      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <HAL_DMA_Start_IT+0x210>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d027      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <HAL_DMA_Start_IT+0x214>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d022      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a27      	ldr	r2, [pc, #156]	; (8005eac <HAL_DMA_Start_IT+0x218>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d01d      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a25      	ldr	r2, [pc, #148]	; (8005eb0 <HAL_DMA_Start_IT+0x21c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d018      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a24      	ldr	r2, [pc, #144]	; (8005eb4 <HAL_DMA_Start_IT+0x220>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d013      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <HAL_DMA_Start_IT+0x224>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00e      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <HAL_DMA_Start_IT+0x228>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d009      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1f      	ldr	r2, [pc, #124]	; (8005ec0 <HAL_DMA_Start_IT+0x22c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <HAL_DMA_Start_IT+0x230>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d101      	bne.n	8005e54 <HAL_DMA_Start_IT+0x1c0>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <HAL_DMA_Start_IT+0x1c2>
 8005e54:	2300      	movs	r3, #0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d036      	beq.n	8005ec8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f023 021e 	bic.w	r2, r3, #30
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0216 	orr.w	r2, r2, #22
 8005e6c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d03e      	beq.n	8005ef4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0208 	orr.w	r2, r2, #8
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e035      	b.n	8005ef4 <HAL_DMA_Start_IT+0x260>
 8005e88:	40020010 	.word	0x40020010
 8005e8c:	40020028 	.word	0x40020028
 8005e90:	40020040 	.word	0x40020040
 8005e94:	40020058 	.word	0x40020058
 8005e98:	40020070 	.word	0x40020070
 8005e9c:	40020088 	.word	0x40020088
 8005ea0:	400200a0 	.word	0x400200a0
 8005ea4:	400200b8 	.word	0x400200b8
 8005ea8:	40020410 	.word	0x40020410
 8005eac:	40020428 	.word	0x40020428
 8005eb0:	40020440 	.word	0x40020440
 8005eb4:	40020458 	.word	0x40020458
 8005eb8:	40020470 	.word	0x40020470
 8005ebc:	40020488 	.word	0x40020488
 8005ec0:	400204a0 	.word	0x400204a0
 8005ec4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f023 020e 	bic.w	r2, r3, #14
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 020a 	orr.w	r2, r2, #10
 8005eda:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0204 	orr.w	r2, r2, #4
 8005ef2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a83      	ldr	r2, [pc, #524]	; (8006108 <HAL_DMA_Start_IT+0x474>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d072      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a82      	ldr	r2, [pc, #520]	; (800610c <HAL_DMA_Start_IT+0x478>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d06d      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a80      	ldr	r2, [pc, #512]	; (8006110 <HAL_DMA_Start_IT+0x47c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d068      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a7f      	ldr	r2, [pc, #508]	; (8006114 <HAL_DMA_Start_IT+0x480>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d063      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a7d      	ldr	r2, [pc, #500]	; (8006118 <HAL_DMA_Start_IT+0x484>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d05e      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a7c      	ldr	r2, [pc, #496]	; (800611c <HAL_DMA_Start_IT+0x488>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d059      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7a      	ldr	r2, [pc, #488]	; (8006120 <HAL_DMA_Start_IT+0x48c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d054      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a79      	ldr	r2, [pc, #484]	; (8006124 <HAL_DMA_Start_IT+0x490>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d04f      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a77      	ldr	r2, [pc, #476]	; (8006128 <HAL_DMA_Start_IT+0x494>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d04a      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a76      	ldr	r2, [pc, #472]	; (800612c <HAL_DMA_Start_IT+0x498>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d045      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a74      	ldr	r2, [pc, #464]	; (8006130 <HAL_DMA_Start_IT+0x49c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d040      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a73      	ldr	r2, [pc, #460]	; (8006134 <HAL_DMA_Start_IT+0x4a0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d03b      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a71      	ldr	r2, [pc, #452]	; (8006138 <HAL_DMA_Start_IT+0x4a4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d036      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a70      	ldr	r2, [pc, #448]	; (800613c <HAL_DMA_Start_IT+0x4a8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d031      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a6e      	ldr	r2, [pc, #440]	; (8006140 <HAL_DMA_Start_IT+0x4ac>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d02c      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a6d      	ldr	r2, [pc, #436]	; (8006144 <HAL_DMA_Start_IT+0x4b0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d027      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a6b      	ldr	r2, [pc, #428]	; (8006148 <HAL_DMA_Start_IT+0x4b4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a6a      	ldr	r2, [pc, #424]	; (800614c <HAL_DMA_Start_IT+0x4b8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a68      	ldr	r2, [pc, #416]	; (8006150 <HAL_DMA_Start_IT+0x4bc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a67      	ldr	r2, [pc, #412]	; (8006154 <HAL_DMA_Start_IT+0x4c0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a65      	ldr	r2, [pc, #404]	; (8006158 <HAL_DMA_Start_IT+0x4c4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a64      	ldr	r2, [pc, #400]	; (800615c <HAL_DMA_Start_IT+0x4c8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a62      	ldr	r2, [pc, #392]	; (8006160 <HAL_DMA_Start_IT+0x4cc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a61      	ldr	r2, [pc, #388]	; (8006164 <HAL_DMA_Start_IT+0x4d0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d101      	bne.n	8005fe8 <HAL_DMA_Start_IT+0x354>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <HAL_DMA_Start_IT+0x356>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01a      	beq.n	8006024 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800600a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006022:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a37      	ldr	r2, [pc, #220]	; (8006108 <HAL_DMA_Start_IT+0x474>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d04a      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a36      	ldr	r2, [pc, #216]	; (800610c <HAL_DMA_Start_IT+0x478>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d045      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a34      	ldr	r2, [pc, #208]	; (8006110 <HAL_DMA_Start_IT+0x47c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d040      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a33      	ldr	r2, [pc, #204]	; (8006114 <HAL_DMA_Start_IT+0x480>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d03b      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a31      	ldr	r2, [pc, #196]	; (8006118 <HAL_DMA_Start_IT+0x484>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d036      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a30      	ldr	r2, [pc, #192]	; (800611c <HAL_DMA_Start_IT+0x488>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d031      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a2e      	ldr	r2, [pc, #184]	; (8006120 <HAL_DMA_Start_IT+0x48c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d02c      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a2d      	ldr	r2, [pc, #180]	; (8006124 <HAL_DMA_Start_IT+0x490>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d027      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2b      	ldr	r2, [pc, #172]	; (8006128 <HAL_DMA_Start_IT+0x494>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2a      	ldr	r2, [pc, #168]	; (800612c <HAL_DMA_Start_IT+0x498>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d01d      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a28      	ldr	r2, [pc, #160]	; (8006130 <HAL_DMA_Start_IT+0x49c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a27      	ldr	r2, [pc, #156]	; (8006134 <HAL_DMA_Start_IT+0x4a0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a25      	ldr	r2, [pc, #148]	; (8006138 <HAL_DMA_Start_IT+0x4a4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a24      	ldr	r2, [pc, #144]	; (800613c <HAL_DMA_Start_IT+0x4a8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_DMA_Start_IT+0x4ac>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a21      	ldr	r2, [pc, #132]	; (8006144 <HAL_DMA_Start_IT+0x4b0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d108      	bne.n	80060d6 <HAL_DMA_Start_IT+0x442>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e012      	b.n	80060fc <HAL_DMA_Start_IT+0x468>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e009      	b.n	80060fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40020010 	.word	0x40020010
 800610c:	40020028 	.word	0x40020028
 8006110:	40020040 	.word	0x40020040
 8006114:	40020058 	.word	0x40020058
 8006118:	40020070 	.word	0x40020070
 800611c:	40020088 	.word	0x40020088
 8006120:	400200a0 	.word	0x400200a0
 8006124:	400200b8 	.word	0x400200b8
 8006128:	40020410 	.word	0x40020410
 800612c:	40020428 	.word	0x40020428
 8006130:	40020440 	.word	0x40020440
 8006134:	40020458 	.word	0x40020458
 8006138:	40020470 	.word	0x40020470
 800613c:	40020488 	.word	0x40020488
 8006140:	400204a0 	.word	0x400204a0
 8006144:	400204b8 	.word	0x400204b8
 8006148:	58025408 	.word	0x58025408
 800614c:	5802541c 	.word	0x5802541c
 8006150:	58025430 	.word	0x58025430
 8006154:	58025444 	.word	0x58025444
 8006158:	58025458 	.word	0x58025458
 800615c:	5802546c 	.word	0x5802546c
 8006160:	58025480 	.word	0x58025480
 8006164:	58025494 	.word	0x58025494

08006168 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006170:	f7fe f938 	bl	80043e4 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e2dc      	b.n	800673a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d008      	beq.n	800619e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e2cd      	b.n	800673a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a76      	ldr	r2, [pc, #472]	; (800637c <HAL_DMA_Abort+0x214>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d04a      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a74      	ldr	r2, [pc, #464]	; (8006380 <HAL_DMA_Abort+0x218>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d045      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a73      	ldr	r2, [pc, #460]	; (8006384 <HAL_DMA_Abort+0x21c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d040      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a71      	ldr	r2, [pc, #452]	; (8006388 <HAL_DMA_Abort+0x220>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d03b      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a70      	ldr	r2, [pc, #448]	; (800638c <HAL_DMA_Abort+0x224>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d036      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a6e      	ldr	r2, [pc, #440]	; (8006390 <HAL_DMA_Abort+0x228>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d031      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a6d      	ldr	r2, [pc, #436]	; (8006394 <HAL_DMA_Abort+0x22c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d02c      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a6b      	ldr	r2, [pc, #428]	; (8006398 <HAL_DMA_Abort+0x230>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d027      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a6a      	ldr	r2, [pc, #424]	; (800639c <HAL_DMA_Abort+0x234>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d022      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a68      	ldr	r2, [pc, #416]	; (80063a0 <HAL_DMA_Abort+0x238>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01d      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a67      	ldr	r2, [pc, #412]	; (80063a4 <HAL_DMA_Abort+0x23c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d018      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a65      	ldr	r2, [pc, #404]	; (80063a8 <HAL_DMA_Abort+0x240>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a64      	ldr	r2, [pc, #400]	; (80063ac <HAL_DMA_Abort+0x244>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00e      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a62      	ldr	r2, [pc, #392]	; (80063b0 <HAL_DMA_Abort+0x248>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d009      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a61      	ldr	r2, [pc, #388]	; (80063b4 <HAL_DMA_Abort+0x24c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a5f      	ldr	r2, [pc, #380]	; (80063b8 <HAL_DMA_Abort+0x250>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d101      	bne.n	8006242 <HAL_DMA_Abort+0xda>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <HAL_DMA_Abort+0xdc>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 021e 	bic.w	r2, r2, #30
 8006256:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006266:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e00a      	b.n	8006286 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 020e 	bic.w	r2, r2, #14
 800627e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a3c      	ldr	r2, [pc, #240]	; (800637c <HAL_DMA_Abort+0x214>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d072      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a3a      	ldr	r2, [pc, #232]	; (8006380 <HAL_DMA_Abort+0x218>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d06d      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a39      	ldr	r2, [pc, #228]	; (8006384 <HAL_DMA_Abort+0x21c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d068      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a37      	ldr	r2, [pc, #220]	; (8006388 <HAL_DMA_Abort+0x220>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d063      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a36      	ldr	r2, [pc, #216]	; (800638c <HAL_DMA_Abort+0x224>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d05e      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a34      	ldr	r2, [pc, #208]	; (8006390 <HAL_DMA_Abort+0x228>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d059      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a33      	ldr	r2, [pc, #204]	; (8006394 <HAL_DMA_Abort+0x22c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d054      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a31      	ldr	r2, [pc, #196]	; (8006398 <HAL_DMA_Abort+0x230>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d04f      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a30      	ldr	r2, [pc, #192]	; (800639c <HAL_DMA_Abort+0x234>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d04a      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <HAL_DMA_Abort+0x238>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d045      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2d      	ldr	r2, [pc, #180]	; (80063a4 <HAL_DMA_Abort+0x23c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d040      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <HAL_DMA_Abort+0x240>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d03b      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <HAL_DMA_Abort+0x244>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d036      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <HAL_DMA_Abort+0x248>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d031      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <HAL_DMA_Abort+0x24c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d02c      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <HAL_DMA_Abort+0x250>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d027      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a24      	ldr	r2, [pc, #144]	; (80063bc <HAL_DMA_Abort+0x254>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d022      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_DMA_Abort+0x258>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01d      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <HAL_DMA_Abort+0x25c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <HAL_DMA_Abort+0x260>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <HAL_DMA_Abort+0x264>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <HAL_DMA_Abort+0x268>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1b      	ldr	r2, [pc, #108]	; (80063d4 <HAL_DMA_Abort+0x26c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <HAL_DMA_Abort+0x270>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d132      	bne.n	80063dc <HAL_DMA_Abort+0x274>
 8006376:	2301      	movs	r3, #1
 8006378:	e031      	b.n	80063de <HAL_DMA_Abort+0x276>
 800637a:	bf00      	nop
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8
 80063bc:	58025408 	.word	0x58025408
 80063c0:	5802541c 	.word	0x5802541c
 80063c4:	58025430 	.word	0x58025430
 80063c8:	58025444 	.word	0x58025444
 80063cc:	58025458 	.word	0x58025458
 80063d0:	5802546c 	.word	0x5802546c
 80063d4:	58025480 	.word	0x58025480
 80063d8:	58025494 	.word	0x58025494
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a6d      	ldr	r2, [pc, #436]	; (80065ac <HAL_DMA_Abort+0x444>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d04a      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a6b      	ldr	r2, [pc, #428]	; (80065b0 <HAL_DMA_Abort+0x448>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d045      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a6a      	ldr	r2, [pc, #424]	; (80065b4 <HAL_DMA_Abort+0x44c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d040      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a68      	ldr	r2, [pc, #416]	; (80065b8 <HAL_DMA_Abort+0x450>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d03b      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a67      	ldr	r2, [pc, #412]	; (80065bc <HAL_DMA_Abort+0x454>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d036      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a65      	ldr	r2, [pc, #404]	; (80065c0 <HAL_DMA_Abort+0x458>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d031      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a64      	ldr	r2, [pc, #400]	; (80065c4 <HAL_DMA_Abort+0x45c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d02c      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a62      	ldr	r2, [pc, #392]	; (80065c8 <HAL_DMA_Abort+0x460>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d027      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a61      	ldr	r2, [pc, #388]	; (80065cc <HAL_DMA_Abort+0x464>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d022      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5f      	ldr	r2, [pc, #380]	; (80065d0 <HAL_DMA_Abort+0x468>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01d      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a5e      	ldr	r2, [pc, #376]	; (80065d4 <HAL_DMA_Abort+0x46c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d018      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a5c      	ldr	r2, [pc, #368]	; (80065d8 <HAL_DMA_Abort+0x470>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a5b      	ldr	r2, [pc, #364]	; (80065dc <HAL_DMA_Abort+0x474>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a59      	ldr	r2, [pc, #356]	; (80065e0 <HAL_DMA_Abort+0x478>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a58      	ldr	r2, [pc, #352]	; (80065e4 <HAL_DMA_Abort+0x47c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a56      	ldr	r2, [pc, #344]	; (80065e8 <HAL_DMA_Abort+0x480>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d108      	bne.n	80064a4 <HAL_DMA_Abort+0x33c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e007      	b.n	80064b4 <HAL_DMA_Abort+0x34c>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80064b4:	e013      	b.n	80064de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064b6:	f7fd ff95 	bl	80043e4 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d90c      	bls.n	80064de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2203      	movs	r2, #3
 80064ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e12d      	b.n	800673a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e5      	bne.n	80064b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2f      	ldr	r2, [pc, #188]	; (80065ac <HAL_DMA_Abort+0x444>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d04a      	beq.n	800658a <HAL_DMA_Abort+0x422>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <HAL_DMA_Abort+0x448>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d045      	beq.n	800658a <HAL_DMA_Abort+0x422>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <HAL_DMA_Abort+0x44c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d040      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <HAL_DMA_Abort+0x450>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d03b      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a29      	ldr	r2, [pc, #164]	; (80065bc <HAL_DMA_Abort+0x454>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d036      	beq.n	800658a <HAL_DMA_Abort+0x422>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <HAL_DMA_Abort+0x458>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d031      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <HAL_DMA_Abort+0x45c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d02c      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <HAL_DMA_Abort+0x460>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d027      	beq.n	800658a <HAL_DMA_Abort+0x422>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a23      	ldr	r2, [pc, #140]	; (80065cc <HAL_DMA_Abort+0x464>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d022      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <HAL_DMA_Abort+0x468>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01d      	beq.n	800658a <HAL_DMA_Abort+0x422>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a20      	ldr	r2, [pc, #128]	; (80065d4 <HAL_DMA_Abort+0x46c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d018      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <HAL_DMA_Abort+0x470>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <HAL_DMA_Abort+0x474>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_DMA_Abort+0x422>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <HAL_DMA_Abort+0x478>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <HAL_DMA_Abort+0x47c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <HAL_DMA_Abort+0x480>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d101      	bne.n	800658e <HAL_DMA_Abort+0x426>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <HAL_DMA_Abort+0x428>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d02b      	beq.n	80065ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006598:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	223f      	movs	r2, #63	; 0x3f
 80065a4:	409a      	lsls	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	609a      	str	r2, [r3, #8]
 80065aa:	e02a      	b.n	8006602 <HAL_DMA_Abort+0x49a>
 80065ac:	40020010 	.word	0x40020010
 80065b0:	40020028 	.word	0x40020028
 80065b4:	40020040 	.word	0x40020040
 80065b8:	40020058 	.word	0x40020058
 80065bc:	40020070 	.word	0x40020070
 80065c0:	40020088 	.word	0x40020088
 80065c4:	400200a0 	.word	0x400200a0
 80065c8:	400200b8 	.word	0x400200b8
 80065cc:	40020410 	.word	0x40020410
 80065d0:	40020428 	.word	0x40020428
 80065d4:	40020440 	.word	0x40020440
 80065d8:	40020458 	.word	0x40020458
 80065dc:	40020470 	.word	0x40020470
 80065e0:	40020488 	.word	0x40020488
 80065e4:	400204a0 	.word	0x400204a0
 80065e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2201      	movs	r2, #1
 80065fc:	409a      	lsls	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a4f      	ldr	r2, [pc, #316]	; (8006744 <HAL_DMA_Abort+0x5dc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d072      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a4d      	ldr	r2, [pc, #308]	; (8006748 <HAL_DMA_Abort+0x5e0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d06d      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a4c      	ldr	r2, [pc, #304]	; (800674c <HAL_DMA_Abort+0x5e4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d068      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a4a      	ldr	r2, [pc, #296]	; (8006750 <HAL_DMA_Abort+0x5e8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d063      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a49      	ldr	r2, [pc, #292]	; (8006754 <HAL_DMA_Abort+0x5ec>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d05e      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a47      	ldr	r2, [pc, #284]	; (8006758 <HAL_DMA_Abort+0x5f0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d059      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a46      	ldr	r2, [pc, #280]	; (800675c <HAL_DMA_Abort+0x5f4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d054      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a44      	ldr	r2, [pc, #272]	; (8006760 <HAL_DMA_Abort+0x5f8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d04f      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a43      	ldr	r2, [pc, #268]	; (8006764 <HAL_DMA_Abort+0x5fc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d04a      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a41      	ldr	r2, [pc, #260]	; (8006768 <HAL_DMA_Abort+0x600>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d045      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a40      	ldr	r2, [pc, #256]	; (800676c <HAL_DMA_Abort+0x604>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d040      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a3e      	ldr	r2, [pc, #248]	; (8006770 <HAL_DMA_Abort+0x608>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d03b      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a3d      	ldr	r2, [pc, #244]	; (8006774 <HAL_DMA_Abort+0x60c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d036      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a3b      	ldr	r2, [pc, #236]	; (8006778 <HAL_DMA_Abort+0x610>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d031      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a3a      	ldr	r2, [pc, #232]	; (800677c <HAL_DMA_Abort+0x614>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d02c      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a38      	ldr	r2, [pc, #224]	; (8006780 <HAL_DMA_Abort+0x618>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d027      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a37      	ldr	r2, [pc, #220]	; (8006784 <HAL_DMA_Abort+0x61c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a35      	ldr	r2, [pc, #212]	; (8006788 <HAL_DMA_Abort+0x620>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01d      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a34      	ldr	r2, [pc, #208]	; (800678c <HAL_DMA_Abort+0x624>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d018      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a32      	ldr	r2, [pc, #200]	; (8006790 <HAL_DMA_Abort+0x628>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a31      	ldr	r2, [pc, #196]	; (8006794 <HAL_DMA_Abort+0x62c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a2f      	ldr	r2, [pc, #188]	; (8006798 <HAL_DMA_Abort+0x630>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2e      	ldr	r2, [pc, #184]	; (800679c <HAL_DMA_Abort+0x634>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2c      	ldr	r2, [pc, #176]	; (80067a0 <HAL_DMA_Abort+0x638>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d101      	bne.n	80066f6 <HAL_DMA_Abort+0x58e>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <HAL_DMA_Abort+0x590>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d015      	beq.n	8006728 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006704:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00c      	beq.n	8006728 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800671c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006726:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40020010 	.word	0x40020010
 8006748:	40020028 	.word	0x40020028
 800674c:	40020040 	.word	0x40020040
 8006750:	40020058 	.word	0x40020058
 8006754:	40020070 	.word	0x40020070
 8006758:	40020088 	.word	0x40020088
 800675c:	400200a0 	.word	0x400200a0
 8006760:	400200b8 	.word	0x400200b8
 8006764:	40020410 	.word	0x40020410
 8006768:	40020428 	.word	0x40020428
 800676c:	40020440 	.word	0x40020440
 8006770:	40020458 	.word	0x40020458
 8006774:	40020470 	.word	0x40020470
 8006778:	40020488 	.word	0x40020488
 800677c:	400204a0 	.word	0x400204a0
 8006780:	400204b8 	.word	0x400204b8
 8006784:	58025408 	.word	0x58025408
 8006788:	5802541c 	.word	0x5802541c
 800678c:	58025430 	.word	0x58025430
 8006790:	58025444 	.word	0x58025444
 8006794:	58025458 	.word	0x58025458
 8006798:	5802546c 	.word	0x5802546c
 800679c:	58025480 	.word	0x58025480
 80067a0:	58025494 	.word	0x58025494

080067a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e205      	b.n	8006bc2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d004      	beq.n	80067cc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2280      	movs	r2, #128	; 0x80
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e1fa      	b.n	8006bc2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a8c      	ldr	r2, [pc, #560]	; (8006a04 <HAL_DMA_Abort_IT+0x260>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d04a      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a8b      	ldr	r2, [pc, #556]	; (8006a08 <HAL_DMA_Abort_IT+0x264>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d045      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a89      	ldr	r2, [pc, #548]	; (8006a0c <HAL_DMA_Abort_IT+0x268>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d040      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a88      	ldr	r2, [pc, #544]	; (8006a10 <HAL_DMA_Abort_IT+0x26c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d03b      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a86      	ldr	r2, [pc, #536]	; (8006a14 <HAL_DMA_Abort_IT+0x270>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d036      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a85      	ldr	r2, [pc, #532]	; (8006a18 <HAL_DMA_Abort_IT+0x274>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d031      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a83      	ldr	r2, [pc, #524]	; (8006a1c <HAL_DMA_Abort_IT+0x278>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d02c      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a82      	ldr	r2, [pc, #520]	; (8006a20 <HAL_DMA_Abort_IT+0x27c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d027      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a80      	ldr	r2, [pc, #512]	; (8006a24 <HAL_DMA_Abort_IT+0x280>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d022      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a7f      	ldr	r2, [pc, #508]	; (8006a28 <HAL_DMA_Abort_IT+0x284>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d01d      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a7d      	ldr	r2, [pc, #500]	; (8006a2c <HAL_DMA_Abort_IT+0x288>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d018      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a7c      	ldr	r2, [pc, #496]	; (8006a30 <HAL_DMA_Abort_IT+0x28c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d013      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a7a      	ldr	r2, [pc, #488]	; (8006a34 <HAL_DMA_Abort_IT+0x290>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00e      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a79      	ldr	r2, [pc, #484]	; (8006a38 <HAL_DMA_Abort_IT+0x294>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d009      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a77      	ldr	r2, [pc, #476]	; (8006a3c <HAL_DMA_Abort_IT+0x298>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a76      	ldr	r2, [pc, #472]	; (8006a40 <HAL_DMA_Abort_IT+0x29c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d101      	bne.n	8006870 <HAL_DMA_Abort_IT+0xcc>
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <HAL_DMA_Abort_IT+0xce>
 8006870:	2300      	movs	r3, #0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d065      	beq.n	8006942 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2204      	movs	r2, #4
 800687a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a60      	ldr	r2, [pc, #384]	; (8006a04 <HAL_DMA_Abort_IT+0x260>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d04a      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a5e      	ldr	r2, [pc, #376]	; (8006a08 <HAL_DMA_Abort_IT+0x264>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d045      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a5d      	ldr	r2, [pc, #372]	; (8006a0c <HAL_DMA_Abort_IT+0x268>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d040      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5b      	ldr	r2, [pc, #364]	; (8006a10 <HAL_DMA_Abort_IT+0x26c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d03b      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a5a      	ldr	r2, [pc, #360]	; (8006a14 <HAL_DMA_Abort_IT+0x270>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d036      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a58      	ldr	r2, [pc, #352]	; (8006a18 <HAL_DMA_Abort_IT+0x274>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d031      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a57      	ldr	r2, [pc, #348]	; (8006a1c <HAL_DMA_Abort_IT+0x278>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d02c      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a55      	ldr	r2, [pc, #340]	; (8006a20 <HAL_DMA_Abort_IT+0x27c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d027      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a54      	ldr	r2, [pc, #336]	; (8006a24 <HAL_DMA_Abort_IT+0x280>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d022      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a52      	ldr	r2, [pc, #328]	; (8006a28 <HAL_DMA_Abort_IT+0x284>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d01d      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a51      	ldr	r2, [pc, #324]	; (8006a2c <HAL_DMA_Abort_IT+0x288>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d018      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a4f      	ldr	r2, [pc, #316]	; (8006a30 <HAL_DMA_Abort_IT+0x28c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a4e      	ldr	r2, [pc, #312]	; (8006a34 <HAL_DMA_Abort_IT+0x290>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00e      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a4c      	ldr	r2, [pc, #304]	; (8006a38 <HAL_DMA_Abort_IT+0x294>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d009      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a4b      	ldr	r2, [pc, #300]	; (8006a3c <HAL_DMA_Abort_IT+0x298>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_DMA_Abort_IT+0x17a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a49      	ldr	r2, [pc, #292]	; (8006a40 <HAL_DMA_Abort_IT+0x29c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d108      	bne.n	8006930 <HAL_DMA_Abort_IT+0x18c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	e147      	b.n	8006bc0 <HAL_DMA_Abort_IT+0x41c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	e13e      	b.n	8006bc0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 020e 	bic.w	r2, r2, #14
 8006950:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a2b      	ldr	r2, [pc, #172]	; (8006a04 <HAL_DMA_Abort_IT+0x260>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d04a      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a29      	ldr	r2, [pc, #164]	; (8006a08 <HAL_DMA_Abort_IT+0x264>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d045      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a28      	ldr	r2, [pc, #160]	; (8006a0c <HAL_DMA_Abort_IT+0x268>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d040      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a26      	ldr	r2, [pc, #152]	; (8006a10 <HAL_DMA_Abort_IT+0x26c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d03b      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a25      	ldr	r2, [pc, #148]	; (8006a14 <HAL_DMA_Abort_IT+0x270>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d036      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a23      	ldr	r2, [pc, #140]	; (8006a18 <HAL_DMA_Abort_IT+0x274>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d031      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a22      	ldr	r2, [pc, #136]	; (8006a1c <HAL_DMA_Abort_IT+0x278>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d02c      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a20      	ldr	r2, [pc, #128]	; (8006a20 <HAL_DMA_Abort_IT+0x27c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d027      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1f      	ldr	r2, [pc, #124]	; (8006a24 <HAL_DMA_Abort_IT+0x280>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d022      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <HAL_DMA_Abort_IT+0x284>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d01d      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <HAL_DMA_Abort_IT+0x288>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d018      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1a      	ldr	r2, [pc, #104]	; (8006a30 <HAL_DMA_Abort_IT+0x28c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d013      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a19      	ldr	r2, [pc, #100]	; (8006a34 <HAL_DMA_Abort_IT+0x290>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00e      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a17      	ldr	r2, [pc, #92]	; (8006a38 <HAL_DMA_Abort_IT+0x294>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d009      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a16      	ldr	r2, [pc, #88]	; (8006a3c <HAL_DMA_Abort_IT+0x298>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d004      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x24e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a14      	ldr	r2, [pc, #80]	; (8006a40 <HAL_DMA_Abort_IT+0x29c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d128      	bne.n	8006a44 <HAL_DMA_Abort_IT+0x2a0>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e027      	b.n	8006a54 <HAL_DMA_Abort_IT+0x2b0>
 8006a04:	40020010 	.word	0x40020010
 8006a08:	40020028 	.word	0x40020028
 8006a0c:	40020040 	.word	0x40020040
 8006a10:	40020058 	.word	0x40020058
 8006a14:	40020070 	.word	0x40020070
 8006a18:	40020088 	.word	0x40020088
 8006a1c:	400200a0 	.word	0x400200a0
 8006a20:	400200b8 	.word	0x400200b8
 8006a24:	40020410 	.word	0x40020410
 8006a28:	40020428 	.word	0x40020428
 8006a2c:	40020440 	.word	0x40020440
 8006a30:	40020458 	.word	0x40020458
 8006a34:	40020470 	.word	0x40020470
 8006a38:	40020488 	.word	0x40020488
 8006a3c:	400204a0 	.word	0x400204a0
 8006a40:	400204b8 	.word	0x400204b8
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0201 	bic.w	r2, r2, #1
 8006a52:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a5c      	ldr	r2, [pc, #368]	; (8006bcc <HAL_DMA_Abort_IT+0x428>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d072      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a5b      	ldr	r2, [pc, #364]	; (8006bd0 <HAL_DMA_Abort_IT+0x42c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d06d      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a59      	ldr	r2, [pc, #356]	; (8006bd4 <HAL_DMA_Abort_IT+0x430>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d068      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a58      	ldr	r2, [pc, #352]	; (8006bd8 <HAL_DMA_Abort_IT+0x434>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d063      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a56      	ldr	r2, [pc, #344]	; (8006bdc <HAL_DMA_Abort_IT+0x438>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d05e      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a55      	ldr	r2, [pc, #340]	; (8006be0 <HAL_DMA_Abort_IT+0x43c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d059      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a53      	ldr	r2, [pc, #332]	; (8006be4 <HAL_DMA_Abort_IT+0x440>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d054      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a52      	ldr	r2, [pc, #328]	; (8006be8 <HAL_DMA_Abort_IT+0x444>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d04f      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a50      	ldr	r2, [pc, #320]	; (8006bec <HAL_DMA_Abort_IT+0x448>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d04a      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a4f      	ldr	r2, [pc, #316]	; (8006bf0 <HAL_DMA_Abort_IT+0x44c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d045      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a4d      	ldr	r2, [pc, #308]	; (8006bf4 <HAL_DMA_Abort_IT+0x450>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d040      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a4c      	ldr	r2, [pc, #304]	; (8006bf8 <HAL_DMA_Abort_IT+0x454>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d03b      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a4a      	ldr	r2, [pc, #296]	; (8006bfc <HAL_DMA_Abort_IT+0x458>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d036      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a49      	ldr	r2, [pc, #292]	; (8006c00 <HAL_DMA_Abort_IT+0x45c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d031      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a47      	ldr	r2, [pc, #284]	; (8006c04 <HAL_DMA_Abort_IT+0x460>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d02c      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a46      	ldr	r2, [pc, #280]	; (8006c08 <HAL_DMA_Abort_IT+0x464>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d027      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a44      	ldr	r2, [pc, #272]	; (8006c0c <HAL_DMA_Abort_IT+0x468>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d022      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a43      	ldr	r2, [pc, #268]	; (8006c10 <HAL_DMA_Abort_IT+0x46c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d01d      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a41      	ldr	r2, [pc, #260]	; (8006c14 <HAL_DMA_Abort_IT+0x470>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d018      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a40      	ldr	r2, [pc, #256]	; (8006c18 <HAL_DMA_Abort_IT+0x474>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d013      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a3e      	ldr	r2, [pc, #248]	; (8006c1c <HAL_DMA_Abort_IT+0x478>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00e      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a3d      	ldr	r2, [pc, #244]	; (8006c20 <HAL_DMA_Abort_IT+0x47c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d009      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a3b      	ldr	r2, [pc, #236]	; (8006c24 <HAL_DMA_Abort_IT+0x480>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d004      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x3a0>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a3a      	ldr	r2, [pc, #232]	; (8006c28 <HAL_DMA_Abort_IT+0x484>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d101      	bne.n	8006b48 <HAL_DMA_Abort_IT+0x3a4>
 8006b44:	2301      	movs	r3, #1
 8006b46:	e000      	b.n	8006b4a <HAL_DMA_Abort_IT+0x3a6>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d028      	beq.n	8006ba0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b68:	f003 031f 	and.w	r3, r3, #31
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	409a      	lsls	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00c      	beq.n	8006ba0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40020010 	.word	0x40020010
 8006bd0:	40020028 	.word	0x40020028
 8006bd4:	40020040 	.word	0x40020040
 8006bd8:	40020058 	.word	0x40020058
 8006bdc:	40020070 	.word	0x40020070
 8006be0:	40020088 	.word	0x40020088
 8006be4:	400200a0 	.word	0x400200a0
 8006be8:	400200b8 	.word	0x400200b8
 8006bec:	40020410 	.word	0x40020410
 8006bf0:	40020428 	.word	0x40020428
 8006bf4:	40020440 	.word	0x40020440
 8006bf8:	40020458 	.word	0x40020458
 8006bfc:	40020470 	.word	0x40020470
 8006c00:	40020488 	.word	0x40020488
 8006c04:	400204a0 	.word	0x400204a0
 8006c08:	400204b8 	.word	0x400204b8
 8006c0c:	58025408 	.word	0x58025408
 8006c10:	5802541c 	.word	0x5802541c
 8006c14:	58025430 	.word	0x58025430
 8006c18:	58025444 	.word	0x58025444
 8006c1c:	58025458 	.word	0x58025458
 8006c20:	5802546c 	.word	0x5802546c
 8006c24:	58025480 	.word	0x58025480
 8006c28:	58025494 	.word	0x58025494

08006c2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	; 0x28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c38:	4b67      	ldr	r3, [pc, #412]	; (8006dd8 <HAL_DMA_IRQHandler+0x1ac>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a67      	ldr	r2, [pc, #412]	; (8006ddc <HAL_DMA_IRQHandler+0x1b0>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	0a9b      	lsrs	r3, r3, #10
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c50:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a5f      	ldr	r2, [pc, #380]	; (8006de0 <HAL_DMA_IRQHandler+0x1b4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d04a      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a5d      	ldr	r2, [pc, #372]	; (8006de4 <HAL_DMA_IRQHandler+0x1b8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d045      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a5c      	ldr	r2, [pc, #368]	; (8006de8 <HAL_DMA_IRQHandler+0x1bc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d040      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a5a      	ldr	r2, [pc, #360]	; (8006dec <HAL_DMA_IRQHandler+0x1c0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d03b      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a59      	ldr	r2, [pc, #356]	; (8006df0 <HAL_DMA_IRQHandler+0x1c4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d036      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a57      	ldr	r2, [pc, #348]	; (8006df4 <HAL_DMA_IRQHandler+0x1c8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d031      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a56      	ldr	r2, [pc, #344]	; (8006df8 <HAL_DMA_IRQHandler+0x1cc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d02c      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a54      	ldr	r2, [pc, #336]	; (8006dfc <HAL_DMA_IRQHandler+0x1d0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d027      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a53      	ldr	r2, [pc, #332]	; (8006e00 <HAL_DMA_IRQHandler+0x1d4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d022      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a51      	ldr	r2, [pc, #324]	; (8006e04 <HAL_DMA_IRQHandler+0x1d8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01d      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a50      	ldr	r2, [pc, #320]	; (8006e08 <HAL_DMA_IRQHandler+0x1dc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a4e      	ldr	r2, [pc, #312]	; (8006e0c <HAL_DMA_IRQHandler+0x1e0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a4d      	ldr	r2, [pc, #308]	; (8006e10 <HAL_DMA_IRQHandler+0x1e4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a4b      	ldr	r2, [pc, #300]	; (8006e14 <HAL_DMA_IRQHandler+0x1e8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a4a      	ldr	r2, [pc, #296]	; (8006e18 <HAL_DMA_IRQHandler+0x1ec>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_DMA_IRQHandler+0xd2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a48      	ldr	r2, [pc, #288]	; (8006e1c <HAL_DMA_IRQHandler+0x1f0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d101      	bne.n	8006d02 <HAL_DMA_IRQHandler+0xd6>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <HAL_DMA_IRQHandler+0xd8>
 8006d02:	2300      	movs	r3, #0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 842b 	beq.w	8007560 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	2208      	movs	r2, #8
 8006d14:	409a      	lsls	r2, r3
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80a2 	beq.w	8006e64 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2e      	ldr	r2, [pc, #184]	; (8006de0 <HAL_DMA_IRQHandler+0x1b4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d04a      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2d      	ldr	r2, [pc, #180]	; (8006de4 <HAL_DMA_IRQHandler+0x1b8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d045      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a2b      	ldr	r2, [pc, #172]	; (8006de8 <HAL_DMA_IRQHandler+0x1bc>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d040      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a2a      	ldr	r2, [pc, #168]	; (8006dec <HAL_DMA_IRQHandler+0x1c0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d03b      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a28      	ldr	r2, [pc, #160]	; (8006df0 <HAL_DMA_IRQHandler+0x1c4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d036      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a27      	ldr	r2, [pc, #156]	; (8006df4 <HAL_DMA_IRQHandler+0x1c8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d031      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a25      	ldr	r2, [pc, #148]	; (8006df8 <HAL_DMA_IRQHandler+0x1cc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d02c      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a24      	ldr	r2, [pc, #144]	; (8006dfc <HAL_DMA_IRQHandler+0x1d0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d027      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a22      	ldr	r2, [pc, #136]	; (8006e00 <HAL_DMA_IRQHandler+0x1d4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d022      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a21      	ldr	r2, [pc, #132]	; (8006e04 <HAL_DMA_IRQHandler+0x1d8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d01d      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1f      	ldr	r2, [pc, #124]	; (8006e08 <HAL_DMA_IRQHandler+0x1dc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d018      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1e      	ldr	r2, [pc, #120]	; (8006e0c <HAL_DMA_IRQHandler+0x1e0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d013      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1c      	ldr	r2, [pc, #112]	; (8006e10 <HAL_DMA_IRQHandler+0x1e4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00e      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <HAL_DMA_IRQHandler+0x1e8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d009      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a19      	ldr	r2, [pc, #100]	; (8006e18 <HAL_DMA_IRQHandler+0x1ec>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d004      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x194>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <HAL_DMA_IRQHandler+0x1f0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d12f      	bne.n	8006e20 <HAL_DMA_IRQHandler+0x1f4>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2301      	movne	r3, #1
 8006dd0:	2300      	moveq	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	e02e      	b.n	8006e34 <HAL_DMA_IRQHandler+0x208>
 8006dd6:	bf00      	nop
 8006dd8:	24000000 	.word	0x24000000
 8006ddc:	1b4e81b5 	.word	0x1b4e81b5
 8006de0:	40020010 	.word	0x40020010
 8006de4:	40020028 	.word	0x40020028
 8006de8:	40020040 	.word	0x40020040
 8006dec:	40020058 	.word	0x40020058
 8006df0:	40020070 	.word	0x40020070
 8006df4:	40020088 	.word	0x40020088
 8006df8:	400200a0 	.word	0x400200a0
 8006dfc:	400200b8 	.word	0x400200b8
 8006e00:	40020410 	.word	0x40020410
 8006e04:	40020428 	.word	0x40020428
 8006e08:	40020440 	.word	0x40020440
 8006e0c:	40020458 	.word	0x40020458
 8006e10:	40020470 	.word	0x40020470
 8006e14:	40020488 	.word	0x40020488
 8006e18:	400204a0 	.word	0x400204a0
 8006e1c:	400204b8 	.word	0x400204b8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bf14      	ite	ne
 8006e2e:	2301      	movne	r3, #1
 8006e30:	2300      	moveq	r3, #0
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d015      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0204 	bic.w	r2, r2, #4
 8006e46:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	2208      	movs	r2, #8
 8006e52:	409a      	lsls	r2, r3
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5c:	f043 0201 	orr.w	r2, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d06e      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a69      	ldr	r2, [pc, #420]	; (8007024 <HAL_DMA_IRQHandler+0x3f8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d04a      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a67      	ldr	r2, [pc, #412]	; (8007028 <HAL_DMA_IRQHandler+0x3fc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d045      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a66      	ldr	r2, [pc, #408]	; (800702c <HAL_DMA_IRQHandler+0x400>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d040      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a64      	ldr	r2, [pc, #400]	; (8007030 <HAL_DMA_IRQHandler+0x404>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d03b      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a63      	ldr	r2, [pc, #396]	; (8007034 <HAL_DMA_IRQHandler+0x408>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d036      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a61      	ldr	r2, [pc, #388]	; (8007038 <HAL_DMA_IRQHandler+0x40c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d031      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a60      	ldr	r2, [pc, #384]	; (800703c <HAL_DMA_IRQHandler+0x410>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d02c      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a5e      	ldr	r2, [pc, #376]	; (8007040 <HAL_DMA_IRQHandler+0x414>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d027      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a5d      	ldr	r2, [pc, #372]	; (8007044 <HAL_DMA_IRQHandler+0x418>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d022      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a5b      	ldr	r2, [pc, #364]	; (8007048 <HAL_DMA_IRQHandler+0x41c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a5a      	ldr	r2, [pc, #360]	; (800704c <HAL_DMA_IRQHandler+0x420>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a58      	ldr	r2, [pc, #352]	; (8007050 <HAL_DMA_IRQHandler+0x424>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a57      	ldr	r2, [pc, #348]	; (8007054 <HAL_DMA_IRQHandler+0x428>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a55      	ldr	r2, [pc, #340]	; (8007058 <HAL_DMA_IRQHandler+0x42c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a54      	ldr	r2, [pc, #336]	; (800705c <HAL_DMA_IRQHandler+0x430>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x2ee>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a52      	ldr	r2, [pc, #328]	; (8007060 <HAL_DMA_IRQHandler+0x434>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d10a      	bne.n	8006f30 <HAL_DMA_IRQHandler+0x304>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bf14      	ite	ne
 8006f28:	2301      	movne	r3, #1
 8006f2a:	2300      	moveq	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	e003      	b.n	8006f38 <HAL_DMA_IRQHandler+0x30c>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2300      	movs	r3, #0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00d      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	2201      	movs	r2, #1
 8006f46:	409a      	lsls	r2, r3
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f50:	f043 0202 	orr.w	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5c:	f003 031f 	and.w	r3, r3, #31
 8006f60:	2204      	movs	r2, #4
 8006f62:	409a      	lsls	r2, r3
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 808f 	beq.w	800708c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a2c      	ldr	r2, [pc, #176]	; (8007024 <HAL_DMA_IRQHandler+0x3f8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d04a      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2a      	ldr	r2, [pc, #168]	; (8007028 <HAL_DMA_IRQHandler+0x3fc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d045      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a29      	ldr	r2, [pc, #164]	; (800702c <HAL_DMA_IRQHandler+0x400>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d040      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a27      	ldr	r2, [pc, #156]	; (8007030 <HAL_DMA_IRQHandler+0x404>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d03b      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a26      	ldr	r2, [pc, #152]	; (8007034 <HAL_DMA_IRQHandler+0x408>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d036      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a24      	ldr	r2, [pc, #144]	; (8007038 <HAL_DMA_IRQHandler+0x40c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d031      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a23      	ldr	r2, [pc, #140]	; (800703c <HAL_DMA_IRQHandler+0x410>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d02c      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a21      	ldr	r2, [pc, #132]	; (8007040 <HAL_DMA_IRQHandler+0x414>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d027      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a20      	ldr	r2, [pc, #128]	; (8007044 <HAL_DMA_IRQHandler+0x418>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d022      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <HAL_DMA_IRQHandler+0x41c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d01d      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1d      	ldr	r2, [pc, #116]	; (800704c <HAL_DMA_IRQHandler+0x420>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d018      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1b      	ldr	r2, [pc, #108]	; (8007050 <HAL_DMA_IRQHandler+0x424>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1a      	ldr	r2, [pc, #104]	; (8007054 <HAL_DMA_IRQHandler+0x428>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00e      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a18      	ldr	r2, [pc, #96]	; (8007058 <HAL_DMA_IRQHandler+0x42c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d009      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a17      	ldr	r2, [pc, #92]	; (800705c <HAL_DMA_IRQHandler+0x430>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d004      	beq.n	800700e <HAL_DMA_IRQHandler+0x3e2>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a15      	ldr	r2, [pc, #84]	; (8007060 <HAL_DMA_IRQHandler+0x434>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d12a      	bne.n	8007064 <HAL_DMA_IRQHandler+0x438>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	bf14      	ite	ne
 800701c:	2301      	movne	r3, #1
 800701e:	2300      	moveq	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	e023      	b.n	800706c <HAL_DMA_IRQHandler+0x440>
 8007024:	40020010 	.word	0x40020010
 8007028:	40020028 	.word	0x40020028
 800702c:	40020040 	.word	0x40020040
 8007030:	40020058 	.word	0x40020058
 8007034:	40020070 	.word	0x40020070
 8007038:	40020088 	.word	0x40020088
 800703c:	400200a0 	.word	0x400200a0
 8007040:	400200b8 	.word	0x400200b8
 8007044:	40020410 	.word	0x40020410
 8007048:	40020428 	.word	0x40020428
 800704c:	40020440 	.word	0x40020440
 8007050:	40020458 	.word	0x40020458
 8007054:	40020470 	.word	0x40020470
 8007058:	40020488 	.word	0x40020488
 800705c:	400204a0 	.word	0x400204a0
 8007060:	400204b8 	.word	0x400204b8
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2300      	movs	r3, #0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00d      	beq.n	800708c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	2204      	movs	r2, #4
 800707a:	409a      	lsls	r2, r3
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007084:	f043 0204 	orr.w	r2, r3, #4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007090:	f003 031f 	and.w	r3, r3, #31
 8007094:	2210      	movs	r2, #16
 8007096:	409a      	lsls	r2, r3
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	4013      	ands	r3, r2
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80a6 	beq.w	80071ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a85      	ldr	r2, [pc, #532]	; (80072bc <HAL_DMA_IRQHandler+0x690>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d04a      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a83      	ldr	r2, [pc, #524]	; (80072c0 <HAL_DMA_IRQHandler+0x694>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d045      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a82      	ldr	r2, [pc, #520]	; (80072c4 <HAL_DMA_IRQHandler+0x698>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d040      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a80      	ldr	r2, [pc, #512]	; (80072c8 <HAL_DMA_IRQHandler+0x69c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d03b      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a7f      	ldr	r2, [pc, #508]	; (80072cc <HAL_DMA_IRQHandler+0x6a0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d036      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a7d      	ldr	r2, [pc, #500]	; (80072d0 <HAL_DMA_IRQHandler+0x6a4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d031      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a7c      	ldr	r2, [pc, #496]	; (80072d4 <HAL_DMA_IRQHandler+0x6a8>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d02c      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a7a      	ldr	r2, [pc, #488]	; (80072d8 <HAL_DMA_IRQHandler+0x6ac>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d027      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a79      	ldr	r2, [pc, #484]	; (80072dc <HAL_DMA_IRQHandler+0x6b0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d022      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a77      	ldr	r2, [pc, #476]	; (80072e0 <HAL_DMA_IRQHandler+0x6b4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01d      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a76      	ldr	r2, [pc, #472]	; (80072e4 <HAL_DMA_IRQHandler+0x6b8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d018      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a74      	ldr	r2, [pc, #464]	; (80072e8 <HAL_DMA_IRQHandler+0x6bc>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a73      	ldr	r2, [pc, #460]	; (80072ec <HAL_DMA_IRQHandler+0x6c0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a71      	ldr	r2, [pc, #452]	; (80072f0 <HAL_DMA_IRQHandler+0x6c4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a70      	ldr	r2, [pc, #448]	; (80072f4 <HAL_DMA_IRQHandler+0x6c8>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_DMA_IRQHandler+0x516>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a6e      	ldr	r2, [pc, #440]	; (80072f8 <HAL_DMA_IRQHandler+0x6cc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d10a      	bne.n	8007158 <HAL_DMA_IRQHandler+0x52c>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	bf14      	ite	ne
 8007150:	2301      	movne	r3, #1
 8007152:	2300      	moveq	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	e009      	b.n	800716c <HAL_DMA_IRQHandler+0x540>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	bf14      	ite	ne
 8007166:	2301      	movne	r3, #1
 8007168:	2300      	moveq	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d03e      	beq.n	80071ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	2210      	movs	r2, #16
 800717a:	409a      	lsls	r2, r3
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d018      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d108      	bne.n	80071ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d024      	beq.n	80071ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
 80071ac:	e01f      	b.n	80071ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d01b      	beq.n	80071ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
 80071be:	e016      	b.n	80071ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d107      	bne.n	80071de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0208 	bic.w	r2, r2, #8
 80071dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	2220      	movs	r2, #32
 80071f8:	409a      	lsls	r2, r3
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	4013      	ands	r3, r2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 8110 	beq.w	8007424 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2c      	ldr	r2, [pc, #176]	; (80072bc <HAL_DMA_IRQHandler+0x690>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d04a      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2b      	ldr	r2, [pc, #172]	; (80072c0 <HAL_DMA_IRQHandler+0x694>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d045      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a29      	ldr	r2, [pc, #164]	; (80072c4 <HAL_DMA_IRQHandler+0x698>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d040      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a28      	ldr	r2, [pc, #160]	; (80072c8 <HAL_DMA_IRQHandler+0x69c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d03b      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a26      	ldr	r2, [pc, #152]	; (80072cc <HAL_DMA_IRQHandler+0x6a0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d036      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a25      	ldr	r2, [pc, #148]	; (80072d0 <HAL_DMA_IRQHandler+0x6a4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d031      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a23      	ldr	r2, [pc, #140]	; (80072d4 <HAL_DMA_IRQHandler+0x6a8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d02c      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a22      	ldr	r2, [pc, #136]	; (80072d8 <HAL_DMA_IRQHandler+0x6ac>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d027      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a20      	ldr	r2, [pc, #128]	; (80072dc <HAL_DMA_IRQHandler+0x6b0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d022      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1f      	ldr	r2, [pc, #124]	; (80072e0 <HAL_DMA_IRQHandler+0x6b4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d01d      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1d      	ldr	r2, [pc, #116]	; (80072e4 <HAL_DMA_IRQHandler+0x6b8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d018      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1c      	ldr	r2, [pc, #112]	; (80072e8 <HAL_DMA_IRQHandler+0x6bc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d013      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1a      	ldr	r2, [pc, #104]	; (80072ec <HAL_DMA_IRQHandler+0x6c0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00e      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a19      	ldr	r2, [pc, #100]	; (80072f0 <HAL_DMA_IRQHandler+0x6c4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <HAL_DMA_IRQHandler+0x6c8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d004      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x678>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a16      	ldr	r2, [pc, #88]	; (80072f8 <HAL_DMA_IRQHandler+0x6cc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d12b      	bne.n	80072fc <HAL_DMA_IRQHandler+0x6d0>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bf14      	ite	ne
 80072b2:	2301      	movne	r3, #1
 80072b4:	2300      	moveq	r3, #0
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	e02a      	b.n	8007310 <HAL_DMA_IRQHandler+0x6e4>
 80072ba:	bf00      	nop
 80072bc:	40020010 	.word	0x40020010
 80072c0:	40020028 	.word	0x40020028
 80072c4:	40020040 	.word	0x40020040
 80072c8:	40020058 	.word	0x40020058
 80072cc:	40020070 	.word	0x40020070
 80072d0:	40020088 	.word	0x40020088
 80072d4:	400200a0 	.word	0x400200a0
 80072d8:	400200b8 	.word	0x400200b8
 80072dc:	40020410 	.word	0x40020410
 80072e0:	40020428 	.word	0x40020428
 80072e4:	40020440 	.word	0x40020440
 80072e8:	40020458 	.word	0x40020458
 80072ec:	40020470 	.word	0x40020470
 80072f0:	40020488 	.word	0x40020488
 80072f4:	400204a0 	.word	0x400204a0
 80072f8:	400204b8 	.word	0x400204b8
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	bf14      	ite	ne
 800730a:	2301      	movne	r3, #1
 800730c:	2300      	moveq	r3, #0
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8087 	beq.w	8007424 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731a:	f003 031f 	and.w	r3, r3, #31
 800731e:	2220      	movs	r2, #32
 8007320:	409a      	lsls	r2, r3
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b04      	cmp	r3, #4
 8007330:	d139      	bne.n	80073a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0216 	bic.w	r2, r2, #22
 8007340:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695a      	ldr	r2, [r3, #20]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007350:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	2b00      	cmp	r3, #0
 8007358:	d103      	bne.n	8007362 <HAL_DMA_IRQHandler+0x736>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0208 	bic.w	r2, r2, #8
 8007370:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007376:	f003 031f 	and.w	r3, r3, #31
 800737a:	223f      	movs	r2, #63	; 0x3f
 800737c:	409a      	lsls	r2, r3
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 834a 	beq.w	8007a30 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
          }
          return;
 80073a4:	e344      	b.n	8007a30 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d018      	beq.n	80073e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d108      	bne.n	80073d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d02c      	beq.n	8007424 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
 80073d2:	e027      	b.n	8007424 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d023      	beq.n	8007424 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
 80073e4:	e01e      	b.n	8007424 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10f      	bne.n	8007414 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0210 	bic.w	r2, r2, #16
 8007402:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 8306 	beq.w	8007a3a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8088 	beq.w	800754c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2204      	movs	r2, #4
 8007440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a7a      	ldr	r2, [pc, #488]	; (8007634 <HAL_DMA_IRQHandler+0xa08>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d04a      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a79      	ldr	r2, [pc, #484]	; (8007638 <HAL_DMA_IRQHandler+0xa0c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d045      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a77      	ldr	r2, [pc, #476]	; (800763c <HAL_DMA_IRQHandler+0xa10>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d040      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a76      	ldr	r2, [pc, #472]	; (8007640 <HAL_DMA_IRQHandler+0xa14>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d03b      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a74      	ldr	r2, [pc, #464]	; (8007644 <HAL_DMA_IRQHandler+0xa18>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d036      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a73      	ldr	r2, [pc, #460]	; (8007648 <HAL_DMA_IRQHandler+0xa1c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d031      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a71      	ldr	r2, [pc, #452]	; (800764c <HAL_DMA_IRQHandler+0xa20>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d02c      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a70      	ldr	r2, [pc, #448]	; (8007650 <HAL_DMA_IRQHandler+0xa24>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d027      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a6e      	ldr	r2, [pc, #440]	; (8007654 <HAL_DMA_IRQHandler+0xa28>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d022      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a6d      	ldr	r2, [pc, #436]	; (8007658 <HAL_DMA_IRQHandler+0xa2c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d01d      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a6b      	ldr	r2, [pc, #428]	; (800765c <HAL_DMA_IRQHandler+0xa30>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d018      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a6a      	ldr	r2, [pc, #424]	; (8007660 <HAL_DMA_IRQHandler+0xa34>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a68      	ldr	r2, [pc, #416]	; (8007664 <HAL_DMA_IRQHandler+0xa38>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00e      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a67      	ldr	r2, [pc, #412]	; (8007668 <HAL_DMA_IRQHandler+0xa3c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d009      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a65      	ldr	r2, [pc, #404]	; (800766c <HAL_DMA_IRQHandler+0xa40>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d004      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x8b8>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a64      	ldr	r2, [pc, #400]	; (8007670 <HAL_DMA_IRQHandler+0xa44>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d108      	bne.n	80074f6 <HAL_DMA_IRQHandler+0x8ca>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0201 	bic.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e007      	b.n	8007506 <HAL_DMA_IRQHandler+0x8da>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0201 	bic.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3301      	adds	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800750e:	429a      	cmp	r2, r3
 8007510:	d307      	bcc.n	8007522 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1f2      	bne.n	8007506 <HAL_DMA_IRQHandler+0x8da>
 8007520:	e000      	b.n	8007524 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007522:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2203      	movs	r2, #3
 8007536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800753a:	e003      	b.n	8007544 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8272 	beq.w	8007a3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
 800755e:	e26c      	b.n	8007a3a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a43      	ldr	r2, [pc, #268]	; (8007674 <HAL_DMA_IRQHandler+0xa48>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d022      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x984>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a42      	ldr	r2, [pc, #264]	; (8007678 <HAL_DMA_IRQHandler+0xa4c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d01d      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x984>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a40      	ldr	r2, [pc, #256]	; (800767c <HAL_DMA_IRQHandler+0xa50>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d018      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x984>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a3f      	ldr	r2, [pc, #252]	; (8007680 <HAL_DMA_IRQHandler+0xa54>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d013      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x984>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a3d      	ldr	r2, [pc, #244]	; (8007684 <HAL_DMA_IRQHandler+0xa58>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00e      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x984>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a3c      	ldr	r2, [pc, #240]	; (8007688 <HAL_DMA_IRQHandler+0xa5c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d009      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x984>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a3a      	ldr	r2, [pc, #232]	; (800768c <HAL_DMA_IRQHandler+0xa60>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d004      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x984>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a39      	ldr	r2, [pc, #228]	; (8007690 <HAL_DMA_IRQHandler+0xa64>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d101      	bne.n	80075b4 <HAL_DMA_IRQHandler+0x988>
 80075b0:	2301      	movs	r3, #1
 80075b2:	e000      	b.n	80075b6 <HAL_DMA_IRQHandler+0x98a>
 80075b4:	2300      	movs	r3, #0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 823f 	beq.w	8007a3a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	2204      	movs	r2, #4
 80075ce:	409a      	lsls	r2, r3
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	4013      	ands	r3, r2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 80cd 	beq.w	8007774 <HAL_DMA_IRQHandler+0xb48>
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 80c7 	beq.w	8007774 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	2204      	movs	r2, #4
 80075f0:	409a      	lsls	r2, r3
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d049      	beq.n	8007694 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8210 	beq.w	8007a34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800761c:	e20a      	b.n	8007a34 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 8206 	beq.w	8007a34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007630:	e200      	b.n	8007a34 <HAL_DMA_IRQHandler+0xe08>
 8007632:	bf00      	nop
 8007634:	40020010 	.word	0x40020010
 8007638:	40020028 	.word	0x40020028
 800763c:	40020040 	.word	0x40020040
 8007640:	40020058 	.word	0x40020058
 8007644:	40020070 	.word	0x40020070
 8007648:	40020088 	.word	0x40020088
 800764c:	400200a0 	.word	0x400200a0
 8007650:	400200b8 	.word	0x400200b8
 8007654:	40020410 	.word	0x40020410
 8007658:	40020428 	.word	0x40020428
 800765c:	40020440 	.word	0x40020440
 8007660:	40020458 	.word	0x40020458
 8007664:	40020470 	.word	0x40020470
 8007668:	40020488 	.word	0x40020488
 800766c:	400204a0 	.word	0x400204a0
 8007670:	400204b8 	.word	0x400204b8
 8007674:	58025408 	.word	0x58025408
 8007678:	5802541c 	.word	0x5802541c
 800767c:	58025430 	.word	0x58025430
 8007680:	58025444 	.word	0x58025444
 8007684:	58025458 	.word	0x58025458
 8007688:	5802546c 	.word	0x5802546c
 800768c:	58025480 	.word	0x58025480
 8007690:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d160      	bne.n	8007760 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a8c      	ldr	r2, [pc, #560]	; (80078d4 <HAL_DMA_IRQHandler+0xca8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d04a      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a8a      	ldr	r2, [pc, #552]	; (80078d8 <HAL_DMA_IRQHandler+0xcac>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d045      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a89      	ldr	r2, [pc, #548]	; (80078dc <HAL_DMA_IRQHandler+0xcb0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d040      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a87      	ldr	r2, [pc, #540]	; (80078e0 <HAL_DMA_IRQHandler+0xcb4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d03b      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a86      	ldr	r2, [pc, #536]	; (80078e4 <HAL_DMA_IRQHandler+0xcb8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d036      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a84      	ldr	r2, [pc, #528]	; (80078e8 <HAL_DMA_IRQHandler+0xcbc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d031      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a83      	ldr	r2, [pc, #524]	; (80078ec <HAL_DMA_IRQHandler+0xcc0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d02c      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a81      	ldr	r2, [pc, #516]	; (80078f0 <HAL_DMA_IRQHandler+0xcc4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d027      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a80      	ldr	r2, [pc, #512]	; (80078f4 <HAL_DMA_IRQHandler+0xcc8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d022      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a7e      	ldr	r2, [pc, #504]	; (80078f8 <HAL_DMA_IRQHandler+0xccc>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d01d      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a7d      	ldr	r2, [pc, #500]	; (80078fc <HAL_DMA_IRQHandler+0xcd0>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d018      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a7b      	ldr	r2, [pc, #492]	; (8007900 <HAL_DMA_IRQHandler+0xcd4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d013      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a7a      	ldr	r2, [pc, #488]	; (8007904 <HAL_DMA_IRQHandler+0xcd8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00e      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a78      	ldr	r2, [pc, #480]	; (8007908 <HAL_DMA_IRQHandler+0xcdc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d009      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a77      	ldr	r2, [pc, #476]	; (800790c <HAL_DMA_IRQHandler+0xce0>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d004      	beq.n	800773e <HAL_DMA_IRQHandler+0xb12>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a75      	ldr	r2, [pc, #468]	; (8007910 <HAL_DMA_IRQHandler+0xce4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d108      	bne.n	8007750 <HAL_DMA_IRQHandler+0xb24>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0208 	bic.w	r2, r2, #8
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e007      	b.n	8007760 <HAL_DMA_IRQHandler+0xb34>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0204 	bic.w	r2, r2, #4
 800775e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8165 	beq.w	8007a34 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007772:	e15f      	b.n	8007a34 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	2202      	movs	r2, #2
 800777e:	409a      	lsls	r2, r3
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	4013      	ands	r3, r2
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80c5 	beq.w	8007914 <HAL_DMA_IRQHandler+0xce8>
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 80bf 	beq.w	8007914 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	2202      	movs	r2, #2
 80077a0:	409a      	lsls	r2, r3
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d018      	beq.n	80077e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 813a 	beq.w	8007a38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077cc:	e134      	b.n	8007a38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 8130 	beq.w	8007a38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077e0:	e12a      	b.n	8007a38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d168      	bne.n	80078be <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a38      	ldr	r2, [pc, #224]	; (80078d4 <HAL_DMA_IRQHandler+0xca8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d04a      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a37      	ldr	r2, [pc, #220]	; (80078d8 <HAL_DMA_IRQHandler+0xcac>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d045      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a35      	ldr	r2, [pc, #212]	; (80078dc <HAL_DMA_IRQHandler+0xcb0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d040      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a34      	ldr	r2, [pc, #208]	; (80078e0 <HAL_DMA_IRQHandler+0xcb4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d03b      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a32      	ldr	r2, [pc, #200]	; (80078e4 <HAL_DMA_IRQHandler+0xcb8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d036      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a31      	ldr	r2, [pc, #196]	; (80078e8 <HAL_DMA_IRQHandler+0xcbc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d031      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a2f      	ldr	r2, [pc, #188]	; (80078ec <HAL_DMA_IRQHandler+0xcc0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d02c      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2e      	ldr	r2, [pc, #184]	; (80078f0 <HAL_DMA_IRQHandler+0xcc4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d027      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a2c      	ldr	r2, [pc, #176]	; (80078f4 <HAL_DMA_IRQHandler+0xcc8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d022      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a2b      	ldr	r2, [pc, #172]	; (80078f8 <HAL_DMA_IRQHandler+0xccc>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d01d      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a29      	ldr	r2, [pc, #164]	; (80078fc <HAL_DMA_IRQHandler+0xcd0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d018      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a28      	ldr	r2, [pc, #160]	; (8007900 <HAL_DMA_IRQHandler+0xcd4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a26      	ldr	r2, [pc, #152]	; (8007904 <HAL_DMA_IRQHandler+0xcd8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00e      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a25      	ldr	r2, [pc, #148]	; (8007908 <HAL_DMA_IRQHandler+0xcdc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d009      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a23      	ldr	r2, [pc, #140]	; (800790c <HAL_DMA_IRQHandler+0xce0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <HAL_DMA_IRQHandler+0xc60>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a22      	ldr	r2, [pc, #136]	; (8007910 <HAL_DMA_IRQHandler+0xce4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d108      	bne.n	800789e <HAL_DMA_IRQHandler+0xc72>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0214 	bic.w	r2, r2, #20
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	e007      	b.n	80078ae <HAL_DMA_IRQHandler+0xc82>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 020a 	bic.w	r2, r2, #10
 80078ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80b8 	beq.w	8007a38 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078d0:	e0b2      	b.n	8007a38 <HAL_DMA_IRQHandler+0xe0c>
 80078d2:	bf00      	nop
 80078d4:	40020010 	.word	0x40020010
 80078d8:	40020028 	.word	0x40020028
 80078dc:	40020040 	.word	0x40020040
 80078e0:	40020058 	.word	0x40020058
 80078e4:	40020070 	.word	0x40020070
 80078e8:	40020088 	.word	0x40020088
 80078ec:	400200a0 	.word	0x400200a0
 80078f0:	400200b8 	.word	0x400200b8
 80078f4:	40020410 	.word	0x40020410
 80078f8:	40020428 	.word	0x40020428
 80078fc:	40020440 	.word	0x40020440
 8007900:	40020458 	.word	0x40020458
 8007904:	40020470 	.word	0x40020470
 8007908:	40020488 	.word	0x40020488
 800790c:	400204a0 	.word	0x400204a0
 8007910:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	2208      	movs	r2, #8
 800791e:	409a      	lsls	r2, r3
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	4013      	ands	r3, r2
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8088 	beq.w	8007a3a <HAL_DMA_IRQHandler+0xe0e>
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f003 0308 	and.w	r3, r3, #8
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8082 	beq.w	8007a3a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a41      	ldr	r2, [pc, #260]	; (8007a40 <HAL_DMA_IRQHandler+0xe14>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d04a      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a3f      	ldr	r2, [pc, #252]	; (8007a44 <HAL_DMA_IRQHandler+0xe18>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d045      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a3e      	ldr	r2, [pc, #248]	; (8007a48 <HAL_DMA_IRQHandler+0xe1c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d040      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a3c      	ldr	r2, [pc, #240]	; (8007a4c <HAL_DMA_IRQHandler+0xe20>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d03b      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a3b      	ldr	r2, [pc, #236]	; (8007a50 <HAL_DMA_IRQHandler+0xe24>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d036      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a39      	ldr	r2, [pc, #228]	; (8007a54 <HAL_DMA_IRQHandler+0xe28>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d031      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a38      	ldr	r2, [pc, #224]	; (8007a58 <HAL_DMA_IRQHandler+0xe2c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d02c      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a36      	ldr	r2, [pc, #216]	; (8007a5c <HAL_DMA_IRQHandler+0xe30>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d027      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a35      	ldr	r2, [pc, #212]	; (8007a60 <HAL_DMA_IRQHandler+0xe34>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d022      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a33      	ldr	r2, [pc, #204]	; (8007a64 <HAL_DMA_IRQHandler+0xe38>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01d      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a32      	ldr	r2, [pc, #200]	; (8007a68 <HAL_DMA_IRQHandler+0xe3c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d018      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a30      	ldr	r2, [pc, #192]	; (8007a6c <HAL_DMA_IRQHandler+0xe40>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a2f      	ldr	r2, [pc, #188]	; (8007a70 <HAL_DMA_IRQHandler+0xe44>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00e      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a2d      	ldr	r2, [pc, #180]	; (8007a74 <HAL_DMA_IRQHandler+0xe48>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d009      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a2c      	ldr	r2, [pc, #176]	; (8007a78 <HAL_DMA_IRQHandler+0xe4c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d004      	beq.n	80079d6 <HAL_DMA_IRQHandler+0xdaa>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a2a      	ldr	r2, [pc, #168]	; (8007a7c <HAL_DMA_IRQHandler+0xe50>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d108      	bne.n	80079e8 <HAL_DMA_IRQHandler+0xdbc>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 021c 	bic.w	r2, r2, #28
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e007      	b.n	80079f8 <HAL_DMA_IRQHandler+0xdcc>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 020e 	bic.w	r2, r2, #14
 80079f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	2201      	movs	r2, #1
 8007a02:	409a      	lsls	r2, r3
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d009      	beq.n	8007a3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
 8007a2e:	e004      	b.n	8007a3a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a38:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a3a:	3728      	adds	r7, #40	; 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40020010 	.word	0x40020010
 8007a44:	40020028 	.word	0x40020028
 8007a48:	40020040 	.word	0x40020040
 8007a4c:	40020058 	.word	0x40020058
 8007a50:	40020070 	.word	0x40020070
 8007a54:	40020088 	.word	0x40020088
 8007a58:	400200a0 	.word	0x400200a0
 8007a5c:	400200b8 	.word	0x400200b8
 8007a60:	40020410 	.word	0x40020410
 8007a64:	40020428 	.word	0x40020428
 8007a68:	40020440 	.word	0x40020440
 8007a6c:	40020458 	.word	0x40020458
 8007a70:	40020470 	.word	0x40020470
 8007a74:	40020488 	.word	0x40020488
 8007a78:	400204a0 	.word	0x400204a0
 8007a7c:	400204b8 	.word	0x400204b8

08007a80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a98:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a84      	ldr	r2, [pc, #528]	; (8007cb0 <DMA_SetConfig+0x230>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d072      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a82      	ldr	r2, [pc, #520]	; (8007cb4 <DMA_SetConfig+0x234>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d06d      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a81      	ldr	r2, [pc, #516]	; (8007cb8 <DMA_SetConfig+0x238>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d068      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a7f      	ldr	r2, [pc, #508]	; (8007cbc <DMA_SetConfig+0x23c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d063      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a7e      	ldr	r2, [pc, #504]	; (8007cc0 <DMA_SetConfig+0x240>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d05e      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a7c      	ldr	r2, [pc, #496]	; (8007cc4 <DMA_SetConfig+0x244>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d059      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a7b      	ldr	r2, [pc, #492]	; (8007cc8 <DMA_SetConfig+0x248>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d054      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a79      	ldr	r2, [pc, #484]	; (8007ccc <DMA_SetConfig+0x24c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d04f      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a78      	ldr	r2, [pc, #480]	; (8007cd0 <DMA_SetConfig+0x250>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d04a      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a76      	ldr	r2, [pc, #472]	; (8007cd4 <DMA_SetConfig+0x254>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d045      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a75      	ldr	r2, [pc, #468]	; (8007cd8 <DMA_SetConfig+0x258>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d040      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a73      	ldr	r2, [pc, #460]	; (8007cdc <DMA_SetConfig+0x25c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d03b      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a72      	ldr	r2, [pc, #456]	; (8007ce0 <DMA_SetConfig+0x260>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d036      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a70      	ldr	r2, [pc, #448]	; (8007ce4 <DMA_SetConfig+0x264>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d031      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a6f      	ldr	r2, [pc, #444]	; (8007ce8 <DMA_SetConfig+0x268>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d02c      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a6d      	ldr	r2, [pc, #436]	; (8007cec <DMA_SetConfig+0x26c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d027      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a6c      	ldr	r2, [pc, #432]	; (8007cf0 <DMA_SetConfig+0x270>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d022      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a6a      	ldr	r2, [pc, #424]	; (8007cf4 <DMA_SetConfig+0x274>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d01d      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a69      	ldr	r2, [pc, #420]	; (8007cf8 <DMA_SetConfig+0x278>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d018      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a67      	ldr	r2, [pc, #412]	; (8007cfc <DMA_SetConfig+0x27c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d013      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a66      	ldr	r2, [pc, #408]	; (8007d00 <DMA_SetConfig+0x280>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00e      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a64      	ldr	r2, [pc, #400]	; (8007d04 <DMA_SetConfig+0x284>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d009      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a63      	ldr	r2, [pc, #396]	; (8007d08 <DMA_SetConfig+0x288>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d004      	beq.n	8007b8a <DMA_SetConfig+0x10a>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a61      	ldr	r2, [pc, #388]	; (8007d0c <DMA_SetConfig+0x28c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d101      	bne.n	8007b8e <DMA_SetConfig+0x10e>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <DMA_SetConfig+0x110>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b9c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d004      	beq.n	8007bb0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a3e      	ldr	r2, [pc, #248]	; (8007cb0 <DMA_SetConfig+0x230>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d04a      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a3d      	ldr	r2, [pc, #244]	; (8007cb4 <DMA_SetConfig+0x234>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d045      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a3b      	ldr	r2, [pc, #236]	; (8007cb8 <DMA_SetConfig+0x238>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d040      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a3a      	ldr	r2, [pc, #232]	; (8007cbc <DMA_SetConfig+0x23c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d03b      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a38      	ldr	r2, [pc, #224]	; (8007cc0 <DMA_SetConfig+0x240>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d036      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a37      	ldr	r2, [pc, #220]	; (8007cc4 <DMA_SetConfig+0x244>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d031      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a35      	ldr	r2, [pc, #212]	; (8007cc8 <DMA_SetConfig+0x248>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d02c      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a34      	ldr	r2, [pc, #208]	; (8007ccc <DMA_SetConfig+0x24c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d027      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a32      	ldr	r2, [pc, #200]	; (8007cd0 <DMA_SetConfig+0x250>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d022      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a31      	ldr	r2, [pc, #196]	; (8007cd4 <DMA_SetConfig+0x254>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d01d      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a2f      	ldr	r2, [pc, #188]	; (8007cd8 <DMA_SetConfig+0x258>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d018      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a2e      	ldr	r2, [pc, #184]	; (8007cdc <DMA_SetConfig+0x25c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d013      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a2c      	ldr	r2, [pc, #176]	; (8007ce0 <DMA_SetConfig+0x260>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00e      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a2b      	ldr	r2, [pc, #172]	; (8007ce4 <DMA_SetConfig+0x264>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d009      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a29      	ldr	r2, [pc, #164]	; (8007ce8 <DMA_SetConfig+0x268>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <DMA_SetConfig+0x1d0>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a28      	ldr	r2, [pc, #160]	; (8007cec <DMA_SetConfig+0x26c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d101      	bne.n	8007c54 <DMA_SetConfig+0x1d4>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <DMA_SetConfig+0x1d6>
 8007c54:	2300      	movs	r3, #0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d05a      	beq.n	8007d10 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c5e:	f003 031f 	and.w	r3, r3, #31
 8007c62:	223f      	movs	r2, #63	; 0x3f
 8007c64:	409a      	lsls	r2, r3
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c78:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b40      	cmp	r3, #64	; 0x40
 8007c88:	d108      	bne.n	8007c9c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c9a:	e087      	b.n	8007dac <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	60da      	str	r2, [r3, #12]
}
 8007cac:	e07e      	b.n	8007dac <DMA_SetConfig+0x32c>
 8007cae:	bf00      	nop
 8007cb0:	40020010 	.word	0x40020010
 8007cb4:	40020028 	.word	0x40020028
 8007cb8:	40020040 	.word	0x40020040
 8007cbc:	40020058 	.word	0x40020058
 8007cc0:	40020070 	.word	0x40020070
 8007cc4:	40020088 	.word	0x40020088
 8007cc8:	400200a0 	.word	0x400200a0
 8007ccc:	400200b8 	.word	0x400200b8
 8007cd0:	40020410 	.word	0x40020410
 8007cd4:	40020428 	.word	0x40020428
 8007cd8:	40020440 	.word	0x40020440
 8007cdc:	40020458 	.word	0x40020458
 8007ce0:	40020470 	.word	0x40020470
 8007ce4:	40020488 	.word	0x40020488
 8007ce8:	400204a0 	.word	0x400204a0
 8007cec:	400204b8 	.word	0x400204b8
 8007cf0:	58025408 	.word	0x58025408
 8007cf4:	5802541c 	.word	0x5802541c
 8007cf8:	58025430 	.word	0x58025430
 8007cfc:	58025444 	.word	0x58025444
 8007d00:	58025458 	.word	0x58025458
 8007d04:	5802546c 	.word	0x5802546c
 8007d08:	58025480 	.word	0x58025480
 8007d0c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a28      	ldr	r2, [pc, #160]	; (8007db8 <DMA_SetConfig+0x338>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d022      	beq.n	8007d60 <DMA_SetConfig+0x2e0>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a27      	ldr	r2, [pc, #156]	; (8007dbc <DMA_SetConfig+0x33c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d01d      	beq.n	8007d60 <DMA_SetConfig+0x2e0>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a25      	ldr	r2, [pc, #148]	; (8007dc0 <DMA_SetConfig+0x340>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d018      	beq.n	8007d60 <DMA_SetConfig+0x2e0>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a24      	ldr	r2, [pc, #144]	; (8007dc4 <DMA_SetConfig+0x344>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d013      	beq.n	8007d60 <DMA_SetConfig+0x2e0>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a22      	ldr	r2, [pc, #136]	; (8007dc8 <DMA_SetConfig+0x348>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00e      	beq.n	8007d60 <DMA_SetConfig+0x2e0>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a21      	ldr	r2, [pc, #132]	; (8007dcc <DMA_SetConfig+0x34c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d009      	beq.n	8007d60 <DMA_SetConfig+0x2e0>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a1f      	ldr	r2, [pc, #124]	; (8007dd0 <DMA_SetConfig+0x350>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d004      	beq.n	8007d60 <DMA_SetConfig+0x2e0>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a1e      	ldr	r2, [pc, #120]	; (8007dd4 <DMA_SetConfig+0x354>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d101      	bne.n	8007d64 <DMA_SetConfig+0x2e4>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <DMA_SetConfig+0x2e6>
 8007d64:	2300      	movs	r3, #0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d020      	beq.n	8007dac <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2201      	movs	r2, #1
 8007d74:	409a      	lsls	r2, r3
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	d108      	bne.n	8007d9c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	60da      	str	r2, [r3, #12]
}
 8007d9a:	e007      	b.n	8007dac <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	60da      	str	r2, [r3, #12]
}
 8007dac:	bf00      	nop
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	58025408 	.word	0x58025408
 8007dbc:	5802541c 	.word	0x5802541c
 8007dc0:	58025430 	.word	0x58025430
 8007dc4:	58025444 	.word	0x58025444
 8007dc8:	58025458 	.word	0x58025458
 8007dcc:	5802546c 	.word	0x5802546c
 8007dd0:	58025480 	.word	0x58025480
 8007dd4:	58025494 	.word	0x58025494

08007dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a42      	ldr	r2, [pc, #264]	; (8007ef0 <DMA_CalcBaseAndBitshift+0x118>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d04a      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a41      	ldr	r2, [pc, #260]	; (8007ef4 <DMA_CalcBaseAndBitshift+0x11c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d045      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a3f      	ldr	r2, [pc, #252]	; (8007ef8 <DMA_CalcBaseAndBitshift+0x120>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d040      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a3e      	ldr	r2, [pc, #248]	; (8007efc <DMA_CalcBaseAndBitshift+0x124>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d03b      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a3c      	ldr	r2, [pc, #240]	; (8007f00 <DMA_CalcBaseAndBitshift+0x128>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d036      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a3b      	ldr	r2, [pc, #236]	; (8007f04 <DMA_CalcBaseAndBitshift+0x12c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d031      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a39      	ldr	r2, [pc, #228]	; (8007f08 <DMA_CalcBaseAndBitshift+0x130>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d02c      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a38      	ldr	r2, [pc, #224]	; (8007f0c <DMA_CalcBaseAndBitshift+0x134>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d027      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a36      	ldr	r2, [pc, #216]	; (8007f10 <DMA_CalcBaseAndBitshift+0x138>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d022      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a35      	ldr	r2, [pc, #212]	; (8007f14 <DMA_CalcBaseAndBitshift+0x13c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d01d      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a33      	ldr	r2, [pc, #204]	; (8007f18 <DMA_CalcBaseAndBitshift+0x140>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d018      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a32      	ldr	r2, [pc, #200]	; (8007f1c <DMA_CalcBaseAndBitshift+0x144>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d013      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a30      	ldr	r2, [pc, #192]	; (8007f20 <DMA_CalcBaseAndBitshift+0x148>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d00e      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a2f      	ldr	r2, [pc, #188]	; (8007f24 <DMA_CalcBaseAndBitshift+0x14c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d009      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a2d      	ldr	r2, [pc, #180]	; (8007f28 <DMA_CalcBaseAndBitshift+0x150>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <DMA_CalcBaseAndBitshift+0xa8>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a2c      	ldr	r2, [pc, #176]	; (8007f2c <DMA_CalcBaseAndBitshift+0x154>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d101      	bne.n	8007e84 <DMA_CalcBaseAndBitshift+0xac>
 8007e80:	2301      	movs	r3, #1
 8007e82:	e000      	b.n	8007e86 <DMA_CalcBaseAndBitshift+0xae>
 8007e84:	2300      	movs	r3, #0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d024      	beq.n	8007ed4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	3b10      	subs	r3, #16
 8007e92:	4a27      	ldr	r2, [pc, #156]	; (8007f30 <DMA_CalcBaseAndBitshift+0x158>)
 8007e94:	fba2 2303 	umull	r2, r3, r2, r3
 8007e98:	091b      	lsrs	r3, r3, #4
 8007e9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	4a24      	ldr	r2, [pc, #144]	; (8007f34 <DMA_CalcBaseAndBitshift+0x15c>)
 8007ea4:	5cd3      	ldrb	r3, [r2, r3]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d908      	bls.n	8007ec4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4b1f      	ldr	r3, [pc, #124]	; (8007f38 <DMA_CalcBaseAndBitshift+0x160>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	1d1a      	adds	r2, r3, #4
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	659a      	str	r2, [r3, #88]	; 0x58
 8007ec2:	e00d      	b.n	8007ee0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <DMA_CalcBaseAndBitshift+0x160>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ed2:	e005      	b.n	8007ee0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	40020010 	.word	0x40020010
 8007ef4:	40020028 	.word	0x40020028
 8007ef8:	40020040 	.word	0x40020040
 8007efc:	40020058 	.word	0x40020058
 8007f00:	40020070 	.word	0x40020070
 8007f04:	40020088 	.word	0x40020088
 8007f08:	400200a0 	.word	0x400200a0
 8007f0c:	400200b8 	.word	0x400200b8
 8007f10:	40020410 	.word	0x40020410
 8007f14:	40020428 	.word	0x40020428
 8007f18:	40020440 	.word	0x40020440
 8007f1c:	40020458 	.word	0x40020458
 8007f20:	40020470 	.word	0x40020470
 8007f24:	40020488 	.word	0x40020488
 8007f28:	400204a0 	.word	0x400204a0
 8007f2c:	400204b8 	.word	0x400204b8
 8007f30:	aaaaaaab 	.word	0xaaaaaaab
 8007f34:	080115f0 	.word	0x080115f0
 8007f38:	fffffc00 	.word	0xfffffc00

08007f3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d120      	bne.n	8007f92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d858      	bhi.n	800800a <DMA_CheckFifoParam+0xce>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <DMA_CheckFifoParam+0x24>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f71 	.word	0x08007f71
 8007f64:	08007f83 	.word	0x08007f83
 8007f68:	08007f71 	.word	0x08007f71
 8007f6c:	0800800b 	.word	0x0800800b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d048      	beq.n	800800e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f80:	e045      	b.n	800800e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f8a:	d142      	bne.n	8008012 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f90:	e03f      	b.n	8008012 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f9a:	d123      	bne.n	8007fe4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d838      	bhi.n	8008016 <DMA_CheckFifoParam+0xda>
 8007fa4:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <DMA_CheckFifoParam+0x70>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08007fc3 	.word	0x08007fc3
 8007fb4:	08007fbd 	.word	0x08007fbd
 8007fb8:	08007fd5 	.word	0x08007fd5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	73fb      	strb	r3, [r7, #15]
        break;
 8007fc0:	e030      	b.n	8008024 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d025      	beq.n	800801a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fd2:	e022      	b.n	800801a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fdc:	d11f      	bne.n	800801e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fe2:	e01c      	b.n	800801e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d902      	bls.n	8007ff2 <DMA_CheckFifoParam+0xb6>
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d003      	beq.n	8007ff8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ff0:	e018      	b.n	8008024 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8007ff6:	e015      	b.n	8008024 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00e      	beq.n	8008022 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	73fb      	strb	r3, [r7, #15]
    break;
 8008008:	e00b      	b.n	8008022 <DMA_CheckFifoParam+0xe6>
        break;
 800800a:	bf00      	nop
 800800c:	e00a      	b.n	8008024 <DMA_CheckFifoParam+0xe8>
        break;
 800800e:	bf00      	nop
 8008010:	e008      	b.n	8008024 <DMA_CheckFifoParam+0xe8>
        break;
 8008012:	bf00      	nop
 8008014:	e006      	b.n	8008024 <DMA_CheckFifoParam+0xe8>
        break;
 8008016:	bf00      	nop
 8008018:	e004      	b.n	8008024 <DMA_CheckFifoParam+0xe8>
        break;
 800801a:	bf00      	nop
 800801c:	e002      	b.n	8008024 <DMA_CheckFifoParam+0xe8>
        break;
 800801e:	bf00      	nop
 8008020:	e000      	b.n	8008024 <DMA_CheckFifoParam+0xe8>
    break;
 8008022:	bf00      	nop
    }
  }

  return status;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop

08008034 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a38      	ldr	r2, [pc, #224]	; (8008128 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d022      	beq.n	8008092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a36      	ldr	r2, [pc, #216]	; (800812c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d01d      	beq.n	8008092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a35      	ldr	r2, [pc, #212]	; (8008130 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d018      	beq.n	8008092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a33      	ldr	r2, [pc, #204]	; (8008134 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a32      	ldr	r2, [pc, #200]	; (8008138 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00e      	beq.n	8008092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a30      	ldr	r2, [pc, #192]	; (800813c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d009      	beq.n	8008092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a2f      	ldr	r2, [pc, #188]	; (8008140 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d004      	beq.n	8008092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a2d      	ldr	r2, [pc, #180]	; (8008144 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d101      	bne.n	8008096 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008096:	2300      	movs	r3, #0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01a      	beq.n	80080d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	3b08      	subs	r3, #8
 80080a4:	4a28      	ldr	r2, [pc, #160]	; (8008148 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80080a6:	fba2 2303 	umull	r2, r3, r2, r3
 80080aa:	091b      	lsrs	r3, r3, #4
 80080ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4b26      	ldr	r3, [pc, #152]	; (800814c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	461a      	mov	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a24      	ldr	r2, [pc, #144]	; (8008150 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80080c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f003 031f 	and.w	r3, r3, #31
 80080c8:	2201      	movs	r2, #1
 80080ca:	409a      	lsls	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80080d0:	e024      	b.n	800811c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	3b10      	subs	r3, #16
 80080da:	4a1e      	ldr	r2, [pc, #120]	; (8008154 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80080dc:	fba2 2303 	umull	r2, r3, r2, r3
 80080e0:	091b      	lsrs	r3, r3, #4
 80080e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4a1c      	ldr	r2, [pc, #112]	; (8008158 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d806      	bhi.n	80080fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4a1b      	ldr	r2, [pc, #108]	; (800815c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d902      	bls.n	80080fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3308      	adds	r3, #8
 80080f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4b18      	ldr	r3, [pc, #96]	; (8008160 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	461a      	mov	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a16      	ldr	r2, [pc, #88]	; (8008164 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800810c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f003 031f 	and.w	r3, r3, #31
 8008114:	2201      	movs	r2, #1
 8008116:	409a      	lsls	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800811c:	bf00      	nop
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	58025408 	.word	0x58025408
 800812c:	5802541c 	.word	0x5802541c
 8008130:	58025430 	.word	0x58025430
 8008134:	58025444 	.word	0x58025444
 8008138:	58025458 	.word	0x58025458
 800813c:	5802546c 	.word	0x5802546c
 8008140:	58025480 	.word	0x58025480
 8008144:	58025494 	.word	0x58025494
 8008148:	cccccccd 	.word	0xcccccccd
 800814c:	16009600 	.word	0x16009600
 8008150:	58025880 	.word	0x58025880
 8008154:	aaaaaaab 	.word	0xaaaaaaab
 8008158:	400204b8 	.word	0x400204b8
 800815c:	4002040f 	.word	0x4002040f
 8008160:	10008200 	.word	0x10008200
 8008164:	40020880 	.word	0x40020880

08008168 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d04a      	beq.n	8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b08      	cmp	r3, #8
 8008182:	d847      	bhi.n	8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a25      	ldr	r2, [pc, #148]	; (8008220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d022      	beq.n	80081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a24      	ldr	r2, [pc, #144]	; (8008224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d01d      	beq.n	80081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a22      	ldr	r2, [pc, #136]	; (8008228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d018      	beq.n	80081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a21      	ldr	r2, [pc, #132]	; (800822c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d013      	beq.n	80081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a1f      	ldr	r2, [pc, #124]	; (8008230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00e      	beq.n	80081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d009      	beq.n	80081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d004      	beq.n	80081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a1b      	ldr	r2, [pc, #108]	; (800823c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d101      	bne.n	80081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80081d8:	2300      	movs	r3, #0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4b17      	ldr	r3, [pc, #92]	; (8008240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	461a      	mov	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a15      	ldr	r2, [pc, #84]	; (8008244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80081f0:	671a      	str	r2, [r3, #112]	; 0x70
 80081f2:	e009      	b.n	8008208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	461a      	mov	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a11      	ldr	r2, [pc, #68]	; (800824c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008206:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3b01      	subs	r3, #1
 800820c:	2201      	movs	r2, #1
 800820e:	409a      	lsls	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	58025408 	.word	0x58025408
 8008224:	5802541c 	.word	0x5802541c
 8008228:	58025430 	.word	0x58025430
 800822c:	58025444 	.word	0x58025444
 8008230:	58025458 	.word	0x58025458
 8008234:	5802546c 	.word	0x5802546c
 8008238:	58025480 	.word	0x58025480
 800823c:	58025494 	.word	0x58025494
 8008240:	1600963f 	.word	0x1600963f
 8008244:	58025940 	.word	0x58025940
 8008248:	1000823f 	.word	0x1000823f
 800824c:	40020940 	.word	0x40020940

08008250 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e0c6      	b.n	80083f0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d102      	bne.n	8008270 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7fb f97c 	bl	8003568 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2223      	movs	r2, #35	; 0x23
 8008274:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008276:	4b60      	ldr	r3, [pc, #384]	; (80083f8 <HAL_ETH_Init+0x1a8>)
 8008278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800827c:	4a5e      	ldr	r2, [pc, #376]	; (80083f8 <HAL_ETH_Init+0x1a8>)
 800827e:	f043 0302 	orr.w	r3, r3, #2
 8008282:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008286:	4b5c      	ldr	r3, [pc, #368]	; (80083f8 <HAL_ETH_Init+0x1a8>)
 8008288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	60bb      	str	r3, [r7, #8]
 8008292:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7a1b      	ldrb	r3, [r3, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800829c:	2000      	movs	r0, #0
 800829e:	f7fc f8dd 	bl	800445c <HAL_SYSCFG_ETHInterfaceSelect>
 80082a2:	e003      	b.n	80082ac <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80082a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80082a8:	f7fc f8d8 	bl	800445c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0201 	orr.w	r2, r2, #1
 80082be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082c4:	f7fc f88e 	bl	80043e4 <HAL_GetTick>
 80082c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80082ca:	e00f      	b.n	80082ec <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80082cc:	f7fc f88a 	bl	80043e4 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80082da:	d907      	bls.n	80082ec <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2204      	movs	r2, #4
 80082e0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	22e0      	movs	r2, #224	; 0xe0
 80082e6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e081      	b.n	80083f0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e6      	bne.n	80082cc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fac0 	bl	8008884 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8008304:	f001 fe8c 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 8008308:	4603      	mov	r3, r0
 800830a:	4a3c      	ldr	r2, [pc, #240]	; (80083fc <HAL_ETH_Init+0x1ac>)
 800830c:	fba2 2303 	umull	r2, r3, r2, r3
 8008310:	0c9a      	lsrs	r2, r3, #18
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3a01      	subs	r2, #1
 8008318:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fa13 	bl	8008748 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008338:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800833c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	22e0      	movs	r2, #224	; 0xe0
 8008354:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e04a      	b.n	80083f0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	f241 1308 	movw	r3, #4360	; 0x1108
 8008362:	4413      	add	r3, r2
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b26      	ldr	r3, [pc, #152]	; (8008400 <HAL_ETH_Init+0x1b0>)
 8008368:	4013      	ands	r3, r2
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6952      	ldr	r2, [r2, #20]
 800836e:	0052      	lsls	r2, r2, #1
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	6809      	ldr	r1, [r1, #0]
 8008374:	431a      	orrs	r2, r3
 8008376:	f241 1308 	movw	r3, #4360	; 0x1108
 800837a:	440b      	add	r3, r1
 800837c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fad8 	bl	8008934 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fb1c 	bl	80089c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	3305      	adds	r3, #5
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	021a      	lsls	r2, r3, #8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	3304      	adds	r3, #4
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	4619      	mov	r1, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	3303      	adds	r3, #3
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	061a      	lsls	r2, r3, #24
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	3302      	adds	r3, #2
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	041b      	lsls	r3, r3, #16
 80083bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	3301      	adds	r3, #1
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80083c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80083d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80083d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2210      	movs	r2, #16
 80083e6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2210      	movs	r2, #16
 80083ec:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	58024400 	.word	0x58024400
 80083fc:	431bde83 	.word	0x431bde83
 8008400:	ffff8001 	.word	0xffff8001

08008404 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8008416:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	791b      	ldrb	r3, [r3, #4]
 800841c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800841e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	7b1b      	ldrb	r3, [r3, #12]
 8008424:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008426:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	7b5b      	ldrb	r3, [r3, #13]
 800842c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800842e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	7b9b      	ldrb	r3, [r3, #14]
 8008434:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008436:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	7bdb      	ldrb	r3, [r3, #15]
 800843c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800843e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	7c12      	ldrb	r2, [r2, #16]
 8008444:	2a00      	cmp	r2, #0
 8008446:	d102      	bne.n	800844e <ETH_SetMACConfig+0x4a>
 8008448:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800844c:	e000      	b.n	8008450 <ETH_SetMACConfig+0x4c>
 800844e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008450:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	7c52      	ldrb	r2, [r2, #17]
 8008456:	2a00      	cmp	r2, #0
 8008458:	d102      	bne.n	8008460 <ETH_SetMACConfig+0x5c>
 800845a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800845e:	e000      	b.n	8008462 <ETH_SetMACConfig+0x5e>
 8008460:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008462:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	7c9b      	ldrb	r3, [r3, #18]
 8008468:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800846a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008470:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8008476:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	7f1b      	ldrb	r3, [r3, #28]
 800847c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800847e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	7f5b      	ldrb	r3, [r3, #29]
 8008484:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008486:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	7f92      	ldrb	r2, [r2, #30]
 800848c:	2a00      	cmp	r2, #0
 800848e:	d102      	bne.n	8008496 <ETH_SetMACConfig+0x92>
 8008490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008494:	e000      	b.n	8008498 <ETH_SetMACConfig+0x94>
 8008496:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008498:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	7fdb      	ldrb	r3, [r3, #31]
 800849e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80084a0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80084a8:	2a00      	cmp	r2, #0
 80084aa:	d102      	bne.n	80084b2 <ETH_SetMACConfig+0xae>
 80084ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084b0:	e000      	b.n	80084b4 <ETH_SetMACConfig+0xb0>
 80084b2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80084b4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80084ba:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80084c4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	4b56      	ldr	r3, [pc, #344]	; (8008630 <ETH_SetMACConfig+0x22c>)
 80084d6:	4013      	ands	r3, r2
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6812      	ldr	r2, [r2, #0]
 80084dc:	68f9      	ldr	r1, [r7, #12]
 80084de:	430b      	orrs	r3, r1
 80084e0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084ee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80084f0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084f8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80084fa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008502:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8008504:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800850c:	2a00      	cmp	r2, #0
 800850e:	d102      	bne.n	8008516 <ETH_SetMACConfig+0x112>
 8008510:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008514:	e000      	b.n	8008518 <ETH_SetMACConfig+0x114>
 8008516:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008518:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	4b42      	ldr	r3, [pc, #264]	; (8008634 <ETH_SetMACConfig+0x230>)
 800852a:	4013      	ands	r3, r2
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	68f9      	ldr	r1, [r7, #12]
 8008532:	430b      	orrs	r3, r1
 8008534:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800853c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68da      	ldr	r2, [r3, #12]
 800854c:	4b3a      	ldr	r3, [pc, #232]	; (8008638 <ETH_SetMACConfig+0x234>)
 800854e:	4013      	ands	r3, r2
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6812      	ldr	r2, [r2, #0]
 8008554:	68f9      	ldr	r1, [r7, #12]
 8008556:	430b      	orrs	r3, r1
 8008558:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008560:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008566:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800856e:	2a00      	cmp	r2, #0
 8008570:	d101      	bne.n	8008576 <ETH_SetMACConfig+0x172>
 8008572:	2280      	movs	r2, #128	; 0x80
 8008574:	e000      	b.n	8008578 <ETH_SetMACConfig+0x174>
 8008576:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8008578:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800857e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800858a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800858e:	4013      	ands	r3, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6812      	ldr	r2, [r2, #0]
 8008594:	68f9      	ldr	r1, [r7, #12]
 8008596:	430b      	orrs	r3, r1
 8008598:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80085a0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80085a8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b6:	f023 0103 	bic.w	r1, r3, #3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80085ce:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80085ea:	2a00      	cmp	r2, #0
 80085ec:	d101      	bne.n	80085f2 <ETH_SetMACConfig+0x1ee>
 80085ee:	2240      	movs	r2, #64	; 0x40
 80085f0:	e000      	b.n	80085f4 <ETH_SetMACConfig+0x1f0>
 80085f2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80085f4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80085fc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80085fe:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008606:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008614:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	430a      	orrs	r2, r1
 8008620:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008624:	bf00      	nop
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	00048083 	.word	0x00048083
 8008634:	c0f88000 	.word	0xc0f88000
 8008638:	fffffef0 	.word	0xfffffef0

0800863c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	4b38      	ldr	r3, [pc, #224]	; (8008734 <ETH_SetDMAConfig+0xf8>)
 8008652:	4013      	ands	r3, r2
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	6809      	ldr	r1, [r1, #0]
 800865c:	431a      	orrs	r2, r3
 800865e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8008662:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	791b      	ldrb	r3, [r3, #4]
 8008668:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800866e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	7b1b      	ldrb	r3, [r3, #12]
 8008674:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	f241 0304 	movw	r3, #4100	; 0x1004
 8008682:	4413      	add	r3, r2
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	4b2c      	ldr	r3, [pc, #176]	; (8008738 <ETH_SetDMAConfig+0xfc>)
 8008688:	4013      	ands	r3, r2
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6811      	ldr	r1, [r2, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	431a      	orrs	r2, r3
 8008692:	f241 0304 	movw	r3, #4100	; 0x1004
 8008696:	440b      	add	r3, r1
 8008698:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	7b5b      	ldrb	r3, [r3, #13]
 800869e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b22      	ldr	r3, [pc, #136]	; (800873c <ETH_SetDMAConfig+0x100>)
 80086b4:	4013      	ands	r3, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6811      	ldr	r1, [r2, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	431a      	orrs	r2, r3
 80086be:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80086c2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	7d1b      	ldrb	r3, [r3, #20]
 80086cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80086ce:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	7f5b      	ldrb	r3, [r3, #29]
 80086d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	f241 1304 	movw	r3, #4356	; 0x1104
 80086e2:	4413      	add	r3, r2
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	4b16      	ldr	r3, [pc, #88]	; (8008740 <ETH_SetDMAConfig+0x104>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	6811      	ldr	r1, [r2, #0]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	f241 1304 	movw	r3, #4356	; 0x1104
 80086f6:	440b      	add	r3, r1
 80086f8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	7f1b      	ldrb	r3, [r3, #28]
 80086fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	f241 1308 	movw	r3, #4360	; 0x1108
 8008710:	4413      	add	r3, r2
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <ETH_SetDMAConfig+0x108>)
 8008716:	4013      	ands	r3, r2
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6811      	ldr	r1, [r2, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	431a      	orrs	r2, r3
 8008720:	f241 1308 	movw	r3, #4360	; 0x1108
 8008724:	440b      	add	r3, r1
 8008726:	601a      	str	r2, [r3, #0]
}
 8008728:	bf00      	nop
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	ffff87fd 	.word	0xffff87fd
 8008738:	ffff2ffe 	.word	0xffff2ffe
 800873c:	fffec000 	.word	0xfffec000
 8008740:	ffc0efef 	.word	0xffc0efef
 8008744:	7fc0ffff 	.word	0x7fc0ffff

08008748 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b0a4      	sub	sp, #144	; 0x90
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008750:	2301      	movs	r3, #1
 8008752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008756:	2300      	movs	r3, #0
 8008758:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800875a:	2300      	movs	r3, #0
 800875c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008760:	2300      	movs	r3, #0
 8008762:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800876c:	2301      	movs	r3, #1
 800876e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8008772:	2301      	movs	r3, #1
 8008774:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008788:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800878a:	2300      	movs	r3, #0
 800878c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008790:	2300      	movs	r3, #0
 8008792:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008794:	2300      	movs	r3, #0
 8008796:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800879a:	2300      	movs	r3, #0
 800879c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80087a0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80087a4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80087a6:	2300      	movs	r3, #0
 80087a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80087ac:	2300      	movs	r3, #0
 80087ae:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80087bc:	2300      	movs	r3, #0
 80087be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80087c2:	2300      	movs	r3, #0
 80087c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80087ca:	2300      	movs	r3, #0
 80087cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80087ce:	2300      	movs	r3, #0
 80087d0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80087d4:	2300      	movs	r3, #0
 80087d6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80087e0:	2320      	movs	r3, #32
 80087e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80087ec:	2300      	movs	r3, #0
 80087ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80087f2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80087f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087fc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80087fe:	2300      	movs	r3, #0
 8008800:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008804:	2302      	movs	r3, #2
 8008806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800880a:	2300      	movs	r3, #0
 800880c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008810:	2300      	movs	r3, #0
 8008812:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008816:	2300      	movs	r3, #0
 8008818:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008822:	2300      	movs	r3, #0
 8008824:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008826:	2301      	movs	r3, #1
 8008828:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800882c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff fde6 	bl	8008404 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008838:	2301      	movs	r3, #1
 800883a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800883c:	2301      	movs	r3, #1
 800883e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008840:	2300      	movs	r3, #0
 8008842:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008844:	2300      	movs	r3, #0
 8008846:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800884a:	2300      	movs	r3, #0
 800884c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800884e:	2300      	movs	r3, #0
 8008850:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008852:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008856:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008858:	2300      	movs	r3, #0
 800885a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800885c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008860:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008862:	2300      	movs	r3, #0
 8008864:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8008868:	f44f 7306 	mov.w	r3, #536	; 0x218
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800886e:	f107 0308 	add.w	r3, r7, #8
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff fee1 	bl	800863c <ETH_SetDMAConfig>
}
 800887a:	bf00      	nop
 800887c:	3790      	adds	r7, #144	; 0x90
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008894:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800889c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800889e:	f001 fbbf 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 80088a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4a1e      	ldr	r2, [pc, #120]	; (8008920 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d908      	bls.n	80088be <ETH_MAC_MDIO_ClkConfig+0x3a>
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4a1d      	ldr	r2, [pc, #116]	; (8008924 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d804      	bhi.n	80088be <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	e027      	b.n	800890e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4a18      	ldr	r2, [pc, #96]	; (8008924 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d908      	bls.n	80088d8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	4a17      	ldr	r2, [pc, #92]	; (8008928 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d204      	bcs.n	80088d8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	e01a      	b.n	800890e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4a13      	ldr	r2, [pc, #76]	; (8008928 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d303      	bcc.n	80088e8 <ETH_MAC_MDIO_ClkConfig+0x64>
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4a12      	ldr	r2, [pc, #72]	; (800892c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d911      	bls.n	800890c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	4a10      	ldr	r2, [pc, #64]	; (800892c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d908      	bls.n	8008902 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	4a0f      	ldr	r2, [pc, #60]	; (8008930 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d804      	bhi.n	8008902 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e005      	b.n	800890e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	e000      	b.n	800890e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800890c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	01312cff 	.word	0x01312cff
 8008924:	02160ebf 	.word	0x02160ebf
 8008928:	03938700 	.word	0x03938700
 800892c:	05f5e0ff 	.word	0x05f5e0ff
 8008930:	08f0d17f 	.word	0x08f0d17f

08008934 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	e01d      	b.n	800897e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68d9      	ldr	r1, [r3, #12]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4613      	mov	r3, r2
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	4413      	add	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	440b      	add	r3, r1
 8008952:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2200      	movs	r2, #0
 800895e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2200      	movs	r2, #0
 8008964:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2200      	movs	r2, #0
 800896a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	3206      	adds	r2, #6
 8008974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3301      	adds	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b03      	cmp	r3, #3
 8008982:	d9de      	bls.n	8008942 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	f241 132c 	movw	r3, #4396	; 0x112c
 8008992:	4413      	add	r3, r2
 8008994:	2203      	movs	r2, #3
 8008996:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68d9      	ldr	r1, [r3, #12]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	f241 1314 	movw	r3, #4372	; 0x1114
 80089a4:	4413      	add	r3, r2
 80089a6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80089b4:	601a      	str	r2, [r3, #0]
}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b085      	sub	sp, #20
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e024      	b.n	8008a1a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6919      	ldr	r1, [r3, #16]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	4613      	mov	r3, r2
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	4413      	add	r3, r2
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	440b      	add	r3, r1
 80089e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2200      	movs	r2, #0
 80089f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2200      	movs	r2, #0
 80089f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2200      	movs	r2, #0
 80089fe:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3310      	adds	r3, #16
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d9d7      	bls.n	80089d0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	f241 1330 	movw	r3, #4400	; 0x1130
 8008a46:	4413      	add	r3, r2
 8008a48:	2203      	movs	r2, #3
 8008a4a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6919      	ldr	r1, [r3, #16]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	f241 131c 	movw	r3, #4380	; 0x111c
 8008a58:	4413      	add	r3, r2
 8008a5a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	f241 1328 	movw	r3, #4392	; 0x1128
 8008a6c:	4413      	add	r3, r2
 8008a6e:	6019      	str	r1, [r3, #0]
}
 8008a70:	bf00      	nop
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b089      	sub	sp, #36	; 0x24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008a8a:	4b89      	ldr	r3, [pc, #548]	; (8008cb0 <HAL_GPIO_Init+0x234>)
 8008a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a8e:	e194      	b.n	8008dba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	2101      	movs	r1, #1
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8186 	beq.w	8008db4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f003 0303 	and.w	r3, r3, #3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d005      	beq.n	8008ac0 <HAL_GPIO_Init+0x44>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f003 0303 	and.w	r3, r3, #3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d130      	bne.n	8008b22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	2203      	movs	r2, #3
 8008acc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008af6:	2201      	movs	r2, #1
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	fa02 f303 	lsl.w	r3, r2, r3
 8008afe:	43db      	mvns	r3, r3
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	4013      	ands	r3, r2
 8008b04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	091b      	lsrs	r3, r3, #4
 8008b0c:	f003 0201 	and.w	r2, r3, #1
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	fa02 f303 	lsl.w	r3, r2, r3
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d017      	beq.n	8008b5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	2203      	movs	r2, #3
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	4013      	ands	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d123      	bne.n	8008bb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	08da      	lsrs	r2, r3, #3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3208      	adds	r2, #8
 8008b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	220f      	movs	r2, #15
 8008b82:	fa02 f303 	lsl.w	r3, r2, r3
 8008b86:	43db      	mvns	r3, r3
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	f003 0307 	and.w	r3, r3, #7
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	08da      	lsrs	r2, r3, #3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3208      	adds	r2, #8
 8008bac:	69b9      	ldr	r1, [r7, #24]
 8008bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	2203      	movs	r2, #3
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f003 0203 	and.w	r2, r3, #3
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 80e0 	beq.w	8008db4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bf4:	4b2f      	ldr	r3, [pc, #188]	; (8008cb4 <HAL_GPIO_Init+0x238>)
 8008bf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bfa:	4a2e      	ldr	r2, [pc, #184]	; (8008cb4 <HAL_GPIO_Init+0x238>)
 8008bfc:	f043 0302 	orr.w	r3, r3, #2
 8008c00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008c04:	4b2b      	ldr	r3, [pc, #172]	; (8008cb4 <HAL_GPIO_Init+0x238>)
 8008c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c12:	4a29      	ldr	r2, [pc, #164]	; (8008cb8 <HAL_GPIO_Init+0x23c>)
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	089b      	lsrs	r3, r3, #2
 8008c18:	3302      	adds	r3, #2
 8008c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	220f      	movs	r2, #15
 8008c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2e:	43db      	mvns	r3, r3
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	4013      	ands	r3, r2
 8008c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a20      	ldr	r2, [pc, #128]	; (8008cbc <HAL_GPIO_Init+0x240>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d052      	beq.n	8008ce4 <HAL_GPIO_Init+0x268>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a1f      	ldr	r2, [pc, #124]	; (8008cc0 <HAL_GPIO_Init+0x244>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d031      	beq.n	8008caa <HAL_GPIO_Init+0x22e>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a1e      	ldr	r2, [pc, #120]	; (8008cc4 <HAL_GPIO_Init+0x248>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d02b      	beq.n	8008ca6 <HAL_GPIO_Init+0x22a>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a1d      	ldr	r2, [pc, #116]	; (8008cc8 <HAL_GPIO_Init+0x24c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d025      	beq.n	8008ca2 <HAL_GPIO_Init+0x226>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a1c      	ldr	r2, [pc, #112]	; (8008ccc <HAL_GPIO_Init+0x250>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d01f      	beq.n	8008c9e <HAL_GPIO_Init+0x222>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a1b      	ldr	r2, [pc, #108]	; (8008cd0 <HAL_GPIO_Init+0x254>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d019      	beq.n	8008c9a <HAL_GPIO_Init+0x21e>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a1a      	ldr	r2, [pc, #104]	; (8008cd4 <HAL_GPIO_Init+0x258>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d013      	beq.n	8008c96 <HAL_GPIO_Init+0x21a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a19      	ldr	r2, [pc, #100]	; (8008cd8 <HAL_GPIO_Init+0x25c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00d      	beq.n	8008c92 <HAL_GPIO_Init+0x216>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <HAL_GPIO_Init+0x260>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d007      	beq.n	8008c8e <HAL_GPIO_Init+0x212>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a17      	ldr	r2, [pc, #92]	; (8008ce0 <HAL_GPIO_Init+0x264>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d101      	bne.n	8008c8a <HAL_GPIO_Init+0x20e>
 8008c86:	2309      	movs	r3, #9
 8008c88:	e02d      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008c8a:	230a      	movs	r3, #10
 8008c8c:	e02b      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008c8e:	2308      	movs	r3, #8
 8008c90:	e029      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008c92:	2307      	movs	r3, #7
 8008c94:	e027      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008c96:	2306      	movs	r3, #6
 8008c98:	e025      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008c9a:	2305      	movs	r3, #5
 8008c9c:	e023      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008c9e:	2304      	movs	r3, #4
 8008ca0:	e021      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e01f      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	e01d      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e01b      	b.n	8008ce6 <HAL_GPIO_Init+0x26a>
 8008cae:	bf00      	nop
 8008cb0:	58000080 	.word	0x58000080
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	58000400 	.word	0x58000400
 8008cbc:	58020000 	.word	0x58020000
 8008cc0:	58020400 	.word	0x58020400
 8008cc4:	58020800 	.word	0x58020800
 8008cc8:	58020c00 	.word	0x58020c00
 8008ccc:	58021000 	.word	0x58021000
 8008cd0:	58021400 	.word	0x58021400
 8008cd4:	58021800 	.word	0x58021800
 8008cd8:	58021c00 	.word	0x58021c00
 8008cdc:	58022000 	.word	0x58022000
 8008ce0:	58022400 	.word	0x58022400
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	f002 0203 	and.w	r2, r2, #3
 8008cec:	0092      	lsls	r2, r2, #2
 8008cee:	4093      	lsls	r3, r2
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cf6:	4938      	ldr	r1, [pc, #224]	; (8008dd8 <HAL_GPIO_Init+0x35c>)
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	089b      	lsrs	r3, r3, #2
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	43db      	mvns	r3, r3
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	4013      	ands	r3, r2
 8008d14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	43db      	mvns	r3, r3
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	4013      	ands	r3, r2
 8008d42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	43db      	mvns	r3, r3
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	4013      	ands	r3, r2
 8008d98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	3301      	adds	r3, #1
 8008db8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f47f ae63 	bne.w	8008a90 <HAL_GPIO_Init+0x14>
  }
}
 8008dca:	bf00      	nop
 8008dcc:	bf00      	nop
 8008dce:	3724      	adds	r7, #36	; 0x24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	58000400 	.word	0x58000400

08008ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	807b      	strh	r3, [r7, #2]
 8008de8:	4613      	mov	r3, r2
 8008dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008dec:	787b      	ldrb	r3, [r7, #1]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008df2:	887a      	ldrh	r2, [r7, #2]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008df8:	e003      	b.n	8008e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008dfa:	887b      	ldrh	r3, [r7, #2]
 8008dfc:	041a      	lsls	r2, r3, #16
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	619a      	str	r2, [r3, #24]
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	4603      	mov	r3, r0
 8008e16:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e20:	88fb      	ldrh	r3, [r7, #6]
 8008e22:	4013      	ands	r3, r2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d008      	beq.n	8008e3a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e2c:	88fb      	ldrh	r3, [r7, #6]
 8008e2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e32:	88fb      	ldrh	r3, [r7, #6]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fa fa99 	bl	800336c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e44:	b08f      	sub	sp, #60	; 0x3c
 8008e46:	af0a      	add	r7, sp, #40	; 0x28
 8008e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e116      	b.n	8009082 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d106      	bne.n	8008e74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7fb f862 	bl	8003f38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2203      	movs	r2, #3
 8008e78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f007 f8aa 	bl	800ffec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	603b      	str	r3, [r7, #0]
 8008e9e:	687e      	ldr	r6, [r7, #4]
 8008ea0:	466d      	mov	r5, sp
 8008ea2:	f106 0410 	add.w	r4, r6, #16
 8008ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008eae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008eb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8008eb6:	1d33      	adds	r3, r6, #4
 8008eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008eba:	6838      	ldr	r0, [r7, #0]
 8008ebc:	f007 f828 	bl	800ff10 <USB_CoreInit>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e0d7      	b.n	8009082 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f007 f898 	bl	801000e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73fb      	strb	r3, [r7, #15]
 8008ee2:	e04a      	b.n	8008f7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008ee4:	7bfa      	ldrb	r2, [r7, #15]
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	00db      	lsls	r3, r3, #3
 8008eec:	1a9b      	subs	r3, r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	333d      	adds	r3, #61	; 0x3d
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008ef8:	7bfa      	ldrb	r2, [r7, #15]
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	4613      	mov	r3, r2
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	1a9b      	subs	r3, r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	440b      	add	r3, r1
 8008f06:	333c      	adds	r3, #60	; 0x3c
 8008f08:	7bfa      	ldrb	r2, [r7, #15]
 8008f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008f0c:	7bfa      	ldrb	r2, [r7, #15]
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	b298      	uxth	r0, r3
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	4613      	mov	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	3342      	adds	r3, #66	; 0x42
 8008f20:	4602      	mov	r2, r0
 8008f22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008f24:	7bfa      	ldrb	r2, [r7, #15]
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	1a9b      	subs	r3, r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	440b      	add	r3, r1
 8008f32:	333f      	adds	r3, #63	; 0x3f
 8008f34:	2200      	movs	r2, #0
 8008f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008f38:	7bfa      	ldrb	r2, [r7, #15]
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	1a9b      	subs	r3, r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	3344      	adds	r3, #68	; 0x44
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008f4c:	7bfa      	ldrb	r2, [r7, #15]
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	4613      	mov	r3, r2
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	1a9b      	subs	r3, r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	440b      	add	r3, r1
 8008f5a:	3348      	adds	r3, #72	; 0x48
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008f60:	7bfa      	ldrb	r2, [r7, #15]
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	4613      	mov	r3, r2
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	1a9b      	subs	r3, r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	3350      	adds	r3, #80	; 0x50
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	3301      	adds	r3, #1
 8008f78:	73fb      	strb	r3, [r7, #15]
 8008f7a:	7bfa      	ldrb	r2, [r7, #15]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d3af      	bcc.n	8008ee4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
 8008f88:	e044      	b.n	8009014 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008f8a:	7bfa      	ldrb	r2, [r7, #15]
 8008f8c:	6879      	ldr	r1, [r7, #4]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	1a9b      	subs	r3, r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	440b      	add	r3, r1
 8008f98:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008fa0:	7bfa      	ldrb	r2, [r7, #15]
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008fb2:	7bfa      	ldrb	r2, [r7, #15]
 8008fb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008fb6:	7bfa      	ldrb	r2, [r7, #15]
 8008fb8:	6879      	ldr	r1, [r7, #4]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008fcc:	7bfa      	ldrb	r2, [r7, #15]
 8008fce:	6879      	ldr	r1, [r7, #4]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	440b      	add	r3, r1
 8008fda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008fe2:	7bfa      	ldrb	r2, [r7, #15]
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	440b      	add	r3, r1
 8008ff0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008ff8:	7bfa      	ldrb	r2, [r7, #15]
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	00db      	lsls	r3, r3, #3
 8009000:	1a9b      	subs	r3, r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800900a:	2200      	movs	r2, #0
 800900c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	3301      	adds	r3, #1
 8009012:	73fb      	strb	r3, [r7, #15]
 8009014:	7bfa      	ldrb	r2, [r7, #15]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	429a      	cmp	r2, r3
 800901c:	d3b5      	bcc.n	8008f8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	687e      	ldr	r6, [r7, #4]
 8009026:	466d      	mov	r5, sp
 8009028:	f106 0410 	add.w	r4, r6, #16
 800902c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800902e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009034:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009038:	e885 0003 	stmia.w	r5, {r0, r1}
 800903c:	1d33      	adds	r3, r6, #4
 800903e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009040:	6838      	ldr	r0, [r7, #0]
 8009042:	f007 f831 	bl	80100a8 <USB_DevInit>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d005      	beq.n	8009058 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e014      	b.n	8009082 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	2b01      	cmp	r3, #1
 800906e:	d102      	bne.n	8009076 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f80b 	bl	800908c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f007 f9eb 	bl	8010456 <USB_DevDisconnect>

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800908c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ba:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	10000003 	.word	0x10000003

080090d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80090dc:	4b19      	ldr	r3, [pc, #100]	; (8009144 <HAL_PWREx_ConfigSupply+0x70>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f003 0304 	and.w	r3, r3, #4
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	d00a      	beq.n	80090fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80090e8:	4b16      	ldr	r3, [pc, #88]	; (8009144 <HAL_PWREx_ConfigSupply+0x70>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d001      	beq.n	80090fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e01f      	b.n	800913a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e01d      	b.n	800913a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80090fe:	4b11      	ldr	r3, [pc, #68]	; (8009144 <HAL_PWREx_ConfigSupply+0x70>)
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f023 0207 	bic.w	r2, r3, #7
 8009106:	490f      	ldr	r1, [pc, #60]	; (8009144 <HAL_PWREx_ConfigSupply+0x70>)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4313      	orrs	r3, r2
 800910c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800910e:	f7fb f969 	bl	80043e4 <HAL_GetTick>
 8009112:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009114:	e009      	b.n	800912a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009116:	f7fb f965 	bl	80043e4 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009124:	d901      	bls.n	800912a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e007      	b.n	800913a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800912a:	4b06      	ldr	r3, [pc, #24]	; (8009144 <HAL_PWREx_ConfigSupply+0x70>)
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009136:	d1ee      	bne.n	8009116 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	58024800 	.word	0x58024800

08009148 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800914c:	4b05      	ldr	r3, [pc, #20]	; (8009164 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	4a04      	ldr	r2, [pc, #16]	; (8009164 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009156:	60d3      	str	r3, [r2, #12]
}
 8009158:	bf00      	nop
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	58024800 	.word	0x58024800

08009168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08c      	sub	sp, #48	; 0x30
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d102      	bne.n	800917c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	f000 bc1c 	b.w	80099b4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 8087 	beq.w	8009298 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800918a:	4b9e      	ldr	r3, [pc, #632]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009192:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009194:	4b9b      	ldr	r3, [pc, #620]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	2b10      	cmp	r3, #16
 800919e:	d007      	beq.n	80091b0 <HAL_RCC_OscConfig+0x48>
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	2b18      	cmp	r3, #24
 80091a4:	d110      	bne.n	80091c8 <HAL_RCC_OscConfig+0x60>
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	f003 0303 	and.w	r3, r3, #3
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d10b      	bne.n	80091c8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091b0:	4b94      	ldr	r3, [pc, #592]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d06c      	beq.n	8009296 <HAL_RCC_OscConfig+0x12e>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d168      	bne.n	8009296 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e3f5      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d0:	d106      	bne.n	80091e0 <HAL_RCC_OscConfig+0x78>
 80091d2:	4b8c      	ldr	r3, [pc, #560]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a8b      	ldr	r2, [pc, #556]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80091d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091dc:	6013      	str	r3, [r2, #0]
 80091de:	e02e      	b.n	800923e <HAL_RCC_OscConfig+0xd6>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10c      	bne.n	8009202 <HAL_RCC_OscConfig+0x9a>
 80091e8:	4b86      	ldr	r3, [pc, #536]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a85      	ldr	r2, [pc, #532]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80091ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	4b83      	ldr	r3, [pc, #524]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a82      	ldr	r2, [pc, #520]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80091fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	e01d      	b.n	800923e <HAL_RCC_OscConfig+0xd6>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800920a:	d10c      	bne.n	8009226 <HAL_RCC_OscConfig+0xbe>
 800920c:	4b7d      	ldr	r3, [pc, #500]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a7c      	ldr	r2, [pc, #496]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	4b7a      	ldr	r3, [pc, #488]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a79      	ldr	r2, [pc, #484]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800921e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009222:	6013      	str	r3, [r2, #0]
 8009224:	e00b      	b.n	800923e <HAL_RCC_OscConfig+0xd6>
 8009226:	4b77      	ldr	r3, [pc, #476]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a76      	ldr	r2, [pc, #472]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800922c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	4b74      	ldr	r3, [pc, #464]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a73      	ldr	r2, [pc, #460]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800923c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d013      	beq.n	800926e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009246:	f7fb f8cd 	bl	80043e4 <HAL_GetTick>
 800924a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800924c:	e008      	b.n	8009260 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800924e:	f7fb f8c9 	bl	80043e4 <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b64      	cmp	r3, #100	; 0x64
 800925a:	d901      	bls.n	8009260 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e3a9      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009260:	4b68      	ldr	r3, [pc, #416]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0f0      	beq.n	800924e <HAL_RCC_OscConfig+0xe6>
 800926c:	e014      	b.n	8009298 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800926e:	f7fb f8b9 	bl	80043e4 <HAL_GetTick>
 8009272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009274:	e008      	b.n	8009288 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009276:	f7fb f8b5 	bl	80043e4 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	2b64      	cmp	r3, #100	; 0x64
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e395      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009288:	4b5e      	ldr	r3, [pc, #376]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1f0      	bne.n	8009276 <HAL_RCC_OscConfig+0x10e>
 8009294:	e000      	b.n	8009298 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009296:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 80ca 	beq.w	800943a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092a6:	4b57      	ldr	r3, [pc, #348]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80092b0:	4b54      	ldr	r3, [pc, #336]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80092b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d007      	beq.n	80092cc <HAL_RCC_OscConfig+0x164>
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	2b18      	cmp	r3, #24
 80092c0:	d156      	bne.n	8009370 <HAL_RCC_OscConfig+0x208>
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	f003 0303 	and.w	r3, r3, #3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d151      	bne.n	8009370 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092cc:	4b4d      	ldr	r3, [pc, #308]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d005      	beq.n	80092e4 <HAL_RCC_OscConfig+0x17c>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e367      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80092e4:	4b47      	ldr	r3, [pc, #284]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f023 0219 	bic.w	r2, r3, #25
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	4944      	ldr	r1, [pc, #272]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80092f6:	f7fb f875 	bl	80043e4 <HAL_GetTick>
 80092fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092fc:	e008      	b.n	8009310 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092fe:	f7fb f871 	bl	80043e4 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	d901      	bls.n	8009310 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e351      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009310:	4b3c      	ldr	r3, [pc, #240]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0304 	and.w	r3, r3, #4
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0f0      	beq.n	80092fe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800931c:	f7fb f892 	bl	8004444 <HAL_GetREVID>
 8009320:	4603      	mov	r3, r0
 8009322:	f241 0203 	movw	r2, #4099	; 0x1003
 8009326:	4293      	cmp	r3, r2
 8009328:	d817      	bhi.n	800935a <HAL_RCC_OscConfig+0x1f2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	2b40      	cmp	r3, #64	; 0x40
 8009330:	d108      	bne.n	8009344 <HAL_RCC_OscConfig+0x1dc>
 8009332:	4b34      	ldr	r3, [pc, #208]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800933a:	4a32      	ldr	r2, [pc, #200]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800933c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009340:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009342:	e07a      	b.n	800943a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009344:	4b2f      	ldr	r3, [pc, #188]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	031b      	lsls	r3, r3, #12
 8009352:	492c      	ldr	r1, [pc, #176]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009354:	4313      	orrs	r3, r2
 8009356:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009358:	e06f      	b.n	800943a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800935a:	4b2a      	ldr	r3, [pc, #168]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	061b      	lsls	r3, r3, #24
 8009368:	4926      	ldr	r1, [pc, #152]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800936a:	4313      	orrs	r3, r2
 800936c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800936e:	e064      	b.n	800943a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d047      	beq.n	8009408 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009378:	4b22      	ldr	r3, [pc, #136]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f023 0219 	bic.w	r2, r3, #25
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	491f      	ldr	r1, [pc, #124]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 8009386:	4313      	orrs	r3, r2
 8009388:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800938a:	f7fb f82b 	bl	80043e4 <HAL_GetTick>
 800938e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009390:	e008      	b.n	80093a4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009392:	f7fb f827 	bl	80043e4 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	2b02      	cmp	r3, #2
 800939e:	d901      	bls.n	80093a4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e307      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093a4:	4b17      	ldr	r3, [pc, #92]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0f0      	beq.n	8009392 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093b0:	f7fb f848 	bl	8004444 <HAL_GetREVID>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d817      	bhi.n	80093ee <HAL_RCC_OscConfig+0x286>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b40      	cmp	r3, #64	; 0x40
 80093c4:	d108      	bne.n	80093d8 <HAL_RCC_OscConfig+0x270>
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80093ce:	4a0d      	ldr	r2, [pc, #52]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80093d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d4:	6053      	str	r3, [r2, #4]
 80093d6:	e030      	b.n	800943a <HAL_RCC_OscConfig+0x2d2>
 80093d8:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	031b      	lsls	r3, r3, #12
 80093e6:	4907      	ldr	r1, [pc, #28]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	604b      	str	r3, [r1, #4]
 80093ec:	e025      	b.n	800943a <HAL_RCC_OscConfig+0x2d2>
 80093ee:	4b05      	ldr	r3, [pc, #20]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	061b      	lsls	r3, r3, #24
 80093fc:	4901      	ldr	r1, [pc, #4]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	604b      	str	r3, [r1, #4]
 8009402:	e01a      	b.n	800943a <HAL_RCC_OscConfig+0x2d2>
 8009404:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009408:	4b9e      	ldr	r3, [pc, #632]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a9d      	ldr	r2, [pc, #628]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800940e:	f023 0301 	bic.w	r3, r3, #1
 8009412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009414:	f7fa ffe6 	bl	80043e4 <HAL_GetTick>
 8009418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800941a:	e008      	b.n	800942e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800941c:	f7fa ffe2 	bl	80043e4 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d901      	bls.n	800942e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e2c2      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800942e:	4b95      	ldr	r3, [pc, #596]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0304 	and.w	r3, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1f0      	bne.n	800941c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0310 	and.w	r3, r3, #16
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 80a9 	beq.w	800959a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009448:	4b8e      	ldr	r3, [pc, #568]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009450:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009452:	4b8c      	ldr	r3, [pc, #560]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 8009454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009456:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	2b08      	cmp	r3, #8
 800945c:	d007      	beq.n	800946e <HAL_RCC_OscConfig+0x306>
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	2b18      	cmp	r3, #24
 8009462:	d13a      	bne.n	80094da <HAL_RCC_OscConfig+0x372>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	2b01      	cmp	r3, #1
 800946c:	d135      	bne.n	80094da <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800946e:	4b85      	ldr	r3, [pc, #532]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <HAL_RCC_OscConfig+0x31e>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	2b80      	cmp	r3, #128	; 0x80
 8009480:	d001      	beq.n	8009486 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e296      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009486:	f7fa ffdd 	bl	8004444 <HAL_GetREVID>
 800948a:	4603      	mov	r3, r0
 800948c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009490:	4293      	cmp	r3, r2
 8009492:	d817      	bhi.n	80094c4 <HAL_RCC_OscConfig+0x35c>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a1b      	ldr	r3, [r3, #32]
 8009498:	2b20      	cmp	r3, #32
 800949a:	d108      	bne.n	80094ae <HAL_RCC_OscConfig+0x346>
 800949c:	4b79      	ldr	r3, [pc, #484]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80094a4:	4a77      	ldr	r2, [pc, #476]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80094a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094aa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094ac:	e075      	b.n	800959a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094ae:	4b75      	ldr	r3, [pc, #468]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	069b      	lsls	r3, r3, #26
 80094bc:	4971      	ldr	r1, [pc, #452]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094c2:	e06a      	b.n	800959a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094c4:	4b6f      	ldr	r3, [pc, #444]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	061b      	lsls	r3, r3, #24
 80094d2:	496c      	ldr	r1, [pc, #432]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094d8:	e05f      	b.n	800959a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d042      	beq.n	8009568 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80094e2:	4b68      	ldr	r3, [pc, #416]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a67      	ldr	r2, [pc, #412]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80094e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ee:	f7fa ff79 	bl	80043e4 <HAL_GetTick>
 80094f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094f4:	e008      	b.n	8009508 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80094f6:	f7fa ff75 	bl	80043e4 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e255      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009508:	4b5e      	ldr	r3, [pc, #376]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0f0      	beq.n	80094f6 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009514:	f7fa ff96 	bl	8004444 <HAL_GetREVID>
 8009518:	4603      	mov	r3, r0
 800951a:	f241 0203 	movw	r2, #4099	; 0x1003
 800951e:	4293      	cmp	r3, r2
 8009520:	d817      	bhi.n	8009552 <HAL_RCC_OscConfig+0x3ea>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	2b20      	cmp	r3, #32
 8009528:	d108      	bne.n	800953c <HAL_RCC_OscConfig+0x3d4>
 800952a:	4b56      	ldr	r3, [pc, #344]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009532:	4a54      	ldr	r2, [pc, #336]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 8009534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009538:	6053      	str	r3, [r2, #4]
 800953a:	e02e      	b.n	800959a <HAL_RCC_OscConfig+0x432>
 800953c:	4b51      	ldr	r3, [pc, #324]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	069b      	lsls	r3, r3, #26
 800954a:	494e      	ldr	r1, [pc, #312]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800954c:	4313      	orrs	r3, r2
 800954e:	604b      	str	r3, [r1, #4]
 8009550:	e023      	b.n	800959a <HAL_RCC_OscConfig+0x432>
 8009552:	4b4c      	ldr	r3, [pc, #304]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	061b      	lsls	r3, r3, #24
 8009560:	4948      	ldr	r1, [pc, #288]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 8009562:	4313      	orrs	r3, r2
 8009564:	60cb      	str	r3, [r1, #12]
 8009566:	e018      	b.n	800959a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009568:	4b46      	ldr	r3, [pc, #280]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a45      	ldr	r2, [pc, #276]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800956e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009574:	f7fa ff36 	bl	80043e4 <HAL_GetTick>
 8009578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800957a:	e008      	b.n	800958e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800957c:	f7fa ff32 	bl	80043e4 <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b02      	cmp	r3, #2
 8009588:	d901      	bls.n	800958e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e212      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800958e:	4b3d      	ldr	r3, [pc, #244]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1f0      	bne.n	800957c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0308 	and.w	r3, r3, #8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d036      	beq.n	8009614 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d019      	beq.n	80095e2 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095ae:	4b35      	ldr	r3, [pc, #212]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80095b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095b2:	4a34      	ldr	r2, [pc, #208]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80095b4:	f043 0301 	orr.w	r3, r3, #1
 80095b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ba:	f7fa ff13 	bl	80043e4 <HAL_GetTick>
 80095be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80095c0:	e008      	b.n	80095d4 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095c2:	f7fa ff0f 	bl	80043e4 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e1ef      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80095d4:	4b2b      	ldr	r3, [pc, #172]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80095d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0f0      	beq.n	80095c2 <HAL_RCC_OscConfig+0x45a>
 80095e0:	e018      	b.n	8009614 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095e2:	4b28      	ldr	r3, [pc, #160]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80095e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e6:	4a27      	ldr	r2, [pc, #156]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 80095e8:	f023 0301 	bic.w	r3, r3, #1
 80095ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ee:	f7fa fef9 	bl	80043e4 <HAL_GetTick>
 80095f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80095f4:	e008      	b.n	8009608 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095f6:	f7fa fef5 	bl	80043e4 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	2b02      	cmp	r3, #2
 8009602:	d901      	bls.n	8009608 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e1d5      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009608:	4b1e      	ldr	r3, [pc, #120]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800960a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f0      	bne.n	80095f6 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0320 	and.w	r3, r3, #32
 800961c:	2b00      	cmp	r3, #0
 800961e:	d039      	beq.n	8009694 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d019      	beq.n	800965c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009628:	4b16      	ldr	r3, [pc, #88]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a15      	ldr	r2, [pc, #84]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800962e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009632:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009634:	f7fa fed6 	bl	80043e4 <HAL_GetTick>
 8009638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800963a:	e008      	b.n	800964e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800963c:	f7fa fed2 	bl	80043e4 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	2b02      	cmp	r3, #2
 8009648:	d901      	bls.n	800964e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e1b2      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800964e:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0f0      	beq.n	800963c <HAL_RCC_OscConfig+0x4d4>
 800965a:	e01b      	b.n	8009694 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800965c:	4b09      	ldr	r3, [pc, #36]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a08      	ldr	r2, [pc, #32]	; (8009684 <HAL_RCC_OscConfig+0x51c>)
 8009662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009666:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009668:	f7fa febc 	bl	80043e4 <HAL_GetTick>
 800966c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800966e:	e00b      	b.n	8009688 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009670:	f7fa feb8 	bl	80043e4 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	2b02      	cmp	r3, #2
 800967c:	d904      	bls.n	8009688 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800967e:	2303      	movs	r3, #3
 8009680:	e198      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
 8009682:	bf00      	nop
 8009684:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009688:	4ba3      	ldr	r3, [pc, #652]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1ed      	bne.n	8009670 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8081 	beq.w	80097a4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80096a2:	4b9e      	ldr	r3, [pc, #632]	; (800991c <HAL_RCC_OscConfig+0x7b4>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a9d      	ldr	r2, [pc, #628]	; (800991c <HAL_RCC_OscConfig+0x7b4>)
 80096a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096ae:	f7fa fe99 	bl	80043e4 <HAL_GetTick>
 80096b2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096b4:	e008      	b.n	80096c8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80096b6:	f7fa fe95 	bl	80043e4 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	2b64      	cmp	r3, #100	; 0x64
 80096c2:	d901      	bls.n	80096c8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e175      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096c8:	4b94      	ldr	r3, [pc, #592]	; (800991c <HAL_RCC_OscConfig+0x7b4>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0f0      	beq.n	80096b6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d106      	bne.n	80096ea <HAL_RCC_OscConfig+0x582>
 80096dc:	4b8e      	ldr	r3, [pc, #568]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80096de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e0:	4a8d      	ldr	r2, [pc, #564]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80096e2:	f043 0301 	orr.w	r3, r3, #1
 80096e6:	6713      	str	r3, [r2, #112]	; 0x70
 80096e8:	e02d      	b.n	8009746 <HAL_RCC_OscConfig+0x5de>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10c      	bne.n	800970c <HAL_RCC_OscConfig+0x5a4>
 80096f2:	4b89      	ldr	r3, [pc, #548]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	4a88      	ldr	r2, [pc, #544]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80096f8:	f023 0301 	bic.w	r3, r3, #1
 80096fc:	6713      	str	r3, [r2, #112]	; 0x70
 80096fe:	4b86      	ldr	r3, [pc, #536]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009702:	4a85      	ldr	r2, [pc, #532]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009704:	f023 0304 	bic.w	r3, r3, #4
 8009708:	6713      	str	r3, [r2, #112]	; 0x70
 800970a:	e01c      	b.n	8009746 <HAL_RCC_OscConfig+0x5de>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	2b05      	cmp	r3, #5
 8009712:	d10c      	bne.n	800972e <HAL_RCC_OscConfig+0x5c6>
 8009714:	4b80      	ldr	r3, [pc, #512]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009718:	4a7f      	ldr	r2, [pc, #508]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800971a:	f043 0304 	orr.w	r3, r3, #4
 800971e:	6713      	str	r3, [r2, #112]	; 0x70
 8009720:	4b7d      	ldr	r3, [pc, #500]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009724:	4a7c      	ldr	r2, [pc, #496]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009726:	f043 0301 	orr.w	r3, r3, #1
 800972a:	6713      	str	r3, [r2, #112]	; 0x70
 800972c:	e00b      	b.n	8009746 <HAL_RCC_OscConfig+0x5de>
 800972e:	4b7a      	ldr	r3, [pc, #488]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009732:	4a79      	ldr	r2, [pc, #484]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009734:	f023 0301 	bic.w	r3, r3, #1
 8009738:	6713      	str	r3, [r2, #112]	; 0x70
 800973a:	4b77      	ldr	r3, [pc, #476]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800973c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973e:	4a76      	ldr	r2, [pc, #472]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009740:	f023 0304 	bic.w	r3, r3, #4
 8009744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d015      	beq.n	800977a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800974e:	f7fa fe49 	bl	80043e4 <HAL_GetTick>
 8009752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009754:	e00a      	b.n	800976c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009756:	f7fa fe45 	bl	80043e4 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	f241 3288 	movw	r2, #5000	; 0x1388
 8009764:	4293      	cmp	r3, r2
 8009766:	d901      	bls.n	800976c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e123      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800976c:	4b6a      	ldr	r3, [pc, #424]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800976e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0ee      	beq.n	8009756 <HAL_RCC_OscConfig+0x5ee>
 8009778:	e014      	b.n	80097a4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800977a:	f7fa fe33 	bl	80043e4 <HAL_GetTick>
 800977e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009780:	e00a      	b.n	8009798 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009782:	f7fa fe2f 	bl	80043e4 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009790:	4293      	cmp	r3, r2
 8009792:	d901      	bls.n	8009798 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e10d      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009798:	4b5f      	ldr	r3, [pc, #380]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800979a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1ee      	bne.n	8009782 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 8102 	beq.w	80099b2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80097ae:	4b5a      	ldr	r3, [pc, #360]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097b6:	2b18      	cmp	r3, #24
 80097b8:	f000 80bd 	beq.w	8009936 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	f040 8095 	bne.w	80098f0 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097c6:	4b54      	ldr	r3, [pc, #336]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a53      	ldr	r2, [pc, #332]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80097cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d2:	f7fa fe07 	bl	80043e4 <HAL_GetTick>
 80097d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097d8:	e008      	b.n	80097ec <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097da:	f7fa fe03 	bl	80043e4 <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d901      	bls.n	80097ec <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e0e3      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097ec:	4b4a      	ldr	r3, [pc, #296]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1f0      	bne.n	80097da <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097f8:	4b47      	ldr	r3, [pc, #284]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80097fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097fc:	4b48      	ldr	r3, [pc, #288]	; (8009920 <HAL_RCC_OscConfig+0x7b8>)
 80097fe:	4013      	ands	r3, r2
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009808:	0112      	lsls	r2, r2, #4
 800980a:	430a      	orrs	r2, r1
 800980c:	4942      	ldr	r1, [pc, #264]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800980e:	4313      	orrs	r3, r2
 8009810:	628b      	str	r3, [r1, #40]	; 0x28
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009816:	3b01      	subs	r3, #1
 8009818:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009820:	3b01      	subs	r3, #1
 8009822:	025b      	lsls	r3, r3, #9
 8009824:	b29b      	uxth	r3, r3
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	3b01      	subs	r3, #1
 800982e:	041b      	lsls	r3, r3, #16
 8009830:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983a:	3b01      	subs	r3, #1
 800983c:	061b      	lsls	r3, r3, #24
 800983e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009842:	4935      	ldr	r1, [pc, #212]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009844:	4313      	orrs	r3, r2
 8009846:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009848:	4b33      	ldr	r3, [pc, #204]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	4a32      	ldr	r2, [pc, #200]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800984e:	f023 0301 	bic.w	r3, r3, #1
 8009852:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009854:	4b30      	ldr	r3, [pc, #192]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009858:	4b32      	ldr	r3, [pc, #200]	; (8009924 <HAL_RCC_OscConfig+0x7bc>)
 800985a:	4013      	ands	r3, r2
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009860:	00d2      	lsls	r2, r2, #3
 8009862:	492d      	ldr	r1, [pc, #180]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009864:	4313      	orrs	r3, r2
 8009866:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009868:	4b2b      	ldr	r3, [pc, #172]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	f023 020c 	bic.w	r2, r3, #12
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009874:	4928      	ldr	r1, [pc, #160]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009876:	4313      	orrs	r3, r2
 8009878:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800987a:	4b27      	ldr	r3, [pc, #156]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	f023 0202 	bic.w	r2, r3, #2
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009886:	4924      	ldr	r1, [pc, #144]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009888:	4313      	orrs	r3, r2
 800988a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800988c:	4b22      	ldr	r3, [pc, #136]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	4a21      	ldr	r2, [pc, #132]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 8009892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009898:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	4a1e      	ldr	r2, [pc, #120]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 800989e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80098a4:	4b1c      	ldr	r3, [pc, #112]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	4a1b      	ldr	r2, [pc, #108]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80098aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80098b0:	4b19      	ldr	r3, [pc, #100]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80098b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b4:	4a18      	ldr	r2, [pc, #96]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80098b6:	f043 0301 	orr.w	r3, r3, #1
 80098ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098bc:	4b16      	ldr	r3, [pc, #88]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a15      	ldr	r2, [pc, #84]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80098c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c8:	f7fa fd8c 	bl	80043e4 <HAL_GetTick>
 80098cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098ce:	e008      	b.n	80098e2 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098d0:	f7fa fd88 	bl	80043e4 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d901      	bls.n	80098e2 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e068      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098e2:	4b0d      	ldr	r3, [pc, #52]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0f0      	beq.n	80098d0 <HAL_RCC_OscConfig+0x768>
 80098ee:	e060      	b.n	80099b2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098f0:	4b09      	ldr	r3, [pc, #36]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a08      	ldr	r2, [pc, #32]	; (8009918 <HAL_RCC_OscConfig+0x7b0>)
 80098f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098fc:	f7fa fd72 	bl	80043e4 <HAL_GetTick>
 8009900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009902:	e011      	b.n	8009928 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009904:	f7fa fd6e 	bl	80043e4 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b02      	cmp	r3, #2
 8009910:	d90a      	bls.n	8009928 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e04e      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
 8009916:	bf00      	nop
 8009918:	58024400 	.word	0x58024400
 800991c:	58024800 	.word	0x58024800
 8009920:	fffffc0c 	.word	0xfffffc0c
 8009924:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009928:	4b24      	ldr	r3, [pc, #144]	; (80099bc <HAL_RCC_OscConfig+0x854>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e7      	bne.n	8009904 <HAL_RCC_OscConfig+0x79c>
 8009934:	e03d      	b.n	80099b2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009936:	4b21      	ldr	r3, [pc, #132]	; (80099bc <HAL_RCC_OscConfig+0x854>)
 8009938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800993c:	4b1f      	ldr	r3, [pc, #124]	; (80099bc <HAL_RCC_OscConfig+0x854>)
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	2b01      	cmp	r3, #1
 8009948:	d031      	beq.n	80099ae <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f003 0203 	and.w	r2, r3, #3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009954:	429a      	cmp	r2, r3
 8009956:	d12a      	bne.n	80099ae <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	091b      	lsrs	r3, r3, #4
 800995c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009964:	429a      	cmp	r2, r3
 8009966:	d122      	bne.n	80099ae <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009972:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009974:	429a      	cmp	r2, r3
 8009976:	d11a      	bne.n	80099ae <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	0a5b      	lsrs	r3, r3, #9
 800997c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009984:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009986:	429a      	cmp	r2, r3
 8009988:	d111      	bne.n	80099ae <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	0c1b      	lsrs	r3, r3, #16
 800998e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009996:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009998:	429a      	cmp	r2, r3
 800999a:	d108      	bne.n	80099ae <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	0e1b      	lsrs	r3, r3, #24
 80099a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d001      	beq.n	80099b2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e000      	b.n	80099b4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3730      	adds	r7, #48	; 0x30
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	58024400 	.word	0x58024400

080099c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e19c      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099d4:	4b8a      	ldr	r3, [pc, #552]	; (8009c00 <HAL_RCC_ClockConfig+0x240>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 030f 	and.w	r3, r3, #15
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d910      	bls.n	8009a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099e2:	4b87      	ldr	r3, [pc, #540]	; (8009c00 <HAL_RCC_ClockConfig+0x240>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f023 020f 	bic.w	r2, r3, #15
 80099ea:	4985      	ldr	r1, [pc, #532]	; (8009c00 <HAL_RCC_ClockConfig+0x240>)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099f2:	4b83      	ldr	r3, [pc, #524]	; (8009c00 <HAL_RCC_ClockConfig+0x240>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 030f 	and.w	r3, r3, #15
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d001      	beq.n	8009a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e184      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d010      	beq.n	8009a32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	4b7b      	ldr	r3, [pc, #492]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d908      	bls.n	8009a32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009a20:	4b78      	ldr	r3, [pc, #480]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	4975      	ldr	r1, [pc, #468]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 0308 	and.w	r3, r3, #8
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d010      	beq.n	8009a60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	695a      	ldr	r2, [r3, #20]
 8009a42:	4b70      	ldr	r3, [pc, #448]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d908      	bls.n	8009a60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a4e:	4b6d      	ldr	r3, [pc, #436]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	496a      	ldr	r1, [pc, #424]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0310 	and.w	r3, r3, #16
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d010      	beq.n	8009a8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	699a      	ldr	r2, [r3, #24]
 8009a70:	4b64      	ldr	r3, [pc, #400]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d908      	bls.n	8009a8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a7c:	4b61      	ldr	r3, [pc, #388]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	495e      	ldr	r1, [pc, #376]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0320 	and.w	r3, r3, #32
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d010      	beq.n	8009abc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	69da      	ldr	r2, [r3, #28]
 8009a9e:	4b59      	ldr	r3, [pc, #356]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d908      	bls.n	8009abc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009aaa:	4b56      	ldr	r3, [pc, #344]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	4953      	ldr	r1, [pc, #332]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d010      	beq.n	8009aea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68da      	ldr	r2, [r3, #12]
 8009acc:	4b4d      	ldr	r3, [pc, #308]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	f003 030f 	and.w	r3, r3, #15
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d908      	bls.n	8009aea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ad8:	4b4a      	ldr	r3, [pc, #296]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	f023 020f 	bic.w	r2, r3, #15
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	4947      	ldr	r1, [pc, #284]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d055      	beq.n	8009ba2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009af6:	4b43      	ldr	r3, [pc, #268]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	4940      	ldr	r1, [pc, #256]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d107      	bne.n	8009b20 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b10:	4b3c      	ldr	r3, [pc, #240]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d121      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e0f6      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d107      	bne.n	8009b38 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b28:	4b36      	ldr	r3, [pc, #216]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d115      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e0ea      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d107      	bne.n	8009b50 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b40:	4b30      	ldr	r3, [pc, #192]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d109      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e0de      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b50:	4b2c      	ldr	r3, [pc, #176]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e0d6      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b60:	4b28      	ldr	r3, [pc, #160]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f023 0207 	bic.w	r2, r3, #7
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	4925      	ldr	r1, [pc, #148]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b72:	f7fa fc37 	bl	80043e4 <HAL_GetTick>
 8009b76:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b78:	e00a      	b.n	8009b90 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b7a:	f7fa fc33 	bl	80043e4 <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d901      	bls.n	8009b90 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e0be      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b90:	4b1c      	ldr	r3, [pc, #112]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d1eb      	bne.n	8009b7a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d010      	beq.n	8009bd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	4b14      	ldr	r3, [pc, #80]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	f003 030f 	and.w	r3, r3, #15
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d208      	bcs.n	8009bd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bbe:	4b11      	ldr	r3, [pc, #68]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	f023 020f 	bic.w	r2, r3, #15
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	490e      	ldr	r1, [pc, #56]	; (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009bd0:	4b0b      	ldr	r3, [pc, #44]	; (8009c00 <HAL_RCC_ClockConfig+0x240>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 030f 	and.w	r3, r3, #15
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d214      	bcs.n	8009c08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bde:	4b08      	ldr	r3, [pc, #32]	; (8009c00 <HAL_RCC_ClockConfig+0x240>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f023 020f 	bic.w	r2, r3, #15
 8009be6:	4906      	ldr	r1, [pc, #24]	; (8009c00 <HAL_RCC_ClockConfig+0x240>)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bee:	4b04      	ldr	r3, [pc, #16]	; (8009c00 <HAL_RCC_ClockConfig+0x240>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d005      	beq.n	8009c08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e086      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
 8009c00:	52002000 	.word	0x52002000
 8009c04:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d010      	beq.n	8009c36 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691a      	ldr	r2, [r3, #16]
 8009c18:	4b3f      	ldr	r3, [pc, #252]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d208      	bcs.n	8009c36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c24:	4b3c      	ldr	r3, [pc, #240]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	4939      	ldr	r1, [pc, #228]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0308 	and.w	r3, r3, #8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d010      	beq.n	8009c64 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	695a      	ldr	r2, [r3, #20]
 8009c46:	4b34      	ldr	r3, [pc, #208]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d208      	bcs.n	8009c64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c52:	4b31      	ldr	r3, [pc, #196]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	492e      	ldr	r1, [pc, #184]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0310 	and.w	r3, r3, #16
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d010      	beq.n	8009c92 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	699a      	ldr	r2, [r3, #24]
 8009c74:	4b28      	ldr	r3, [pc, #160]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d208      	bcs.n	8009c92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c80:	4b25      	ldr	r3, [pc, #148]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	4922      	ldr	r1, [pc, #136]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d010      	beq.n	8009cc0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	69da      	ldr	r2, [r3, #28]
 8009ca2:	4b1d      	ldr	r3, [pc, #116]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d208      	bcs.n	8009cc0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009cae:	4b1a      	ldr	r3, [pc, #104]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	4917      	ldr	r1, [pc, #92]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009cc0:	f000 f834 	bl	8009d2c <HAL_RCC_GetSysClockFreq>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	0a1b      	lsrs	r3, r3, #8
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	4912      	ldr	r1, [pc, #72]	; (8009d1c <HAL_RCC_ClockConfig+0x35c>)
 8009cd2:	5ccb      	ldrb	r3, [r1, r3]
 8009cd4:	f003 031f 	and.w	r3, r3, #31
 8009cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cdc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cde:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	f003 030f 	and.w	r3, r3, #15
 8009ce6:	4a0d      	ldr	r2, [pc, #52]	; (8009d1c <HAL_RCC_ClockConfig+0x35c>)
 8009ce8:	5cd3      	ldrb	r3, [r2, r3]
 8009cea:	f003 031f 	and.w	r3, r3, #31
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf4:	4a0a      	ldr	r2, [pc, #40]	; (8009d20 <HAL_RCC_ClockConfig+0x360>)
 8009cf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cf8:	4a0a      	ldr	r2, [pc, #40]	; (8009d24 <HAL_RCC_ClockConfig+0x364>)
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <HAL_RCC_ClockConfig+0x368>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fa fb24 	bl	8004350 <HAL_InitTick>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	080115e0 	.word	0x080115e0
 8009d20:	24000004 	.word	0x24000004
 8009d24:	24000000 	.word	0x24000000
 8009d28:	24000008 	.word	0x24000008

08009d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b089      	sub	sp, #36	; 0x24
 8009d30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d32:	4bb3      	ldr	r3, [pc, #716]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d3a:	2b18      	cmp	r3, #24
 8009d3c:	f200 8155 	bhi.w	8009fea <HAL_RCC_GetSysClockFreq+0x2be>
 8009d40:	a201      	add	r2, pc, #4	; (adr r2, 8009d48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d46:	bf00      	nop
 8009d48:	08009dad 	.word	0x08009dad
 8009d4c:	08009feb 	.word	0x08009feb
 8009d50:	08009feb 	.word	0x08009feb
 8009d54:	08009feb 	.word	0x08009feb
 8009d58:	08009feb 	.word	0x08009feb
 8009d5c:	08009feb 	.word	0x08009feb
 8009d60:	08009feb 	.word	0x08009feb
 8009d64:	08009feb 	.word	0x08009feb
 8009d68:	08009dd3 	.word	0x08009dd3
 8009d6c:	08009feb 	.word	0x08009feb
 8009d70:	08009feb 	.word	0x08009feb
 8009d74:	08009feb 	.word	0x08009feb
 8009d78:	08009feb 	.word	0x08009feb
 8009d7c:	08009feb 	.word	0x08009feb
 8009d80:	08009feb 	.word	0x08009feb
 8009d84:	08009feb 	.word	0x08009feb
 8009d88:	08009dd9 	.word	0x08009dd9
 8009d8c:	08009feb 	.word	0x08009feb
 8009d90:	08009feb 	.word	0x08009feb
 8009d94:	08009feb 	.word	0x08009feb
 8009d98:	08009feb 	.word	0x08009feb
 8009d9c:	08009feb 	.word	0x08009feb
 8009da0:	08009feb 	.word	0x08009feb
 8009da4:	08009feb 	.word	0x08009feb
 8009da8:	08009ddf 	.word	0x08009ddf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dac:	4b94      	ldr	r3, [pc, #592]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d009      	beq.n	8009dcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009db8:	4b91      	ldr	r3, [pc, #580]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	08db      	lsrs	r3, r3, #3
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	4a90      	ldr	r2, [pc, #576]	; (800a004 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009dca:	e111      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009dcc:	4b8d      	ldr	r3, [pc, #564]	; (800a004 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009dce:	61bb      	str	r3, [r7, #24]
    break;
 8009dd0:	e10e      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009dd2:	4b8d      	ldr	r3, [pc, #564]	; (800a008 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009dd4:	61bb      	str	r3, [r7, #24]
    break;
 8009dd6:	e10b      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009dd8:	4b8c      	ldr	r3, [pc, #560]	; (800a00c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009dda:	61bb      	str	r3, [r7, #24]
    break;
 8009ddc:	e108      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dde:	4b88      	ldr	r3, [pc, #544]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de2:	f003 0303 	and.w	r3, r3, #3
 8009de6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009de8:	4b85      	ldr	r3, [pc, #532]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	091b      	lsrs	r3, r3, #4
 8009dee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009df2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009df4:	4b82      	ldr	r3, [pc, #520]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009dfe:	4b80      	ldr	r3, [pc, #512]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e02:	08db      	lsrs	r3, r3, #3
 8009e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	fb02 f303 	mul.w	r3, r2, r3
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 80e1 	beq.w	8009fe4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	f000 8083 	beq.w	8009f30 <HAL_RCC_GetSysClockFreq+0x204>
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	f200 80a1 	bhi.w	8009f74 <HAL_RCC_GetSysClockFreq+0x248>
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <HAL_RCC_GetSysClockFreq+0x114>
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d056      	beq.n	8009eec <HAL_RCC_GetSysClockFreq+0x1c0>
 8009e3e:	e099      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e40:	4b6f      	ldr	r3, [pc, #444]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d02d      	beq.n	8009ea8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e4c:	4b6c      	ldr	r3, [pc, #432]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	08db      	lsrs	r3, r3, #3
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	4a6b      	ldr	r2, [pc, #428]	; (800a004 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009e58:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e76:	4b62      	ldr	r3, [pc, #392]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009ea6:	e087      	b.n	8009fb8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a014 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eba:	4b51      	ldr	r3, [pc, #324]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ece:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eea:	e065      	b.n	8009fb8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a018 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efe:	4b40      	ldr	r3, [pc, #256]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f2e:	e043      	b.n	8009fb8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a01c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f42:	4b2f      	ldr	r3, [pc, #188]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f72:	e021      	b.n	8009fb8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a018 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f86:	4b1e      	ldr	r3, [pc, #120]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f8e:	ee07 3a90 	vmov	s15, r3
 8009f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fb6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009fb8:	4b11      	ldr	r3, [pc, #68]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbc:	0a5b      	lsrs	r3, r3, #9
 8009fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	ee07 3a90 	vmov	s15, r3
 8009fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009fd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fdc:	ee17 3a90 	vmov	r3, s15
 8009fe0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009fe2:	e005      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	61bb      	str	r3, [r7, #24]
    break;
 8009fe8:	e002      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009fea:	4b07      	ldr	r3, [pc, #28]	; (800a008 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009fec:	61bb      	str	r3, [r7, #24]
    break;
 8009fee:	bf00      	nop
  }

  return sysclockfreq;
 8009ff0:	69bb      	ldr	r3, [r7, #24]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3724      	adds	r7, #36	; 0x24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	58024400 	.word	0x58024400
 800a004:	03d09000 	.word	0x03d09000
 800a008:	003d0900 	.word	0x003d0900
 800a00c:	02dc6c00 	.word	0x02dc6c00
 800a010:	46000000 	.word	0x46000000
 800a014:	4c742400 	.word	0x4c742400
 800a018:	4a742400 	.word	0x4a742400
 800a01c:	4c371b00 	.word	0x4c371b00

0800a020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a026:	f7ff fe81 	bl	8009d2c <HAL_RCC_GetSysClockFreq>
 800a02a:	4602      	mov	r2, r0
 800a02c:	4b10      	ldr	r3, [pc, #64]	; (800a070 <HAL_RCC_GetHCLKFreq+0x50>)
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	0a1b      	lsrs	r3, r3, #8
 800a032:	f003 030f 	and.w	r3, r3, #15
 800a036:	490f      	ldr	r1, [pc, #60]	; (800a074 <HAL_RCC_GetHCLKFreq+0x54>)
 800a038:	5ccb      	ldrb	r3, [r1, r3]
 800a03a:	f003 031f 	and.w	r3, r3, #31
 800a03e:	fa22 f303 	lsr.w	r3, r2, r3
 800a042:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a044:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <HAL_RCC_GetHCLKFreq+0x50>)
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	f003 030f 	and.w	r3, r3, #15
 800a04c:	4a09      	ldr	r2, [pc, #36]	; (800a074 <HAL_RCC_GetHCLKFreq+0x54>)
 800a04e:	5cd3      	ldrb	r3, [r2, r3]
 800a050:	f003 031f 	and.w	r3, r3, #31
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	fa22 f303 	lsr.w	r3, r2, r3
 800a05a:	4a07      	ldr	r2, [pc, #28]	; (800a078 <HAL_RCC_GetHCLKFreq+0x58>)
 800a05c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a05e:	4a07      	ldr	r2, [pc, #28]	; (800a07c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a064:	4b04      	ldr	r3, [pc, #16]	; (800a078 <HAL_RCC_GetHCLKFreq+0x58>)
 800a066:	681b      	ldr	r3, [r3, #0]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	58024400 	.word	0x58024400
 800a074:	080115e0 	.word	0x080115e0
 800a078:	24000004 	.word	0x24000004
 800a07c:	24000000 	.word	0x24000000

0800a080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a084:	f7ff ffcc 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 800a088:	4602      	mov	r2, r0
 800a08a:	4b06      	ldr	r3, [pc, #24]	; (800a0a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	091b      	lsrs	r3, r3, #4
 800a090:	f003 0307 	and.w	r3, r3, #7
 800a094:	4904      	ldr	r1, [pc, #16]	; (800a0a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a096:	5ccb      	ldrb	r3, [r1, r3]
 800a098:	f003 031f 	and.w	r3, r3, #31
 800a09c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	080115e0 	.word	0x080115e0

0800a0ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a0b0:	f7ff ffb6 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	4b06      	ldr	r3, [pc, #24]	; (800a0d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	0a1b      	lsrs	r3, r3, #8
 800a0bc:	f003 0307 	and.w	r3, r3, #7
 800a0c0:	4904      	ldr	r1, [pc, #16]	; (800a0d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a0c2:	5ccb      	ldrb	r3, [r1, r3]
 800a0c4:	f003 031f 	and.w	r3, r3, #31
 800a0c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	58024400 	.word	0x58024400
 800a0d4:	080115e0 	.word	0x080115e0

0800a0d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d03f      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0fc:	d02a      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a0fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a102:	d824      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a108:	d018      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a10a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a10e:	d81e      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a118:	d007      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a11a:	e018      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a11c:	4bab      	ldr	r3, [pc, #684]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a120:	4aaa      	ldr	r2, [pc, #680]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a126:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a128:	e015      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	3304      	adds	r3, #4
 800a12e:	2102      	movs	r1, #2
 800a130:	4618      	mov	r0, r3
 800a132:	f001 fff3 	bl	800c11c <RCCEx_PLL2_Config>
 800a136:	4603      	mov	r3, r0
 800a138:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a13a:	e00c      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3324      	adds	r3, #36	; 0x24
 800a140:	2102      	movs	r1, #2
 800a142:	4618      	mov	r0, r3
 800a144:	f002 f89c 	bl	800c280 <RCCEx_PLL3_Config>
 800a148:	4603      	mov	r3, r0
 800a14a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a14c:	e003      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	75fb      	strb	r3, [r7, #23]
      break;
 800a152:	e000      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a154:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a156:	7dfb      	ldrb	r3, [r7, #23]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d109      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a15c:	4b9b      	ldr	r3, [pc, #620]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a168:	4998      	ldr	r1, [pc, #608]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	650b      	str	r3, [r1, #80]	; 0x50
 800a16e:	e001      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d03d      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a184:	2b04      	cmp	r3, #4
 800a186:	d826      	bhi.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a188:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18e:	bf00      	nop
 800a190:	0800a1a5 	.word	0x0800a1a5
 800a194:	0800a1b3 	.word	0x0800a1b3
 800a198:	0800a1c5 	.word	0x0800a1c5
 800a19c:	0800a1dd 	.word	0x0800a1dd
 800a1a0:	0800a1dd 	.word	0x0800a1dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1a4:	4b89      	ldr	r3, [pc, #548]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a8:	4a88      	ldr	r2, [pc, #544]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1b0:	e015      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f001 ffaf 	bl	800c11c <RCCEx_PLL2_Config>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1c2:	e00c      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	3324      	adds	r3, #36	; 0x24
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f002 f858 	bl	800c280 <RCCEx_PLL3_Config>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1d4:	e003      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1da:	e000      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a1dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d109      	bne.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1e4:	4b79      	ldr	r3, [pc, #484]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1e8:	f023 0207 	bic.w	r2, r3, #7
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f0:	4976      	ldr	r1, [pc, #472]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	650b      	str	r3, [r1, #80]	; 0x50
 800a1f6:	e001      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f8:	7dfb      	ldrb	r3, [r7, #23]
 800a1fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a204:	2b00      	cmp	r3, #0
 800a206:	d042      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a210:	d02b      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a216:	d825      	bhi.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a218:	2bc0      	cmp	r3, #192	; 0xc0
 800a21a:	d028      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a21c:	2bc0      	cmp	r3, #192	; 0xc0
 800a21e:	d821      	bhi.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a220:	2b80      	cmp	r3, #128	; 0x80
 800a222:	d016      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a224:	2b80      	cmp	r3, #128	; 0x80
 800a226:	d81d      	bhi.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d002      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a22c:	2b40      	cmp	r3, #64	; 0x40
 800a22e:	d007      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a230:	e018      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a232:	4b66      	ldr	r3, [pc, #408]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	4a65      	ldr	r2, [pc, #404]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a23c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a23e:	e017      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	3304      	adds	r3, #4
 800a244:	2100      	movs	r1, #0
 800a246:	4618      	mov	r0, r3
 800a248:	f001 ff68 	bl	800c11c <RCCEx_PLL2_Config>
 800a24c:	4603      	mov	r3, r0
 800a24e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a250:	e00e      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3324      	adds	r3, #36	; 0x24
 800a256:	2100      	movs	r1, #0
 800a258:	4618      	mov	r0, r3
 800a25a:	f002 f811 	bl	800c280 <RCCEx_PLL3_Config>
 800a25e:	4603      	mov	r3, r0
 800a260:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a262:	e005      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	75fb      	strb	r3, [r7, #23]
      break;
 800a268:	e002      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a26a:	bf00      	nop
 800a26c:	e000      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a26e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a270:	7dfb      	ldrb	r3, [r7, #23]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d109      	bne.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a276:	4b55      	ldr	r3, [pc, #340]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a27a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a282:	4952      	ldr	r1, [pc, #328]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a284:	4313      	orrs	r3, r2
 800a286:	650b      	str	r3, [r1, #80]	; 0x50
 800a288:	e001      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
 800a28c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a296:	2b00      	cmp	r3, #0
 800a298:	d049      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a2a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2a4:	d030      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a2a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2aa:	d82a      	bhi.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a2ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2b0:	d02c      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a2b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2b6:	d824      	bhi.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a2b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2bc:	d018      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a2be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2c2:	d81e      	bhi.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d003      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a2c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2cc:	d007      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a2ce:	e018      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2d0:	4b3e      	ldr	r3, [pc, #248]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	4a3d      	ldr	r2, [pc, #244]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2dc:	e017      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3304      	adds	r3, #4
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 ff19 	bl	800c11c <RCCEx_PLL2_Config>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a2ee:	e00e      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3324      	adds	r3, #36	; 0x24
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f001 ffc2 	bl	800c280 <RCCEx_PLL3_Config>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a300:	e005      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	75fb      	strb	r3, [r7, #23]
      break;
 800a306:	e002      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a308:	bf00      	nop
 800a30a:	e000      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a30c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a30e:	7dfb      	ldrb	r3, [r7, #23]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10a      	bne.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a314:	4b2d      	ldr	r3, [pc, #180]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a318:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a322:	492a      	ldr	r1, [pc, #168]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a324:	4313      	orrs	r3, r2
 800a326:	658b      	str	r3, [r1, #88]	; 0x58
 800a328:	e001      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a336:	2b00      	cmp	r3, #0
 800a338:	d04c      	beq.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a344:	d030      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a346:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a34a:	d82a      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a34c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a350:	d02c      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a352:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a356:	d824      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a35c:	d018      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a362:	d81e      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a36c:	d007      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a36e:	e018      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a370:	4b16      	ldr	r3, [pc, #88]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a374:	4a15      	ldr	r2, [pc, #84]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a37a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a37c:	e017      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	3304      	adds	r3, #4
 800a382:	2100      	movs	r1, #0
 800a384:	4618      	mov	r0, r3
 800a386:	f001 fec9 	bl	800c11c <RCCEx_PLL2_Config>
 800a38a:	4603      	mov	r3, r0
 800a38c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a38e:	e00e      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3324      	adds	r3, #36	; 0x24
 800a394:	2100      	movs	r1, #0
 800a396:	4618      	mov	r0, r3
 800a398:	f001 ff72 	bl	800c280 <RCCEx_PLL3_Config>
 800a39c:	4603      	mov	r3, r0
 800a39e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a3a0:	e005      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a6:	e002      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a3a8:	bf00      	nop
 800a3aa:	e000      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a3ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10d      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a3b4:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a3c2:	4902      	ldr	r1, [pc, #8]	; (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	658b      	str	r3, [r1, #88]	; 0x58
 800a3c8:	e004      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a3ca:	bf00      	nop
 800a3cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
 800a3d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d032      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3e4:	2b30      	cmp	r3, #48	; 0x30
 800a3e6:	d01c      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a3e8:	2b30      	cmp	r3, #48	; 0x30
 800a3ea:	d817      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a3ec:	2b20      	cmp	r3, #32
 800a3ee:	d00c      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a3f0:	2b20      	cmp	r3, #32
 800a3f2:	d813      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d016      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d10f      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3fc:	4baf      	ldr	r3, [pc, #700]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	4aae      	ldr	r2, [pc, #696]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a408:	e00e      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3304      	adds	r3, #4
 800a40e:	2102      	movs	r1, #2
 800a410:	4618      	mov	r0, r3
 800a412:	f001 fe83 	bl	800c11c <RCCEx_PLL2_Config>
 800a416:	4603      	mov	r3, r0
 800a418:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a41a:	e005      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]
      break;
 800a420:	e002      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a422:	bf00      	nop
 800a424:	e000      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a426:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d109      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a42e:	4ba3      	ldr	r3, [pc, #652]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a432:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a43a:	49a0      	ldr	r1, [pc, #640]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a440:	e001      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d047      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a45a:	d030      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a45c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a460:	d82a      	bhi.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a462:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a466:	d02c      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a468:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a46c:	d824      	bhi.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a46e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a472:	d018      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a478:	d81e      	bhi.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a47e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a482:	d007      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a484:	e018      	b.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a486:	4b8d      	ldr	r3, [pc, #564]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	4a8c      	ldr	r2, [pc, #560]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a48c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a490:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a492:	e017      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3304      	adds	r3, #4
 800a498:	2100      	movs	r1, #0
 800a49a:	4618      	mov	r0, r3
 800a49c:	f001 fe3e 	bl	800c11c <RCCEx_PLL2_Config>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a4a4:	e00e      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3324      	adds	r3, #36	; 0x24
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f001 fee7 	bl	800c280 <RCCEx_PLL3_Config>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a4b6:	e005      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a4bc:	e002      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a4be:	bf00      	nop
 800a4c0:	e000      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a4c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d109      	bne.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a4ca:	4b7c      	ldr	r3, [pc, #496]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d6:	4979      	ldr	r1, [pc, #484]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	650b      	str	r3, [r1, #80]	; 0x50
 800a4dc:	e001      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d049      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4f6:	d02e      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a4f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4fc:	d828      	bhi.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a4fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a502:	d02a      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a504:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a508:	d822      	bhi.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a50a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a50e:	d026      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a510:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a514:	d81c      	bhi.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a51a:	d010      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a51c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a520:	d816      	bhi.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d01d      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a52a:	d111      	bne.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3304      	adds	r3, #4
 800a530:	2101      	movs	r1, #1
 800a532:	4618      	mov	r0, r3
 800a534:	f001 fdf2 	bl	800c11c <RCCEx_PLL2_Config>
 800a538:	4603      	mov	r3, r0
 800a53a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a53c:	e012      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3324      	adds	r3, #36	; 0x24
 800a542:	2101      	movs	r1, #1
 800a544:	4618      	mov	r0, r3
 800a546:	f001 fe9b 	bl	800c280 <RCCEx_PLL3_Config>
 800a54a:	4603      	mov	r3, r0
 800a54c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a54e:	e009      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	75fb      	strb	r3, [r7, #23]
      break;
 800a554:	e006      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a556:	bf00      	nop
 800a558:	e004      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a55a:	bf00      	nop
 800a55c:	e002      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a55e:	bf00      	nop
 800a560:	e000      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a562:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d109      	bne.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a56a:	4b54      	ldr	r3, [pc, #336]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a56c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a576:	4951      	ldr	r1, [pc, #324]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	650b      	str	r3, [r1, #80]	; 0x50
 800a57c:	e001      	b.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
 800a580:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d04b      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a598:	d02e      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a59a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a59e:	d828      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5a4:	d02a      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5aa:	d822      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a5ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5b0:	d026      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a5b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5b6:	d81c      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a5b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5bc:	d010      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a5be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c2:	d816      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d01d      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a5c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5cc:	d111      	bne.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 fda1 	bl	800c11c <RCCEx_PLL2_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a5de:	e012      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3324      	adds	r3, #36	; 0x24
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f001 fe4a 	bl	800c280 <RCCEx_PLL3_Config>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a5f0:	e009      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f6:	e006      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a5f8:	bf00      	nop
 800a5fa:	e004      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a5fc:	bf00      	nop
 800a5fe:	e002      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a600:	bf00      	nop
 800a602:	e000      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a604:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a60c:	4b2b      	ldr	r3, [pc, #172]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a610:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a61a:	4928      	ldr	r1, [pc, #160]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a61c:	4313      	orrs	r3, r2
 800a61e:	658b      	str	r3, [r1, #88]	; 0x58
 800a620:	e001      	b.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d02f      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a63a:	d00e      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a63c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a640:	d814      	bhi.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a642:	2b00      	cmp	r3, #0
 800a644:	d015      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a64a:	d10f      	bne.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a64c:	4b1b      	ldr	r3, [pc, #108]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	4a1a      	ldr	r2, [pc, #104]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a658:	e00c      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3304      	adds	r3, #4
 800a65e:	2101      	movs	r1, #1
 800a660:	4618      	mov	r0, r3
 800a662:	f001 fd5b 	bl	800c11c <RCCEx_PLL2_Config>
 800a666:	4603      	mov	r3, r0
 800a668:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a66a:	e003      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	75fb      	strb	r3, [r7, #23]
      break;
 800a670:	e000      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a672:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d109      	bne.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a67a:	4b10      	ldr	r3, [pc, #64]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a67c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a686:	490d      	ldr	r1, [pc, #52]	; (800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a688:	4313      	orrs	r3, r2
 800a68a:	650b      	str	r3, [r1, #80]	; 0x50
 800a68c:	e001      	b.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d033      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d81c      	bhi.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a6a6:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ac:	0800a6e7 	.word	0x0800a6e7
 800a6b0:	0800a6c1 	.word	0x0800a6c1
 800a6b4:	0800a6cf 	.word	0x0800a6cf
 800a6b8:	0800a6e7 	.word	0x0800a6e7
 800a6bc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6c0:	4bb8      	ldr	r3, [pc, #736]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c4:	4ab7      	ldr	r2, [pc, #732]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a6cc:	e00c      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	2102      	movs	r1, #2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f001 fd21 	bl	800c11c <RCCEx_PLL2_Config>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a6de:	e003      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a6e4:	e000      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a6e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6e8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d109      	bne.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a6ee:	4bad      	ldr	r3, [pc, #692]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6f2:	f023 0203 	bic.w	r2, r3, #3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fa:	49aa      	ldr	r1, [pc, #680]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a700:	e001      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 8086 	beq.w	800a820 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a714:	4ba4      	ldr	r3, [pc, #656]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4aa3      	ldr	r2, [pc, #652]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a71a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a71e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a720:	f7f9 fe60 	bl	80043e4 <HAL_GetTick>
 800a724:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a726:	e009      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a728:	f7f9 fe5c 	bl	80043e4 <HAL_GetTick>
 800a72c:	4602      	mov	r2, r0
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	2b64      	cmp	r3, #100	; 0x64
 800a734:	d902      	bls.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	75fb      	strb	r3, [r7, #23]
        break;
 800a73a:	e005      	b.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a73c:	4b9a      	ldr	r3, [pc, #616]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0ef      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a748:	7dfb      	ldrb	r3, [r7, #23]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d166      	bne.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a74e:	4b95      	ldr	r3, [pc, #596]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a758:	4053      	eors	r3, r2
 800a75a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d013      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a762:	4b90      	ldr	r3, [pc, #576]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a76a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a76c:	4b8d      	ldr	r3, [pc, #564]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a770:	4a8c      	ldr	r2, [pc, #560]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a776:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a778:	4b8a      	ldr	r3, [pc, #552]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a77a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77c:	4a89      	ldr	r2, [pc, #548]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a77e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a782:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a784:	4a87      	ldr	r2, [pc, #540]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a794:	d115      	bne.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a796:	f7f9 fe25 	bl	80043e4 <HAL_GetTick>
 800a79a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a79c:	e00b      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a79e:	f7f9 fe21 	bl	80043e4 <HAL_GetTick>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d902      	bls.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	75fb      	strb	r3, [r7, #23]
            break;
 800a7b4:	e005      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7b6:	4b7b      	ldr	r3, [pc, #492]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d0ed      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d126      	bne.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a7ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7d6:	d10d      	bne.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a7d8:	4b72      	ldr	r3, [pc, #456]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a7e6:	0919      	lsrs	r1, r3, #4
 800a7e8:	4b70      	ldr	r3, [pc, #448]	; (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a7ea:	400b      	ands	r3, r1
 800a7ec:	496d      	ldr	r1, [pc, #436]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	610b      	str	r3, [r1, #16]
 800a7f2:	e005      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a7f4:	4b6b      	ldr	r3, [pc, #428]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	4a6a      	ldr	r2, [pc, #424]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7fe:	6113      	str	r3, [r2, #16]
 800a800:	4b68      	ldr	r3, [pc, #416]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a80a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a80e:	4965      	ldr	r1, [pc, #404]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a810:	4313      	orrs	r3, r2
 800a812:	670b      	str	r3, [r1, #112]	; 0x70
 800a814:	e004      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a816:	7dfb      	ldrb	r3, [r7, #23]
 800a818:	75bb      	strb	r3, [r7, #22]
 800a81a:	e001      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d07e      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a830:	2b28      	cmp	r3, #40	; 0x28
 800a832:	d867      	bhi.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a834:	a201      	add	r2, pc, #4	; (adr r2, 800a83c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83a:	bf00      	nop
 800a83c:	0800a90b 	.word	0x0800a90b
 800a840:	0800a905 	.word	0x0800a905
 800a844:	0800a905 	.word	0x0800a905
 800a848:	0800a905 	.word	0x0800a905
 800a84c:	0800a905 	.word	0x0800a905
 800a850:	0800a905 	.word	0x0800a905
 800a854:	0800a905 	.word	0x0800a905
 800a858:	0800a905 	.word	0x0800a905
 800a85c:	0800a8e1 	.word	0x0800a8e1
 800a860:	0800a905 	.word	0x0800a905
 800a864:	0800a905 	.word	0x0800a905
 800a868:	0800a905 	.word	0x0800a905
 800a86c:	0800a905 	.word	0x0800a905
 800a870:	0800a905 	.word	0x0800a905
 800a874:	0800a905 	.word	0x0800a905
 800a878:	0800a905 	.word	0x0800a905
 800a87c:	0800a8f3 	.word	0x0800a8f3
 800a880:	0800a905 	.word	0x0800a905
 800a884:	0800a905 	.word	0x0800a905
 800a888:	0800a905 	.word	0x0800a905
 800a88c:	0800a905 	.word	0x0800a905
 800a890:	0800a905 	.word	0x0800a905
 800a894:	0800a905 	.word	0x0800a905
 800a898:	0800a905 	.word	0x0800a905
 800a89c:	0800a90b 	.word	0x0800a90b
 800a8a0:	0800a905 	.word	0x0800a905
 800a8a4:	0800a905 	.word	0x0800a905
 800a8a8:	0800a905 	.word	0x0800a905
 800a8ac:	0800a905 	.word	0x0800a905
 800a8b0:	0800a905 	.word	0x0800a905
 800a8b4:	0800a905 	.word	0x0800a905
 800a8b8:	0800a905 	.word	0x0800a905
 800a8bc:	0800a90b 	.word	0x0800a90b
 800a8c0:	0800a905 	.word	0x0800a905
 800a8c4:	0800a905 	.word	0x0800a905
 800a8c8:	0800a905 	.word	0x0800a905
 800a8cc:	0800a905 	.word	0x0800a905
 800a8d0:	0800a905 	.word	0x0800a905
 800a8d4:	0800a905 	.word	0x0800a905
 800a8d8:	0800a905 	.word	0x0800a905
 800a8dc:	0800a90b 	.word	0x0800a90b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f001 fc18 	bl	800c11c <RCCEx_PLL2_Config>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a8f0:	e00c      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3324      	adds	r3, #36	; 0x24
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f001 fcc1 	bl	800c280 <RCCEx_PLL3_Config>
 800a8fe:	4603      	mov	r3, r0
 800a900:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a902:	e003      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	75fb      	strb	r3, [r7, #23]
      break;
 800a908:	e000      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a90a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d109      	bne.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a912:	4b24      	ldr	r3, [pc, #144]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a916:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a91e:	4921      	ldr	r1, [pc, #132]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a920:	4313      	orrs	r3, r2
 800a922:	654b      	str	r3, [r1, #84]	; 0x54
 800a924:	e001      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0302 	and.w	r3, r3, #2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d03e      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a93a:	2b05      	cmp	r3, #5
 800a93c:	d820      	bhi.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a93e:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a944:	0800a987 	.word	0x0800a987
 800a948:	0800a95d 	.word	0x0800a95d
 800a94c:	0800a96f 	.word	0x0800a96f
 800a950:	0800a987 	.word	0x0800a987
 800a954:	0800a987 	.word	0x0800a987
 800a958:	0800a987 	.word	0x0800a987
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3304      	adds	r3, #4
 800a960:	2101      	movs	r1, #1
 800a962:	4618      	mov	r0, r3
 800a964:	f001 fbda 	bl	800c11c <RCCEx_PLL2_Config>
 800a968:	4603      	mov	r3, r0
 800a96a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a96c:	e00c      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3324      	adds	r3, #36	; 0x24
 800a972:	2101      	movs	r1, #1
 800a974:	4618      	mov	r0, r3
 800a976:	f001 fc83 	bl	800c280 <RCCEx_PLL3_Config>
 800a97a:	4603      	mov	r3, r0
 800a97c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a97e:	e003      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	75fb      	strb	r3, [r7, #23]
      break;
 800a984:	e000      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a986:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d110      	bne.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a98e:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a992:	f023 0207 	bic.w	r2, r3, #7
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a99a:	4902      	ldr	r1, [pc, #8]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	654b      	str	r3, [r1, #84]	; 0x54
 800a9a0:	e008      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a9a2:	bf00      	nop
 800a9a4:	58024400 	.word	0x58024400
 800a9a8:	58024800 	.word	0x58024800
 800a9ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d039      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c6:	2b05      	cmp	r3, #5
 800a9c8:	d820      	bhi.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a9ca:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800aa13 	.word	0x0800aa13
 800a9d4:	0800a9e9 	.word	0x0800a9e9
 800a9d8:	0800a9fb 	.word	0x0800a9fb
 800a9dc:	0800aa13 	.word	0x0800aa13
 800a9e0:	0800aa13 	.word	0x0800aa13
 800a9e4:	0800aa13 	.word	0x0800aa13
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 fb94 	bl	800c11c <RCCEx_PLL2_Config>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a9f8:	e00c      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3324      	adds	r3, #36	; 0x24
 800a9fe:	2101      	movs	r1, #1
 800aa00:	4618      	mov	r0, r3
 800aa02:	f001 fc3d 	bl	800c280 <RCCEx_PLL3_Config>
 800aa06:	4603      	mov	r3, r0
 800aa08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800aa0a:	e003      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa10:	e000      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800aa12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10a      	bne.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa1a:	4bb7      	ldr	r3, [pc, #732]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1e:	f023 0207 	bic.w	r2, r3, #7
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa28:	49b3      	ldr	r1, [pc, #716]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	658b      	str	r3, [r1, #88]	; 0x58
 800aa2e:	e001      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d04b      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa4a:	d02e      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800aa4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa50:	d828      	bhi.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800aa52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa56:	d02a      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800aa58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa5c:	d822      	bhi.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800aa5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa62:	d026      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800aa64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa68:	d81c      	bhi.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800aa6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa6e:	d010      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800aa70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa74:	d816      	bhi.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d01d      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800aa7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa7e:	d111      	bne.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3304      	adds	r3, #4
 800aa84:	2100      	movs	r1, #0
 800aa86:	4618      	mov	r0, r3
 800aa88:	f001 fb48 	bl	800c11c <RCCEx_PLL2_Config>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800aa90:	e012      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3324      	adds	r3, #36	; 0x24
 800aa96:	2102      	movs	r1, #2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f001 fbf1 	bl	800c280 <RCCEx_PLL3_Config>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800aaa2:	e009      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	75fb      	strb	r3, [r7, #23]
      break;
 800aaa8:	e006      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aaaa:	bf00      	nop
 800aaac:	e004      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aaae:	bf00      	nop
 800aab0:	e002      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aab2:	bf00      	nop
 800aab4:	e000      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10a      	bne.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aabe:	4b8e      	ldr	r3, [pc, #568]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aacc:	498a      	ldr	r1, [pc, #552]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aace:	4313      	orrs	r3, r2
 800aad0:	654b      	str	r3, [r1, #84]	; 0x54
 800aad2:	e001      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d04b      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aaea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aaee:	d02e      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800aaf0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aaf4:	d828      	bhi.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800aaf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aafa:	d02a      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800aafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab00:	d822      	bhi.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ab02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab06:	d026      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800ab08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab0c:	d81c      	bhi.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ab0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab12:	d010      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800ab14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab18:	d816      	bhi.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d01d      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800ab1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab22:	d111      	bne.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3304      	adds	r3, #4
 800ab28:	2100      	movs	r1, #0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f001 faf6 	bl	800c11c <RCCEx_PLL2_Config>
 800ab30:	4603      	mov	r3, r0
 800ab32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ab34:	e012      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3324      	adds	r3, #36	; 0x24
 800ab3a:	2102      	movs	r1, #2
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 fb9f 	bl	800c280 <RCCEx_PLL3_Config>
 800ab42:	4603      	mov	r3, r0
 800ab44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ab46:	e009      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab4c:	e006      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ab4e:	bf00      	nop
 800ab50:	e004      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ab52:	bf00      	nop
 800ab54:	e002      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ab56:	bf00      	nop
 800ab58:	e000      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ab5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab62:	4b65      	ldr	r3, [pc, #404]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ab64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab66:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab70:	4961      	ldr	r1, [pc, #388]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ab72:	4313      	orrs	r3, r2
 800ab74:	658b      	str	r3, [r1, #88]	; 0x58
 800ab76:	e001      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d04b      	beq.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab92:	d02e      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800ab94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab98:	d828      	bhi.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ab9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab9e:	d02a      	beq.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800aba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aba4:	d822      	bhi.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800aba6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abaa:	d026      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800abac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abb0:	d81c      	bhi.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800abb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abb6:	d010      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800abb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abbc:	d816      	bhi.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d01d      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800abc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abc6:	d111      	bne.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3304      	adds	r3, #4
 800abcc:	2100      	movs	r1, #0
 800abce:	4618      	mov	r0, r3
 800abd0:	f001 faa4 	bl	800c11c <RCCEx_PLL2_Config>
 800abd4:	4603      	mov	r3, r0
 800abd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800abd8:	e012      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	3324      	adds	r3, #36	; 0x24
 800abde:	2102      	movs	r1, #2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f001 fb4d 	bl	800c280 <RCCEx_PLL3_Config>
 800abe6:	4603      	mov	r3, r0
 800abe8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800abea:	e009      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	75fb      	strb	r3, [r7, #23]
      break;
 800abf0:	e006      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800abf2:	bf00      	nop
 800abf4:	e004      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800abf6:	bf00      	nop
 800abf8:	e002      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800abfa:	bf00      	nop
 800abfc:	e000      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800abfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac06:	4b3c      	ldr	r3, [pc, #240]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac14:	4938      	ldr	r1, [pc, #224]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac16:	4313      	orrs	r3, r2
 800ac18:	658b      	str	r3, [r1, #88]	; 0x58
 800ac1a:	e001      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac1c:	7dfb      	ldrb	r3, [r7, #23]
 800ac1e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0308 	and.w	r3, r3, #8
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01a      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac36:	d10a      	bne.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3324      	adds	r3, #36	; 0x24
 800ac3c:	2102      	movs	r1, #2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f001 fb1e 	bl	800c280 <RCCEx_PLL3_Config>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ac4e:	4b2a      	ldr	r3, [pc, #168]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac5c:	4926      	ldr	r1, [pc, #152]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0310 	and.w	r3, r3, #16
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d01a      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac78:	d10a      	bne.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	3324      	adds	r3, #36	; 0x24
 800ac7e:	2102      	movs	r1, #2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f001 fafd 	bl	800c280 <RCCEx_PLL3_Config>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac90:	4b19      	ldr	r3, [pc, #100]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac9e:	4916      	ldr	r1, [pc, #88]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aca0:	4313      	orrs	r3, r2
 800aca2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d036      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800acb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acba:	d01f      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800acbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc0:	d817      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800acc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acca:	d009      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800accc:	e011      	b.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3304      	adds	r3, #4
 800acd2:	2100      	movs	r1, #0
 800acd4:	4618      	mov	r0, r3
 800acd6:	f001 fa21 	bl	800c11c <RCCEx_PLL2_Config>
 800acda:	4603      	mov	r3, r0
 800acdc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800acde:	e00e      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	3324      	adds	r3, #36	; 0x24
 800ace4:	2102      	movs	r1, #2
 800ace6:	4618      	mov	r0, r3
 800ace8:	f001 faca 	bl	800c280 <RCCEx_PLL3_Config>
 800acec:	4603      	mov	r3, r0
 800acee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800acf0:	e005      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	75fb      	strb	r3, [r7, #23]
      break;
 800acf6:	e002      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800acf8:	58024400 	.word	0x58024400
      break;
 800acfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acfe:	7dfb      	ldrb	r3, [r7, #23]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10a      	bne.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad04:	4b93      	ldr	r3, [pc, #588]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ad12:	4990      	ldr	r1, [pc, #576]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad14:	4313      	orrs	r3, r2
 800ad16:	658b      	str	r3, [r1, #88]	; 0x58
 800ad18:	e001      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
 800ad1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d033      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad34:	d01c      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800ad36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad3a:	d816      	bhi.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800ad3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad40:	d003      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800ad42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad46:	d007      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800ad48:	e00f      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad4a:	4b82      	ldr	r3, [pc, #520]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4e:	4a81      	ldr	r2, [pc, #516]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ad56:	e00c      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3324      	adds	r3, #36	; 0x24
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f001 fa8e 	bl	800c280 <RCCEx_PLL3_Config>
 800ad64:	4603      	mov	r3, r0
 800ad66:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ad68:	e003      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad6e:	e000      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800ad70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad78:	4b76      	ldr	r3, [pc, #472]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad86:	4973      	ldr	r1, [pc, #460]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	654b      	str	r3, [r1, #84]	; 0x54
 800ad8c:	e001      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
 800ad90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d029      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800ada6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adaa:	d007      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800adac:	e00f      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adae:	4b69      	ldr	r3, [pc, #420]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800adb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb2:	4a68      	ldr	r2, [pc, #416]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800adb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800adba:	e00b      	b.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3304      	adds	r3, #4
 800adc0:	2102      	movs	r1, #2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f001 f9aa 	bl	800c11c <RCCEx_PLL2_Config>
 800adc8:	4603      	mov	r3, r0
 800adca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800adcc:	e002      	b.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	75fb      	strb	r3, [r7, #23]
      break;
 800add2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d109      	bne.n	800adee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800adda:	4b5e      	ldr	r3, [pc, #376]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800addc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade6:	495b      	ldr	r1, [pc, #364]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ade8:	4313      	orrs	r3, r2
 800adea:	64cb      	str	r3, [r1, #76]	; 0x4c
 800adec:	e001      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adee:	7dfb      	ldrb	r3, [r7, #23]
 800adf0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3324      	adds	r3, #36	; 0x24
 800ae02:	2102      	movs	r1, #2
 800ae04:	4618      	mov	r0, r3
 800ae06:	f001 fa3b 	bl	800c280 <RCCEx_PLL3_Config>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d030      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae28:	d017      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800ae2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae2e:	d811      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ae30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae34:	d013      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ae36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae3a:	d80b      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d010      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ae40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae44:	d106      	bne.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae46:	4b43      	ldr	r3, [pc, #268]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	4a42      	ldr	r2, [pc, #264]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ae52:	e007      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	75fb      	strb	r3, [r7, #23]
      break;
 800ae58:	e004      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ae5a:	bf00      	nop
 800ae5c:	e002      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ae5e:	bf00      	nop
 800ae60:	e000      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ae62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d109      	bne.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae6a:	4b3a      	ldr	r3, [pc, #232]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae76:	4937      	ldr	r1, [pc, #220]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	654b      	str	r3, [r1, #84]	; 0x54
 800ae7c:	e001      	b.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae7e:	7dfb      	ldrb	r3, [r7, #23]
 800ae80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d008      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae8e:	4b31      	ldr	r3, [pc, #196]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae9a:	492e      	ldr	r1, [pc, #184]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d009      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800aeac:	4b29      	ldr	r3, [pc, #164]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aeba:	4926      	ldr	r1, [pc, #152]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aebc:	4313      	orrs	r3, r2
 800aebe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d008      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aecc:	4b21      	ldr	r3, [pc, #132]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aed8:	491e      	ldr	r1, [pc, #120]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00d      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aeea:	4b1a      	ldr	r3, [pc, #104]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	4a19      	ldr	r2, [pc, #100]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aef4:	6113      	str	r3, [r2, #16]
 800aef6:	4b17      	ldr	r3, [pc, #92]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aef8:	691a      	ldr	r2, [r3, #16]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800af00:	4914      	ldr	r1, [pc, #80]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af02:	4313      	orrs	r3, r2
 800af04:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	da08      	bge.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800af0e:	4b11      	ldr	r3, [pc, #68]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af1a:	490e      	ldr	r1, [pc, #56]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af1c:	4313      	orrs	r3, r2
 800af1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d009      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3a:	4906      	ldr	r1, [pc, #24]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af3c:	4313      	orrs	r3, r2
 800af3e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800af40:	7dbb      	ldrb	r3, [r7, #22]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	e000      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3718      	adds	r7, #24
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	58024400 	.word	0x58024400

0800af58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b090      	sub	sp, #64	; 0x40
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af66:	f040 8095 	bne.w	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800af6a:	4bae      	ldr	r3, [pc, #696]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6e:	f003 0307 	and.w	r3, r3, #7
 800af72:	633b      	str	r3, [r7, #48]	; 0x30
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	2b04      	cmp	r3, #4
 800af78:	f200 8088 	bhi.w	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800af7c:	a201      	add	r2, pc, #4	; (adr r2, 800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800af7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af82:	bf00      	nop
 800af84:	0800af99 	.word	0x0800af99
 800af88:	0800afc1 	.word	0x0800afc1
 800af8c:	0800afe9 	.word	0x0800afe9
 800af90:	0800b085 	.word	0x0800b085
 800af94:	0800b011 	.word	0x0800b011

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af98:	4ba2      	ldr	r3, [pc, #648]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afa4:	d108      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 ff64 	bl	800be78 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800afb4:	f000 bc95 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800afb8:	2300      	movs	r3, #0
 800afba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afbc:	f000 bc91 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afc0:	4b98      	ldr	r3, [pc, #608]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afcc:	d108      	bne.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afce:	f107 0318 	add.w	r3, r7, #24
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 fca8 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800afdc:	f000 bc81 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afe4:	f000 bc7d 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afe8:	4b8e      	ldr	r3, [pc, #568]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aff4:	d108      	bne.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aff6:	f107 030c 	add.w	r3, r7, #12
 800affa:	4618      	mov	r0, r3
 800affc:	f000 fde8 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b004:	f000 bc6d 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b00c:	f000 bc69 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b010:	4b84      	ldr	r3, [pc, #528]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b018:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b01a:	4b82      	ldr	r3, [pc, #520]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 0304 	and.w	r3, r3, #4
 800b022:	2b04      	cmp	r3, #4
 800b024:	d10c      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d109      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b02c:	4b7d      	ldr	r3, [pc, #500]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	08db      	lsrs	r3, r3, #3
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	4a7c      	ldr	r2, [pc, #496]	; (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b038:	fa22 f303 	lsr.w	r3, r2, r3
 800b03c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b03e:	e01f      	b.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b040:	4b78      	ldr	r3, [pc, #480]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b04c:	d106      	bne.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b054:	d102      	bne.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b056:	4b75      	ldr	r3, [pc, #468]	; (800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b05a:	e011      	b.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b05c:	4b71      	ldr	r3, [pc, #452]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b068:	d106      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b070:	d102      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b072:	4b6f      	ldr	r3, [pc, #444]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b074:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b076:	e003      	b.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b07c:	f000 bc31 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b080:	f000 bc2f 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b084:	4b6b      	ldr	r3, [pc, #428]	; (800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b088:	f000 bc2b 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b090:	f000 bc27 	b.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b09a:	f040 8095 	bne.w	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b09e:	4b61      	ldr	r3, [pc, #388]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b0a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b0a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ae:	d04d      	beq.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b6:	f200 8084 	bhi.w	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	2bc0      	cmp	r3, #192	; 0xc0
 800b0be:	d07d      	beq.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	2bc0      	cmp	r3, #192	; 0xc0
 800b0c4:	d87d      	bhi.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	2b80      	cmp	r3, #128	; 0x80
 800b0ca:	d02d      	beq.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	2b80      	cmp	r3, #128	; 0x80
 800b0d0:	d877      	bhi.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	2b40      	cmp	r3, #64	; 0x40
 800b0dc:	d012      	beq.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b0de:	e070      	b.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0e0:	4b50      	ldr	r3, [pc, #320]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0ec:	d107      	bne.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 fec0 	bl	800be78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b0fc:	e3f1      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b102:	e3ee      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b104:	4b47      	ldr	r3, [pc, #284]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b10c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b110:	d107      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b112:	f107 0318 	add.w	r3, r7, #24
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fc06 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b120:	e3df      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b126:	e3dc      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b128:	4b3e      	ldr	r3, [pc, #248]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b134:	d107      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b136:	f107 030c 	add.w	r3, r7, #12
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 fd48 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b144:	e3cd      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b14a:	e3ca      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b14c:	4b35      	ldr	r3, [pc, #212]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b14e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b154:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b156:	4b33      	ldr	r3, [pc, #204]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 0304 	and.w	r3, r3, #4
 800b15e:	2b04      	cmp	r3, #4
 800b160:	d10c      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b164:	2b00      	cmp	r3, #0
 800b166:	d109      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b168:	4b2e      	ldr	r3, [pc, #184]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	08db      	lsrs	r3, r3, #3
 800b16e:	f003 0303 	and.w	r3, r3, #3
 800b172:	4a2d      	ldr	r2, [pc, #180]	; (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b174:	fa22 f303 	lsr.w	r3, r2, r3
 800b178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b17a:	e01e      	b.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b17c:	4b29      	ldr	r3, [pc, #164]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b188:	d106      	bne.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b190:	d102      	bne.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b192:	4b26      	ldr	r3, [pc, #152]	; (800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b194:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b196:	e010      	b.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b198:	4b22      	ldr	r3, [pc, #136]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1a4:	d106      	bne.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ac:	d102      	bne.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b1ae:	4b20      	ldr	r3, [pc, #128]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1b2:	e002      	b.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b1b8:	e393      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1ba:	e392      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b1bc:	4b1d      	ldr	r3, [pc, #116]	; (800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b1be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1c0:	e38f      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1c6:	e38c      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1ce:	f040 80a7 	bne.w	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b1d2:	4b14      	ldr	r3, [pc, #80]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b1da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1e2:	d05f      	beq.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1ea:	f200 8096 	bhi.w	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b1f4:	f000 808e 	beq.w	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b1fe:	f200 808c 	bhi.w	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b208:	d03a      	beq.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b210:	f200 8083 	bhi.w	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00e      	beq.n	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b220:	d01c      	beq.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800b222:	e07a      	b.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b224:	58024400 	.word	0x58024400
 800b228:	03d09000 	.word	0x03d09000
 800b22c:	003d0900 	.word	0x003d0900
 800b230:	02dc6c00 	.word	0x02dc6c00
 800b234:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b238:	4baa      	ldr	r3, [pc, #680]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b244:	d107      	bne.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fe14 	bl	800be78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b254:	e345      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b25a:	e342      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b25c:	4ba1      	ldr	r3, [pc, #644]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b268:	d107      	bne.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b26a:	f107 0318 	add.w	r3, r7, #24
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 fb5a 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b278:	e333      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b27e:	e330      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b280:	4b98      	ldr	r3, [pc, #608]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b28c:	d107      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b28e:	f107 030c 	add.w	r3, r7, #12
 800b292:	4618      	mov	r0, r3
 800b294:	f000 fc9c 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b29c:	e321      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2a2:	e31e      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b2a4:	4b8f      	ldr	r3, [pc, #572]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b2a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2ae:	4b8d      	ldr	r3, [pc, #564]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d10c      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800b2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d109      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2c0:	4b88      	ldr	r3, [pc, #544]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	08db      	lsrs	r3, r3, #3
 800b2c6:	f003 0303 	and.w	r3, r3, #3
 800b2ca:	4a87      	ldr	r2, [pc, #540]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2d2:	e01e      	b.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2d4:	4b83      	ldr	r3, [pc, #524]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2e0:	d106      	bne.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800b2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2e8:	d102      	bne.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b2ea:	4b80      	ldr	r3, [pc, #512]	; (800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2ee:	e010      	b.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2f0:	4b7c      	ldr	r3, [pc, #496]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2fc:	d106      	bne.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800b2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b304:	d102      	bne.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b306:	4b7a      	ldr	r3, [pc, #488]	; (800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b30a:	e002      	b.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b310:	e2e7      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b312:	e2e6      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b314:	4b77      	ldr	r3, [pc, #476]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b318:	e2e3      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b31e:	e2e0      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b326:	f040 809c 	bne.w	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b32a:	4b6e      	ldr	r3, [pc, #440]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b32e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b332:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b33a:	d054      	beq.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b342:	f200 808b 	bhi.w	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b34c:	f000 8083 	beq.w	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b356:	f200 8081 	bhi.w	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b360:	d02f      	beq.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b368:	d878      	bhi.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d004      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b376:	d012      	beq.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b378:	e070      	b.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b37a:	4b5a      	ldr	r3, [pc, #360]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b386:	d107      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 fd73 	bl	800be78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b396:	e2a4      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b39c:	e2a1      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b39e:	4b51      	ldr	r3, [pc, #324]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3aa:	d107      	bne.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3ac:	f107 0318 	add.w	r3, r7, #24
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 fab9 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b3ba:	e292      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3c0:	e28f      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3c2:	4b48      	ldr	r3, [pc, #288]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ce:	d107      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3d0:	f107 030c 	add.w	r3, r7, #12
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 fbfb 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b3de:	e280      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3e4:	e27d      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b3e6:	4b3f      	ldr	r3, [pc, #252]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3ee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3f0:	4b3c      	ldr	r3, [pc, #240]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0304 	and.w	r3, r3, #4
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	d10c      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d109      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b402:	4b38      	ldr	r3, [pc, #224]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	08db      	lsrs	r3, r3, #3
 800b408:	f003 0303 	and.w	r3, r3, #3
 800b40c:	4a36      	ldr	r2, [pc, #216]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b40e:	fa22 f303 	lsr.w	r3, r2, r3
 800b412:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b414:	e01e      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b416:	4b33      	ldr	r3, [pc, #204]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b422:	d106      	bne.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b42a:	d102      	bne.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b42c:	4b2f      	ldr	r3, [pc, #188]	; (800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b430:	e010      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b432:	4b2c      	ldr	r3, [pc, #176]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b43a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b43e:	d106      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b446:	d102      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b448:	4b29      	ldr	r3, [pc, #164]	; (800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b44c:	e002      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b452:	e246      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b454:	e245      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b456:	4b27      	ldr	r3, [pc, #156]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b45a:	e242      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b460:	e23f      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b468:	f040 80a8 	bne.w	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b46c:	4b1d      	ldr	r3, [pc, #116]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b470:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b474:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b47c:	d060      	beq.n	800b540 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b484:	f200 8097 	bhi.w	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b48e:	f000 808f 	beq.w	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b498:	f200 808d 	bhi.w	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4a2:	d03b      	beq.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4aa:	f200 8084 	bhi.w	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d004      	beq.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ba:	d01d      	beq.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800b4bc:	e07b      	b.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4be:	4b09      	ldr	r3, [pc, #36]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ca:	d107      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f000 fcd1 	bl	800be78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b4da:	e202      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4e0:	e1ff      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4e2:	bf00      	nop
 800b4e4:	58024400 	.word	0x58024400
 800b4e8:	03d09000 	.word	0x03d09000
 800b4ec:	003d0900 	.word	0x003d0900
 800b4f0:	02dc6c00 	.word	0x02dc6c00
 800b4f4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4f8:	4ba3      	ldr	r3, [pc, #652]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b504:	d107      	bne.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b506:	f107 0318 	add.w	r3, r7, #24
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 fa0c 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b514:	e1e5      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b51a:	e1e2      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b51c:	4b9a      	ldr	r3, [pc, #616]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b528:	d107      	bne.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b52a:	f107 030c 	add.w	r3, r7, #12
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fb4e 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b538:	e1d3      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b53e:	e1d0      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b540:	4b91      	ldr	r3, [pc, #580]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b548:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b54a:	4b8f      	ldr	r3, [pc, #572]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0304 	and.w	r3, r3, #4
 800b552:	2b04      	cmp	r3, #4
 800b554:	d10c      	bne.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800b556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d109      	bne.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b55c:	4b8a      	ldr	r3, [pc, #552]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	08db      	lsrs	r3, r3, #3
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	4a89      	ldr	r2, [pc, #548]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b568:	fa22 f303 	lsr.w	r3, r2, r3
 800b56c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b56e:	e01e      	b.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b570:	4b85      	ldr	r3, [pc, #532]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b57c:	d106      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b584:	d102      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b586:	4b82      	ldr	r3, [pc, #520]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b58a:	e010      	b.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b58c:	4b7e      	ldr	r3, [pc, #504]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b598:	d106      	bne.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5a0:	d102      	bne.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b5a2:	4b7c      	ldr	r3, [pc, #496]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5a6:	e002      	b.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b5ac:	e199      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5ae:	e198      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b5b0:	4b79      	ldr	r3, [pc, #484]	; (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5b4:	e195      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ba:	e192      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b5c2:	d173      	bne.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b5c4:	4b70      	ldr	r3, [pc, #448]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b5cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5d4:	d02f      	beq.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5dc:	d863      	bhi.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d004      	beq.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5ea:	d012      	beq.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800b5ec:	e05b      	b.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5ee:	4b66      	ldr	r3, [pc, #408]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5fa:	d107      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5fc:	f107 0318 	add.w	r3, r7, #24
 800b600:	4618      	mov	r0, r3
 800b602:	f000 f991 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b60a:	e16a      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b610:	e167      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b612:	4b5d      	ldr	r3, [pc, #372]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b61a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b61e:	d107      	bne.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b620:	f107 030c 	add.w	r3, r7, #12
 800b624:	4618      	mov	r0, r3
 800b626:	f000 fad3 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b62e:	e158      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b634:	e155      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b636:	4b54      	ldr	r3, [pc, #336]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b63a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b63e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b640:	4b51      	ldr	r3, [pc, #324]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0304 	and.w	r3, r3, #4
 800b648:	2b04      	cmp	r3, #4
 800b64a:	d10c      	bne.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d109      	bne.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b652:	4b4d      	ldr	r3, [pc, #308]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	08db      	lsrs	r3, r3, #3
 800b658:	f003 0303 	and.w	r3, r3, #3
 800b65c:	4a4b      	ldr	r2, [pc, #300]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b65e:	fa22 f303 	lsr.w	r3, r2, r3
 800b662:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b664:	e01e      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b666:	4b48      	ldr	r3, [pc, #288]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b672:	d106      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b67a:	d102      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b67c:	4b44      	ldr	r3, [pc, #272]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b67e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b680:	e010      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b682:	4b41      	ldr	r3, [pc, #260]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b68a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b68e:	d106      	bne.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b696:	d102      	bne.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b698:	4b3e      	ldr	r3, [pc, #248]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b69a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b69c:	e002      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b6a2:	e11e      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6a4:	e11d      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6aa:	e11a      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b2:	d133      	bne.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b6b4:	4b34      	ldr	r3, [pc, #208]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d004      	beq.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6ca:	d012      	beq.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b6cc:	e023      	b.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6ce:	4b2e      	ldr	r3, [pc, #184]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6da:	d107      	bne.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fbc9 	bl	800be78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b6ea:	e0fa      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6f0:	e0f7      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6f2:	4b25      	ldr	r3, [pc, #148]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6fe:	d107      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b700:	f107 0318 	add.w	r3, r7, #24
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f90f 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b70e:	e0e8      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b714:	e0e5      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b71a:	e0e2      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b722:	f040 808f 	bne.w	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b726:	4b18      	ldr	r3, [pc, #96]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b72a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b72e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b736:	d075      	beq.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b73e:	d87e      	bhi.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b746:	d060      	beq.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b74e:	d876      	bhi.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b756:	d045      	beq.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b75e:	d86e      	bhi.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b766:	d02b      	beq.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b76e:	d866      	bhi.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b772:	2b00      	cmp	r3, #0
 800b774:	d004      	beq.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b77c:	d00e      	beq.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b77e:	e05e      	b.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b780:	f000 f8bc 	bl	800b8fc <HAL_RCCEx_GetD3PCLK1Freq>
 800b784:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b786:	e0ac      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b788:	58024400 	.word	0x58024400
 800b78c:	03d09000 	.word	0x03d09000
 800b790:	003d0900 	.word	0x003d0900
 800b794:	02dc6c00 	.word	0x02dc6c00
 800b798:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b79c:	4b53      	ldr	r3, [pc, #332]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7a8:	d107      	bne.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7aa:	f107 0318 	add.w	r3, r7, #24
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 f8ba 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b7b8:	e093      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7be:	e090      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7c0:	4b4a      	ldr	r3, [pc, #296]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7cc:	d107      	bne.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ce:	f107 030c 	add.w	r3, r7, #12
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 f9fc 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b7dc:	e081      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7e2:	e07e      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7e4:	4b41      	ldr	r3, [pc, #260]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 0304 	and.w	r3, r3, #4
 800b7ec:	2b04      	cmp	r3, #4
 800b7ee:	d109      	bne.n	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b7f0:	4b3e      	ldr	r3, [pc, #248]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	08db      	lsrs	r3, r3, #3
 800b7f6:	f003 0303 	and.w	r3, r3, #3
 800b7fa:	4a3d      	ldr	r2, [pc, #244]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b7fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b800:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b802:	e06e      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b808:	e06b      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b80a:	4b38      	ldr	r3, [pc, #224]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b816:	d102      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800b818:	4b36      	ldr	r3, [pc, #216]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b81a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b81c:	e061      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b822:	e05e      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b824:	4b31      	ldr	r3, [pc, #196]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b82c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b830:	d102      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800b832:	4b31      	ldr	r3, [pc, #196]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b834:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b836:	e054      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b83c:	e051      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b842:	e04e      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b84a:	d148      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b84c:	4b27      	ldr	r3, [pc, #156]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b854:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b85c:	d02a      	beq.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b864:	d838      	bhi.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d004      	beq.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b872:	d00d      	beq.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b874:	e030      	b.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b876:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b87e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b882:	d102      	bne.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800b884:	4b1c      	ldr	r3, [pc, #112]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b886:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b888:	e02b      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b88a:	2300      	movs	r3, #0
 800b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b88e:	e028      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b890:	4b16      	ldr	r3, [pc, #88]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b89c:	d107      	bne.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b89e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fae8 	bl	800be78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b8ac:	e019      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8b2:	e016      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8b4:	4b0d      	ldr	r3, [pc, #52]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8c0:	d107      	bne.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8c2:	f107 0318 	add.w	r3, r7, #24
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 f82e 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b8d0:	e007      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8d6:	e004      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8dc:	e001      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3740      	adds	r7, #64	; 0x40
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	58024400 	.word	0x58024400
 800b8f0:	03d09000 	.word	0x03d09000
 800b8f4:	003d0900 	.word	0x003d0900
 800b8f8:	02dc6c00 	.word	0x02dc6c00

0800b8fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b900:	f7fe fb8e 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 800b904:	4602      	mov	r2, r0
 800b906:	4b06      	ldr	r3, [pc, #24]	; (800b920 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	091b      	lsrs	r3, r3, #4
 800b90c:	f003 0307 	and.w	r3, r3, #7
 800b910:	4904      	ldr	r1, [pc, #16]	; (800b924 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b912:	5ccb      	ldrb	r3, [r1, r3]
 800b914:	f003 031f 	and.w	r3, r3, #31
 800b918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	58024400 	.word	0x58024400
 800b924:	080115e0 	.word	0x080115e0

0800b928 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b928:	b480      	push	{r7}
 800b92a:	b089      	sub	sp, #36	; 0x24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b930:	4ba1      	ldr	r3, [pc, #644]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b934:	f003 0303 	and.w	r3, r3, #3
 800b938:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b93a:	4b9f      	ldr	r3, [pc, #636]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93e:	0b1b      	lsrs	r3, r3, #12
 800b940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b944:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b946:	4b9c      	ldr	r3, [pc, #624]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94a:	091b      	lsrs	r3, r3, #4
 800b94c:	f003 0301 	and.w	r3, r3, #1
 800b950:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b952:	4b99      	ldr	r3, [pc, #612]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b956:	08db      	lsrs	r3, r3, #3
 800b958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	fb02 f303 	mul.w	r3, r2, r3
 800b962:	ee07 3a90 	vmov	s15, r3
 800b966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 8111 	beq.w	800bb98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	2b02      	cmp	r3, #2
 800b97a:	f000 8083 	beq.w	800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	2b02      	cmp	r3, #2
 800b982:	f200 80a1 	bhi.w	800bac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d056      	beq.n	800ba40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b992:	e099      	b.n	800bac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b994:	4b88      	ldr	r3, [pc, #544]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0320 	and.w	r3, r3, #32
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d02d      	beq.n	800b9fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9a0:	4b85      	ldr	r3, [pc, #532]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	08db      	lsrs	r3, r3, #3
 800b9a6:	f003 0303 	and.w	r3, r3, #3
 800b9aa:	4a84      	ldr	r2, [pc, #528]	; (800bbbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	ee07 3a90 	vmov	s15, r3
 800b9b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ca:	4b7b      	ldr	r3, [pc, #492]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9d2:	ee07 3a90 	vmov	s15, r3
 800b9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b9fa:	e087      	b.n	800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ba0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba0e:	4b6a      	ldr	r3, [pc, #424]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba22:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba3e:	e065      	b.n	800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba52:	4b59      	ldr	r3, [pc, #356]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba66:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba82:	e043      	b.n	800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bbcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ba92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba96:	4b48      	ldr	r3, [pc, #288]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9e:	ee07 3a90 	vmov	s15, r3
 800baa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800babe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bac2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bac6:	e021      	b.n	800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	ee07 3a90 	vmov	s15, r3
 800bace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bada:	4b37      	ldr	r3, [pc, #220]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800badc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bae2:	ee07 3a90 	vmov	s15, r3
 800bae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baea:	ed97 6a03 	vldr	s12, [r7, #12]
 800baee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bb0c:	4b2a      	ldr	r3, [pc, #168]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb10:	0a5b      	lsrs	r3, r3, #9
 800bb12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb26:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb32:	ee17 2a90 	vmov	r2, s15
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bb3a:	4b1f      	ldr	r3, [pc, #124]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3e:	0c1b      	lsrs	r3, r3, #16
 800bb40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb44:	ee07 3a90 	vmov	s15, r3
 800bb48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb54:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb60:	ee17 2a90 	vmov	r2, s15
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bb68:	4b13      	ldr	r3, [pc, #76]	; (800bbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6c:	0e1b      	lsrs	r3, r3, #24
 800bb6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb82:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb8e:	ee17 2a90 	vmov	r2, s15
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bb96:	e008      	b.n	800bbaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	609a      	str	r2, [r3, #8]
}
 800bbaa:	bf00      	nop
 800bbac:	3724      	adds	r7, #36	; 0x24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	58024400 	.word	0x58024400
 800bbbc:	03d09000 	.word	0x03d09000
 800bbc0:	46000000 	.word	0x46000000
 800bbc4:	4c742400 	.word	0x4c742400
 800bbc8:	4a742400 	.word	0x4a742400
 800bbcc:	4c371b00 	.word	0x4c371b00

0800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b089      	sub	sp, #36	; 0x24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbd8:	4ba1      	ldr	r3, [pc, #644]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbdc:	f003 0303 	and.w	r3, r3, #3
 800bbe0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bbe2:	4b9f      	ldr	r3, [pc, #636]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe6:	0d1b      	lsrs	r3, r3, #20
 800bbe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bbee:	4b9c      	ldr	r3, [pc, #624]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf2:	0a1b      	lsrs	r3, r3, #8
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bbfa:	4b99      	ldr	r3, [pc, #612]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbfe:	08db      	lsrs	r3, r3, #3
 800bc00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	fb02 f303 	mul.w	r3, r2, r3
 800bc0a:	ee07 3a90 	vmov	s15, r3
 800bc0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 8111 	beq.w	800be40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	f000 8083 	beq.w	800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	f200 80a1 	bhi.w	800bd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d003      	beq.n	800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d056      	beq.n	800bce8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bc3a:	e099      	b.n	800bd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc3c:	4b88      	ldr	r3, [pc, #544]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 0320 	and.w	r3, r3, #32
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d02d      	beq.n	800bca4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc48:	4b85      	ldr	r3, [pc, #532]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	08db      	lsrs	r3, r3, #3
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	4a84      	ldr	r2, [pc, #528]	; (800be64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bc54:	fa22 f303 	lsr.w	r3, r2, r3
 800bc58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	ee07 3a90 	vmov	s15, r3
 800bc60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	ee07 3a90 	vmov	s15, r3
 800bc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc72:	4b7b      	ldr	r3, [pc, #492]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc7a:	ee07 3a90 	vmov	s15, r3
 800bc7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc82:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc86:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bca2:	e087      	b.n	800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bcb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb6:	4b6a      	ldr	r3, [pc, #424]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bce6:	e065      	b.n	800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bcf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcfa:	4b59      	ldr	r3, [pc, #356]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd2a:	e043      	b.n	800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3e:	4b48      	ldr	r3, [pc, #288]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd52:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd6e:	e021      	b.n	800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	ee07 3a90 	vmov	s15, r3
 800bd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd82:	4b37      	ldr	r3, [pc, #220]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd96:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bda2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bda6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bdb4:	4b2a      	ldr	r3, [pc, #168]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb8:	0a5b      	lsrs	r3, r3, #9
 800bdba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdbe:	ee07 3a90 	vmov	s15, r3
 800bdc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdce:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdda:	ee17 2a90 	vmov	r2, s15
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bde2:	4b1f      	ldr	r3, [pc, #124]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde6:	0c1b      	lsrs	r3, r3, #16
 800bde8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdec:	ee07 3a90 	vmov	s15, r3
 800bdf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdfc:	edd7 6a07 	vldr	s13, [r7, #28]
 800be00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be08:	ee17 2a90 	vmov	r2, s15
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800be10:	4b13      	ldr	r3, [pc, #76]	; (800be60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be14:	0e1b      	lsrs	r3, r3, #24
 800be16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be36:	ee17 2a90 	vmov	r2, s15
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800be3e:	e008      	b.n	800be52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	609a      	str	r2, [r3, #8]
}
 800be52:	bf00      	nop
 800be54:	3724      	adds	r7, #36	; 0x24
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	58024400 	.word	0x58024400
 800be64:	03d09000 	.word	0x03d09000
 800be68:	46000000 	.word	0x46000000
 800be6c:	4c742400 	.word	0x4c742400
 800be70:	4a742400 	.word	0x4a742400
 800be74:	4c371b00 	.word	0x4c371b00

0800be78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800be78:	b480      	push	{r7}
 800be7a:	b089      	sub	sp, #36	; 0x24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be80:	4ba0      	ldr	r3, [pc, #640]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be84:	f003 0303 	and.w	r3, r3, #3
 800be88:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800be8a:	4b9e      	ldr	r3, [pc, #632]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8e:	091b      	lsrs	r3, r3, #4
 800be90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be94:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800be96:	4b9b      	ldr	r3, [pc, #620]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9a:	f003 0301 	and.w	r3, r3, #1
 800be9e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bea0:	4b98      	ldr	r3, [pc, #608]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea4:	08db      	lsrs	r3, r3, #3
 800bea6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	fb02 f303 	mul.w	r3, r2, r3
 800beb0:	ee07 3a90 	vmov	s15, r3
 800beb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f000 8111 	beq.w	800c0e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	f000 8083 	beq.w	800bfd2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	2b02      	cmp	r3, #2
 800bed0:	f200 80a1 	bhi.w	800c016 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d056      	beq.n	800bf8e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bee0:	e099      	b.n	800c016 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bee2:	4b88      	ldr	r3, [pc, #544]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 0320 	and.w	r3, r3, #32
 800beea:	2b00      	cmp	r3, #0
 800beec:	d02d      	beq.n	800bf4a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800beee:	4b85      	ldr	r3, [pc, #532]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	08db      	lsrs	r3, r3, #3
 800bef4:	f003 0303 	and.w	r3, r3, #3
 800bef8:	4a83      	ldr	r2, [pc, #524]	; (800c108 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800befa:	fa22 f303 	lsr.w	r3, r2, r3
 800befe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	ee07 3a90 	vmov	s15, r3
 800bf06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	ee07 3a90 	vmov	s15, r3
 800bf10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf18:	4b7a      	ldr	r3, [pc, #488]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf20:	ee07 3a90 	vmov	s15, r3
 800bf24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf28:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf2c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c10c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf44:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bf48:	e087      	b.n	800c05a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	ee07 3a90 	vmov	s15, r3
 800bf50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf54:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c110 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bf58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf5c:	4b69      	ldr	r3, [pc, #420]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf64:	ee07 3a90 	vmov	s15, r3
 800bf68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf70:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c10c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf8c:	e065      	b.n	800c05a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	ee07 3a90 	vmov	s15, r3
 800bf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf98:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c114 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bf9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa0:	4b58      	ldr	r3, [pc, #352]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa8:	ee07 3a90 	vmov	s15, r3
 800bfac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfb4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c10c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfd0:	e043      	b.n	800c05a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	ee07 3a90 	vmov	s15, r3
 800bfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfdc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c118 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bfe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe4:	4b47      	ldr	r3, [pc, #284]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfec:	ee07 3a90 	vmov	s15, r3
 800bff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bff8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c10c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c010:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c014:	e021      	b.n	800c05a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	ee07 3a90 	vmov	s15, r3
 800c01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c020:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c110 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c028:	4b36      	ldr	r3, [pc, #216]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c030:	ee07 3a90 	vmov	s15, r3
 800c034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c038:	ed97 6a03 	vldr	s12, [r7, #12]
 800c03c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c10c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c04c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c054:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c058:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c05a:	4b2a      	ldr	r3, [pc, #168]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05e:	0a5b      	lsrs	r3, r3, #9
 800c060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c064:	ee07 3a90 	vmov	s15, r3
 800c068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c070:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c074:	edd7 6a07 	vldr	s13, [r7, #28]
 800c078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c07c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c080:	ee17 2a90 	vmov	r2, s15
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c088:	4b1e      	ldr	r3, [pc, #120]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08c:	0c1b      	lsrs	r3, r3, #16
 800c08e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c092:	ee07 3a90 	vmov	s15, r3
 800c096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c09a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c09e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ae:	ee17 2a90 	vmov	r2, s15
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c0b6:	4b13      	ldr	r3, [pc, #76]	; (800c104 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ba:	0e1b      	lsrs	r3, r3, #24
 800c0bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0c0:	ee07 3a90 	vmov	s15, r3
 800c0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0dc:	ee17 2a90 	vmov	r2, s15
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c0e4:	e008      	b.n	800c0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	609a      	str	r2, [r3, #8]
}
 800c0f8:	bf00      	nop
 800c0fa:	3724      	adds	r7, #36	; 0x24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	58024400 	.word	0x58024400
 800c108:	03d09000 	.word	0x03d09000
 800c10c:	46000000 	.word	0x46000000
 800c110:	4c742400 	.word	0x4c742400
 800c114:	4a742400 	.word	0x4a742400
 800c118:	4c371b00 	.word	0x4c371b00

0800c11c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c12a:	4b53      	ldr	r3, [pc, #332]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c12e:	f003 0303 	and.w	r3, r3, #3
 800c132:	2b03      	cmp	r3, #3
 800c134:	d101      	bne.n	800c13a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	e099      	b.n	800c26e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c13a:	4b4f      	ldr	r3, [pc, #316]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a4e      	ldr	r2, [pc, #312]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c146:	f7f8 f94d 	bl	80043e4 <HAL_GetTick>
 800c14a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c14c:	e008      	b.n	800c160 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c14e:	f7f8 f949 	bl	80043e4 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d901      	bls.n	800c160 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e086      	b.n	800c26e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c160:	4b45      	ldr	r3, [pc, #276]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f0      	bne.n	800c14e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c16c:	4b42      	ldr	r3, [pc, #264]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c170:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	031b      	lsls	r3, r3, #12
 800c17a:	493f      	ldr	r1, [pc, #252]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c17c:	4313      	orrs	r3, r2
 800c17e:	628b      	str	r3, [r1, #40]	; 0x28
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	3b01      	subs	r3, #1
 800c186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	3b01      	subs	r3, #1
 800c190:	025b      	lsls	r3, r3, #9
 800c192:	b29b      	uxth	r3, r3
 800c194:	431a      	orrs	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	041b      	lsls	r3, r3, #16
 800c19e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	061b      	lsls	r3, r3, #24
 800c1ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c1b0:	4931      	ldr	r1, [pc, #196]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1b6:	4b30      	ldr	r3, [pc, #192]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	492d      	ldr	r1, [pc, #180]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1c8:	4b2b      	ldr	r3, [pc, #172]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1cc:	f023 0220 	bic.w	r2, r3, #32
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	4928      	ldr	r1, [pc, #160]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c1da:	4b27      	ldr	r3, [pc, #156]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	4a26      	ldr	r2, [pc, #152]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1e0:	f023 0310 	bic.w	r3, r3, #16
 800c1e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c1e6:	4b24      	ldr	r3, [pc, #144]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1ea:	4b24      	ldr	r3, [pc, #144]	; (800c27c <RCCEx_PLL2_Config+0x160>)
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	69d2      	ldr	r2, [r2, #28]
 800c1f2:	00d2      	lsls	r2, r2, #3
 800c1f4:	4920      	ldr	r1, [pc, #128]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c1fa:	4b1f      	ldr	r3, [pc, #124]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fe:	4a1e      	ldr	r2, [pc, #120]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c200:	f043 0310 	orr.w	r3, r3, #16
 800c204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d106      	bne.n	800c21a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c20c:	4b1a      	ldr	r3, [pc, #104]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	4a19      	ldr	r2, [pc, #100]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c216:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c218:	e00f      	b.n	800c23a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d106      	bne.n	800c22e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c220:	4b15      	ldr	r3, [pc, #84]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c224:	4a14      	ldr	r2, [pc, #80]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c22a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c22c:	e005      	b.n	800c23a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c22e:	4b12      	ldr	r3, [pc, #72]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c232:	4a11      	ldr	r2, [pc, #68]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c238:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c23a:	4b0f      	ldr	r3, [pc, #60]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a0e      	ldr	r2, [pc, #56]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c246:	f7f8 f8cd 	bl	80043e4 <HAL_GetTick>
 800c24a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c24c:	e008      	b.n	800c260 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c24e:	f7f8 f8c9 	bl	80043e4 <HAL_GetTick>
 800c252:	4602      	mov	r2, r0
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	2b02      	cmp	r3, #2
 800c25a:	d901      	bls.n	800c260 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c25c:	2303      	movs	r3, #3
 800c25e:	e006      	b.n	800c26e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c260:	4b05      	ldr	r3, [pc, #20]	; (800c278 <RCCEx_PLL2_Config+0x15c>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d0f0      	beq.n	800c24e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	58024400 	.word	0x58024400
 800c27c:	ffff0007 	.word	0xffff0007

0800c280 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c28e:	4b53      	ldr	r3, [pc, #332]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c292:	f003 0303 	and.w	r3, r3, #3
 800c296:	2b03      	cmp	r3, #3
 800c298:	d101      	bne.n	800c29e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e099      	b.n	800c3d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c29e:	4b4f      	ldr	r3, [pc, #316]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a4e      	ldr	r2, [pc, #312]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2aa:	f7f8 f89b 	bl	80043e4 <HAL_GetTick>
 800c2ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2b0:	e008      	b.n	800c2c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c2b2:	f7f8 f897 	bl	80043e4 <HAL_GetTick>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d901      	bls.n	800c2c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e086      	b.n	800c3d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2c4:	4b45      	ldr	r3, [pc, #276]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1f0      	bne.n	800c2b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c2d0:	4b42      	ldr	r3, [pc, #264]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	051b      	lsls	r3, r3, #20
 800c2de:	493f      	ldr	r1, [pc, #252]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	628b      	str	r3, [r1, #40]	; 0x28
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	025b      	lsls	r3, r3, #9
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	431a      	orrs	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	041b      	lsls	r3, r3, #16
 800c302:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c306:	431a      	orrs	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	061b      	lsls	r3, r3, #24
 800c310:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c314:	4931      	ldr	r1, [pc, #196]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c316:	4313      	orrs	r3, r2
 800c318:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c31a:	4b30      	ldr	r3, [pc, #192]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	492d      	ldr	r1, [pc, #180]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c328:	4313      	orrs	r3, r2
 800c32a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c32c:	4b2b      	ldr	r3, [pc, #172]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c330:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	4928      	ldr	r1, [pc, #160]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c33e:	4b27      	ldr	r3, [pc, #156]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c342:	4a26      	ldr	r2, [pc, #152]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c34a:	4b24      	ldr	r3, [pc, #144]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c34c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c34e:	4b24      	ldr	r3, [pc, #144]	; (800c3e0 <RCCEx_PLL3_Config+0x160>)
 800c350:	4013      	ands	r3, r2
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	69d2      	ldr	r2, [r2, #28]
 800c356:	00d2      	lsls	r2, r2, #3
 800c358:	4920      	ldr	r1, [pc, #128]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c35a:	4313      	orrs	r3, r2
 800c35c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c35e:	4b1f      	ldr	r3, [pc, #124]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c362:	4a1e      	ldr	r2, [pc, #120]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c368:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c370:	4b1a      	ldr	r3, [pc, #104]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c374:	4a19      	ldr	r2, [pc, #100]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c376:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c37a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c37c:	e00f      	b.n	800c39e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b01      	cmp	r3, #1
 800c382:	d106      	bne.n	800c392 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c384:	4b15      	ldr	r3, [pc, #84]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	4a14      	ldr	r2, [pc, #80]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c38a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c38e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c390:	e005      	b.n	800c39e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c392:	4b12      	ldr	r3, [pc, #72]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c396:	4a11      	ldr	r2, [pc, #68]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c39c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c39e:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a0e      	ldr	r2, [pc, #56]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c3a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3aa:	f7f8 f81b 	bl	80043e4 <HAL_GetTick>
 800c3ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3b0:	e008      	b.n	800c3c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c3b2:	f7f8 f817 	bl	80043e4 <HAL_GetTick>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d901      	bls.n	800c3c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e006      	b.n	800c3d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3c4:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <RCCEx_PLL3_Config+0x15c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d0f0      	beq.n	800c3b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	58024400 	.word	0x58024400
 800c3e0:	ffff0007 	.word	0xffff0007

0800c3e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e0f1      	b.n	800c5da <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a78      	ldr	r2, [pc, #480]	; (800c5e4 <HAL_SPI_Init+0x200>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d00f      	beq.n	800c426 <HAL_SPI_Init+0x42>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a77      	ldr	r2, [pc, #476]	; (800c5e8 <HAL_SPI_Init+0x204>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d00a      	beq.n	800c426 <HAL_SPI_Init+0x42>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a75      	ldr	r2, [pc, #468]	; (800c5ec <HAL_SPI_Init+0x208>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d005      	beq.n	800c426 <HAL_SPI_Init+0x42>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	2b0f      	cmp	r3, #15
 800c420:	d901      	bls.n	800c426 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	e0d9      	b.n	800c5da <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f8e2 	bl	800c5f0 <SPI_GetPacketSize>
 800c42c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a6c      	ldr	r2, [pc, #432]	; (800c5e4 <HAL_SPI_Init+0x200>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d00c      	beq.n	800c452 <HAL_SPI_Init+0x6e>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a6a      	ldr	r2, [pc, #424]	; (800c5e8 <HAL_SPI_Init+0x204>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d007      	beq.n	800c452 <HAL_SPI_Init+0x6e>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a69      	ldr	r2, [pc, #420]	; (800c5ec <HAL_SPI_Init+0x208>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d002      	beq.n	800c452 <HAL_SPI_Init+0x6e>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b08      	cmp	r3, #8
 800c450:	d811      	bhi.n	800c476 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c456:	4a63      	ldr	r2, [pc, #396]	; (800c5e4 <HAL_SPI_Init+0x200>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d009      	beq.n	800c470 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a61      	ldr	r2, [pc, #388]	; (800c5e8 <HAL_SPI_Init+0x204>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d004      	beq.n	800c470 <HAL_SPI_Init+0x8c>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a60      	ldr	r2, [pc, #384]	; (800c5ec <HAL_SPI_Init+0x208>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d104      	bne.n	800c47a <HAL_SPI_Init+0x96>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2b10      	cmp	r3, #16
 800c474:	d901      	bls.n	800c47a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c476:	2301      	movs	r3, #1
 800c478:	e0af      	b.n	800c5da <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	d106      	bne.n	800c494 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7f7 f938 	bl	8003704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2202      	movs	r2, #2
 800c498:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f022 0201 	bic.w	r2, r2, #1
 800c4aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c4b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4c0:	d119      	bne.n	800c4f6 <HAL_SPI_Init+0x112>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4ca:	d103      	bne.n	800c4d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d008      	beq.n	800c4e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10c      	bne.n	800c4f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c4e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4e4:	d107      	bne.n	800c4f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c4f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	69da      	ldr	r2, [r3, #28]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fe:	431a      	orrs	r2, r3
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	431a      	orrs	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c508:	ea42 0103 	orr.w	r1, r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68da      	ldr	r2, [r3, #12]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	430a      	orrs	r2, r1
 800c516:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c520:	431a      	orrs	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c526:	431a      	orrs	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	431a      	orrs	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	691b      	ldr	r3, [r3, #16]
 800c532:	431a      	orrs	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	431a      	orrs	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	431a      	orrs	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	431a      	orrs	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c54a:	431a      	orrs	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	431a      	orrs	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c556:	ea42 0103 	orr.w	r1, r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	430a      	orrs	r2, r1
 800c564:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d113      	bne.n	800c596 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c580:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c594:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f022 0201 	bic.w	r2, r2, #1
 800c5a4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00a      	beq.n	800c5c8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	430a      	orrs	r2, r1
 800c5c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	40013000 	.word	0x40013000
 800c5e8:	40003800 	.word	0x40003800
 800c5ec:	40003c00 	.word	0x40003c00

0800c5f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5fc:	095b      	lsrs	r3, r3, #5
 800c5fe:	3301      	adds	r3, #1
 800c600:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	3301      	adds	r3, #1
 800c608:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	3307      	adds	r3, #7
 800c60e:	08db      	lsrs	r3, r3, #3
 800c610:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	fb02 f303 	mul.w	r3, r2, r3
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3714      	adds	r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c634:	2301      	movs	r3, #1
 800c636:	e049      	b.n	800c6cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	2b00      	cmp	r3, #0
 800c642:	d106      	bne.n	800c652 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7f7 f9f5 	bl	8003a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2202      	movs	r2, #2
 800c656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3304      	adds	r3, #4
 800c662:	4619      	mov	r1, r3
 800c664:	4610      	mov	r0, r2
 800c666:	f000 ff3b 	bl	800d4e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2201      	movs	r2, #1
 800c69e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d001      	beq.n	800c6ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e054      	b.n	800c796 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68da      	ldr	r2, [r3, #12]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f042 0201 	orr.w	r2, r2, #1
 800c702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a26      	ldr	r2, [pc, #152]	; (800c7a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d022      	beq.n	800c754 <HAL_TIM_Base_Start_IT+0x80>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c716:	d01d      	beq.n	800c754 <HAL_TIM_Base_Start_IT+0x80>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a22      	ldr	r2, [pc, #136]	; (800c7a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d018      	beq.n	800c754 <HAL_TIM_Base_Start_IT+0x80>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a21      	ldr	r2, [pc, #132]	; (800c7ac <HAL_TIM_Base_Start_IT+0xd8>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d013      	beq.n	800c754 <HAL_TIM_Base_Start_IT+0x80>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a1f      	ldr	r2, [pc, #124]	; (800c7b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d00e      	beq.n	800c754 <HAL_TIM_Base_Start_IT+0x80>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a1e      	ldr	r2, [pc, #120]	; (800c7b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d009      	beq.n	800c754 <HAL_TIM_Base_Start_IT+0x80>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a1c      	ldr	r2, [pc, #112]	; (800c7b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d004      	beq.n	800c754 <HAL_TIM_Base_Start_IT+0x80>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a1b      	ldr	r2, [pc, #108]	; (800c7bc <HAL_TIM_Base_Start_IT+0xe8>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d115      	bne.n	800c780 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	689a      	ldr	r2, [r3, #8]
 800c75a:	4b19      	ldr	r3, [pc, #100]	; (800c7c0 <HAL_TIM_Base_Start_IT+0xec>)
 800c75c:	4013      	ands	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2b06      	cmp	r3, #6
 800c764:	d015      	beq.n	800c792 <HAL_TIM_Base_Start_IT+0xbe>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c76c:	d011      	beq.n	800c792 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f042 0201 	orr.w	r2, r2, #1
 800c77c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c77e:	e008      	b.n	800c792 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f042 0201 	orr.w	r2, r2, #1
 800c78e:	601a      	str	r2, [r3, #0]
 800c790:	e000      	b.n	800c794 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c792:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	3714      	adds	r7, #20
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	40010000 	.word	0x40010000
 800c7a8:	40000400 	.word	0x40000400
 800c7ac:	40000800 	.word	0x40000800
 800c7b0:	40000c00 	.word	0x40000c00
 800c7b4:	40010400 	.word	0x40010400
 800c7b8:	40001800 	.word	0x40001800
 800c7bc:	40014000 	.word	0x40014000
 800c7c0:	00010007 	.word	0x00010007

0800c7c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d101      	bne.n	800c7d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e049      	b.n	800c86a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d106      	bne.n	800c7f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f841 	bl	800c872 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3304      	adds	r3, #4
 800c800:	4619      	mov	r1, r3
 800c802:	4610      	mov	r0, r2
 800c804:	f000 fe6c 	bl	800d4e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c872:	b480      	push	{r7}
 800c874:	b083      	sub	sp, #12
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c87a:	bf00      	nop
 800c87c:	370c      	adds	r7, #12
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
	...

0800c888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d109      	bne.n	800c8ac <HAL_TIM_PWM_Start+0x24>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	bf14      	ite	ne
 800c8a4:	2301      	movne	r3, #1
 800c8a6:	2300      	moveq	r3, #0
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	e03c      	b.n	800c926 <HAL_TIM_PWM_Start+0x9e>
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d109      	bne.n	800c8c6 <HAL_TIM_PWM_Start+0x3e>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	bf14      	ite	ne
 800c8be:	2301      	movne	r3, #1
 800c8c0:	2300      	moveq	r3, #0
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	e02f      	b.n	800c926 <HAL_TIM_PWM_Start+0x9e>
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	2b08      	cmp	r3, #8
 800c8ca:	d109      	bne.n	800c8e0 <HAL_TIM_PWM_Start+0x58>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	bf14      	ite	ne
 800c8d8:	2301      	movne	r3, #1
 800c8da:	2300      	moveq	r3, #0
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	e022      	b.n	800c926 <HAL_TIM_PWM_Start+0x9e>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b0c      	cmp	r3, #12
 800c8e4:	d109      	bne.n	800c8fa <HAL_TIM_PWM_Start+0x72>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	bf14      	ite	ne
 800c8f2:	2301      	movne	r3, #1
 800c8f4:	2300      	moveq	r3, #0
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	e015      	b.n	800c926 <HAL_TIM_PWM_Start+0x9e>
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	2b10      	cmp	r3, #16
 800c8fe:	d109      	bne.n	800c914 <HAL_TIM_PWM_Start+0x8c>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b01      	cmp	r3, #1
 800c90a:	bf14      	ite	ne
 800c90c:	2301      	movne	r3, #1
 800c90e:	2300      	moveq	r3, #0
 800c910:	b2db      	uxtb	r3, r3
 800c912:	e008      	b.n	800c926 <HAL_TIM_PWM_Start+0x9e>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	bf14      	ite	ne
 800c920:	2301      	movne	r3, #1
 800c922:	2300      	moveq	r3, #0
 800c924:	b2db      	uxtb	r3, r3
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	e0a1      	b.n	800ca72 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d104      	bne.n	800c93e <HAL_TIM_PWM_Start+0xb6>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2202      	movs	r2, #2
 800c938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c93c:	e023      	b.n	800c986 <HAL_TIM_PWM_Start+0xfe>
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b04      	cmp	r3, #4
 800c942:	d104      	bne.n	800c94e <HAL_TIM_PWM_Start+0xc6>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2202      	movs	r2, #2
 800c948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c94c:	e01b      	b.n	800c986 <HAL_TIM_PWM_Start+0xfe>
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	2b08      	cmp	r3, #8
 800c952:	d104      	bne.n	800c95e <HAL_TIM_PWM_Start+0xd6>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c95c:	e013      	b.n	800c986 <HAL_TIM_PWM_Start+0xfe>
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	2b0c      	cmp	r3, #12
 800c962:	d104      	bne.n	800c96e <HAL_TIM_PWM_Start+0xe6>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2202      	movs	r2, #2
 800c968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c96c:	e00b      	b.n	800c986 <HAL_TIM_PWM_Start+0xfe>
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b10      	cmp	r3, #16
 800c972:	d104      	bne.n	800c97e <HAL_TIM_PWM_Start+0xf6>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2202      	movs	r2, #2
 800c978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c97c:	e003      	b.n	800c986 <HAL_TIM_PWM_Start+0xfe>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2202      	movs	r2, #2
 800c982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2201      	movs	r2, #1
 800c98c:	6839      	ldr	r1, [r7, #0]
 800c98e:	4618      	mov	r0, r3
 800c990:	f001 f9b4 	bl	800dcfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a38      	ldr	r2, [pc, #224]	; (800ca7c <HAL_TIM_PWM_Start+0x1f4>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d013      	beq.n	800c9c6 <HAL_TIM_PWM_Start+0x13e>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a37      	ldr	r2, [pc, #220]	; (800ca80 <HAL_TIM_PWM_Start+0x1f8>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d00e      	beq.n	800c9c6 <HAL_TIM_PWM_Start+0x13e>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a35      	ldr	r2, [pc, #212]	; (800ca84 <HAL_TIM_PWM_Start+0x1fc>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d009      	beq.n	800c9c6 <HAL_TIM_PWM_Start+0x13e>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a34      	ldr	r2, [pc, #208]	; (800ca88 <HAL_TIM_PWM_Start+0x200>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d004      	beq.n	800c9c6 <HAL_TIM_PWM_Start+0x13e>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a32      	ldr	r2, [pc, #200]	; (800ca8c <HAL_TIM_PWM_Start+0x204>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d101      	bne.n	800c9ca <HAL_TIM_PWM_Start+0x142>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e000      	b.n	800c9cc <HAL_TIM_PWM_Start+0x144>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d007      	beq.n	800c9e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a25      	ldr	r2, [pc, #148]	; (800ca7c <HAL_TIM_PWM_Start+0x1f4>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d022      	beq.n	800ca30 <HAL_TIM_PWM_Start+0x1a8>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f2:	d01d      	beq.n	800ca30 <HAL_TIM_PWM_Start+0x1a8>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a25      	ldr	r2, [pc, #148]	; (800ca90 <HAL_TIM_PWM_Start+0x208>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d018      	beq.n	800ca30 <HAL_TIM_PWM_Start+0x1a8>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a24      	ldr	r2, [pc, #144]	; (800ca94 <HAL_TIM_PWM_Start+0x20c>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d013      	beq.n	800ca30 <HAL_TIM_PWM_Start+0x1a8>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a22      	ldr	r2, [pc, #136]	; (800ca98 <HAL_TIM_PWM_Start+0x210>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d00e      	beq.n	800ca30 <HAL_TIM_PWM_Start+0x1a8>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a1a      	ldr	r2, [pc, #104]	; (800ca80 <HAL_TIM_PWM_Start+0x1f8>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d009      	beq.n	800ca30 <HAL_TIM_PWM_Start+0x1a8>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a1e      	ldr	r2, [pc, #120]	; (800ca9c <HAL_TIM_PWM_Start+0x214>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d004      	beq.n	800ca30 <HAL_TIM_PWM_Start+0x1a8>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a16      	ldr	r2, [pc, #88]	; (800ca84 <HAL_TIM_PWM_Start+0x1fc>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d115      	bne.n	800ca5c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	689a      	ldr	r2, [r3, #8]
 800ca36:	4b1a      	ldr	r3, [pc, #104]	; (800caa0 <HAL_TIM_PWM_Start+0x218>)
 800ca38:	4013      	ands	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2b06      	cmp	r3, #6
 800ca40:	d015      	beq.n	800ca6e <HAL_TIM_PWM_Start+0x1e6>
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca48:	d011      	beq.n	800ca6e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f042 0201 	orr.w	r2, r2, #1
 800ca58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca5a:	e008      	b.n	800ca6e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f042 0201 	orr.w	r2, r2, #1
 800ca6a:	601a      	str	r2, [r3, #0]
 800ca6c:	e000      	b.n	800ca70 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	40010000 	.word	0x40010000
 800ca80:	40010400 	.word	0x40010400
 800ca84:	40014000 	.word	0x40014000
 800ca88:	40014400 	.word	0x40014400
 800ca8c:	40014800 	.word	0x40014800
 800ca90:	40000400 	.word	0x40000400
 800ca94:	40000800 	.word	0x40000800
 800ca98:	40000c00 	.word	0x40000c00
 800ca9c:	40001800 	.word	0x40001800
 800caa0:	00010007 	.word	0x00010007

0800caa4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2200      	movs	r2, #0
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f001 f920 	bl	800dcfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a3e      	ldr	r2, [pc, #248]	; (800cbbc <HAL_TIM_PWM_Stop+0x118>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d013      	beq.n	800caee <HAL_TIM_PWM_Stop+0x4a>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a3d      	ldr	r2, [pc, #244]	; (800cbc0 <HAL_TIM_PWM_Stop+0x11c>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d00e      	beq.n	800caee <HAL_TIM_PWM_Stop+0x4a>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a3b      	ldr	r2, [pc, #236]	; (800cbc4 <HAL_TIM_PWM_Stop+0x120>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d009      	beq.n	800caee <HAL_TIM_PWM_Stop+0x4a>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a3a      	ldr	r2, [pc, #232]	; (800cbc8 <HAL_TIM_PWM_Stop+0x124>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d004      	beq.n	800caee <HAL_TIM_PWM_Stop+0x4a>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a38      	ldr	r2, [pc, #224]	; (800cbcc <HAL_TIM_PWM_Stop+0x128>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d101      	bne.n	800caf2 <HAL_TIM_PWM_Stop+0x4e>
 800caee:	2301      	movs	r3, #1
 800caf0:	e000      	b.n	800caf4 <HAL_TIM_PWM_Stop+0x50>
 800caf2:	2300      	movs	r3, #0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d017      	beq.n	800cb28 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6a1a      	ldr	r2, [r3, #32]
 800cafe:	f241 1311 	movw	r3, #4369	; 0x1111
 800cb02:	4013      	ands	r3, r2
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10f      	bne.n	800cb28 <HAL_TIM_PWM_Stop+0x84>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	6a1a      	ldr	r2, [r3, #32]
 800cb0e:	f240 4344 	movw	r3, #1092	; 0x444
 800cb12:	4013      	ands	r3, r2
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d107      	bne.n	800cb28 <HAL_TIM_PWM_Stop+0x84>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6a1a      	ldr	r2, [r3, #32]
 800cb2e:	f241 1311 	movw	r3, #4369	; 0x1111
 800cb32:	4013      	ands	r3, r2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10f      	bne.n	800cb58 <HAL_TIM_PWM_Stop+0xb4>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6a1a      	ldr	r2, [r3, #32]
 800cb3e:	f240 4344 	movw	r3, #1092	; 0x444
 800cb42:	4013      	ands	r3, r2
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d107      	bne.n	800cb58 <HAL_TIM_PWM_Stop+0xb4>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f022 0201 	bic.w	r2, r2, #1
 800cb56:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d104      	bne.n	800cb68 <HAL_TIM_PWM_Stop+0xc4>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2201      	movs	r2, #1
 800cb62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb66:	e023      	b.n	800cbb0 <HAL_TIM_PWM_Stop+0x10c>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2b04      	cmp	r3, #4
 800cb6c:	d104      	bne.n	800cb78 <HAL_TIM_PWM_Stop+0xd4>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2201      	movs	r2, #1
 800cb72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb76:	e01b      	b.n	800cbb0 <HAL_TIM_PWM_Stop+0x10c>
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	2b08      	cmp	r3, #8
 800cb7c:	d104      	bne.n	800cb88 <HAL_TIM_PWM_Stop+0xe4>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb86:	e013      	b.n	800cbb0 <HAL_TIM_PWM_Stop+0x10c>
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2b0c      	cmp	r3, #12
 800cb8c:	d104      	bne.n	800cb98 <HAL_TIM_PWM_Stop+0xf4>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb96:	e00b      	b.n	800cbb0 <HAL_TIM_PWM_Stop+0x10c>
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	2b10      	cmp	r3, #16
 800cb9c:	d104      	bne.n	800cba8 <HAL_TIM_PWM_Stop+0x104>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cba6:	e003      	b.n	800cbb0 <HAL_TIM_PWM_Stop+0x10c>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	40010000 	.word	0x40010000
 800cbc0:	40010400 	.word	0x40010400
 800cbc4:	40014000 	.word	0x40014000
 800cbc8:	40014400 	.word	0x40014400
 800cbcc:	40014800 	.word	0x40014800

0800cbd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	e08f      	b.n	800cd04 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d106      	bne.n	800cbfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7f6 fe0f 	bl	800381c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2202      	movs	r2, #2
 800cc02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6899      	ldr	r1, [r3, #8]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	4b3e      	ldr	r3, [pc, #248]	; (800cd0c <HAL_TIM_Encoder_Init+0x13c>)
 800cc12:	400b      	ands	r3, r1
 800cc14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	3304      	adds	r3, #4
 800cc1e:	4619      	mov	r1, r3
 800cc20:	4610      	mov	r0, r2
 800cc22:	f000 fc5d 	bl	800d4e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	699b      	ldr	r3, [r3, #24]
 800cc34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6a1b      	ldr	r3, [r3, #32]
 800cc3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	697a      	ldr	r2, [r7, #20]
 800cc44:	4313      	orrs	r3, r2
 800cc46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	4b31      	ldr	r3, [pc, #196]	; (800cd10 <HAL_TIM_Encoder_Init+0x140>)
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	689a      	ldr	r2, [r3, #8]
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	021b      	lsls	r3, r3, #8
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cc62:	693a      	ldr	r2, [r7, #16]
 800cc64:	4b2b      	ldr	r3, [pc, #172]	; (800cd14 <HAL_TIM_Encoder_Init+0x144>)
 800cc66:	4013      	ands	r3, r2
 800cc68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cc6a:	693a      	ldr	r2, [r7, #16]
 800cc6c:	4b2a      	ldr	r3, [pc, #168]	; (800cd18 <HAL_TIM_Encoder_Init+0x148>)
 800cc6e:	4013      	ands	r3, r2
 800cc70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	68da      	ldr	r2, [r3, #12]
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	69db      	ldr	r3, [r3, #28]
 800cc7a:	021b      	lsls	r3, r3, #8
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	4313      	orrs	r3, r2
 800cc82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	011a      	lsls	r2, r3, #4
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	6a1b      	ldr	r3, [r3, #32]
 800cc8e:	031b      	lsls	r3, r3, #12
 800cc90:	4313      	orrs	r3, r2
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cc9e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cca6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	695b      	ldr	r3, [r3, #20]
 800ccb0:	011b      	lsls	r3, r3, #4
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2201      	movs	r2, #1
 800cce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3718      	adds	r7, #24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	fffebff8 	.word	0xfffebff8
 800cd10:	fffffcfc 	.word	0xfffffcfc
 800cd14:	fffff3f3 	.word	0xfffff3f3
 800cd18:	ffff0f0f 	.word	0xffff0f0f

0800cd1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cd34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d110      	bne.n	800cd6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d102      	bne.n	800cd58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cd52:	7b7b      	ldrb	r3, [r7, #13]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d001      	beq.n	800cd5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e069      	b.n	800ce30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2202      	movs	r2, #2
 800cd68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd6c:	e031      	b.n	800cdd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	2b04      	cmp	r3, #4
 800cd72:	d110      	bne.n	800cd96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cd74:	7bbb      	ldrb	r3, [r7, #14]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d102      	bne.n	800cd80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cd7a:	7b3b      	ldrb	r3, [r7, #12]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d001      	beq.n	800cd84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	e055      	b.n	800ce30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2202      	movs	r2, #2
 800cd90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd94:	e01d      	b.n	800cdd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d108      	bne.n	800cdae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d105      	bne.n	800cdae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cda2:	7b7b      	ldrb	r3, [r7, #13]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d102      	bne.n	800cdae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cda8:	7b3b      	ldrb	r3, [r7, #12]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d001      	beq.n	800cdb2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e03e      	b.n	800ce30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2202      	movs	r2, #2
 800cdb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2202      	movs	r2, #2
 800cdbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2202      	movs	r2, #2
 800cdc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2202      	movs	r2, #2
 800cdce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d003      	beq.n	800cde0 <HAL_TIM_Encoder_Start+0xc4>
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	2b04      	cmp	r3, #4
 800cddc:	d008      	beq.n	800cdf0 <HAL_TIM_Encoder_Start+0xd4>
 800cdde:	e00f      	b.n	800ce00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2201      	movs	r2, #1
 800cde6:	2100      	movs	r1, #0
 800cde8:	4618      	mov	r0, r3
 800cdea:	f000 ff87 	bl	800dcfc <TIM_CCxChannelCmd>
      break;
 800cdee:	e016      	b.n	800ce1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	2104      	movs	r1, #4
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f000 ff7f 	bl	800dcfc <TIM_CCxChannelCmd>
      break;
 800cdfe:	e00e      	b.n	800ce1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2201      	movs	r2, #1
 800ce06:	2100      	movs	r1, #0
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f000 ff77 	bl	800dcfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2201      	movs	r2, #1
 800ce14:	2104      	movs	r1, #4
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 ff70 	bl	800dcfc <TIM_CCxChannelCmd>
      break;
 800ce1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f042 0201 	orr.w	r2, r2, #1
 800ce2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	f003 0302 	and.w	r3, r3, #2
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d122      	bne.n	800ce94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	f003 0302 	and.w	r3, r3, #2
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d11b      	bne.n	800ce94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f06f 0202 	mvn.w	r2, #2
 800ce64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2201      	movs	r2, #1
 800ce6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	f003 0303 	and.w	r3, r3, #3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d003      	beq.n	800ce82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fb12 	bl	800d4a4 <HAL_TIM_IC_CaptureCallback>
 800ce80:	e005      	b.n	800ce8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fb04 	bl	800d490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fb15 	bl	800d4b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2200      	movs	r2, #0
 800ce92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	f003 0304 	and.w	r3, r3, #4
 800ce9e:	2b04      	cmp	r3, #4
 800cea0:	d122      	bne.n	800cee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	f003 0304 	and.w	r3, r3, #4
 800ceac:	2b04      	cmp	r3, #4
 800ceae:	d11b      	bne.n	800cee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f06f 0204 	mvn.w	r2, #4
 800ceb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2202      	movs	r2, #2
 800cebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	699b      	ldr	r3, [r3, #24]
 800cec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d003      	beq.n	800ced6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fae8 	bl	800d4a4 <HAL_TIM_IC_CaptureCallback>
 800ced4:	e005      	b.n	800cee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 fada 	bl	800d490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 faeb 	bl	800d4b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	f003 0308 	and.w	r3, r3, #8
 800cef2:	2b08      	cmp	r3, #8
 800cef4:	d122      	bne.n	800cf3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	f003 0308 	and.w	r3, r3, #8
 800cf00:	2b08      	cmp	r3, #8
 800cf02:	d11b      	bne.n	800cf3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f06f 0208 	mvn.w	r2, #8
 800cf0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2204      	movs	r2, #4
 800cf12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	69db      	ldr	r3, [r3, #28]
 800cf1a:	f003 0303 	and.w	r3, r3, #3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d003      	beq.n	800cf2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fabe 	bl	800d4a4 <HAL_TIM_IC_CaptureCallback>
 800cf28:	e005      	b.n	800cf36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 fab0 	bl	800d490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 fac1 	bl	800d4b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	f003 0310 	and.w	r3, r3, #16
 800cf46:	2b10      	cmp	r3, #16
 800cf48:	d122      	bne.n	800cf90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	68db      	ldr	r3, [r3, #12]
 800cf50:	f003 0310 	and.w	r3, r3, #16
 800cf54:	2b10      	cmp	r3, #16
 800cf56:	d11b      	bne.n	800cf90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f06f 0210 	mvn.w	r2, #16
 800cf60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2208      	movs	r2, #8
 800cf66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d003      	beq.n	800cf7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa94 	bl	800d4a4 <HAL_TIM_IC_CaptureCallback>
 800cf7c:	e005      	b.n	800cf8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fa86 	bl	800d490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fa97 	bl	800d4b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d10e      	bne.n	800cfbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d107      	bne.n	800cfbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f06f 0201 	mvn.w	r2, #1
 800cfb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7f6 f9c2 	bl	8003340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfc6:	2b80      	cmp	r3, #128	; 0x80
 800cfc8:	d10e      	bne.n	800cfe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfd4:	2b80      	cmp	r3, #128	; 0x80
 800cfd6:	d107      	bne.n	800cfe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cfe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 ffc6 	bl	800df74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	691b      	ldr	r3, [r3, #16]
 800cfee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cff6:	d10e      	bne.n	800d016 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d002:	2b80      	cmp	r3, #128	; 0x80
 800d004:	d107      	bne.n	800d016 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 ffb9 	bl	800df88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d020:	2b40      	cmp	r3, #64	; 0x40
 800d022:	d10e      	bne.n	800d042 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d02e:	2b40      	cmp	r3, #64	; 0x40
 800d030:	d107      	bne.n	800d042 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d03a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fa45 	bl	800d4cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	f003 0320 	and.w	r3, r3, #32
 800d04c:	2b20      	cmp	r3, #32
 800d04e:	d10e      	bne.n	800d06e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	f003 0320 	and.w	r3, r3, #32
 800d05a:	2b20      	cmp	r3, #32
 800d05c:	d107      	bne.n	800d06e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f06f 0220 	mvn.w	r2, #32
 800d066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 ff79 	bl	800df60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d06e:	bf00      	nop
 800d070:	3708      	adds	r7, #8
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b086      	sub	sp, #24
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d084:	2300      	movs	r3, #0
 800d086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d101      	bne.n	800d096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d092:	2302      	movs	r3, #2
 800d094:	e0ff      	b.n	800d296 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2201      	movs	r2, #1
 800d09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b14      	cmp	r3, #20
 800d0a2:	f200 80f0 	bhi.w	800d286 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d0a6:	a201      	add	r2, pc, #4	; (adr r2, 800d0ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d101 	.word	0x0800d101
 800d0b0:	0800d287 	.word	0x0800d287
 800d0b4:	0800d287 	.word	0x0800d287
 800d0b8:	0800d287 	.word	0x0800d287
 800d0bc:	0800d141 	.word	0x0800d141
 800d0c0:	0800d287 	.word	0x0800d287
 800d0c4:	0800d287 	.word	0x0800d287
 800d0c8:	0800d287 	.word	0x0800d287
 800d0cc:	0800d183 	.word	0x0800d183
 800d0d0:	0800d287 	.word	0x0800d287
 800d0d4:	0800d287 	.word	0x0800d287
 800d0d8:	0800d287 	.word	0x0800d287
 800d0dc:	0800d1c3 	.word	0x0800d1c3
 800d0e0:	0800d287 	.word	0x0800d287
 800d0e4:	0800d287 	.word	0x0800d287
 800d0e8:	0800d287 	.word	0x0800d287
 800d0ec:	0800d205 	.word	0x0800d205
 800d0f0:	0800d287 	.word	0x0800d287
 800d0f4:	0800d287 	.word	0x0800d287
 800d0f8:	0800d287 	.word	0x0800d287
 800d0fc:	0800d245 	.word	0x0800d245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68b9      	ldr	r1, [r7, #8]
 800d106:	4618      	mov	r0, r3
 800d108:	f000 fa84 	bl	800d614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	699a      	ldr	r2, [r3, #24]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f042 0208 	orr.w	r2, r2, #8
 800d11a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	699a      	ldr	r2, [r3, #24]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f022 0204 	bic.w	r2, r2, #4
 800d12a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6999      	ldr	r1, [r3, #24]
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	691a      	ldr	r2, [r3, #16]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	430a      	orrs	r2, r1
 800d13c:	619a      	str	r2, [r3, #24]
      break;
 800d13e:	e0a5      	b.n	800d28c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68b9      	ldr	r1, [r7, #8]
 800d146:	4618      	mov	r0, r3
 800d148:	f000 faf4 	bl	800d734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	699a      	ldr	r2, [r3, #24]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d15a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	699a      	ldr	r2, [r3, #24]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d16a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6999      	ldr	r1, [r3, #24]
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	021a      	lsls	r2, r3, #8
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	430a      	orrs	r2, r1
 800d17e:	619a      	str	r2, [r3, #24]
      break;
 800d180:	e084      	b.n	800d28c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68b9      	ldr	r1, [r7, #8]
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 fb5d 	bl	800d848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	69da      	ldr	r2, [r3, #28]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f042 0208 	orr.w	r2, r2, #8
 800d19c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	69da      	ldr	r2, [r3, #28]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f022 0204 	bic.w	r2, r2, #4
 800d1ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	69d9      	ldr	r1, [r3, #28]
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	691a      	ldr	r2, [r3, #16]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	430a      	orrs	r2, r1
 800d1be:	61da      	str	r2, [r3, #28]
      break;
 800d1c0:	e064      	b.n	800d28c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68b9      	ldr	r1, [r7, #8]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f000 fbc5 	bl	800d958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	69da      	ldr	r2, [r3, #28]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	69da      	ldr	r2, [r3, #28]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	69d9      	ldr	r1, [r3, #28]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	021a      	lsls	r2, r3, #8
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	430a      	orrs	r2, r1
 800d200:	61da      	str	r2, [r3, #28]
      break;
 800d202:	e043      	b.n	800d28c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68b9      	ldr	r1, [r7, #8]
 800d20a:	4618      	mov	r0, r3
 800d20c:	f000 fc0e 	bl	800da2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f042 0208 	orr.w	r2, r2, #8
 800d21e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f022 0204 	bic.w	r2, r2, #4
 800d22e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	691a      	ldr	r2, [r3, #16]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	430a      	orrs	r2, r1
 800d240:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d242:	e023      	b.n	800d28c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	68b9      	ldr	r1, [r7, #8]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 fc52 	bl	800daf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d25e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d26e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	021a      	lsls	r2, r3, #8
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	430a      	orrs	r2, r1
 800d282:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d284:	e002      	b.n	800d28c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	75fb      	strb	r3, [r7, #23]
      break;
 800d28a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d294:	7dfb      	ldrb	r3, [r7, #23]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop

0800d2a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d101      	bne.n	800d2bc <HAL_TIM_ConfigClockSource+0x1c>
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	e0dc      	b.n	800d476 <HAL_TIM_ConfigClockSource+0x1d6>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	4b6a      	ldr	r3, [pc, #424]	; (800d480 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d2d8:	4013      	ands	r3, r2
 800d2da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d2e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a64      	ldr	r2, [pc, #400]	; (800d484 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	f000 80a9 	beq.w	800d44a <HAL_TIM_ConfigClockSource+0x1aa>
 800d2f8:	4a62      	ldr	r2, [pc, #392]	; (800d484 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	f200 80ae 	bhi.w	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d300:	4a61      	ldr	r2, [pc, #388]	; (800d488 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d302:	4293      	cmp	r3, r2
 800d304:	f000 80a1 	beq.w	800d44a <HAL_TIM_ConfigClockSource+0x1aa>
 800d308:	4a5f      	ldr	r2, [pc, #380]	; (800d488 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	f200 80a6 	bhi.w	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d310:	4a5e      	ldr	r2, [pc, #376]	; (800d48c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d312:	4293      	cmp	r3, r2
 800d314:	f000 8099 	beq.w	800d44a <HAL_TIM_ConfigClockSource+0x1aa>
 800d318:	4a5c      	ldr	r2, [pc, #368]	; (800d48c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	f200 809e 	bhi.w	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d320:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d324:	f000 8091 	beq.w	800d44a <HAL_TIM_ConfigClockSource+0x1aa>
 800d328:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d32c:	f200 8096 	bhi.w	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d334:	f000 8089 	beq.w	800d44a <HAL_TIM_ConfigClockSource+0x1aa>
 800d338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d33c:	f200 808e 	bhi.w	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d344:	d03e      	beq.n	800d3c4 <HAL_TIM_ConfigClockSource+0x124>
 800d346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d34a:	f200 8087 	bhi.w	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d34e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d352:	f000 8086 	beq.w	800d462 <HAL_TIM_ConfigClockSource+0x1c2>
 800d356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d35a:	d87f      	bhi.n	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d35c:	2b70      	cmp	r3, #112	; 0x70
 800d35e:	d01a      	beq.n	800d396 <HAL_TIM_ConfigClockSource+0xf6>
 800d360:	2b70      	cmp	r3, #112	; 0x70
 800d362:	d87b      	bhi.n	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d364:	2b60      	cmp	r3, #96	; 0x60
 800d366:	d050      	beq.n	800d40a <HAL_TIM_ConfigClockSource+0x16a>
 800d368:	2b60      	cmp	r3, #96	; 0x60
 800d36a:	d877      	bhi.n	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d36c:	2b50      	cmp	r3, #80	; 0x50
 800d36e:	d03c      	beq.n	800d3ea <HAL_TIM_ConfigClockSource+0x14a>
 800d370:	2b50      	cmp	r3, #80	; 0x50
 800d372:	d873      	bhi.n	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d374:	2b40      	cmp	r3, #64	; 0x40
 800d376:	d058      	beq.n	800d42a <HAL_TIM_ConfigClockSource+0x18a>
 800d378:	2b40      	cmp	r3, #64	; 0x40
 800d37a:	d86f      	bhi.n	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d37c:	2b30      	cmp	r3, #48	; 0x30
 800d37e:	d064      	beq.n	800d44a <HAL_TIM_ConfigClockSource+0x1aa>
 800d380:	2b30      	cmp	r3, #48	; 0x30
 800d382:	d86b      	bhi.n	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d384:	2b20      	cmp	r3, #32
 800d386:	d060      	beq.n	800d44a <HAL_TIM_ConfigClockSource+0x1aa>
 800d388:	2b20      	cmp	r3, #32
 800d38a:	d867      	bhi.n	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d05c      	beq.n	800d44a <HAL_TIM_ConfigClockSource+0x1aa>
 800d390:	2b10      	cmp	r3, #16
 800d392:	d05a      	beq.n	800d44a <HAL_TIM_ConfigClockSource+0x1aa>
 800d394:	e062      	b.n	800d45c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6818      	ldr	r0, [r3, #0]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	6899      	ldr	r1, [r3, #8]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	685a      	ldr	r2, [r3, #4]
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	f000 fc89 	bl	800dcbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d3b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	609a      	str	r2, [r3, #8]
      break;
 800d3c2:	e04f      	b.n	800d464 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6818      	ldr	r0, [r3, #0]
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	6899      	ldr	r1, [r3, #8]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	685a      	ldr	r2, [r3, #4]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	f000 fc72 	bl	800dcbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	689a      	ldr	r2, [r3, #8]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3e6:	609a      	str	r2, [r3, #8]
      break;
 800d3e8:	e03c      	b.n	800d464 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6818      	ldr	r0, [r3, #0]
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	6859      	ldr	r1, [r3, #4]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	f000 fbe2 	bl	800dbc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2150      	movs	r1, #80	; 0x50
 800d402:	4618      	mov	r0, r3
 800d404:	f000 fc3c 	bl	800dc80 <TIM_ITRx_SetConfig>
      break;
 800d408:	e02c      	b.n	800d464 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6818      	ldr	r0, [r3, #0]
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	6859      	ldr	r1, [r3, #4]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	461a      	mov	r2, r3
 800d418:	f000 fc01 	bl	800dc1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2160      	movs	r1, #96	; 0x60
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fc2c 	bl	800dc80 <TIM_ITRx_SetConfig>
      break;
 800d428:	e01c      	b.n	800d464 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6818      	ldr	r0, [r3, #0]
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	6859      	ldr	r1, [r3, #4]
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	461a      	mov	r2, r3
 800d438:	f000 fbc2 	bl	800dbc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2140      	movs	r1, #64	; 0x40
 800d442:	4618      	mov	r0, r3
 800d444:	f000 fc1c 	bl	800dc80 <TIM_ITRx_SetConfig>
      break;
 800d448:	e00c      	b.n	800d464 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4619      	mov	r1, r3
 800d454:	4610      	mov	r0, r2
 800d456:	f000 fc13 	bl	800dc80 <TIM_ITRx_SetConfig>
      break;
 800d45a:	e003      	b.n	800d464 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	73fb      	strb	r3, [r7, #15]
      break;
 800d460:	e000      	b.n	800d464 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d474:	7bfb      	ldrb	r3, [r7, #15]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	ffceff88 	.word	0xffceff88
 800d484:	00100040 	.word	0x00100040
 800d488:	00100030 	.word	0x00100030
 800d48c:	00100020 	.word	0x00100020

0800d490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d498:	bf00      	nop
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4a40      	ldr	r2, [pc, #256]	; (800d5f4 <TIM_Base_SetConfig+0x114>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d013      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4fe:	d00f      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a3d      	ldr	r2, [pc, #244]	; (800d5f8 <TIM_Base_SetConfig+0x118>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d00b      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a3c      	ldr	r2, [pc, #240]	; (800d5fc <TIM_Base_SetConfig+0x11c>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d007      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4a3b      	ldr	r2, [pc, #236]	; (800d600 <TIM_Base_SetConfig+0x120>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d003      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a3a      	ldr	r2, [pc, #232]	; (800d604 <TIM_Base_SetConfig+0x124>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d108      	bne.n	800d532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	4313      	orrs	r3, r2
 800d530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a2f      	ldr	r2, [pc, #188]	; (800d5f4 <TIM_Base_SetConfig+0x114>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d01f      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d540:	d01b      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a2c      	ldr	r2, [pc, #176]	; (800d5f8 <TIM_Base_SetConfig+0x118>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d017      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a2b      	ldr	r2, [pc, #172]	; (800d5fc <TIM_Base_SetConfig+0x11c>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d013      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a2a      	ldr	r2, [pc, #168]	; (800d600 <TIM_Base_SetConfig+0x120>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d00f      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a29      	ldr	r2, [pc, #164]	; (800d604 <TIM_Base_SetConfig+0x124>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d00b      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a28      	ldr	r2, [pc, #160]	; (800d608 <TIM_Base_SetConfig+0x128>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d007      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a27      	ldr	r2, [pc, #156]	; (800d60c <TIM_Base_SetConfig+0x12c>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d003      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4a26      	ldr	r2, [pc, #152]	; (800d610 <TIM_Base_SetConfig+0x130>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d108      	bne.n	800d58c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	4313      	orrs	r3, r2
 800d58a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	4313      	orrs	r3, r2
 800d598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	689a      	ldr	r2, [r3, #8]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a10      	ldr	r2, [pc, #64]	; (800d5f4 <TIM_Base_SetConfig+0x114>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d00f      	beq.n	800d5d8 <TIM_Base_SetConfig+0xf8>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a12      	ldr	r2, [pc, #72]	; (800d604 <TIM_Base_SetConfig+0x124>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d00b      	beq.n	800d5d8 <TIM_Base_SetConfig+0xf8>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a11      	ldr	r2, [pc, #68]	; (800d608 <TIM_Base_SetConfig+0x128>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d007      	beq.n	800d5d8 <TIM_Base_SetConfig+0xf8>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a10      	ldr	r2, [pc, #64]	; (800d60c <TIM_Base_SetConfig+0x12c>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d003      	beq.n	800d5d8 <TIM_Base_SetConfig+0xf8>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4a0f      	ldr	r2, [pc, #60]	; (800d610 <TIM_Base_SetConfig+0x130>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d103      	bne.n	800d5e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	691a      	ldr	r2, [r3, #16]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	615a      	str	r2, [r3, #20]
}
 800d5e6:	bf00      	nop
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	40010000 	.word	0x40010000
 800d5f8:	40000400 	.word	0x40000400
 800d5fc:	40000800 	.word	0x40000800
 800d600:	40000c00 	.word	0x40000c00
 800d604:	40010400 	.word	0x40010400
 800d608:	40014000 	.word	0x40014000
 800d60c:	40014400 	.word	0x40014400
 800d610:	40014800 	.word	0x40014800

0800d614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d614:	b480      	push	{r7}
 800d616:	b087      	sub	sp, #28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6a1b      	ldr	r3, [r3, #32]
 800d622:	f023 0201 	bic.w	r2, r3, #1
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	699b      	ldr	r3, [r3, #24]
 800d63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	4b37      	ldr	r3, [pc, #220]	; (800d71c <TIM_OC1_SetConfig+0x108>)
 800d640:	4013      	ands	r3, r2
 800d642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f023 0303 	bic.w	r3, r3, #3
 800d64a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68fa      	ldr	r2, [r7, #12]
 800d652:	4313      	orrs	r3, r2
 800d654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f023 0302 	bic.w	r3, r3, #2
 800d65c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	697a      	ldr	r2, [r7, #20]
 800d664:	4313      	orrs	r3, r2
 800d666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a2d      	ldr	r2, [pc, #180]	; (800d720 <TIM_OC1_SetConfig+0x10c>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d00f      	beq.n	800d690 <TIM_OC1_SetConfig+0x7c>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a2c      	ldr	r2, [pc, #176]	; (800d724 <TIM_OC1_SetConfig+0x110>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d00b      	beq.n	800d690 <TIM_OC1_SetConfig+0x7c>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a2b      	ldr	r2, [pc, #172]	; (800d728 <TIM_OC1_SetConfig+0x114>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d007      	beq.n	800d690 <TIM_OC1_SetConfig+0x7c>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a2a      	ldr	r2, [pc, #168]	; (800d72c <TIM_OC1_SetConfig+0x118>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d003      	beq.n	800d690 <TIM_OC1_SetConfig+0x7c>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a29      	ldr	r2, [pc, #164]	; (800d730 <TIM_OC1_SetConfig+0x11c>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d10c      	bne.n	800d6aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	f023 0308 	bic.w	r3, r3, #8
 800d696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	697a      	ldr	r2, [r7, #20]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f023 0304 	bic.w	r3, r3, #4
 800d6a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a1c      	ldr	r2, [pc, #112]	; (800d720 <TIM_OC1_SetConfig+0x10c>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d00f      	beq.n	800d6d2 <TIM_OC1_SetConfig+0xbe>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4a1b      	ldr	r2, [pc, #108]	; (800d724 <TIM_OC1_SetConfig+0x110>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d00b      	beq.n	800d6d2 <TIM_OC1_SetConfig+0xbe>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a1a      	ldr	r2, [pc, #104]	; (800d728 <TIM_OC1_SetConfig+0x114>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d007      	beq.n	800d6d2 <TIM_OC1_SetConfig+0xbe>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a19      	ldr	r2, [pc, #100]	; (800d72c <TIM_OC1_SetConfig+0x118>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d003      	beq.n	800d6d2 <TIM_OC1_SetConfig+0xbe>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a18      	ldr	r2, [pc, #96]	; (800d730 <TIM_OC1_SetConfig+0x11c>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d111      	bne.n	800d6f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d6e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	685a      	ldr	r2, [r3, #4]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	697a      	ldr	r2, [r7, #20]
 800d70e:	621a      	str	r2, [r3, #32]
}
 800d710:	bf00      	nop
 800d712:	371c      	adds	r7, #28
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr
 800d71c:	fffeff8f 	.word	0xfffeff8f
 800d720:	40010000 	.word	0x40010000
 800d724:	40010400 	.word	0x40010400
 800d728:	40014000 	.word	0x40014000
 800d72c:	40014400 	.word	0x40014400
 800d730:	40014800 	.word	0x40014800

0800d734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d734:	b480      	push	{r7}
 800d736:	b087      	sub	sp, #28
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	f023 0210 	bic.w	r2, r3, #16
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a1b      	ldr	r3, [r3, #32]
 800d74e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	699b      	ldr	r3, [r3, #24]
 800d75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	4b34      	ldr	r3, [pc, #208]	; (800d830 <TIM_OC2_SetConfig+0xfc>)
 800d760:	4013      	ands	r3, r2
 800d762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d76a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	021b      	lsls	r3, r3, #8
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	4313      	orrs	r3, r2
 800d776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	f023 0320 	bic.w	r3, r3, #32
 800d77e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	011b      	lsls	r3, r3, #4
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	4313      	orrs	r3, r2
 800d78a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4a29      	ldr	r2, [pc, #164]	; (800d834 <TIM_OC2_SetConfig+0x100>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d003      	beq.n	800d79c <TIM_OC2_SetConfig+0x68>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	4a28      	ldr	r2, [pc, #160]	; (800d838 <TIM_OC2_SetConfig+0x104>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d10d      	bne.n	800d7b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	011b      	lsls	r3, r3, #4
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4a1e      	ldr	r2, [pc, #120]	; (800d834 <TIM_OC2_SetConfig+0x100>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d00f      	beq.n	800d7e0 <TIM_OC2_SetConfig+0xac>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4a1d      	ldr	r2, [pc, #116]	; (800d838 <TIM_OC2_SetConfig+0x104>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d00b      	beq.n	800d7e0 <TIM_OC2_SetConfig+0xac>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a1c      	ldr	r2, [pc, #112]	; (800d83c <TIM_OC2_SetConfig+0x108>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d007      	beq.n	800d7e0 <TIM_OC2_SetConfig+0xac>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a1b      	ldr	r2, [pc, #108]	; (800d840 <TIM_OC2_SetConfig+0x10c>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d003      	beq.n	800d7e0 <TIM_OC2_SetConfig+0xac>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a1a      	ldr	r2, [pc, #104]	; (800d844 <TIM_OC2_SetConfig+0x110>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d113      	bne.n	800d808 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	695b      	ldr	r3, [r3, #20]
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	4313      	orrs	r3, r2
 800d806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	693a      	ldr	r2, [r7, #16]
 800d80c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	621a      	str	r2, [r3, #32]
}
 800d822:	bf00      	nop
 800d824:	371c      	adds	r7, #28
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop
 800d830:	feff8fff 	.word	0xfeff8fff
 800d834:	40010000 	.word	0x40010000
 800d838:	40010400 	.word	0x40010400
 800d83c:	40014000 	.word	0x40014000
 800d840:	40014400 	.word	0x40014400
 800d844:	40014800 	.word	0x40014800

0800d848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d848:	b480      	push	{r7}
 800d84a:	b087      	sub	sp, #28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a1b      	ldr	r3, [r3, #32]
 800d856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	69db      	ldr	r3, [r3, #28]
 800d86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	4b33      	ldr	r3, [pc, #204]	; (800d940 <TIM_OC3_SetConfig+0xf8>)
 800d874:	4013      	ands	r3, r2
 800d876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f023 0303 	bic.w	r3, r3, #3
 800d87e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	4313      	orrs	r3, r2
 800d888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	021b      	lsls	r3, r3, #8
 800d898:	697a      	ldr	r2, [r7, #20]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a28      	ldr	r2, [pc, #160]	; (800d944 <TIM_OC3_SetConfig+0xfc>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d003      	beq.n	800d8ae <TIM_OC3_SetConfig+0x66>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a27      	ldr	r2, [pc, #156]	; (800d948 <TIM_OC3_SetConfig+0x100>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d10d      	bne.n	800d8ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	021b      	lsls	r3, r3, #8
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d8c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a1d      	ldr	r2, [pc, #116]	; (800d944 <TIM_OC3_SetConfig+0xfc>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d00f      	beq.n	800d8f2 <TIM_OC3_SetConfig+0xaa>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4a1c      	ldr	r2, [pc, #112]	; (800d948 <TIM_OC3_SetConfig+0x100>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d00b      	beq.n	800d8f2 <TIM_OC3_SetConfig+0xaa>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4a1b      	ldr	r2, [pc, #108]	; (800d94c <TIM_OC3_SetConfig+0x104>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d007      	beq.n	800d8f2 <TIM_OC3_SetConfig+0xaa>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4a1a      	ldr	r2, [pc, #104]	; (800d950 <TIM_OC3_SetConfig+0x108>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d003      	beq.n	800d8f2 <TIM_OC3_SetConfig+0xaa>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4a19      	ldr	r2, [pc, #100]	; (800d954 <TIM_OC3_SetConfig+0x10c>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d113      	bne.n	800d91a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	011b      	lsls	r3, r3, #4
 800d908:	693a      	ldr	r2, [r7, #16]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	699b      	ldr	r3, [r3, #24]
 800d912:	011b      	lsls	r3, r3, #4
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	4313      	orrs	r3, r2
 800d918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	693a      	ldr	r2, [r7, #16]
 800d91e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	685a      	ldr	r2, [r3, #4]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	697a      	ldr	r2, [r7, #20]
 800d932:	621a      	str	r2, [r3, #32]
}
 800d934:	bf00      	nop
 800d936:	371c      	adds	r7, #28
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	fffeff8f 	.word	0xfffeff8f
 800d944:	40010000 	.word	0x40010000
 800d948:	40010400 	.word	0x40010400
 800d94c:	40014000 	.word	0x40014000
 800d950:	40014400 	.word	0x40014400
 800d954:	40014800 	.word	0x40014800

0800d958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d958:	b480      	push	{r7}
 800d95a:	b087      	sub	sp, #28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	69db      	ldr	r3, [r3, #28]
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	4b24      	ldr	r3, [pc, #144]	; (800da14 <TIM_OC4_SetConfig+0xbc>)
 800d984:	4013      	ands	r3, r2
 800d986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d98e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	021b      	lsls	r3, r3, #8
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	4313      	orrs	r3, r2
 800d99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d9a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	031b      	lsls	r3, r3, #12
 800d9aa:	693a      	ldr	r2, [r7, #16]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a19      	ldr	r2, [pc, #100]	; (800da18 <TIM_OC4_SetConfig+0xc0>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00f      	beq.n	800d9d8 <TIM_OC4_SetConfig+0x80>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a18      	ldr	r2, [pc, #96]	; (800da1c <TIM_OC4_SetConfig+0xc4>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d00b      	beq.n	800d9d8 <TIM_OC4_SetConfig+0x80>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a17      	ldr	r2, [pc, #92]	; (800da20 <TIM_OC4_SetConfig+0xc8>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d007      	beq.n	800d9d8 <TIM_OC4_SetConfig+0x80>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a16      	ldr	r2, [pc, #88]	; (800da24 <TIM_OC4_SetConfig+0xcc>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d003      	beq.n	800d9d8 <TIM_OC4_SetConfig+0x80>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a15      	ldr	r2, [pc, #84]	; (800da28 <TIM_OC4_SetConfig+0xd0>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d109      	bne.n	800d9ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d9de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	019b      	lsls	r3, r3, #6
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	685a      	ldr	r2, [r3, #4]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	621a      	str	r2, [r3, #32]
}
 800da06:	bf00      	nop
 800da08:	371c      	adds	r7, #28
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	feff8fff 	.word	0xfeff8fff
 800da18:	40010000 	.word	0x40010000
 800da1c:	40010400 	.word	0x40010400
 800da20:	40014000 	.word	0x40014000
 800da24:	40014400 	.word	0x40014400
 800da28:	40014800 	.word	0x40014800

0800da2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b087      	sub	sp, #28
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a1b      	ldr	r3, [r3, #32]
 800da3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	4b21      	ldr	r3, [pc, #132]	; (800dadc <TIM_OC5_SetConfig+0xb0>)
 800da58:	4013      	ands	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	4313      	orrs	r3, r2
 800da64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800da6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	041b      	lsls	r3, r3, #16
 800da74:	693a      	ldr	r2, [r7, #16]
 800da76:	4313      	orrs	r3, r2
 800da78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a18      	ldr	r2, [pc, #96]	; (800dae0 <TIM_OC5_SetConfig+0xb4>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d00f      	beq.n	800daa2 <TIM_OC5_SetConfig+0x76>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a17      	ldr	r2, [pc, #92]	; (800dae4 <TIM_OC5_SetConfig+0xb8>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d00b      	beq.n	800daa2 <TIM_OC5_SetConfig+0x76>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a16      	ldr	r2, [pc, #88]	; (800dae8 <TIM_OC5_SetConfig+0xbc>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d007      	beq.n	800daa2 <TIM_OC5_SetConfig+0x76>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a15      	ldr	r2, [pc, #84]	; (800daec <TIM_OC5_SetConfig+0xc0>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d003      	beq.n	800daa2 <TIM_OC5_SetConfig+0x76>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a14      	ldr	r2, [pc, #80]	; (800daf0 <TIM_OC5_SetConfig+0xc4>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d109      	bne.n	800dab6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800daa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	695b      	ldr	r3, [r3, #20]
 800daae:	021b      	lsls	r3, r3, #8
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	4313      	orrs	r3, r2
 800dab4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	697a      	ldr	r2, [r7, #20]
 800daba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	693a      	ldr	r2, [r7, #16]
 800dace:	621a      	str	r2, [r3, #32]
}
 800dad0:	bf00      	nop
 800dad2:	371c      	adds	r7, #28
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr
 800dadc:	fffeff8f 	.word	0xfffeff8f
 800dae0:	40010000 	.word	0x40010000
 800dae4:	40010400 	.word	0x40010400
 800dae8:	40014000 	.word	0x40014000
 800daec:	40014400 	.word	0x40014400
 800daf0:	40014800 	.word	0x40014800

0800daf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b087      	sub	sp, #28
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6a1b      	ldr	r3, [r3, #32]
 800db02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	4b22      	ldr	r3, [pc, #136]	; (800dba8 <TIM_OC6_SetConfig+0xb4>)
 800db20:	4013      	ands	r3, r2
 800db22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	021b      	lsls	r3, r3, #8
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	051b      	lsls	r3, r3, #20
 800db3e:	693a      	ldr	r2, [r7, #16]
 800db40:	4313      	orrs	r3, r2
 800db42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4a19      	ldr	r2, [pc, #100]	; (800dbac <TIM_OC6_SetConfig+0xb8>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d00f      	beq.n	800db6c <TIM_OC6_SetConfig+0x78>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a18      	ldr	r2, [pc, #96]	; (800dbb0 <TIM_OC6_SetConfig+0xbc>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d00b      	beq.n	800db6c <TIM_OC6_SetConfig+0x78>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a17      	ldr	r2, [pc, #92]	; (800dbb4 <TIM_OC6_SetConfig+0xc0>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d007      	beq.n	800db6c <TIM_OC6_SetConfig+0x78>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4a16      	ldr	r2, [pc, #88]	; (800dbb8 <TIM_OC6_SetConfig+0xc4>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d003      	beq.n	800db6c <TIM_OC6_SetConfig+0x78>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a15      	ldr	r2, [pc, #84]	; (800dbbc <TIM_OC6_SetConfig+0xc8>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d109      	bne.n	800db80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	029b      	lsls	r3, r3, #10
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	4313      	orrs	r3, r2
 800db7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	697a      	ldr	r2, [r7, #20]
 800db84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	68fa      	ldr	r2, [r7, #12]
 800db8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	685a      	ldr	r2, [r3, #4]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	621a      	str	r2, [r3, #32]
}
 800db9a:	bf00      	nop
 800db9c:	371c      	adds	r7, #28
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	feff8fff 	.word	0xfeff8fff
 800dbac:	40010000 	.word	0x40010000
 800dbb0:	40010400 	.word	0x40010400
 800dbb4:	40014000 	.word	0x40014000
 800dbb8:	40014400 	.word	0x40014400
 800dbbc:	40014800 	.word	0x40014800

0800dbc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6a1b      	ldr	r3, [r3, #32]
 800dbd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	f023 0201 	bic.w	r2, r3, #1
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dbea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	011b      	lsls	r3, r3, #4
 800dbf0:	693a      	ldr	r2, [r7, #16]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f023 030a 	bic.w	r3, r3, #10
 800dbfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dbfe:	697a      	ldr	r2, [r7, #20]
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	4313      	orrs	r3, r2
 800dc04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	693a      	ldr	r2, [r7, #16]
 800dc0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	697a      	ldr	r2, [r7, #20]
 800dc10:	621a      	str	r2, [r3, #32]
}
 800dc12:	bf00      	nop
 800dc14:	371c      	adds	r7, #28
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr

0800dc1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc1e:	b480      	push	{r7}
 800dc20:	b087      	sub	sp, #28
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	60f8      	str	r0, [r7, #12]
 800dc26:	60b9      	str	r1, [r7, #8]
 800dc28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	f023 0210 	bic.w	r2, r3, #16
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6a1b      	ldr	r3, [r3, #32]
 800dc40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	031b      	lsls	r3, r3, #12
 800dc4e:	697a      	ldr	r2, [r7, #20]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	011b      	lsls	r3, r3, #4
 800dc60:	693a      	ldr	r2, [r7, #16]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	697a      	ldr	r2, [r7, #20]
 800dc6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	693a      	ldr	r2, [r7, #16]
 800dc70:	621a      	str	r2, [r3, #32]
}
 800dc72:	bf00      	nop
 800dc74:	371c      	adds	r7, #28
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
	...

0800dc80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	4b09      	ldr	r3, [pc, #36]	; (800dcb8 <TIM_ITRx_SetConfig+0x38>)
 800dc94:	4013      	ands	r3, r2
 800dc96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc98:	683a      	ldr	r2, [r7, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	f043 0307 	orr.w	r3, r3, #7
 800dca2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	609a      	str	r2, [r3, #8]
}
 800dcaa:	bf00      	nop
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	ffcfff8f 	.word	0xffcfff8f

0800dcbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b087      	sub	sp, #28
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
 800dcc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dcd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	021a      	lsls	r2, r3, #8
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	431a      	orrs	r2, r3
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	4313      	orrs	r3, r2
 800dce4:	697a      	ldr	r2, [r7, #20]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	697a      	ldr	r2, [r7, #20]
 800dcee:	609a      	str	r2, [r3, #8]
}
 800dcf0:	bf00      	nop
 800dcf2:	371c      	adds	r7, #28
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	f003 031f 	and.w	r3, r3, #31
 800dd0e:	2201      	movs	r2, #1
 800dd10:	fa02 f303 	lsl.w	r3, r2, r3
 800dd14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6a1a      	ldr	r2, [r3, #32]
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	43db      	mvns	r3, r3
 800dd1e:	401a      	ands	r2, r3
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6a1a      	ldr	r2, [r3, #32]
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	f003 031f 	and.w	r3, r3, #31
 800dd2e:	6879      	ldr	r1, [r7, #4]
 800dd30:	fa01 f303 	lsl.w	r3, r1, r3
 800dd34:	431a      	orrs	r2, r3
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	621a      	str	r2, [r3, #32]
}
 800dd3a:	bf00      	nop
 800dd3c:	371c      	adds	r7, #28
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
	...

0800dd48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b085      	sub	sp, #20
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d101      	bne.n	800dd60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd5c:	2302      	movs	r3, #2
 800dd5e:	e06d      	b.n	800de3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2201      	movs	r2, #1
 800dd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a30      	ldr	r2, [pc, #192]	; (800de48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d004      	beq.n	800dd94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a2f      	ldr	r2, [pc, #188]	; (800de4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d108      	bne.n	800dda6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dd9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	68fa      	ldr	r2, [r7, #12]
 800dda2:	4313      	orrs	r3, r2
 800dda4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a20      	ldr	r2, [pc, #128]	; (800de48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d022      	beq.n	800de10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddd2:	d01d      	beq.n	800de10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a1d      	ldr	r2, [pc, #116]	; (800de50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d018      	beq.n	800de10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4a1c      	ldr	r2, [pc, #112]	; (800de54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d013      	beq.n	800de10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a1a      	ldr	r2, [pc, #104]	; (800de58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d00e      	beq.n	800de10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a15      	ldr	r2, [pc, #84]	; (800de4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d009      	beq.n	800de10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a16      	ldr	r2, [pc, #88]	; (800de5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d004      	beq.n	800de10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a15      	ldr	r2, [pc, #84]	; (800de60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d10c      	bne.n	800de2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	4313      	orrs	r3, r2
 800de20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	68ba      	ldr	r2, [r7, #8]
 800de28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2201      	movs	r2, #1
 800de2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	40010000 	.word	0x40010000
 800de4c:	40010400 	.word	0x40010400
 800de50:	40000400 	.word	0x40000400
 800de54:	40000800 	.word	0x40000800
 800de58:	40000c00 	.word	0x40000c00
 800de5c:	40001800 	.word	0x40001800
 800de60:	40014000 	.word	0x40014000

0800de64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800de6e:	2300      	movs	r3, #0
 800de70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d101      	bne.n	800de80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800de7c:	2302      	movs	r3, #2
 800de7e:	e065      	b.n	800df4c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2201      	movs	r2, #1
 800de84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	4313      	orrs	r3, r2
 800de94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	4313      	orrs	r3, r2
 800deb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4313      	orrs	r3, r2
 800debe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	4313      	orrs	r3, r2
 800decc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	695b      	ldr	r3, [r3, #20]
 800ded8:	4313      	orrs	r3, r2
 800deda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee6:	4313      	orrs	r3, r2
 800dee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	041b      	lsls	r3, r3, #16
 800def6:	4313      	orrs	r3, r2
 800def8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a16      	ldr	r2, [pc, #88]	; (800df58 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d004      	beq.n	800df0e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a14      	ldr	r2, [pc, #80]	; (800df5c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d115      	bne.n	800df3a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df18:	051b      	lsls	r3, r3, #20
 800df1a:	4313      	orrs	r3, r2
 800df1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	69db      	ldr	r3, [r3, #28]
 800df28:	4313      	orrs	r3, r2
 800df2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	6a1b      	ldr	r3, [r3, #32]
 800df36:	4313      	orrs	r3, r2
 800df38:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3714      	adds	r7, #20
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	40010000 	.word	0x40010000
 800df5c:	40010400 	.word	0x40010400

0800df60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df7c:	bf00      	nop
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df90:	bf00      	nop
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d101      	bne.n	800dfae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e042      	b.n	800e034 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d106      	bne.n	800dfc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7f5 fe93 	bl	8003cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2224      	movs	r2, #36	; 0x24
 800dfca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f022 0201 	bic.w	r2, r2, #1
 800dfdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 fce0 	bl	800e9a4 <UART_SetConfig>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d101      	bne.n	800dfee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
 800dfec:	e022      	b.n	800e034 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d002      	beq.n	800dffc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f001 fa34 	bl	800f464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	685a      	ldr	r2, [r3, #4]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e00a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	689a      	ldr	r2, [r3, #8]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e01a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f042 0201 	orr.w	r2, r2, #1
 800e02a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f001 fabb 	bl	800f5a8 <UART_CheckIdleState>
 800e032:	4603      	mov	r3, r0
}
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b08a      	sub	sp, #40	; 0x28
 800e040:	af02      	add	r7, sp, #8
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	603b      	str	r3, [r7, #0]
 800e048:	4613      	mov	r3, r2
 800e04a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e052:	2b20      	cmp	r3, #32
 800e054:	f040 8083 	bne.w	800e15e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d002      	beq.n	800e064 <HAL_UART_Transmit+0x28>
 800e05e:	88fb      	ldrh	r3, [r7, #6]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d101      	bne.n	800e068 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	e07b      	b.n	800e160 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d101      	bne.n	800e076 <HAL_UART_Transmit+0x3a>
 800e072:	2302      	movs	r3, #2
 800e074:	e074      	b.n	800e160 <HAL_UART_Transmit+0x124>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2221      	movs	r2, #33	; 0x21
 800e08a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e08e:	f7f6 f9a9 	bl	80043e4 <HAL_GetTick>
 800e092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	88fa      	ldrh	r2, [r7, #6]
 800e098:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	88fa      	ldrh	r2, [r7, #6]
 800e0a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0ac:	d108      	bne.n	800e0c0 <HAL_UART_Transmit+0x84>
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d104      	bne.n	800e0c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	61bb      	str	r3, [r7, #24]
 800e0be:	e003      	b.n	800e0c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e0d0:	e02c      	b.n	800e12c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	2180      	movs	r1, #128	; 0x80
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	f001 faae 	bl	800f63e <UART_WaitOnFlagUntilTimeout>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	e039      	b.n	800e160 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d10b      	bne.n	800e10a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e0f2:	69bb      	ldr	r3, [r7, #24]
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e100:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	3302      	adds	r3, #2
 800e106:	61bb      	str	r3, [r7, #24]
 800e108:	e007      	b.n	800e11a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	781a      	ldrb	r2, [r3, #0]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	3301      	adds	r3, #1
 800e118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e120:	b29b      	uxth	r3, r3
 800e122:	3b01      	subs	r3, #1
 800e124:	b29a      	uxth	r2, r3
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e132:	b29b      	uxth	r3, r3
 800e134:	2b00      	cmp	r3, #0
 800e136:	d1cc      	bne.n	800e0d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	2200      	movs	r2, #0
 800e140:	2140      	movs	r1, #64	; 0x40
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f001 fa7b 	bl	800f63e <UART_WaitOnFlagUntilTimeout>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d001      	beq.n	800e152 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e14e:	2303      	movs	r3, #3
 800e150:	e006      	b.n	800e160 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2220      	movs	r2, #32
 800e156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	e000      	b.n	800e160 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e15e:	2302      	movs	r3, #2
  }
}
 800e160:	4618      	mov	r0, r3
 800e162:	3720      	adds	r7, #32
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08a      	sub	sp, #40	; 0x28
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	4613      	mov	r3, r2
 800e174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e17c:	2b20      	cmp	r3, #32
 800e17e:	d142      	bne.n	800e206 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d002      	beq.n	800e18c <HAL_UART_Receive_DMA+0x24>
 800e186:	88fb      	ldrh	r3, [r7, #6]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d101      	bne.n	800e190 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e03b      	b.n	800e208 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e196:	2b01      	cmp	r3, #1
 800e198:	d101      	bne.n	800e19e <HAL_UART_Receive_DMA+0x36>
 800e19a:	2302      	movs	r3, #2
 800e19c:	e034      	b.n	800e208 <HAL_UART_Receive_DMA+0xa0>
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a17      	ldr	r2, [pc, #92]	; (800e210 <HAL_UART_Receive_DMA+0xa8>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d01f      	beq.n	800e1f6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d018      	beq.n	800e1f6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	e853 3f00 	ldrex	r3, [r3]
 800e1d0:	613b      	str	r3, [r7, #16]
   return(result);
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e1d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	623b      	str	r3, [r7, #32]
 800e1e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e6:	69f9      	ldr	r1, [r7, #28]
 800e1e8:	6a3a      	ldr	r2, [r7, #32]
 800e1ea:	e841 2300 	strex	r3, r2, [r1]
 800e1ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1e6      	bne.n	800e1c4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e1f6:	88fb      	ldrh	r3, [r7, #6]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	68b9      	ldr	r1, [r7, #8]
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f001 fae7 	bl	800f7d0 <UART_Start_Receive_DMA>
 800e202:	4603      	mov	r3, r0
 800e204:	e000      	b.n	800e208 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e206:	2302      	movs	r3, #2
  }
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3728      	adds	r7, #40	; 0x28
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	58000c00 	.word	0x58000c00

0800e214 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b0ba      	sub	sp, #232	; 0xe8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	69db      	ldr	r3, [r3, #28]
 800e222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	689b      	ldr	r3, [r3, #8]
 800e236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e23a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e23e:	f640 030f 	movw	r3, #2063	; 0x80f
 800e242:	4013      	ands	r3, r2
 800e244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d11b      	bne.n	800e288 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e254:	f003 0320 	and.w	r3, r3, #32
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d015      	beq.n	800e288 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e260:	f003 0320 	and.w	r3, r3, #32
 800e264:	2b00      	cmp	r3, #0
 800e266:	d105      	bne.n	800e274 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e26c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d009      	beq.n	800e288 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f000 835a 	beq.w	800e932 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	4798      	blx	r3
      }
      return;
 800e286:	e354      	b.n	800e932 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 811f 	beq.w	800e4d0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e292:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e296:	4b8b      	ldr	r3, [pc, #556]	; (800e4c4 <HAL_UART_IRQHandler+0x2b0>)
 800e298:	4013      	ands	r3, r2
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d106      	bne.n	800e2ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e29e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e2a2:	4b89      	ldr	r3, [pc, #548]	; (800e4c8 <HAL_UART_IRQHandler+0x2b4>)
 800e2a4:	4013      	ands	r3, r2
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f000 8112 	beq.w	800e4d0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2b0:	f003 0301 	and.w	r3, r3, #1
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d011      	beq.n	800e2dc <HAL_UART_IRQHandler+0xc8>
 800e2b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d00b      	beq.n	800e2dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2d2:	f043 0201 	orr.w	r2, r3, #1
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2e0:	f003 0302 	and.w	r3, r3, #2
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d011      	beq.n	800e30c <HAL_UART_IRQHandler+0xf8>
 800e2e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2ec:	f003 0301 	and.w	r3, r3, #1
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00b      	beq.n	800e30c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2202      	movs	r2, #2
 800e2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e302:	f043 0204 	orr.w	r2, r3, #4
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e310:	f003 0304 	and.w	r3, r3, #4
 800e314:	2b00      	cmp	r3, #0
 800e316:	d011      	beq.n	800e33c <HAL_UART_IRQHandler+0x128>
 800e318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e31c:	f003 0301 	and.w	r3, r3, #1
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00b      	beq.n	800e33c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2204      	movs	r2, #4
 800e32a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e332:	f043 0202 	orr.w	r2, r3, #2
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e340:	f003 0308 	and.w	r3, r3, #8
 800e344:	2b00      	cmp	r3, #0
 800e346:	d017      	beq.n	800e378 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e34c:	f003 0320 	and.w	r3, r3, #32
 800e350:	2b00      	cmp	r3, #0
 800e352:	d105      	bne.n	800e360 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e354:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e358:	4b5a      	ldr	r3, [pc, #360]	; (800e4c4 <HAL_UART_IRQHandler+0x2b0>)
 800e35a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00b      	beq.n	800e378 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2208      	movs	r2, #8
 800e366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e36e:	f043 0208 	orr.w	r2, r3, #8
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e37c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e380:	2b00      	cmp	r3, #0
 800e382:	d012      	beq.n	800e3aa <HAL_UART_IRQHandler+0x196>
 800e384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00c      	beq.n	800e3aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3a0:	f043 0220 	orr.w	r2, r3, #32
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 82c0 	beq.w	800e936 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ba:	f003 0320 	and.w	r3, r3, #32
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d013      	beq.n	800e3ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e3c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3c6:	f003 0320 	and.w	r3, r3, #32
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d105      	bne.n	800e3da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d007      	beq.n	800e3ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d003      	beq.n	800e3ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3fe:	2b40      	cmp	r3, #64	; 0x40
 800e400:	d005      	beq.n	800e40e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e406:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d04f      	beq.n	800e4ae <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f001 fac8 	bl	800f9a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e41e:	2b40      	cmp	r3, #64	; 0x40
 800e420:	d141      	bne.n	800e4a6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	3308      	adds	r3, #8
 800e428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e430:	e853 3f00 	ldrex	r3, [r3]
 800e434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e43c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	3308      	adds	r3, #8
 800e44a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e44e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e45a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e45e:	e841 2300 	strex	r3, r2, [r1]
 800e462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1d9      	bne.n	800e422 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e472:	2b00      	cmp	r3, #0
 800e474:	d013      	beq.n	800e49e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e47a:	4a14      	ldr	r2, [pc, #80]	; (800e4cc <HAL_UART_IRQHandler+0x2b8>)
 800e47c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e482:	4618      	mov	r0, r3
 800e484:	f7f8 f98e 	bl	80067a4 <HAL_DMA_Abort_IT>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d017      	beq.n	800e4be <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e498:	4610      	mov	r0, r2
 800e49a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e49c:	e00f      	b.n	800e4be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 fa6a 	bl	800e978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4a4:	e00b      	b.n	800e4be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 fa66 	bl	800e978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4ac:	e007      	b.n	800e4be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 fa62 	bl	800e978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e4bc:	e23b      	b.n	800e936 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4be:	bf00      	nop
    return;
 800e4c0:	e239      	b.n	800e936 <HAL_UART_IRQHandler+0x722>
 800e4c2:	bf00      	nop
 800e4c4:	10000001 	.word	0x10000001
 800e4c8:	04000120 	.word	0x04000120
 800e4cc:	0800fc4b 	.word	0x0800fc4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	f040 81ce 	bne.w	800e876 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4de:	f003 0310 	and.w	r3, r3, #16
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f000 81c7 	beq.w	800e876 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e4e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4ec:	f003 0310 	and.w	r3, r3, #16
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f000 81c0 	beq.w	800e876 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2210      	movs	r2, #16
 800e4fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e508:	2b40      	cmp	r3, #64	; 0x40
 800e50a:	f040 813b 	bne.w	800e784 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a8b      	ldr	r2, [pc, #556]	; (800e744 <HAL_UART_IRQHandler+0x530>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d059      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a89      	ldr	r2, [pc, #548]	; (800e748 <HAL_UART_IRQHandler+0x534>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d053      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a87      	ldr	r2, [pc, #540]	; (800e74c <HAL_UART_IRQHandler+0x538>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d04d      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a85      	ldr	r2, [pc, #532]	; (800e750 <HAL_UART_IRQHandler+0x53c>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d047      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a83      	ldr	r2, [pc, #524]	; (800e754 <HAL_UART_IRQHandler+0x540>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d041      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a81      	ldr	r2, [pc, #516]	; (800e758 <HAL_UART_IRQHandler+0x544>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d03b      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a7f      	ldr	r2, [pc, #508]	; (800e75c <HAL_UART_IRQHandler+0x548>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d035      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a7d      	ldr	r2, [pc, #500]	; (800e760 <HAL_UART_IRQHandler+0x54c>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d02f      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a7b      	ldr	r2, [pc, #492]	; (800e764 <HAL_UART_IRQHandler+0x550>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d029      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a79      	ldr	r2, [pc, #484]	; (800e768 <HAL_UART_IRQHandler+0x554>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d023      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a77      	ldr	r2, [pc, #476]	; (800e76c <HAL_UART_IRQHandler+0x558>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d01d      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a75      	ldr	r2, [pc, #468]	; (800e770 <HAL_UART_IRQHandler+0x55c>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d017      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a73      	ldr	r2, [pc, #460]	; (800e774 <HAL_UART_IRQHandler+0x560>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d011      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a71      	ldr	r2, [pc, #452]	; (800e778 <HAL_UART_IRQHandler+0x564>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d00b      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a6f      	ldr	r2, [pc, #444]	; (800e77c <HAL_UART_IRQHandler+0x568>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d005      	beq.n	800e5ce <HAL_UART_IRQHandler+0x3ba>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a6d      	ldr	r2, [pc, #436]	; (800e780 <HAL_UART_IRQHandler+0x56c>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d105      	bne.n	800e5da <HAL_UART_IRQHandler+0x3c6>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	e004      	b.n	800e5e4 <HAL_UART_IRQHandler+0x3d0>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e5e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f000 81a4 	beq.w	800e93a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	f080 819c 	bcs.w	800e93a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e608:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e610:	69db      	ldr	r3, [r3, #28]
 800e612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e616:	f000 8086 	beq.w	800e726 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e626:	e853 3f00 	ldrex	r3, [r3]
 800e62a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e62e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e636:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	461a      	mov	r2, r3
 800e640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e644:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e648:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e650:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e654:	e841 2300 	strex	r3, r2, [r1]
 800e658:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e65c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1da      	bne.n	800e61a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	3308      	adds	r3, #8
 800e66a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e66c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e66e:	e853 3f00 	ldrex	r3, [r3]
 800e672:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e676:	f023 0301 	bic.w	r3, r3, #1
 800e67a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	3308      	adds	r3, #8
 800e684:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e688:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e68c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e68e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e690:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e694:	e841 2300 	strex	r3, r2, [r1]
 800e698:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e69a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1e1      	bne.n	800e664 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	3308      	adds	r3, #8
 800e6a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6aa:	e853 3f00 	ldrex	r3, [r3]
 800e6ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e6b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3308      	adds	r3, #8
 800e6c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e6c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e6c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e6ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e6cc:	e841 2300 	strex	r3, r2, [r1]
 800e6d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e6d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1e3      	bne.n	800e6a0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2220      	movs	r2, #32
 800e6dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ee:	e853 3f00 	ldrex	r3, [r3]
 800e6f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e6f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6f6:	f023 0310 	bic.w	r3, r3, #16
 800e6fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	461a      	mov	r2, r3
 800e704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e708:	65bb      	str	r3, [r7, #88]	; 0x58
 800e70a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e70e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e710:	e841 2300 	strex	r3, r2, [r1]
 800e714:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d1e4      	bne.n	800e6e6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e720:	4618      	mov	r0, r3
 800e722:	f7f7 fd21 	bl	8006168 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e732:	b29b      	uxth	r3, r3
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	b29b      	uxth	r3, r3
 800e738:	4619      	mov	r1, r3
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 f926 	bl	800e98c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e740:	e0fb      	b.n	800e93a <HAL_UART_IRQHandler+0x726>
 800e742:	bf00      	nop
 800e744:	40020010 	.word	0x40020010
 800e748:	40020028 	.word	0x40020028
 800e74c:	40020040 	.word	0x40020040
 800e750:	40020058 	.word	0x40020058
 800e754:	40020070 	.word	0x40020070
 800e758:	40020088 	.word	0x40020088
 800e75c:	400200a0 	.word	0x400200a0
 800e760:	400200b8 	.word	0x400200b8
 800e764:	40020410 	.word	0x40020410
 800e768:	40020428 	.word	0x40020428
 800e76c:	40020440 	.word	0x40020440
 800e770:	40020458 	.word	0x40020458
 800e774:	40020470 	.word	0x40020470
 800e778:	40020488 	.word	0x40020488
 800e77c:	400204a0 	.word	0x400204a0
 800e780:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e790:	b29b      	uxth	r3, r3
 800e792:	1ad3      	subs	r3, r2, r3
 800e794:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f000 80cc 	beq.w	800e93e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e7a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f000 80c7 	beq.w	800e93e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	e853 3f00 	ldrex	r3, [r3]
 800e7bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e7d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e7d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7da:	e841 2300 	strex	r3, r2, [r1]
 800e7de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1e4      	bne.n	800e7b0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f0:	e853 3f00 	ldrex	r3, [r3]
 800e7f4:	623b      	str	r3, [r7, #32]
   return(result);
 800e7f6:	6a3a      	ldr	r2, [r7, #32]
 800e7f8:	4b54      	ldr	r3, [pc, #336]	; (800e94c <HAL_UART_IRQHandler+0x738>)
 800e7fa:	4013      	ands	r3, r2
 800e7fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3308      	adds	r3, #8
 800e806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e80a:	633a      	str	r2, [r7, #48]	; 0x30
 800e80c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e812:	e841 2300 	strex	r3, r2, [r1]
 800e816:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1e3      	bne.n	800e7e6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2220      	movs	r2, #32
 800e822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	e853 3f00 	ldrex	r3, [r3]
 800e83e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f023 0310 	bic.w	r3, r3, #16
 800e846:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	461a      	mov	r2, r3
 800e850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e854:	61fb      	str	r3, [r7, #28]
 800e856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e858:	69b9      	ldr	r1, [r7, #24]
 800e85a:	69fa      	ldr	r2, [r7, #28]
 800e85c:	e841 2300 	strex	r3, r2, [r1]
 800e860:	617b      	str	r3, [r7, #20]
   return(result);
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1e4      	bne.n	800e832 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e86c:	4619      	mov	r1, r3
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 f88c 	bl	800e98c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e874:	e063      	b.n	800e93e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e87a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d00e      	beq.n	800e8a0 <HAL_UART_IRQHandler+0x68c>
 800e882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d008      	beq.n	800e8a0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e896:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f001 fa17 	bl	800fccc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e89e:	e051      	b.n	800e944 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d014      	beq.n	800e8d6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d105      	bne.n	800e8c4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e8b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d008      	beq.n	800e8d6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d03a      	beq.n	800e942 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	4798      	blx	r3
    }
    return;
 800e8d4:	e035      	b.n	800e942 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e8d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d009      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x6e2>
 800e8e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d003      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f001 f9c1 	bl	800fc76 <UART_EndTransmit_IT>
    return;
 800e8f4:	e026      	b.n	800e944 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d009      	beq.n	800e916 <HAL_UART_IRQHandler+0x702>
 800e902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e906:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d003      	beq.n	800e916 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f001 f9f0 	bl	800fcf4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e914:	e016      	b.n	800e944 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e91a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d010      	beq.n	800e944 <HAL_UART_IRQHandler+0x730>
 800e922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e926:	2b00      	cmp	r3, #0
 800e928:	da0c      	bge.n	800e944 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f001 f9d8 	bl	800fce0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e930:	e008      	b.n	800e944 <HAL_UART_IRQHandler+0x730>
      return;
 800e932:	bf00      	nop
 800e934:	e006      	b.n	800e944 <HAL_UART_IRQHandler+0x730>
    return;
 800e936:	bf00      	nop
 800e938:	e004      	b.n	800e944 <HAL_UART_IRQHandler+0x730>
      return;
 800e93a:	bf00      	nop
 800e93c:	e002      	b.n	800e944 <HAL_UART_IRQHandler+0x730>
      return;
 800e93e:	bf00      	nop
 800e940:	e000      	b.n	800e944 <HAL_UART_IRQHandler+0x730>
    return;
 800e942:	bf00      	nop
  }
}
 800e944:	37e8      	adds	r7, #232	; 0xe8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	effffffe 	.word	0xeffffffe

0800e950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e958:	bf00      	nop
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e96c:	bf00      	nop
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e980:	bf00      	nop
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e998:	bf00      	nop
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9a4:	b5b0      	push	{r4, r5, r7, lr}
 800e9a6:	b08e      	sub	sp, #56	; 0x38
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	689a      	ldr	r2, [r3, #8]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	431a      	orrs	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	695b      	ldr	r3, [r3, #20]
 800e9c0:	431a      	orrs	r2, r3
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	69db      	ldr	r3, [r3, #28]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	4bbf      	ldr	r3, [pc, #764]	; (800ecd0 <UART_SetConfig+0x32c>)
 800e9d2:	4013      	ands	r3, r2
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	6812      	ldr	r2, [r2, #0]
 800e9d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e9da:	430b      	orrs	r3, r1
 800e9dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	68da      	ldr	r2, [r3, #12]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	430a      	orrs	r2, r1
 800e9f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	699b      	ldr	r3, [r3, #24]
 800e9f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4ab5      	ldr	r2, [pc, #724]	; (800ecd4 <UART_SetConfig+0x330>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d004      	beq.n	800ea0e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a1b      	ldr	r3, [r3, #32]
 800ea08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	689a      	ldr	r2, [r3, #8]
 800ea14:	4bb0      	ldr	r3, [pc, #704]	; (800ecd8 <UART_SetConfig+0x334>)
 800ea16:	4013      	ands	r3, r2
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	6812      	ldr	r2, [r2, #0]
 800ea1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea1e:	430b      	orrs	r3, r1
 800ea20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea28:	f023 010f 	bic.w	r1, r3, #15
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	430a      	orrs	r2, r1
 800ea36:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4aa7      	ldr	r2, [pc, #668]	; (800ecdc <UART_SetConfig+0x338>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d176      	bne.n	800eb30 <UART_SetConfig+0x18c>
 800ea42:	4ba7      	ldr	r3, [pc, #668]	; (800ece0 <UART_SetConfig+0x33c>)
 800ea44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea4a:	2b28      	cmp	r3, #40	; 0x28
 800ea4c:	d86c      	bhi.n	800eb28 <UART_SetConfig+0x184>
 800ea4e:	a201      	add	r2, pc, #4	; (adr r2, 800ea54 <UART_SetConfig+0xb0>)
 800ea50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea54:	0800eaf9 	.word	0x0800eaf9
 800ea58:	0800eb29 	.word	0x0800eb29
 800ea5c:	0800eb29 	.word	0x0800eb29
 800ea60:	0800eb29 	.word	0x0800eb29
 800ea64:	0800eb29 	.word	0x0800eb29
 800ea68:	0800eb29 	.word	0x0800eb29
 800ea6c:	0800eb29 	.word	0x0800eb29
 800ea70:	0800eb29 	.word	0x0800eb29
 800ea74:	0800eb01 	.word	0x0800eb01
 800ea78:	0800eb29 	.word	0x0800eb29
 800ea7c:	0800eb29 	.word	0x0800eb29
 800ea80:	0800eb29 	.word	0x0800eb29
 800ea84:	0800eb29 	.word	0x0800eb29
 800ea88:	0800eb29 	.word	0x0800eb29
 800ea8c:	0800eb29 	.word	0x0800eb29
 800ea90:	0800eb29 	.word	0x0800eb29
 800ea94:	0800eb09 	.word	0x0800eb09
 800ea98:	0800eb29 	.word	0x0800eb29
 800ea9c:	0800eb29 	.word	0x0800eb29
 800eaa0:	0800eb29 	.word	0x0800eb29
 800eaa4:	0800eb29 	.word	0x0800eb29
 800eaa8:	0800eb29 	.word	0x0800eb29
 800eaac:	0800eb29 	.word	0x0800eb29
 800eab0:	0800eb29 	.word	0x0800eb29
 800eab4:	0800eb11 	.word	0x0800eb11
 800eab8:	0800eb29 	.word	0x0800eb29
 800eabc:	0800eb29 	.word	0x0800eb29
 800eac0:	0800eb29 	.word	0x0800eb29
 800eac4:	0800eb29 	.word	0x0800eb29
 800eac8:	0800eb29 	.word	0x0800eb29
 800eacc:	0800eb29 	.word	0x0800eb29
 800ead0:	0800eb29 	.word	0x0800eb29
 800ead4:	0800eb19 	.word	0x0800eb19
 800ead8:	0800eb29 	.word	0x0800eb29
 800eadc:	0800eb29 	.word	0x0800eb29
 800eae0:	0800eb29 	.word	0x0800eb29
 800eae4:	0800eb29 	.word	0x0800eb29
 800eae8:	0800eb29 	.word	0x0800eb29
 800eaec:	0800eb29 	.word	0x0800eb29
 800eaf0:	0800eb29 	.word	0x0800eb29
 800eaf4:	0800eb21 	.word	0x0800eb21
 800eaf8:	2301      	movs	r3, #1
 800eafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eafe:	e222      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb00:	2304      	movs	r3, #4
 800eb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb06:	e21e      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb08:	2308      	movs	r3, #8
 800eb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb0e:	e21a      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb10:	2310      	movs	r3, #16
 800eb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb16:	e216      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb18:	2320      	movs	r3, #32
 800eb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb1e:	e212      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb20:	2340      	movs	r3, #64	; 0x40
 800eb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb26:	e20e      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb28:	2380      	movs	r3, #128	; 0x80
 800eb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2e:	e20a      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4a6b      	ldr	r2, [pc, #428]	; (800ece4 <UART_SetConfig+0x340>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d130      	bne.n	800eb9c <UART_SetConfig+0x1f8>
 800eb3a:	4b69      	ldr	r3, [pc, #420]	; (800ece0 <UART_SetConfig+0x33c>)
 800eb3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb3e:	f003 0307 	and.w	r3, r3, #7
 800eb42:	2b05      	cmp	r3, #5
 800eb44:	d826      	bhi.n	800eb94 <UART_SetConfig+0x1f0>
 800eb46:	a201      	add	r2, pc, #4	; (adr r2, 800eb4c <UART_SetConfig+0x1a8>)
 800eb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb4c:	0800eb65 	.word	0x0800eb65
 800eb50:	0800eb6d 	.word	0x0800eb6d
 800eb54:	0800eb75 	.word	0x0800eb75
 800eb58:	0800eb7d 	.word	0x0800eb7d
 800eb5c:	0800eb85 	.word	0x0800eb85
 800eb60:	0800eb8d 	.word	0x0800eb8d
 800eb64:	2300      	movs	r3, #0
 800eb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb6a:	e1ec      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb6c:	2304      	movs	r3, #4
 800eb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb72:	e1e8      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb74:	2308      	movs	r3, #8
 800eb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb7a:	e1e4      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb7c:	2310      	movs	r3, #16
 800eb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb82:	e1e0      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb84:	2320      	movs	r3, #32
 800eb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb8a:	e1dc      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb8c:	2340      	movs	r3, #64	; 0x40
 800eb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb92:	e1d8      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb94:	2380      	movs	r3, #128	; 0x80
 800eb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9a:	e1d4      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4a51      	ldr	r2, [pc, #324]	; (800ece8 <UART_SetConfig+0x344>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d130      	bne.n	800ec08 <UART_SetConfig+0x264>
 800eba6:	4b4e      	ldr	r3, [pc, #312]	; (800ece0 <UART_SetConfig+0x33c>)
 800eba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebaa:	f003 0307 	and.w	r3, r3, #7
 800ebae:	2b05      	cmp	r3, #5
 800ebb0:	d826      	bhi.n	800ec00 <UART_SetConfig+0x25c>
 800ebb2:	a201      	add	r2, pc, #4	; (adr r2, 800ebb8 <UART_SetConfig+0x214>)
 800ebb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb8:	0800ebd1 	.word	0x0800ebd1
 800ebbc:	0800ebd9 	.word	0x0800ebd9
 800ebc0:	0800ebe1 	.word	0x0800ebe1
 800ebc4:	0800ebe9 	.word	0x0800ebe9
 800ebc8:	0800ebf1 	.word	0x0800ebf1
 800ebcc:	0800ebf9 	.word	0x0800ebf9
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebd6:	e1b6      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ebd8:	2304      	movs	r3, #4
 800ebda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebde:	e1b2      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ebe0:	2308      	movs	r3, #8
 800ebe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebe6:	e1ae      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ebe8:	2310      	movs	r3, #16
 800ebea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebee:	e1aa      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ebf0:	2320      	movs	r3, #32
 800ebf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebf6:	e1a6      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ebf8:	2340      	movs	r3, #64	; 0x40
 800ebfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebfe:	e1a2      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ec00:	2380      	movs	r3, #128	; 0x80
 800ec02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec06:	e19e      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a37      	ldr	r2, [pc, #220]	; (800ecec <UART_SetConfig+0x348>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d130      	bne.n	800ec74 <UART_SetConfig+0x2d0>
 800ec12:	4b33      	ldr	r3, [pc, #204]	; (800ece0 <UART_SetConfig+0x33c>)
 800ec14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec16:	f003 0307 	and.w	r3, r3, #7
 800ec1a:	2b05      	cmp	r3, #5
 800ec1c:	d826      	bhi.n	800ec6c <UART_SetConfig+0x2c8>
 800ec1e:	a201      	add	r2, pc, #4	; (adr r2, 800ec24 <UART_SetConfig+0x280>)
 800ec20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec24:	0800ec3d 	.word	0x0800ec3d
 800ec28:	0800ec45 	.word	0x0800ec45
 800ec2c:	0800ec4d 	.word	0x0800ec4d
 800ec30:	0800ec55 	.word	0x0800ec55
 800ec34:	0800ec5d 	.word	0x0800ec5d
 800ec38:	0800ec65 	.word	0x0800ec65
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec42:	e180      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ec44:	2304      	movs	r3, #4
 800ec46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec4a:	e17c      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ec4c:	2308      	movs	r3, #8
 800ec4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec52:	e178      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ec54:	2310      	movs	r3, #16
 800ec56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec5a:	e174      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ec5c:	2320      	movs	r3, #32
 800ec5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec62:	e170      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ec64:	2340      	movs	r3, #64	; 0x40
 800ec66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec6a:	e16c      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ec6c:	2380      	movs	r3, #128	; 0x80
 800ec6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec72:	e168      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4a1d      	ldr	r2, [pc, #116]	; (800ecf0 <UART_SetConfig+0x34c>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d142      	bne.n	800ed04 <UART_SetConfig+0x360>
 800ec7e:	4b18      	ldr	r3, [pc, #96]	; (800ece0 <UART_SetConfig+0x33c>)
 800ec80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec82:	f003 0307 	and.w	r3, r3, #7
 800ec86:	2b05      	cmp	r3, #5
 800ec88:	d838      	bhi.n	800ecfc <UART_SetConfig+0x358>
 800ec8a:	a201      	add	r2, pc, #4	; (adr r2, 800ec90 <UART_SetConfig+0x2ec>)
 800ec8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec90:	0800eca9 	.word	0x0800eca9
 800ec94:	0800ecb1 	.word	0x0800ecb1
 800ec98:	0800ecb9 	.word	0x0800ecb9
 800ec9c:	0800ecc1 	.word	0x0800ecc1
 800eca0:	0800ecc9 	.word	0x0800ecc9
 800eca4:	0800ecf5 	.word	0x0800ecf5
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecae:	e14a      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ecb0:	2304      	movs	r3, #4
 800ecb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecb6:	e146      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ecb8:	2308      	movs	r3, #8
 800ecba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecbe:	e142      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ecc0:	2310      	movs	r3, #16
 800ecc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecc6:	e13e      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ecc8:	2320      	movs	r3, #32
 800ecca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecce:	e13a      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ecd0:	cfff69f3 	.word	0xcfff69f3
 800ecd4:	58000c00 	.word	0x58000c00
 800ecd8:	11fff4ff 	.word	0x11fff4ff
 800ecdc:	40011000 	.word	0x40011000
 800ece0:	58024400 	.word	0x58024400
 800ece4:	40004400 	.word	0x40004400
 800ece8:	40004800 	.word	0x40004800
 800ecec:	40004c00 	.word	0x40004c00
 800ecf0:	40005000 	.word	0x40005000
 800ecf4:	2340      	movs	r3, #64	; 0x40
 800ecf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecfa:	e124      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ecfc:	2380      	movs	r3, #128	; 0x80
 800ecfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed02:	e120      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4acc      	ldr	r2, [pc, #816]	; (800f03c <UART_SetConfig+0x698>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d176      	bne.n	800edfc <UART_SetConfig+0x458>
 800ed0e:	4bcc      	ldr	r3, [pc, #816]	; (800f040 <UART_SetConfig+0x69c>)
 800ed10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed16:	2b28      	cmp	r3, #40	; 0x28
 800ed18:	d86c      	bhi.n	800edf4 <UART_SetConfig+0x450>
 800ed1a:	a201      	add	r2, pc, #4	; (adr r2, 800ed20 <UART_SetConfig+0x37c>)
 800ed1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed20:	0800edc5 	.word	0x0800edc5
 800ed24:	0800edf5 	.word	0x0800edf5
 800ed28:	0800edf5 	.word	0x0800edf5
 800ed2c:	0800edf5 	.word	0x0800edf5
 800ed30:	0800edf5 	.word	0x0800edf5
 800ed34:	0800edf5 	.word	0x0800edf5
 800ed38:	0800edf5 	.word	0x0800edf5
 800ed3c:	0800edf5 	.word	0x0800edf5
 800ed40:	0800edcd 	.word	0x0800edcd
 800ed44:	0800edf5 	.word	0x0800edf5
 800ed48:	0800edf5 	.word	0x0800edf5
 800ed4c:	0800edf5 	.word	0x0800edf5
 800ed50:	0800edf5 	.word	0x0800edf5
 800ed54:	0800edf5 	.word	0x0800edf5
 800ed58:	0800edf5 	.word	0x0800edf5
 800ed5c:	0800edf5 	.word	0x0800edf5
 800ed60:	0800edd5 	.word	0x0800edd5
 800ed64:	0800edf5 	.word	0x0800edf5
 800ed68:	0800edf5 	.word	0x0800edf5
 800ed6c:	0800edf5 	.word	0x0800edf5
 800ed70:	0800edf5 	.word	0x0800edf5
 800ed74:	0800edf5 	.word	0x0800edf5
 800ed78:	0800edf5 	.word	0x0800edf5
 800ed7c:	0800edf5 	.word	0x0800edf5
 800ed80:	0800eddd 	.word	0x0800eddd
 800ed84:	0800edf5 	.word	0x0800edf5
 800ed88:	0800edf5 	.word	0x0800edf5
 800ed8c:	0800edf5 	.word	0x0800edf5
 800ed90:	0800edf5 	.word	0x0800edf5
 800ed94:	0800edf5 	.word	0x0800edf5
 800ed98:	0800edf5 	.word	0x0800edf5
 800ed9c:	0800edf5 	.word	0x0800edf5
 800eda0:	0800ede5 	.word	0x0800ede5
 800eda4:	0800edf5 	.word	0x0800edf5
 800eda8:	0800edf5 	.word	0x0800edf5
 800edac:	0800edf5 	.word	0x0800edf5
 800edb0:	0800edf5 	.word	0x0800edf5
 800edb4:	0800edf5 	.word	0x0800edf5
 800edb8:	0800edf5 	.word	0x0800edf5
 800edbc:	0800edf5 	.word	0x0800edf5
 800edc0:	0800eded 	.word	0x0800eded
 800edc4:	2301      	movs	r3, #1
 800edc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edca:	e0bc      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800edcc:	2304      	movs	r3, #4
 800edce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edd2:	e0b8      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800edd4:	2308      	movs	r3, #8
 800edd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edda:	e0b4      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eddc:	2310      	movs	r3, #16
 800edde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ede2:	e0b0      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ede4:	2320      	movs	r3, #32
 800ede6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edea:	e0ac      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800edec:	2340      	movs	r3, #64	; 0x40
 800edee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edf2:	e0a8      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800edf4:	2380      	movs	r3, #128	; 0x80
 800edf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edfa:	e0a4      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a90      	ldr	r2, [pc, #576]	; (800f044 <UART_SetConfig+0x6a0>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d130      	bne.n	800ee68 <UART_SetConfig+0x4c4>
 800ee06:	4b8e      	ldr	r3, [pc, #568]	; (800f040 <UART_SetConfig+0x69c>)
 800ee08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee0a:	f003 0307 	and.w	r3, r3, #7
 800ee0e:	2b05      	cmp	r3, #5
 800ee10:	d826      	bhi.n	800ee60 <UART_SetConfig+0x4bc>
 800ee12:	a201      	add	r2, pc, #4	; (adr r2, 800ee18 <UART_SetConfig+0x474>)
 800ee14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee18:	0800ee31 	.word	0x0800ee31
 800ee1c:	0800ee39 	.word	0x0800ee39
 800ee20:	0800ee41 	.word	0x0800ee41
 800ee24:	0800ee49 	.word	0x0800ee49
 800ee28:	0800ee51 	.word	0x0800ee51
 800ee2c:	0800ee59 	.word	0x0800ee59
 800ee30:	2300      	movs	r3, #0
 800ee32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee36:	e086      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ee38:	2304      	movs	r3, #4
 800ee3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee3e:	e082      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ee40:	2308      	movs	r3, #8
 800ee42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee46:	e07e      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ee48:	2310      	movs	r3, #16
 800ee4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee4e:	e07a      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ee50:	2320      	movs	r3, #32
 800ee52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee56:	e076      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ee58:	2340      	movs	r3, #64	; 0x40
 800ee5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee5e:	e072      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ee60:	2380      	movs	r3, #128	; 0x80
 800ee62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee66:	e06e      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a76      	ldr	r2, [pc, #472]	; (800f048 <UART_SetConfig+0x6a4>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d130      	bne.n	800eed4 <UART_SetConfig+0x530>
 800ee72:	4b73      	ldr	r3, [pc, #460]	; (800f040 <UART_SetConfig+0x69c>)
 800ee74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee76:	f003 0307 	and.w	r3, r3, #7
 800ee7a:	2b05      	cmp	r3, #5
 800ee7c:	d826      	bhi.n	800eecc <UART_SetConfig+0x528>
 800ee7e:	a201      	add	r2, pc, #4	; (adr r2, 800ee84 <UART_SetConfig+0x4e0>)
 800ee80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee84:	0800ee9d 	.word	0x0800ee9d
 800ee88:	0800eea5 	.word	0x0800eea5
 800ee8c:	0800eead 	.word	0x0800eead
 800ee90:	0800eeb5 	.word	0x0800eeb5
 800ee94:	0800eebd 	.word	0x0800eebd
 800ee98:	0800eec5 	.word	0x0800eec5
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eea2:	e050      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eea4:	2304      	movs	r3, #4
 800eea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeaa:	e04c      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eeac:	2308      	movs	r3, #8
 800eeae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeb2:	e048      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eeb4:	2310      	movs	r3, #16
 800eeb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeba:	e044      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eebc:	2320      	movs	r3, #32
 800eebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eec2:	e040      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eec4:	2340      	movs	r3, #64	; 0x40
 800eec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeca:	e03c      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eecc:	2380      	movs	r3, #128	; 0x80
 800eece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eed2:	e038      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4a5c      	ldr	r2, [pc, #368]	; (800f04c <UART_SetConfig+0x6a8>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d130      	bne.n	800ef40 <UART_SetConfig+0x59c>
 800eede:	4b58      	ldr	r3, [pc, #352]	; (800f040 <UART_SetConfig+0x69c>)
 800eee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eee2:	f003 0307 	and.w	r3, r3, #7
 800eee6:	2b05      	cmp	r3, #5
 800eee8:	d826      	bhi.n	800ef38 <UART_SetConfig+0x594>
 800eeea:	a201      	add	r2, pc, #4	; (adr r2, 800eef0 <UART_SetConfig+0x54c>)
 800eeec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef0:	0800ef09 	.word	0x0800ef09
 800eef4:	0800ef11 	.word	0x0800ef11
 800eef8:	0800ef19 	.word	0x0800ef19
 800eefc:	0800ef21 	.word	0x0800ef21
 800ef00:	0800ef29 	.word	0x0800ef29
 800ef04:	0800ef31 	.word	0x0800ef31
 800ef08:	2302      	movs	r3, #2
 800ef0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef0e:	e01a      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ef10:	2304      	movs	r3, #4
 800ef12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef16:	e016      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ef18:	2308      	movs	r3, #8
 800ef1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef1e:	e012      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ef20:	2310      	movs	r3, #16
 800ef22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef26:	e00e      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ef28:	2320      	movs	r3, #32
 800ef2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef2e:	e00a      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ef30:	2340      	movs	r3, #64	; 0x40
 800ef32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef36:	e006      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ef38:	2380      	movs	r3, #128	; 0x80
 800ef3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef3e:	e002      	b.n	800ef46 <UART_SetConfig+0x5a2>
 800ef40:	2380      	movs	r3, #128	; 0x80
 800ef42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a40      	ldr	r2, [pc, #256]	; (800f04c <UART_SetConfig+0x6a8>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	f040 80ef 	bne.w	800f130 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef56:	2b20      	cmp	r3, #32
 800ef58:	dc46      	bgt.n	800efe8 <UART_SetConfig+0x644>
 800ef5a:	2b02      	cmp	r3, #2
 800ef5c:	f2c0 8081 	blt.w	800f062 <UART_SetConfig+0x6be>
 800ef60:	3b02      	subs	r3, #2
 800ef62:	2b1e      	cmp	r3, #30
 800ef64:	d87d      	bhi.n	800f062 <UART_SetConfig+0x6be>
 800ef66:	a201      	add	r2, pc, #4	; (adr r2, 800ef6c <UART_SetConfig+0x5c8>)
 800ef68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef6c:	0800efef 	.word	0x0800efef
 800ef70:	0800f063 	.word	0x0800f063
 800ef74:	0800eff7 	.word	0x0800eff7
 800ef78:	0800f063 	.word	0x0800f063
 800ef7c:	0800f063 	.word	0x0800f063
 800ef80:	0800f063 	.word	0x0800f063
 800ef84:	0800f007 	.word	0x0800f007
 800ef88:	0800f063 	.word	0x0800f063
 800ef8c:	0800f063 	.word	0x0800f063
 800ef90:	0800f063 	.word	0x0800f063
 800ef94:	0800f063 	.word	0x0800f063
 800ef98:	0800f063 	.word	0x0800f063
 800ef9c:	0800f063 	.word	0x0800f063
 800efa0:	0800f063 	.word	0x0800f063
 800efa4:	0800f017 	.word	0x0800f017
 800efa8:	0800f063 	.word	0x0800f063
 800efac:	0800f063 	.word	0x0800f063
 800efb0:	0800f063 	.word	0x0800f063
 800efb4:	0800f063 	.word	0x0800f063
 800efb8:	0800f063 	.word	0x0800f063
 800efbc:	0800f063 	.word	0x0800f063
 800efc0:	0800f063 	.word	0x0800f063
 800efc4:	0800f063 	.word	0x0800f063
 800efc8:	0800f063 	.word	0x0800f063
 800efcc:	0800f063 	.word	0x0800f063
 800efd0:	0800f063 	.word	0x0800f063
 800efd4:	0800f063 	.word	0x0800f063
 800efd8:	0800f063 	.word	0x0800f063
 800efdc:	0800f063 	.word	0x0800f063
 800efe0:	0800f063 	.word	0x0800f063
 800efe4:	0800f055 	.word	0x0800f055
 800efe8:	2b40      	cmp	r3, #64	; 0x40
 800efea:	d036      	beq.n	800f05a <UART_SetConfig+0x6b6>
 800efec:	e039      	b.n	800f062 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800efee:	f7fc fc85 	bl	800b8fc <HAL_RCCEx_GetD3PCLK1Freq>
 800eff2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800eff4:	e03b      	b.n	800f06e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eff6:	f107 0314 	add.w	r3, r7, #20
 800effa:	4618      	mov	r0, r3
 800effc:	f7fc fc94 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f004:	e033      	b.n	800f06e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f006:	f107 0308 	add.w	r3, r7, #8
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fc fde0 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f014:	e02b      	b.n	800f06e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f016:	4b0a      	ldr	r3, [pc, #40]	; (800f040 <UART_SetConfig+0x69c>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f003 0320 	and.w	r3, r3, #32
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d009      	beq.n	800f036 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f022:	4b07      	ldr	r3, [pc, #28]	; (800f040 <UART_SetConfig+0x69c>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	08db      	lsrs	r3, r3, #3
 800f028:	f003 0303 	and.w	r3, r3, #3
 800f02c:	4a08      	ldr	r2, [pc, #32]	; (800f050 <UART_SetConfig+0x6ac>)
 800f02e:	fa22 f303 	lsr.w	r3, r2, r3
 800f032:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f034:	e01b      	b.n	800f06e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800f036:	4b06      	ldr	r3, [pc, #24]	; (800f050 <UART_SetConfig+0x6ac>)
 800f038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f03a:	e018      	b.n	800f06e <UART_SetConfig+0x6ca>
 800f03c:	40011400 	.word	0x40011400
 800f040:	58024400 	.word	0x58024400
 800f044:	40007800 	.word	0x40007800
 800f048:	40007c00 	.word	0x40007c00
 800f04c:	58000c00 	.word	0x58000c00
 800f050:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f054:	4bc4      	ldr	r3, [pc, #784]	; (800f368 <UART_SetConfig+0x9c4>)
 800f056:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f058:	e009      	b.n	800f06e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f05a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f05e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f060:	e005      	b.n	800f06e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800f062:	2300      	movs	r3, #0
 800f064:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f066:	2301      	movs	r3, #1
 800f068:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f06c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f070:	2b00      	cmp	r3, #0
 800f072:	f000 81da 	beq.w	800f42a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07a:	4abc      	ldr	r2, [pc, #752]	; (800f36c <UART_SetConfig+0x9c8>)
 800f07c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f080:	461a      	mov	r2, r3
 800f082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f084:	fbb3 f3f2 	udiv	r3, r3, r2
 800f088:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	685a      	ldr	r2, [r3, #4]
 800f08e:	4613      	mov	r3, r2
 800f090:	005b      	lsls	r3, r3, #1
 800f092:	4413      	add	r3, r2
 800f094:	6a3a      	ldr	r2, [r7, #32]
 800f096:	429a      	cmp	r2, r3
 800f098:	d305      	bcc.n	800f0a6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0a0:	6a3a      	ldr	r2, [r7, #32]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d903      	bls.n	800f0ae <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f0ac:	e1bd      	b.n	800f42a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f04f 0100 	mov.w	r1, #0
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ba:	4aac      	ldr	r2, [pc, #688]	; (800f36c <UART_SetConfig+0x9c8>)
 800f0bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	f04f 0300 	mov.w	r3, #0
 800f0c6:	f7f1 f907 	bl	80002d8 <__aeabi_uldivmod>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	4610      	mov	r0, r2
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	f04f 0200 	mov.w	r2, #0
 800f0d6:	f04f 0300 	mov.w	r3, #0
 800f0da:	020b      	lsls	r3, r1, #8
 800f0dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f0e0:	0202      	lsls	r2, r0, #8
 800f0e2:	6879      	ldr	r1, [r7, #4]
 800f0e4:	6849      	ldr	r1, [r1, #4]
 800f0e6:	0849      	lsrs	r1, r1, #1
 800f0e8:	4608      	mov	r0, r1
 800f0ea:	f04f 0100 	mov.w	r1, #0
 800f0ee:	1814      	adds	r4, r2, r0
 800f0f0:	eb43 0501 	adc.w	r5, r3, r1
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	f04f 0300 	mov.w	r3, #0
 800f0fe:	4620      	mov	r0, r4
 800f100:	4629      	mov	r1, r5
 800f102:	f7f1 f8e9 	bl	80002d8 <__aeabi_uldivmod>
 800f106:	4602      	mov	r2, r0
 800f108:	460b      	mov	r3, r1
 800f10a:	4613      	mov	r3, r2
 800f10c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f114:	d308      	bcc.n	800f128 <UART_SetConfig+0x784>
 800f116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f11c:	d204      	bcs.n	800f128 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f124:	60da      	str	r2, [r3, #12]
 800f126:	e180      	b.n	800f42a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800f128:	2301      	movs	r3, #1
 800f12a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f12e:	e17c      	b.n	800f42a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	69db      	ldr	r3, [r3, #28]
 800f134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f138:	f040 80be 	bne.w	800f2b8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800f13c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f140:	2b20      	cmp	r3, #32
 800f142:	dc49      	bgt.n	800f1d8 <UART_SetConfig+0x834>
 800f144:	2b00      	cmp	r3, #0
 800f146:	db7c      	blt.n	800f242 <UART_SetConfig+0x89e>
 800f148:	2b20      	cmp	r3, #32
 800f14a:	d87a      	bhi.n	800f242 <UART_SetConfig+0x89e>
 800f14c:	a201      	add	r2, pc, #4	; (adr r2, 800f154 <UART_SetConfig+0x7b0>)
 800f14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f152:	bf00      	nop
 800f154:	0800f1df 	.word	0x0800f1df
 800f158:	0800f1e7 	.word	0x0800f1e7
 800f15c:	0800f243 	.word	0x0800f243
 800f160:	0800f243 	.word	0x0800f243
 800f164:	0800f1ef 	.word	0x0800f1ef
 800f168:	0800f243 	.word	0x0800f243
 800f16c:	0800f243 	.word	0x0800f243
 800f170:	0800f243 	.word	0x0800f243
 800f174:	0800f1ff 	.word	0x0800f1ff
 800f178:	0800f243 	.word	0x0800f243
 800f17c:	0800f243 	.word	0x0800f243
 800f180:	0800f243 	.word	0x0800f243
 800f184:	0800f243 	.word	0x0800f243
 800f188:	0800f243 	.word	0x0800f243
 800f18c:	0800f243 	.word	0x0800f243
 800f190:	0800f243 	.word	0x0800f243
 800f194:	0800f20f 	.word	0x0800f20f
 800f198:	0800f243 	.word	0x0800f243
 800f19c:	0800f243 	.word	0x0800f243
 800f1a0:	0800f243 	.word	0x0800f243
 800f1a4:	0800f243 	.word	0x0800f243
 800f1a8:	0800f243 	.word	0x0800f243
 800f1ac:	0800f243 	.word	0x0800f243
 800f1b0:	0800f243 	.word	0x0800f243
 800f1b4:	0800f243 	.word	0x0800f243
 800f1b8:	0800f243 	.word	0x0800f243
 800f1bc:	0800f243 	.word	0x0800f243
 800f1c0:	0800f243 	.word	0x0800f243
 800f1c4:	0800f243 	.word	0x0800f243
 800f1c8:	0800f243 	.word	0x0800f243
 800f1cc:	0800f243 	.word	0x0800f243
 800f1d0:	0800f243 	.word	0x0800f243
 800f1d4:	0800f235 	.word	0x0800f235
 800f1d8:	2b40      	cmp	r3, #64	; 0x40
 800f1da:	d02e      	beq.n	800f23a <UART_SetConfig+0x896>
 800f1dc:	e031      	b.n	800f242 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1de:	f7fa ff4f 	bl	800a080 <HAL_RCC_GetPCLK1Freq>
 800f1e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f1e4:	e033      	b.n	800f24e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1e6:	f7fa ff61 	bl	800a0ac <HAL_RCC_GetPCLK2Freq>
 800f1ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f1ec:	e02f      	b.n	800f24e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1ee:	f107 0314 	add.w	r3, r7, #20
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fc fb98 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1fc:	e027      	b.n	800f24e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1fe:	f107 0308 	add.w	r3, r7, #8
 800f202:	4618      	mov	r0, r3
 800f204:	f7fc fce4 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f20c:	e01f      	b.n	800f24e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f20e:	4b58      	ldr	r3, [pc, #352]	; (800f370 <UART_SetConfig+0x9cc>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f003 0320 	and.w	r3, r3, #32
 800f216:	2b00      	cmp	r3, #0
 800f218:	d009      	beq.n	800f22e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f21a:	4b55      	ldr	r3, [pc, #340]	; (800f370 <UART_SetConfig+0x9cc>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	08db      	lsrs	r3, r3, #3
 800f220:	f003 0303 	and.w	r3, r3, #3
 800f224:	4a53      	ldr	r2, [pc, #332]	; (800f374 <UART_SetConfig+0x9d0>)
 800f226:	fa22 f303 	lsr.w	r3, r2, r3
 800f22a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f22c:	e00f      	b.n	800f24e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f22e:	4b51      	ldr	r3, [pc, #324]	; (800f374 <UART_SetConfig+0x9d0>)
 800f230:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f232:	e00c      	b.n	800f24e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f234:	4b4c      	ldr	r3, [pc, #304]	; (800f368 <UART_SetConfig+0x9c4>)
 800f236:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f238:	e009      	b.n	800f24e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f23a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f23e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f240:	e005      	b.n	800f24e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f242:	2300      	movs	r3, #0
 800f244:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f246:	2301      	movs	r3, #1
 800f248:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f24c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	2b00      	cmp	r3, #0
 800f252:	f000 80ea 	beq.w	800f42a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25a:	4a44      	ldr	r2, [pc, #272]	; (800f36c <UART_SetConfig+0x9c8>)
 800f25c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f260:	461a      	mov	r2, r3
 800f262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f264:	fbb3 f3f2 	udiv	r3, r3, r2
 800f268:	005a      	lsls	r2, r3, #1
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	085b      	lsrs	r3, r3, #1
 800f270:	441a      	add	r2, r3
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	fbb2 f3f3 	udiv	r3, r2, r3
 800f27a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	2b0f      	cmp	r3, #15
 800f280:	d916      	bls.n	800f2b0 <UART_SetConfig+0x90c>
 800f282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f288:	d212      	bcs.n	800f2b0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	f023 030f 	bic.w	r3, r3, #15
 800f292:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	085b      	lsrs	r3, r3, #1
 800f298:	b29b      	uxth	r3, r3
 800f29a:	f003 0307 	and.w	r3, r3, #7
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f2ac:	60da      	str	r2, [r3, #12]
 800f2ae:	e0bc      	b.n	800f42a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f2b6:	e0b8      	b.n	800f42a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f2b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f2bc:	2b20      	cmp	r3, #32
 800f2be:	dc4b      	bgt.n	800f358 <UART_SetConfig+0x9b4>
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f2c0 8087 	blt.w	800f3d4 <UART_SetConfig+0xa30>
 800f2c6:	2b20      	cmp	r3, #32
 800f2c8:	f200 8084 	bhi.w	800f3d4 <UART_SetConfig+0xa30>
 800f2cc:	a201      	add	r2, pc, #4	; (adr r2, 800f2d4 <UART_SetConfig+0x930>)
 800f2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2d2:	bf00      	nop
 800f2d4:	0800f35f 	.word	0x0800f35f
 800f2d8:	0800f379 	.word	0x0800f379
 800f2dc:	0800f3d5 	.word	0x0800f3d5
 800f2e0:	0800f3d5 	.word	0x0800f3d5
 800f2e4:	0800f381 	.word	0x0800f381
 800f2e8:	0800f3d5 	.word	0x0800f3d5
 800f2ec:	0800f3d5 	.word	0x0800f3d5
 800f2f0:	0800f3d5 	.word	0x0800f3d5
 800f2f4:	0800f391 	.word	0x0800f391
 800f2f8:	0800f3d5 	.word	0x0800f3d5
 800f2fc:	0800f3d5 	.word	0x0800f3d5
 800f300:	0800f3d5 	.word	0x0800f3d5
 800f304:	0800f3d5 	.word	0x0800f3d5
 800f308:	0800f3d5 	.word	0x0800f3d5
 800f30c:	0800f3d5 	.word	0x0800f3d5
 800f310:	0800f3d5 	.word	0x0800f3d5
 800f314:	0800f3a1 	.word	0x0800f3a1
 800f318:	0800f3d5 	.word	0x0800f3d5
 800f31c:	0800f3d5 	.word	0x0800f3d5
 800f320:	0800f3d5 	.word	0x0800f3d5
 800f324:	0800f3d5 	.word	0x0800f3d5
 800f328:	0800f3d5 	.word	0x0800f3d5
 800f32c:	0800f3d5 	.word	0x0800f3d5
 800f330:	0800f3d5 	.word	0x0800f3d5
 800f334:	0800f3d5 	.word	0x0800f3d5
 800f338:	0800f3d5 	.word	0x0800f3d5
 800f33c:	0800f3d5 	.word	0x0800f3d5
 800f340:	0800f3d5 	.word	0x0800f3d5
 800f344:	0800f3d5 	.word	0x0800f3d5
 800f348:	0800f3d5 	.word	0x0800f3d5
 800f34c:	0800f3d5 	.word	0x0800f3d5
 800f350:	0800f3d5 	.word	0x0800f3d5
 800f354:	0800f3c7 	.word	0x0800f3c7
 800f358:	2b40      	cmp	r3, #64	; 0x40
 800f35a:	d037      	beq.n	800f3cc <UART_SetConfig+0xa28>
 800f35c:	e03a      	b.n	800f3d4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f35e:	f7fa fe8f 	bl	800a080 <HAL_RCC_GetPCLK1Freq>
 800f362:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f364:	e03c      	b.n	800f3e0 <UART_SetConfig+0xa3c>
 800f366:	bf00      	nop
 800f368:	003d0900 	.word	0x003d0900
 800f36c:	080115f8 	.word	0x080115f8
 800f370:	58024400 	.word	0x58024400
 800f374:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f378:	f7fa fe98 	bl	800a0ac <HAL_RCC_GetPCLK2Freq>
 800f37c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f37e:	e02f      	b.n	800f3e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f380:	f107 0314 	add.w	r3, r7, #20
 800f384:	4618      	mov	r0, r3
 800f386:	f7fc facf 	bl	800b928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f38e:	e027      	b.n	800f3e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f390:	f107 0308 	add.w	r3, r7, #8
 800f394:	4618      	mov	r0, r3
 800f396:	f7fc fc1b 	bl	800bbd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f39e:	e01f      	b.n	800f3e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3a0:	4b2c      	ldr	r3, [pc, #176]	; (800f454 <UART_SetConfig+0xab0>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f003 0320 	and.w	r3, r3, #32
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d009      	beq.n	800f3c0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3ac:	4b29      	ldr	r3, [pc, #164]	; (800f454 <UART_SetConfig+0xab0>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	08db      	lsrs	r3, r3, #3
 800f3b2:	f003 0303 	and.w	r3, r3, #3
 800f3b6:	4a28      	ldr	r2, [pc, #160]	; (800f458 <UART_SetConfig+0xab4>)
 800f3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800f3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3be:	e00f      	b.n	800f3e0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f3c0:	4b25      	ldr	r3, [pc, #148]	; (800f458 <UART_SetConfig+0xab4>)
 800f3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f3c4:	e00c      	b.n	800f3e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3c6:	4b25      	ldr	r3, [pc, #148]	; (800f45c <UART_SetConfig+0xab8>)
 800f3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f3ca:	e009      	b.n	800f3e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f3d2:	e005      	b.n	800f3e0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f3de:	bf00      	nop
    }

    if (pclk != 0U)
 800f3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d021      	beq.n	800f42a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ea:	4a1d      	ldr	r2, [pc, #116]	; (800f460 <UART_SetConfig+0xabc>)
 800f3ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	085b      	lsrs	r3, r3, #1
 800f3fe:	441a      	add	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	fbb2 f3f3 	udiv	r3, r2, r3
 800f408:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40c:	2b0f      	cmp	r3, #15
 800f40e:	d909      	bls.n	800f424 <UART_SetConfig+0xa80>
 800f410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f416:	d205      	bcs.n	800f424 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	60da      	str	r2, [r3, #12]
 800f422:	e002      	b.n	800f42a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f424:	2301      	movs	r3, #1
 800f426:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2201      	movs	r2, #1
 800f42e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2201      	movs	r2, #1
 800f436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f446:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3738      	adds	r7, #56	; 0x38
 800f44e:	46bd      	mov	sp, r7
 800f450:	bdb0      	pop	{r4, r5, r7, pc}
 800f452:	bf00      	nop
 800f454:	58024400 	.word	0x58024400
 800f458:	03d09000 	.word	0x03d09000
 800f45c:	003d0900 	.word	0x003d0900
 800f460:	080115f8 	.word	0x080115f8

0800f464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f470:	f003 0301 	and.w	r3, r3, #1
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00a      	beq.n	800f48e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	430a      	orrs	r2, r1
 800f48c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f492:	f003 0302 	and.w	r3, r3, #2
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00a      	beq.n	800f4b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	430a      	orrs	r2, r1
 800f4ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b4:	f003 0304 	and.w	r3, r3, #4
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00a      	beq.n	800f4d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	430a      	orrs	r2, r1
 800f4d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d6:	f003 0308 	and.w	r3, r3, #8
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00a      	beq.n	800f4f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	430a      	orrs	r2, r1
 800f4f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4f8:	f003 0310 	and.w	r3, r3, #16
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00a      	beq.n	800f516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	430a      	orrs	r2, r1
 800f514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f51a:	f003 0320 	and.w	r3, r3, #32
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00a      	beq.n	800f538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	689b      	ldr	r3, [r3, #8]
 800f528:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	430a      	orrs	r2, r1
 800f536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f540:	2b00      	cmp	r3, #0
 800f542:	d01a      	beq.n	800f57a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	430a      	orrs	r2, r1
 800f558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f55e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f562:	d10a      	bne.n	800f57a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	430a      	orrs	r2, r1
 800f578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00a      	beq.n	800f59c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	430a      	orrs	r2, r1
 800f59a:	605a      	str	r2, [r3, #4]
  }
}
 800f59c:	bf00      	nop
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b086      	sub	sp, #24
 800f5ac:	af02      	add	r7, sp, #8
 800f5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f5b8:	f7f4 ff14 	bl	80043e4 <HAL_GetTick>
 800f5bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f003 0308 	and.w	r3, r3, #8
 800f5c8:	2b08      	cmp	r3, #8
 800f5ca:	d10e      	bne.n	800f5ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f5cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f82f 	bl	800f63e <UART_WaitOnFlagUntilTimeout>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5e6:	2303      	movs	r3, #3
 800f5e8:	e025      	b.n	800f636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f003 0304 	and.w	r3, r3, #4
 800f5f4:	2b04      	cmp	r3, #4
 800f5f6:	d10e      	bne.n	800f616 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f5f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f5fc:	9300      	str	r3, [sp, #0]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2200      	movs	r2, #0
 800f602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 f819 	bl	800f63e <UART_WaitOnFlagUntilTimeout>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d001      	beq.n	800f616 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f612:	2303      	movs	r3, #3
 800f614:	e00f      	b.n	800f636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2220      	movs	r2, #32
 800f61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2220      	movs	r2, #32
 800f622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2200      	movs	r2, #0
 800f62a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3710      	adds	r7, #16
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b09c      	sub	sp, #112	; 0x70
 800f642:	af00      	add	r7, sp, #0
 800f644:	60f8      	str	r0, [r7, #12]
 800f646:	60b9      	str	r1, [r7, #8]
 800f648:	603b      	str	r3, [r7, #0]
 800f64a:	4613      	mov	r3, r2
 800f64c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f64e:	e0a9      	b.n	800f7a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f656:	f000 80a5 	beq.w	800f7a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f65a:	f7f4 fec3 	bl	80043e4 <HAL_GetTick>
 800f65e:	4602      	mov	r2, r0
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	1ad3      	subs	r3, r2, r3
 800f664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f666:	429a      	cmp	r2, r3
 800f668:	d302      	bcc.n	800f670 <UART_WaitOnFlagUntilTimeout+0x32>
 800f66a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d140      	bne.n	800f6f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f678:	e853 3f00 	ldrex	r3, [r3]
 800f67c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f684:	667b      	str	r3, [r7, #100]	; 0x64
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	461a      	mov	r2, r3
 800f68c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f68e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f690:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f696:	e841 2300 	strex	r3, r2, [r1]
 800f69a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f69c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1e6      	bne.n	800f670 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ac:	e853 3f00 	ldrex	r3, [r3]
 800f6b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b4:	f023 0301 	bic.w	r3, r3, #1
 800f6b8:	663b      	str	r3, [r7, #96]	; 0x60
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	3308      	adds	r3, #8
 800f6c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f6c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800f6c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6ca:	e841 2300 	strex	r3, r2, [r1]
 800f6ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1e5      	bne.n	800f6a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2220      	movs	r2, #32
 800f6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2220      	movs	r2, #32
 800f6e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f6ee:	2303      	movs	r3, #3
 800f6f0:	e069      	b.n	800f7c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f003 0304 	and.w	r3, r3, #4
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d051      	beq.n	800f7a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	69db      	ldr	r3, [r3, #28]
 800f706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f70e:	d149      	bne.n	800f7a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f718:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f722:	e853 3f00 	ldrex	r3, [r3]
 800f726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f72e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	461a      	mov	r2, r3
 800f736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f738:	637b      	str	r3, [r7, #52]	; 0x34
 800f73a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f73c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f740:	e841 2300 	strex	r3, r2, [r1]
 800f744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d1e6      	bne.n	800f71a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	3308      	adds	r3, #8
 800f752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	e853 3f00 	ldrex	r3, [r3]
 800f75a:	613b      	str	r3, [r7, #16]
   return(result);
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	f023 0301 	bic.w	r3, r3, #1
 800f762:	66bb      	str	r3, [r7, #104]	; 0x68
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	3308      	adds	r3, #8
 800f76a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f76c:	623a      	str	r2, [r7, #32]
 800f76e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f770:	69f9      	ldr	r1, [r7, #28]
 800f772:	6a3a      	ldr	r2, [r7, #32]
 800f774:	e841 2300 	strex	r3, r2, [r1]
 800f778:	61bb      	str	r3, [r7, #24]
   return(result);
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1e5      	bne.n	800f74c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2220      	movs	r2, #32
 800f784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2220      	movs	r2, #32
 800f78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2220      	movs	r2, #32
 800f794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f7a0:	2303      	movs	r3, #3
 800f7a2:	e010      	b.n	800f7c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	69da      	ldr	r2, [r3, #28]
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	68ba      	ldr	r2, [r7, #8]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	bf0c      	ite	eq
 800f7b4:	2301      	moveq	r3, #1
 800f7b6:	2300      	movne	r3, #0
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	f43f af46 	beq.w	800f650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3770      	adds	r7, #112	; 0x70
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
	...

0800f7d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b096      	sub	sp, #88	; 0x58
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	88fa      	ldrh	r2, [r7, #6]
 800f7e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2222      	movs	r2, #34	; 0x22
 800f7f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f800:	2b00      	cmp	r3, #0
 800f802:	d02c      	beq.n	800f85e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f808:	4a42      	ldr	r2, [pc, #264]	; (800f914 <UART_Start_Receive_DMA+0x144>)
 800f80a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f810:	4a41      	ldr	r2, [pc, #260]	; (800f918 <UART_Start_Receive_DMA+0x148>)
 800f812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f818:	4a40      	ldr	r2, [pc, #256]	; (800f91c <UART_Start_Receive_DMA+0x14c>)
 800f81a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f820:	2200      	movs	r2, #0
 800f822:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3324      	adds	r3, #36	; 0x24
 800f82e:	4619      	mov	r1, r3
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f834:	461a      	mov	r2, r3
 800f836:	88fb      	ldrh	r3, [r7, #6]
 800f838:	f7f6 fa2c 	bl	8005c94 <HAL_DMA_Start_IT>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00d      	beq.n	800f85e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2210      	movs	r2, #16
 800f846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2200      	movs	r2, #0
 800f84e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2220      	movs	r2, #32
 800f856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f85a:	2301      	movs	r3, #1
 800f85c:	e055      	b.n	800f90a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2200      	movs	r2, #0
 800f862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	691b      	ldr	r3, [r3, #16]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d018      	beq.n	800f8a0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f876:	e853 3f00 	ldrex	r3, [r3]
 800f87a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f882:	657b      	str	r3, [r7, #84]	; 0x54
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	461a      	mov	r2, r3
 800f88a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f88c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f88e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f890:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f894:	e841 2300 	strex	r3, r2, [r1]
 800f898:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f89a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d1e6      	bne.n	800f86e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	3308      	adds	r3, #8
 800f8a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	e853 3f00 	ldrex	r3, [r3]
 800f8ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b2:	f043 0301 	orr.w	r3, r3, #1
 800f8b6:	653b      	str	r3, [r7, #80]	; 0x50
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	3308      	adds	r3, #8
 800f8be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8c0:	637a      	str	r2, [r7, #52]	; 0x34
 800f8c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8c8:	e841 2300 	strex	r3, r2, [r1]
 800f8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d1e5      	bne.n	800f8a0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	3308      	adds	r3, #8
 800f8da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	e853 3f00 	ldrex	r3, [r3]
 800f8e2:	613b      	str	r3, [r7, #16]
   return(result);
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	3308      	adds	r3, #8
 800f8f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f8f4:	623a      	str	r2, [r7, #32]
 800f8f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f8:	69f9      	ldr	r1, [r7, #28]
 800f8fa:	6a3a      	ldr	r2, [r7, #32]
 800f8fc:	e841 2300 	strex	r3, r2, [r1]
 800f900:	61bb      	str	r3, [r7, #24]
   return(result);
 800f902:	69bb      	ldr	r3, [r7, #24]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1e5      	bne.n	800f8d4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f908:	2300      	movs	r3, #0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3758      	adds	r7, #88	; 0x58
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	0800fa71 	.word	0x0800fa71
 800f918:	0800fb93 	.word	0x0800fb93
 800f91c:	0800fbcb 	.word	0x0800fbcb

0800f920 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f920:	b480      	push	{r7}
 800f922:	b08f      	sub	sp, #60	; 0x3c
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	e853 3f00 	ldrex	r3, [r3]
 800f934:	61fb      	str	r3, [r7, #28]
   return(result);
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f93c:	637b      	str	r3, [r7, #52]	; 0x34
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	461a      	mov	r2, r3
 800f944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f946:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f948:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f94a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f94e:	e841 2300 	strex	r3, r2, [r1]
 800f952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f956:	2b00      	cmp	r3, #0
 800f958:	d1e6      	bne.n	800f928 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	3308      	adds	r3, #8
 800f960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	e853 3f00 	ldrex	r3, [r3]
 800f968:	60bb      	str	r3, [r7, #8]
   return(result);
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f970:	633b      	str	r3, [r7, #48]	; 0x30
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	3308      	adds	r3, #8
 800f978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f97a:	61ba      	str	r2, [r7, #24]
 800f97c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97e:	6979      	ldr	r1, [r7, #20]
 800f980:	69ba      	ldr	r2, [r7, #24]
 800f982:	e841 2300 	strex	r3, r2, [r1]
 800f986:	613b      	str	r3, [r7, #16]
   return(result);
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d1e5      	bne.n	800f95a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2220      	movs	r2, #32
 800f992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f996:	bf00      	nop
 800f998:	373c      	adds	r7, #60	; 0x3c
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
	...

0800f9a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b095      	sub	sp, #84	; 0x54
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b4:	e853 3f00 	ldrex	r3, [r3]
 800f9b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ca:	643b      	str	r3, [r7, #64]	; 0x40
 800f9cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f9d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f9d2:	e841 2300 	strex	r3, r2, [r1]
 800f9d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1e6      	bne.n	800f9ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3308      	adds	r3, #8
 800f9e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e6:	6a3b      	ldr	r3, [r7, #32]
 800f9e8:	e853 3f00 	ldrex	r3, [r3]
 800f9ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9ee:	69fa      	ldr	r2, [r7, #28]
 800f9f0:	4b1e      	ldr	r3, [pc, #120]	; (800fa6c <UART_EndRxTransfer+0xc8>)
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fa00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa06:	e841 2300 	strex	r3, r2, [r1]
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e5      	bne.n	800f9de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d118      	bne.n	800fa4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	e853 3f00 	ldrex	r3, [r3]
 800fa26:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	f023 0310 	bic.w	r3, r3, #16
 800fa2e:	647b      	str	r3, [r7, #68]	; 0x44
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	461a      	mov	r2, r3
 800fa36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa38:	61bb      	str	r3, [r7, #24]
 800fa3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa3c:	6979      	ldr	r1, [r7, #20]
 800fa3e:	69ba      	ldr	r2, [r7, #24]
 800fa40:	e841 2300 	strex	r3, r2, [r1]
 800fa44:	613b      	str	r3, [r7, #16]
   return(result);
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d1e6      	bne.n	800fa1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2220      	movs	r2, #32
 800fa50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fa60:	bf00      	nop
 800fa62:	3754      	adds	r7, #84	; 0x54
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr
 800fa6c:	effffffe 	.word	0xeffffffe

0800fa70 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b09c      	sub	sp, #112	; 0x70
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa7c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	69db      	ldr	r3, [r3, #28]
 800fa82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa86:	d071      	beq.n	800fb6c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fa88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa98:	e853 3f00 	ldrex	r3, [r3]
 800fa9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fa9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800faa4:	66bb      	str	r3, [r7, #104]	; 0x68
 800faa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	461a      	mov	r2, r3
 800faac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800faae:	65bb      	str	r3, [r7, #88]	; 0x58
 800fab0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fab6:	e841 2300 	strex	r3, r2, [r1]
 800faba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fabc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d1e6      	bne.n	800fa90 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3308      	adds	r3, #8
 800fac8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800facc:	e853 3f00 	ldrex	r3, [r3]
 800fad0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fad4:	f023 0301 	bic.w	r3, r3, #1
 800fad8:	667b      	str	r3, [r7, #100]	; 0x64
 800fada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	3308      	adds	r3, #8
 800fae0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fae2:	647a      	str	r2, [r7, #68]	; 0x44
 800fae4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800faea:	e841 2300 	strex	r3, r2, [r1]
 800faee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800faf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1e5      	bne.n	800fac2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800faf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	3308      	adds	r3, #8
 800fafc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb00:	e853 3f00 	ldrex	r3, [r3]
 800fb04:	623b      	str	r3, [r7, #32]
   return(result);
 800fb06:	6a3b      	ldr	r3, [r7, #32]
 800fb08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb0c:	663b      	str	r3, [r7, #96]	; 0x60
 800fb0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3308      	adds	r3, #8
 800fb14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb16:	633a      	str	r2, [r7, #48]	; 0x30
 800fb18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb1e:	e841 2300 	strex	r3, r2, [r1]
 800fb22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1e5      	bne.n	800faf6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fb2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb2c:	2220      	movs	r2, #32
 800fb2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d118      	bne.n	800fb6c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	e853 3f00 	ldrex	r3, [r3]
 800fb46:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f023 0310 	bic.w	r3, r3, #16
 800fb4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	461a      	mov	r2, r3
 800fb56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb58:	61fb      	str	r3, [r7, #28]
 800fb5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb5c:	69b9      	ldr	r1, [r7, #24]
 800fb5e:	69fa      	ldr	r2, [r7, #28]
 800fb60:	e841 2300 	strex	r3, r2, [r1]
 800fb64:	617b      	str	r3, [r7, #20]
   return(result);
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1e6      	bne.n	800fb3a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d107      	bne.n	800fb84 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fb7e:	f7fe ff05 	bl	800e98c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fb82:	e002      	b.n	800fb8a <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800fb84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fb86:	f7f3 fbc1 	bl	800330c <HAL_UART_RxCpltCallback>
}
 800fb8a:	bf00      	nop
 800fb8c:	3770      	adds	r7, #112	; 0x70
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}

0800fb92 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b084      	sub	sp, #16
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d109      	bne.n	800fbbc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fbae:	085b      	lsrs	r3, r3, #1
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f7fe fee9 	bl	800e98c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fbba:	e002      	b.n	800fbc2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fbbc:	68f8      	ldr	r0, [r7, #12]
 800fbbe:	f7fe fed1 	bl	800e964 <HAL_UART_RxHalfCpltCallback>
}
 800fbc2:	bf00      	nop
 800fbc4:	3710      	adds	r7, #16
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b086      	sub	sp, #24
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbde:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbe6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	689b      	ldr	r3, [r3, #8]
 800fbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbf2:	2b80      	cmp	r3, #128	; 0x80
 800fbf4:	d109      	bne.n	800fc0a <UART_DMAError+0x40>
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	2b21      	cmp	r3, #33	; 0x21
 800fbfa:	d106      	bne.n	800fc0a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fc04:	6978      	ldr	r0, [r7, #20]
 800fc06:	f7ff fe8b 	bl	800f920 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	689b      	ldr	r3, [r3, #8]
 800fc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc14:	2b40      	cmp	r3, #64	; 0x40
 800fc16:	d109      	bne.n	800fc2c <UART_DMAError+0x62>
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2b22      	cmp	r3, #34	; 0x22
 800fc1c:	d106      	bne.n	800fc2c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	2200      	movs	r2, #0
 800fc22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fc26:	6978      	ldr	r0, [r7, #20]
 800fc28:	f7ff febc 	bl	800f9a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc32:	f043 0210 	orr.w	r2, r3, #16
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc3c:	6978      	ldr	r0, [r7, #20]
 800fc3e:	f7fe fe9b 	bl	800e978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc42:	bf00      	nop
 800fc44:	3718      	adds	r7, #24
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b084      	sub	sp, #16
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc68:	68f8      	ldr	r0, [r7, #12]
 800fc6a:	f7fe fe85 	bl	800e978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc6e:	bf00      	nop
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b088      	sub	sp, #32
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	e853 3f00 	ldrex	r3, [r3]
 800fc8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc92:	61fb      	str	r3, [r7, #28]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	461a      	mov	r2, r3
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	61bb      	str	r3, [r7, #24]
 800fc9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca0:	6979      	ldr	r1, [r7, #20]
 800fca2:	69ba      	ldr	r2, [r7, #24]
 800fca4:	e841 2300 	strex	r3, r2, [r1]
 800fca8:	613b      	str	r3, [r7, #16]
   return(result);
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1e6      	bne.n	800fc7e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2220      	movs	r2, #32
 800fcb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f7fe fe46 	bl	800e950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcc4:	bf00      	nop
 800fcc6:	3720      	adds	r7, #32
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fcd4:	bf00      	nop
 800fcd6:	370c      	adds	r7, #12
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fce8:	bf00      	nop
 800fcea:	370c      	adds	r7, #12
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fcfc:	bf00      	nop
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d101      	bne.n	800fd1e <HAL_UARTEx_DisableFifoMode+0x16>
 800fd1a:	2302      	movs	r3, #2
 800fd1c:	e027      	b.n	800fd6e <HAL_UARTEx_DisableFifoMode+0x66>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2201      	movs	r2, #1
 800fd22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2224      	movs	r2, #36	; 0x24
 800fd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f022 0201 	bic.w	r2, r2, #1
 800fd44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fd4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	68fa      	ldr	r2, [r7, #12]
 800fd5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2220      	movs	r2, #32
 800fd60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2200      	movs	r2, #0
 800fd68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3714      	adds	r7, #20
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr

0800fd7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b084      	sub	sp, #16
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d101      	bne.n	800fd92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fd8e:	2302      	movs	r3, #2
 800fd90:	e02d      	b.n	800fdee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2201      	movs	r2, #1
 800fd96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2224      	movs	r2, #36	; 0x24
 800fd9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f022 0201 	bic.w	r2, r2, #1
 800fdb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	683a      	ldr	r2, [r7, #0]
 800fdca:	430a      	orrs	r2, r1
 800fdcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f000 f850 	bl	800fe74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	68fa      	ldr	r2, [r7, #12]
 800fdda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2220      	movs	r2, #32
 800fde0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}

0800fdf6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdf6:	b580      	push	{r7, lr}
 800fdf8:	b084      	sub	sp, #16
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
 800fdfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d101      	bne.n	800fe0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe0a:	2302      	movs	r3, #2
 800fe0c:	e02d      	b.n	800fe6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2201      	movs	r2, #1
 800fe12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2224      	movs	r2, #36	; 0x24
 800fe1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f022 0201 	bic.w	r2, r2, #1
 800fe34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	683a      	ldr	r2, [r7, #0]
 800fe46:	430a      	orrs	r2, r1
 800fe48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 f812 	bl	800fe74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68fa      	ldr	r2, [r7, #12]
 800fe56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2220      	movs	r2, #32
 800fe5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe68:	2300      	movs	r3, #0
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
	...

0800fe74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b085      	sub	sp, #20
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d108      	bne.n	800fe96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2201      	movs	r2, #1
 800fe88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2201      	movs	r2, #1
 800fe90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fe94:	e031      	b.n	800fefa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fe96:	2310      	movs	r3, #16
 800fe98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fe9a:	2310      	movs	r3, #16
 800fe9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	0e5b      	lsrs	r3, r3, #25
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	f003 0307 	and.w	r3, r3, #7
 800feac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	0f5b      	lsrs	r3, r3, #29
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	f003 0307 	and.w	r3, r3, #7
 800febc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800febe:	7bbb      	ldrb	r3, [r7, #14]
 800fec0:	7b3a      	ldrb	r2, [r7, #12]
 800fec2:	4911      	ldr	r1, [pc, #68]	; (800ff08 <UARTEx_SetNbDataToProcess+0x94>)
 800fec4:	5c8a      	ldrb	r2, [r1, r2]
 800fec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800feca:	7b3a      	ldrb	r2, [r7, #12]
 800fecc:	490f      	ldr	r1, [pc, #60]	; (800ff0c <UARTEx_SetNbDataToProcess+0x98>)
 800fece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fed0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fedc:	7bfb      	ldrb	r3, [r7, #15]
 800fede:	7b7a      	ldrb	r2, [r7, #13]
 800fee0:	4909      	ldr	r1, [pc, #36]	; (800ff08 <UARTEx_SetNbDataToProcess+0x94>)
 800fee2:	5c8a      	ldrb	r2, [r1, r2]
 800fee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fee8:	7b7a      	ldrb	r2, [r7, #13]
 800feea:	4908      	ldr	r1, [pc, #32]	; (800ff0c <UARTEx_SetNbDataToProcess+0x98>)
 800feec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800feee:	fb93 f3f2 	sdiv	r3, r3, r2
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fefa:	bf00      	nop
 800fefc:	3714      	adds	r7, #20
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	08011610 	.word	0x08011610
 800ff0c:	08011618 	.word	0x08011618

0800ff10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ff10:	b084      	sub	sp, #16
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b084      	sub	sp, #16
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	f107 001c 	add.w	r0, r7, #28
 800ff1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	d120      	bne.n	800ff6a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	68da      	ldr	r2, [r3, #12]
 800ff38:	4b2a      	ldr	r3, [pc, #168]	; (800ffe4 <USB_CoreInit+0xd4>)
 800ff3a:	4013      	ands	r3, r2
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ff4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d105      	bne.n	800ff5e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f000 faa8 	bl	80104b4 <USB_CoreReset>
 800ff64:	4603      	mov	r3, r0
 800ff66:	73fb      	strb	r3, [r7, #15]
 800ff68:	e01a      	b.n	800ffa0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 fa9c 	bl	80104b4 <USB_CoreReset>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ff80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d106      	bne.n	800ff94 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	639a      	str	r2, [r3, #56]	; 0x38
 800ff92:	e005      	b.n	800ffa0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ffa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d116      	bne.n	800ffd4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ffaa:	b29a      	uxth	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ffb4:	4b0c      	ldr	r3, [pc, #48]	; (800ffe8 <USB_CoreInit+0xd8>)
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	f043 0206 	orr.w	r2, r3, #6
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	f043 0220 	orr.w	r2, r3, #32
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3710      	adds	r7, #16
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ffe0:	b004      	add	sp, #16
 800ffe2:	4770      	bx	lr
 800ffe4:	ffbdffbf 	.word	0xffbdffbf
 800ffe8:	03ee0000 	.word	0x03ee0000

0800ffec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	f023 0201 	bic.w	r2, r3, #1
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	370c      	adds	r7, #12
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr

0801000e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b084      	sub	sp, #16
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
 8010016:	460b      	mov	r3, r1
 8010018:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801001a:	2300      	movs	r3, #0
 801001c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801002a:	78fb      	ldrb	r3, [r7, #3]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d115      	bne.n	801005c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801003c:	2001      	movs	r0, #1
 801003e:	f7f4 f9dd 	bl	80043fc <HAL_Delay>
      ms++;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3301      	adds	r3, #1
 8010046:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f000 fa25 	bl	8010498 <USB_GetMode>
 801004e:	4603      	mov	r3, r0
 8010050:	2b01      	cmp	r3, #1
 8010052:	d01e      	beq.n	8010092 <USB_SetCurrentMode+0x84>
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2b31      	cmp	r3, #49	; 0x31
 8010058:	d9f0      	bls.n	801003c <USB_SetCurrentMode+0x2e>
 801005a:	e01a      	b.n	8010092 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801005c:	78fb      	ldrb	r3, [r7, #3]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d115      	bne.n	801008e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801006e:	2001      	movs	r0, #1
 8010070:	f7f4 f9c4 	bl	80043fc <HAL_Delay>
      ms++;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	3301      	adds	r3, #1
 8010078:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 fa0c 	bl	8010498 <USB_GetMode>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d005      	beq.n	8010092 <USB_SetCurrentMode+0x84>
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2b31      	cmp	r3, #49	; 0x31
 801008a:	d9f0      	bls.n	801006e <USB_SetCurrentMode+0x60>
 801008c:	e001      	b.n	8010092 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801008e:	2301      	movs	r3, #1
 8010090:	e005      	b.n	801009e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2b32      	cmp	r3, #50	; 0x32
 8010096:	d101      	bne.n	801009c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010098:	2301      	movs	r3, #1
 801009a:	e000      	b.n	801009e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
	...

080100a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80100a8:	b084      	sub	sp, #16
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b086      	sub	sp, #24
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
 80100b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80100b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80100ba:	2300      	movs	r3, #0
 80100bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80100c2:	2300      	movs	r3, #0
 80100c4:	613b      	str	r3, [r7, #16]
 80100c6:	e009      	b.n	80100dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80100c8:	687a      	ldr	r2, [r7, #4]
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	3340      	adds	r3, #64	; 0x40
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	4413      	add	r3, r2
 80100d2:	2200      	movs	r2, #0
 80100d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	3301      	adds	r3, #1
 80100da:	613b      	str	r3, [r7, #16]
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	2b0e      	cmp	r3, #14
 80100e0:	d9f2      	bls.n	80100c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80100e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d11c      	bne.n	8010122 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100f6:	f043 0302 	orr.w	r3, r3, #2
 80100fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010100:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	601a      	str	r2, [r3, #0]
 8010120:	e005      	b.n	801012e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010126:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010134:	461a      	mov	r2, r3
 8010136:	2300      	movs	r3, #0
 8010138:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010140:	4619      	mov	r1, r3
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010148:	461a      	mov	r2, r3
 801014a:	680b      	ldr	r3, [r1, #0]
 801014c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801014e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010150:	2b01      	cmp	r3, #1
 8010152:	d10c      	bne.n	801016e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010156:	2b00      	cmp	r3, #0
 8010158:	d104      	bne.n	8010164 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801015a:	2100      	movs	r1, #0
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 f961 	bl	8010424 <USB_SetDevSpeed>
 8010162:	e008      	b.n	8010176 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010164:	2101      	movs	r1, #1
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 f95c 	bl	8010424 <USB_SetDevSpeed>
 801016c:	e003      	b.n	8010176 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801016e:	2103      	movs	r1, #3
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 f957 	bl	8010424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010176:	2110      	movs	r1, #16
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 f8f3 	bl	8010364 <USB_FlushTxFifo>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d001      	beq.n	8010188 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010184:	2301      	movs	r3, #1
 8010186:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f000 f91d 	bl	80103c8 <USB_FlushRxFifo>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d001      	beq.n	8010198 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010194:	2301      	movs	r3, #1
 8010196:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801019e:	461a      	mov	r2, r3
 80101a0:	2300      	movs	r3, #0
 80101a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101aa:	461a      	mov	r2, r3
 80101ac:	2300      	movs	r3, #0
 80101ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101b6:	461a      	mov	r2, r3
 80101b8:	2300      	movs	r3, #0
 80101ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80101bc:	2300      	movs	r3, #0
 80101be:	613b      	str	r3, [r7, #16]
 80101c0:	e043      	b.n	801024a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	015a      	lsls	r2, r3, #5
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	4413      	add	r3, r2
 80101ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101d8:	d118      	bne.n	801020c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d10a      	bne.n	80101f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	015a      	lsls	r2, r3, #5
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	4413      	add	r3, r2
 80101e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ec:	461a      	mov	r2, r3
 80101ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80101f2:	6013      	str	r3, [r2, #0]
 80101f4:	e013      	b.n	801021e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	015a      	lsls	r2, r3, #5
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	4413      	add	r3, r2
 80101fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010202:	461a      	mov	r2, r3
 8010204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010208:	6013      	str	r3, [r2, #0]
 801020a:	e008      	b.n	801021e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	015a      	lsls	r2, r3, #5
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	4413      	add	r3, r2
 8010214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010218:	461a      	mov	r2, r3
 801021a:	2300      	movs	r3, #0
 801021c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	015a      	lsls	r2, r3, #5
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	4413      	add	r3, r2
 8010226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801022a:	461a      	mov	r2, r3
 801022c:	2300      	movs	r3, #0
 801022e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	015a      	lsls	r2, r3, #5
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	4413      	add	r3, r2
 8010238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801023c:	461a      	mov	r2, r3
 801023e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	3301      	adds	r3, #1
 8010248:	613b      	str	r3, [r7, #16]
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	693a      	ldr	r2, [r7, #16]
 801024e:	429a      	cmp	r2, r3
 8010250:	d3b7      	bcc.n	80101c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010252:	2300      	movs	r3, #0
 8010254:	613b      	str	r3, [r7, #16]
 8010256:	e043      	b.n	80102e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	015a      	lsls	r2, r3, #5
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	4413      	add	r3, r2
 8010260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801026a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801026e:	d118      	bne.n	80102a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d10a      	bne.n	801028c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	015a      	lsls	r2, r3, #5
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	4413      	add	r3, r2
 801027e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010282:	461a      	mov	r2, r3
 8010284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010288:	6013      	str	r3, [r2, #0]
 801028a:	e013      	b.n	80102b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	015a      	lsls	r2, r3, #5
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	4413      	add	r3, r2
 8010294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010298:	461a      	mov	r2, r3
 801029a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801029e:	6013      	str	r3, [r2, #0]
 80102a0:	e008      	b.n	80102b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	015a      	lsls	r2, r3, #5
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	4413      	add	r3, r2
 80102aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ae:	461a      	mov	r2, r3
 80102b0:	2300      	movs	r3, #0
 80102b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	015a      	lsls	r2, r3, #5
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	4413      	add	r3, r2
 80102bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c0:	461a      	mov	r2, r3
 80102c2:	2300      	movs	r3, #0
 80102c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	015a      	lsls	r2, r3, #5
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	4413      	add	r3, r2
 80102ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d2:	461a      	mov	r2, r3
 80102d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80102d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	3301      	adds	r3, #1
 80102de:	613b      	str	r3, [r7, #16]
 80102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e2:	693a      	ldr	r2, [r7, #16]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d3b7      	bcc.n	8010258 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010308:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801030a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030c:	2b00      	cmp	r3, #0
 801030e:	d105      	bne.n	801031c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	699b      	ldr	r3, [r3, #24]
 8010314:	f043 0210 	orr.w	r2, r3, #16
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	699a      	ldr	r2, [r3, #24]
 8010320:	4b0e      	ldr	r3, [pc, #56]	; (801035c <USB_DevInit+0x2b4>)
 8010322:	4313      	orrs	r3, r2
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801032a:	2b00      	cmp	r3, #0
 801032c:	d005      	beq.n	801033a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	699b      	ldr	r3, [r3, #24]
 8010332:	f043 0208 	orr.w	r2, r3, #8
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801033a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801033c:	2b01      	cmp	r3, #1
 801033e:	d105      	bne.n	801034c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	699a      	ldr	r2, [r3, #24]
 8010344:	4b06      	ldr	r3, [pc, #24]	; (8010360 <USB_DevInit+0x2b8>)
 8010346:	4313      	orrs	r3, r2
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801034c:	7dfb      	ldrb	r3, [r7, #23]
}
 801034e:	4618      	mov	r0, r3
 8010350:	3718      	adds	r7, #24
 8010352:	46bd      	mov	sp, r7
 8010354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010358:	b004      	add	sp, #16
 801035a:	4770      	bx	lr
 801035c:	803c3800 	.word	0x803c3800
 8010360:	40000004 	.word	0x40000004

08010364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801036e:	2300      	movs	r3, #0
 8010370:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	3301      	adds	r3, #1
 8010376:	60fb      	str	r3, [r7, #12]
 8010378:	4a12      	ldr	r2, [pc, #72]	; (80103c4 <USB_FlushTxFifo+0x60>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d901      	bls.n	8010382 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801037e:	2303      	movs	r3, #3
 8010380:	e01a      	b.n	80103b8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	2b00      	cmp	r3, #0
 8010388:	daf3      	bge.n	8010372 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801038a:	2300      	movs	r3, #0
 801038c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	019b      	lsls	r3, r3, #6
 8010392:	f043 0220 	orr.w	r2, r3, #32
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	3301      	adds	r3, #1
 801039e:	60fb      	str	r3, [r7, #12]
 80103a0:	4a08      	ldr	r2, [pc, #32]	; (80103c4 <USB_FlushTxFifo+0x60>)
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d901      	bls.n	80103aa <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80103a6:	2303      	movs	r3, #3
 80103a8:	e006      	b.n	80103b8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	f003 0320 	and.w	r3, r3, #32
 80103b2:	2b20      	cmp	r3, #32
 80103b4:	d0f1      	beq.n	801039a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80103b6:	2300      	movs	r3, #0
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3714      	adds	r7, #20
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr
 80103c4:	00030d40 	.word	0x00030d40

080103c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b085      	sub	sp, #20
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80103d0:	2300      	movs	r3, #0
 80103d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	3301      	adds	r3, #1
 80103d8:	60fb      	str	r3, [r7, #12]
 80103da:	4a11      	ldr	r2, [pc, #68]	; (8010420 <USB_FlushRxFifo+0x58>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d901      	bls.n	80103e4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80103e0:	2303      	movs	r3, #3
 80103e2:	e017      	b.n	8010414 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	691b      	ldr	r3, [r3, #16]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	daf3      	bge.n	80103d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80103ec:	2300      	movs	r3, #0
 80103ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2210      	movs	r2, #16
 80103f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	3301      	adds	r3, #1
 80103fa:	60fb      	str	r3, [r7, #12]
 80103fc:	4a08      	ldr	r2, [pc, #32]	; (8010420 <USB_FlushRxFifo+0x58>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d901      	bls.n	8010406 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8010402:	2303      	movs	r3, #3
 8010404:	e006      	b.n	8010414 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	691b      	ldr	r3, [r3, #16]
 801040a:	f003 0310 	and.w	r3, r3, #16
 801040e:	2b10      	cmp	r3, #16
 8010410:	d0f1      	beq.n	80103f6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8010412:	2300      	movs	r3, #0
}
 8010414:	4618      	mov	r0, r3
 8010416:	3714      	adds	r7, #20
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr
 8010420:	00030d40 	.word	0x00030d40

08010424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	460b      	mov	r3, r1
 801042e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	78fb      	ldrb	r3, [r7, #3]
 801043e:	68f9      	ldr	r1, [r7, #12]
 8010440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010444:	4313      	orrs	r3, r2
 8010446:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010448:	2300      	movs	r3, #0
}
 801044a:	4618      	mov	r0, r3
 801044c:	3714      	adds	r7, #20
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr

08010456 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010456:	b480      	push	{r7}
 8010458:	b085      	sub	sp, #20
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68fa      	ldr	r2, [r7, #12]
 801046c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010470:	f023 0303 	bic.w	r3, r3, #3
 8010474:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	68fa      	ldr	r2, [r7, #12]
 8010480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010484:	f043 0302 	orr.w	r3, r3, #2
 8010488:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801048a:	2300      	movs	r3, #0
}
 801048c:	4618      	mov	r0, r3
 801048e:	3714      	adds	r7, #20
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010498:	b480      	push	{r7}
 801049a:	b083      	sub	sp, #12
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	695b      	ldr	r3, [r3, #20]
 80104a4:	f003 0301 	and.w	r3, r3, #1
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b085      	sub	sp, #20
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80104bc:	2300      	movs	r3, #0
 80104be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	3301      	adds	r3, #1
 80104c4:	60fb      	str	r3, [r7, #12]
 80104c6:	4a13      	ldr	r2, [pc, #76]	; (8010514 <USB_CoreReset+0x60>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d901      	bls.n	80104d0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80104cc:	2303      	movs	r3, #3
 80104ce:	e01a      	b.n	8010506 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	691b      	ldr	r3, [r3, #16]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	daf3      	bge.n	80104c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80104d8:	2300      	movs	r3, #0
 80104da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	691b      	ldr	r3, [r3, #16]
 80104e0:	f043 0201 	orr.w	r2, r3, #1
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	3301      	adds	r3, #1
 80104ec:	60fb      	str	r3, [r7, #12]
 80104ee:	4a09      	ldr	r2, [pc, #36]	; (8010514 <USB_CoreReset+0x60>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d901      	bls.n	80104f8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80104f4:	2303      	movs	r3, #3
 80104f6:	e006      	b.n	8010506 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	691b      	ldr	r3, [r3, #16]
 80104fc:	f003 0301 	and.w	r3, r3, #1
 8010500:	2b01      	cmp	r3, #1
 8010502:	d0f1      	beq.n	80104e8 <USB_CoreReset+0x34>

  return HAL_OK;
 8010504:	2300      	movs	r3, #0
}
 8010506:	4618      	mov	r0, r3
 8010508:	3714      	adds	r7, #20
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr
 8010512:	bf00      	nop
 8010514:	00030d40 	.word	0x00030d40

08010518 <__errno>:
 8010518:	4b01      	ldr	r3, [pc, #4]	; (8010520 <__errno+0x8>)
 801051a:	6818      	ldr	r0, [r3, #0]
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	24000010 	.word	0x24000010

08010524 <__libc_init_array>:
 8010524:	b570      	push	{r4, r5, r6, lr}
 8010526:	4d0d      	ldr	r5, [pc, #52]	; (801055c <__libc_init_array+0x38>)
 8010528:	4c0d      	ldr	r4, [pc, #52]	; (8010560 <__libc_init_array+0x3c>)
 801052a:	1b64      	subs	r4, r4, r5
 801052c:	10a4      	asrs	r4, r4, #2
 801052e:	2600      	movs	r6, #0
 8010530:	42a6      	cmp	r6, r4
 8010532:	d109      	bne.n	8010548 <__libc_init_array+0x24>
 8010534:	4d0b      	ldr	r5, [pc, #44]	; (8010564 <__libc_init_array+0x40>)
 8010536:	4c0c      	ldr	r4, [pc, #48]	; (8010568 <__libc_init_array+0x44>)
 8010538:	f001 f844 	bl	80115c4 <_init>
 801053c:	1b64      	subs	r4, r4, r5
 801053e:	10a4      	asrs	r4, r4, #2
 8010540:	2600      	movs	r6, #0
 8010542:	42a6      	cmp	r6, r4
 8010544:	d105      	bne.n	8010552 <__libc_init_array+0x2e>
 8010546:	bd70      	pop	{r4, r5, r6, pc}
 8010548:	f855 3b04 	ldr.w	r3, [r5], #4
 801054c:	4798      	blx	r3
 801054e:	3601      	adds	r6, #1
 8010550:	e7ee      	b.n	8010530 <__libc_init_array+0xc>
 8010552:	f855 3b04 	ldr.w	r3, [r5], #4
 8010556:	4798      	blx	r3
 8010558:	3601      	adds	r6, #1
 801055a:	e7f2      	b.n	8010542 <__libc_init_array+0x1e>
 801055c:	08011870 	.word	0x08011870
 8010560:	08011870 	.word	0x08011870
 8010564:	08011870 	.word	0x08011870
 8010568:	08011874 	.word	0x08011874

0801056c <memset>:
 801056c:	4402      	add	r2, r0
 801056e:	4603      	mov	r3, r0
 8010570:	4293      	cmp	r3, r2
 8010572:	d100      	bne.n	8010576 <memset+0xa>
 8010574:	4770      	bx	lr
 8010576:	f803 1b01 	strb.w	r1, [r3], #1
 801057a:	e7f9      	b.n	8010570 <memset+0x4>
 801057c:	0000      	movs	r0, r0
	...

08010580 <cos>:
 8010580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010582:	eeb0 7b40 	vmov.f64	d7, d0
 8010586:	ee17 3a90 	vmov	r3, s15
 801058a:	4a1f      	ldr	r2, [pc, #124]	; (8010608 <cos+0x88>)
 801058c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010590:	4293      	cmp	r3, r2
 8010592:	dc04      	bgt.n	801059e <cos+0x1e>
 8010594:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010600 <cos+0x80>
 8010598:	f000 fac6 	bl	8010b28 <__kernel_cos>
 801059c:	e004      	b.n	80105a8 <cos+0x28>
 801059e:	4a1b      	ldr	r2, [pc, #108]	; (801060c <cos+0x8c>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	dd04      	ble.n	80105ae <cos+0x2e>
 80105a4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80105a8:	b005      	add	sp, #20
 80105aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80105ae:	4668      	mov	r0, sp
 80105b0:	f000 f976 	bl	80108a0 <__ieee754_rem_pio2>
 80105b4:	f000 0003 	and.w	r0, r0, #3
 80105b8:	2801      	cmp	r0, #1
 80105ba:	d007      	beq.n	80105cc <cos+0x4c>
 80105bc:	2802      	cmp	r0, #2
 80105be:	d00e      	beq.n	80105de <cos+0x5e>
 80105c0:	b9a0      	cbnz	r0, 80105ec <cos+0x6c>
 80105c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80105c6:	ed9d 0b00 	vldr	d0, [sp]
 80105ca:	e7e5      	b.n	8010598 <cos+0x18>
 80105cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80105d0:	ed9d 0b00 	vldr	d0, [sp]
 80105d4:	f000 fd94 	bl	8011100 <__kernel_sin>
 80105d8:	eeb1 0b40 	vneg.f64	d0, d0
 80105dc:	e7e4      	b.n	80105a8 <cos+0x28>
 80105de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80105e2:	ed9d 0b00 	vldr	d0, [sp]
 80105e6:	f000 fa9f 	bl	8010b28 <__kernel_cos>
 80105ea:	e7f5      	b.n	80105d8 <cos+0x58>
 80105ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80105f0:	ed9d 0b00 	vldr	d0, [sp]
 80105f4:	2001      	movs	r0, #1
 80105f6:	f000 fd83 	bl	8011100 <__kernel_sin>
 80105fa:	e7d5      	b.n	80105a8 <cos+0x28>
 80105fc:	f3af 8000 	nop.w
	...
 8010608:	3fe921fb 	.word	0x3fe921fb
 801060c:	7fefffff 	.word	0x7fefffff

08010610 <sin>:
 8010610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010612:	eeb0 7b40 	vmov.f64	d7, d0
 8010616:	ee17 3a90 	vmov	r3, s15
 801061a:	4a1f      	ldr	r2, [pc, #124]	; (8010698 <sin+0x88>)
 801061c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010620:	4293      	cmp	r3, r2
 8010622:	dc05      	bgt.n	8010630 <sin+0x20>
 8010624:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010690 <sin+0x80>
 8010628:	2000      	movs	r0, #0
 801062a:	f000 fd69 	bl	8011100 <__kernel_sin>
 801062e:	e004      	b.n	801063a <sin+0x2a>
 8010630:	4a1a      	ldr	r2, [pc, #104]	; (801069c <sin+0x8c>)
 8010632:	4293      	cmp	r3, r2
 8010634:	dd04      	ble.n	8010640 <sin+0x30>
 8010636:	ee30 0b40 	vsub.f64	d0, d0, d0
 801063a:	b005      	add	sp, #20
 801063c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010640:	4668      	mov	r0, sp
 8010642:	f000 f92d 	bl	80108a0 <__ieee754_rem_pio2>
 8010646:	f000 0003 	and.w	r0, r0, #3
 801064a:	2801      	cmp	r0, #1
 801064c:	d008      	beq.n	8010660 <sin+0x50>
 801064e:	2802      	cmp	r0, #2
 8010650:	d00d      	beq.n	801066e <sin+0x5e>
 8010652:	b9b0      	cbnz	r0, 8010682 <sin+0x72>
 8010654:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010658:	ed9d 0b00 	vldr	d0, [sp]
 801065c:	2001      	movs	r0, #1
 801065e:	e7e4      	b.n	801062a <sin+0x1a>
 8010660:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010664:	ed9d 0b00 	vldr	d0, [sp]
 8010668:	f000 fa5e 	bl	8010b28 <__kernel_cos>
 801066c:	e7e5      	b.n	801063a <sin+0x2a>
 801066e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010672:	ed9d 0b00 	vldr	d0, [sp]
 8010676:	2001      	movs	r0, #1
 8010678:	f000 fd42 	bl	8011100 <__kernel_sin>
 801067c:	eeb1 0b40 	vneg.f64	d0, d0
 8010680:	e7db      	b.n	801063a <sin+0x2a>
 8010682:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010686:	ed9d 0b00 	vldr	d0, [sp]
 801068a:	f000 fa4d 	bl	8010b28 <__kernel_cos>
 801068e:	e7f5      	b.n	801067c <sin+0x6c>
	...
 8010698:	3fe921fb 	.word	0x3fe921fb
 801069c:	7fefffff 	.word	0x7fefffff

080106a0 <atan2>:
 80106a0:	f000 b82e 	b.w	8010700 <__ieee754_atan2>
 80106a4:	0000      	movs	r0, r0
	...

080106a8 <sqrt>:
 80106a8:	b508      	push	{r3, lr}
 80106aa:	ed2d 8b04 	vpush	{d8-d9}
 80106ae:	eeb0 8b40 	vmov.f64	d8, d0
 80106b2:	f000 fa35 	bl	8010b20 <__ieee754_sqrt>
 80106b6:	4b10      	ldr	r3, [pc, #64]	; (80106f8 <sqrt+0x50>)
 80106b8:	f993 3000 	ldrsb.w	r3, [r3]
 80106bc:	3301      	adds	r3, #1
 80106be:	d011      	beq.n	80106e4 <sqrt+0x3c>
 80106c0:	eeb4 8b48 	vcmp.f64	d8, d8
 80106c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c8:	d60c      	bvs.n	80106e4 <sqrt+0x3c>
 80106ca:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80106f0 <sqrt+0x48>
 80106ce:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80106d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d6:	d505      	bpl.n	80106e4 <sqrt+0x3c>
 80106d8:	f7ff ff1e 	bl	8010518 <__errno>
 80106dc:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80106e0:	2321      	movs	r3, #33	; 0x21
 80106e2:	6003      	str	r3, [r0, #0]
 80106e4:	ecbd 8b04 	vpop	{d8-d9}
 80106e8:	bd08      	pop	{r3, pc}
 80106ea:	bf00      	nop
 80106ec:	f3af 8000 	nop.w
	...
 80106f8:	24000074 	.word	0x24000074
 80106fc:	00000000 	.word	0x00000000

08010700 <__ieee754_atan2>:
 8010700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010702:	ee11 6a10 	vmov	r6, s2
 8010706:	ee11 0a90 	vmov	r0, s3
 801070a:	4273      	negs	r3, r6
 801070c:	4f60      	ldr	r7, [pc, #384]	; (8010890 <__ieee754_atan2+0x190>)
 801070e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8010712:	4333      	orrs	r3, r6
 8010714:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010718:	42bb      	cmp	r3, r7
 801071a:	ed8d 0b00 	vstr	d0, [sp]
 801071e:	d80b      	bhi.n	8010738 <__ieee754_atan2+0x38>
 8010720:	e9dd c500 	ldrd	ip, r5, [sp]
 8010724:	f1cc 0100 	rsb	r1, ip, #0
 8010728:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801072c:	ea41 010c 	orr.w	r1, r1, ip
 8010730:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8010734:	42b9      	cmp	r1, r7
 8010736:	d906      	bls.n	8010746 <__ieee754_atan2+0x46>
 8010738:	ed9d 7b00 	vldr	d7, [sp]
 801073c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8010740:	ed8d 7b00 	vstr	d7, [sp]
 8010744:	e054      	b.n	80107f0 <__ieee754_atan2+0xf0>
 8010746:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 801074a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 801074e:	4331      	orrs	r1, r6
 8010750:	d104      	bne.n	801075c <__ieee754_atan2+0x5c>
 8010752:	b003      	add	sp, #12
 8010754:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010758:	f000 bd2a 	b.w	80111b0 <atan>
 801075c:	1784      	asrs	r4, r0, #30
 801075e:	f004 0402 	and.w	r4, r4, #2
 8010762:	ea53 010c 	orrs.w	r1, r3, ip
 8010766:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 801076a:	d109      	bne.n	8010780 <__ieee754_atan2+0x80>
 801076c:	2c02      	cmp	r4, #2
 801076e:	d069      	beq.n	8010844 <__ieee754_atan2+0x144>
 8010770:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8010858 <__ieee754_atan2+0x158>
 8010774:	ed9d 6b00 	vldr	d6, [sp]
 8010778:	2c03      	cmp	r4, #3
 801077a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801077e:	e7df      	b.n	8010740 <__ieee754_atan2+0x40>
 8010780:	ea52 0106 	orrs.w	r1, r2, r6
 8010784:	d107      	bne.n	8010796 <__ieee754_atan2+0x96>
 8010786:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8010860 <__ieee754_atan2+0x160>
 801078a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8010868 <__ieee754_atan2+0x168>
 801078e:	2d00      	cmp	r5, #0
 8010790:	fe26 7b07 	vselge.f64	d7, d6, d7
 8010794:	e7d4      	b.n	8010740 <__ieee754_atan2+0x40>
 8010796:	42ba      	cmp	r2, r7
 8010798:	d10f      	bne.n	80107ba <__ieee754_atan2+0xba>
 801079a:	4293      	cmp	r3, r2
 801079c:	f104 34ff 	add.w	r4, r4, #4294967295
 80107a0:	d107      	bne.n	80107b2 <__ieee754_atan2+0xb2>
 80107a2:	2c02      	cmp	r4, #2
 80107a4:	d851      	bhi.n	801084a <__ieee754_atan2+0x14a>
 80107a6:	4b3b      	ldr	r3, [pc, #236]	; (8010894 <__ieee754_atan2+0x194>)
 80107a8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80107ac:	ed94 7b00 	vldr	d7, [r4]
 80107b0:	e7c6      	b.n	8010740 <__ieee754_atan2+0x40>
 80107b2:	2c02      	cmp	r4, #2
 80107b4:	d84c      	bhi.n	8010850 <__ieee754_atan2+0x150>
 80107b6:	4b38      	ldr	r3, [pc, #224]	; (8010898 <__ieee754_atan2+0x198>)
 80107b8:	e7f6      	b.n	80107a8 <__ieee754_atan2+0xa8>
 80107ba:	42bb      	cmp	r3, r7
 80107bc:	d0e3      	beq.n	8010786 <__ieee754_atan2+0x86>
 80107be:	1a9b      	subs	r3, r3, r2
 80107c0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80107c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80107c8:	da16      	bge.n	80107f8 <__ieee754_atan2+0xf8>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	da01      	bge.n	80107d2 <__ieee754_atan2+0xd2>
 80107ce:	323c      	adds	r2, #60	; 0x3c
 80107d0:	db17      	blt.n	8010802 <__ieee754_atan2+0x102>
 80107d2:	ed9d 7b00 	vldr	d7, [sp]
 80107d6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80107da:	f000 fde3 	bl	80113a4 <fabs>
 80107de:	f000 fce7 	bl	80111b0 <atan>
 80107e2:	ed8d 0b00 	vstr	d0, [sp]
 80107e6:	2c01      	cmp	r4, #1
 80107e8:	d00e      	beq.n	8010808 <__ieee754_atan2+0x108>
 80107ea:	2c02      	cmp	r4, #2
 80107ec:	d014      	beq.n	8010818 <__ieee754_atan2+0x118>
 80107ee:	b9f4      	cbnz	r4, 801082e <__ieee754_atan2+0x12e>
 80107f0:	ed9d 0b00 	vldr	d0, [sp]
 80107f4:	b003      	add	sp, #12
 80107f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107f8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8010860 <__ieee754_atan2+0x160>
 80107fc:	ed8d 7b00 	vstr	d7, [sp]
 8010800:	e7f1      	b.n	80107e6 <__ieee754_atan2+0xe6>
 8010802:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8010870 <__ieee754_atan2+0x170>
 8010806:	e7f9      	b.n	80107fc <__ieee754_atan2+0xfc>
 8010808:	e9dd 2300 	ldrd	r2, r3, [sp]
 801080c:	9901      	ldr	r1, [sp, #4]
 801080e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010812:	e9cd 2300 	strd	r2, r3, [sp]
 8010816:	e7eb      	b.n	80107f0 <__ieee754_atan2+0xf0>
 8010818:	ed9d 6b00 	vldr	d6, [sp]
 801081c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010878 <__ieee754_atan2+0x178>
 8010820:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010824:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8010880 <__ieee754_atan2+0x180>
 8010828:	ee36 7b47 	vsub.f64	d7, d6, d7
 801082c:	e788      	b.n	8010740 <__ieee754_atan2+0x40>
 801082e:	ed9d 6b00 	vldr	d6, [sp]
 8010832:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8010878 <__ieee754_atan2+0x178>
 8010836:	ee36 7b47 	vsub.f64	d7, d6, d7
 801083a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8010880 <__ieee754_atan2+0x180>
 801083e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010842:	e77d      	b.n	8010740 <__ieee754_atan2+0x40>
 8010844:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010880 <__ieee754_atan2+0x180>
 8010848:	e77a      	b.n	8010740 <__ieee754_atan2+0x40>
 801084a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010888 <__ieee754_atan2+0x188>
 801084e:	e777      	b.n	8010740 <__ieee754_atan2+0x40>
 8010850:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010870 <__ieee754_atan2+0x170>
 8010854:	e774      	b.n	8010740 <__ieee754_atan2+0x40>
 8010856:	bf00      	nop
 8010858:	54442d18 	.word	0x54442d18
 801085c:	c00921fb 	.word	0xc00921fb
 8010860:	54442d18 	.word	0x54442d18
 8010864:	3ff921fb 	.word	0x3ff921fb
 8010868:	54442d18 	.word	0x54442d18
 801086c:	bff921fb 	.word	0xbff921fb
	...
 8010878:	33145c07 	.word	0x33145c07
 801087c:	3ca1a626 	.word	0x3ca1a626
 8010880:	54442d18 	.word	0x54442d18
 8010884:	400921fb 	.word	0x400921fb
 8010888:	54442d18 	.word	0x54442d18
 801088c:	3fe921fb 	.word	0x3fe921fb
 8010890:	7ff00000 	.word	0x7ff00000
 8010894:	08011620 	.word	0x08011620
 8010898:	08011638 	.word	0x08011638
 801089c:	00000000 	.word	0x00000000

080108a0 <__ieee754_rem_pio2>:
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	eeb0 7b40 	vmov.f64	d7, d0
 80108a6:	ee17 5a90 	vmov	r5, s15
 80108aa:	4b97      	ldr	r3, [pc, #604]	; (8010b08 <__ieee754_rem_pio2+0x268>)
 80108ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80108b0:	429e      	cmp	r6, r3
 80108b2:	b088      	sub	sp, #32
 80108b4:	4604      	mov	r4, r0
 80108b6:	dc07      	bgt.n	80108c8 <__ieee754_rem_pio2+0x28>
 80108b8:	2200      	movs	r2, #0
 80108ba:	2300      	movs	r3, #0
 80108bc:	ed84 0b00 	vstr	d0, [r4]
 80108c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80108c4:	2000      	movs	r0, #0
 80108c6:	e01b      	b.n	8010900 <__ieee754_rem_pio2+0x60>
 80108c8:	4b90      	ldr	r3, [pc, #576]	; (8010b0c <__ieee754_rem_pio2+0x26c>)
 80108ca:	429e      	cmp	r6, r3
 80108cc:	dc3b      	bgt.n	8010946 <__ieee754_rem_pio2+0xa6>
 80108ce:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80108d2:	2d00      	cmp	r5, #0
 80108d4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010ac8 <__ieee754_rem_pio2+0x228>
 80108d8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80108dc:	dd19      	ble.n	8010912 <__ieee754_rem_pio2+0x72>
 80108de:	ee30 7b46 	vsub.f64	d7, d0, d6
 80108e2:	429e      	cmp	r6, r3
 80108e4:	d00e      	beq.n	8010904 <__ieee754_rem_pio2+0x64>
 80108e6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8010ad0 <__ieee754_rem_pio2+0x230>
 80108ea:	ee37 5b46 	vsub.f64	d5, d7, d6
 80108ee:	ee37 7b45 	vsub.f64	d7, d7, d5
 80108f2:	ed84 5b00 	vstr	d5, [r4]
 80108f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80108fa:	ed84 7b02 	vstr	d7, [r4, #8]
 80108fe:	2001      	movs	r0, #1
 8010900:	b008      	add	sp, #32
 8010902:	bd70      	pop	{r4, r5, r6, pc}
 8010904:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010ad8 <__ieee754_rem_pio2+0x238>
 8010908:	ee37 7b46 	vsub.f64	d7, d7, d6
 801090c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010ae0 <__ieee754_rem_pio2+0x240>
 8010910:	e7eb      	b.n	80108ea <__ieee754_rem_pio2+0x4a>
 8010912:	429e      	cmp	r6, r3
 8010914:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010918:	d00e      	beq.n	8010938 <__ieee754_rem_pio2+0x98>
 801091a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8010ad0 <__ieee754_rem_pio2+0x230>
 801091e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010922:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010926:	ed84 5b00 	vstr	d5, [r4]
 801092a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801092e:	f04f 30ff 	mov.w	r0, #4294967295
 8010932:	ed84 7b02 	vstr	d7, [r4, #8]
 8010936:	e7e3      	b.n	8010900 <__ieee754_rem_pio2+0x60>
 8010938:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010ad8 <__ieee754_rem_pio2+0x238>
 801093c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010940:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010ae0 <__ieee754_rem_pio2+0x240>
 8010944:	e7eb      	b.n	801091e <__ieee754_rem_pio2+0x7e>
 8010946:	4b72      	ldr	r3, [pc, #456]	; (8010b10 <__ieee754_rem_pio2+0x270>)
 8010948:	429e      	cmp	r6, r3
 801094a:	dc6e      	bgt.n	8010a2a <__ieee754_rem_pio2+0x18a>
 801094c:	f000 fd2a 	bl	80113a4 <fabs>
 8010950:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010954:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8010ae8 <__ieee754_rem_pio2+0x248>
 8010958:	eea0 7b06 	vfma.f64	d7, d0, d6
 801095c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010960:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010964:	ee17 0a90 	vmov	r0, s15
 8010968:	eeb1 4b45 	vneg.f64	d4, d5
 801096c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010ac8 <__ieee754_rem_pio2+0x228>
 8010970:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010974:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010ad0 <__ieee754_rem_pio2+0x230>
 8010978:	281f      	cmp	r0, #31
 801097a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801097e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010982:	dc08      	bgt.n	8010996 <__ieee754_rem_pio2+0xf6>
 8010984:	4b63      	ldr	r3, [pc, #396]	; (8010b14 <__ieee754_rem_pio2+0x274>)
 8010986:	1e42      	subs	r2, r0, #1
 8010988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801098c:	42b3      	cmp	r3, r6
 801098e:	d002      	beq.n	8010996 <__ieee754_rem_pio2+0xf6>
 8010990:	ed84 6b00 	vstr	d6, [r4]
 8010994:	e024      	b.n	80109e0 <__ieee754_rem_pio2+0x140>
 8010996:	ee16 3a90 	vmov	r3, s13
 801099a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801099e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80109a2:	2b10      	cmp	r3, #16
 80109a4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80109a8:	ddf2      	ble.n	8010990 <__ieee754_rem_pio2+0xf0>
 80109aa:	eeb0 6b40 	vmov.f64	d6, d0
 80109ae:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8010ad8 <__ieee754_rem_pio2+0x238>
 80109b2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80109b6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80109ba:	eea4 7b03 	vfma.f64	d7, d4, d3
 80109be:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8010ae0 <__ieee754_rem_pio2+0x240>
 80109c2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80109c6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80109ca:	ee13 3a90 	vmov	r3, s7
 80109ce:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80109d2:	1ad3      	subs	r3, r2, r3
 80109d4:	2b31      	cmp	r3, #49	; 0x31
 80109d6:	dc17      	bgt.n	8010a08 <__ieee754_rem_pio2+0x168>
 80109d8:	eeb0 0b46 	vmov.f64	d0, d6
 80109dc:	ed84 3b00 	vstr	d3, [r4]
 80109e0:	ed94 6b00 	vldr	d6, [r4]
 80109e4:	2d00      	cmp	r5, #0
 80109e6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80109ea:	ee30 7b47 	vsub.f64	d7, d0, d7
 80109ee:	ed84 7b02 	vstr	d7, [r4, #8]
 80109f2:	da85      	bge.n	8010900 <__ieee754_rem_pio2+0x60>
 80109f4:	eeb1 6b46 	vneg.f64	d6, d6
 80109f8:	ed84 6b00 	vstr	d6, [r4]
 80109fc:	eeb1 7b47 	vneg.f64	d7, d7
 8010a00:	4240      	negs	r0, r0
 8010a02:	ed84 7b02 	vstr	d7, [r4, #8]
 8010a06:	e77b      	b.n	8010900 <__ieee754_rem_pio2+0x60>
 8010a08:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8010af0 <__ieee754_rem_pio2+0x250>
 8010a0c:	eeb0 0b46 	vmov.f64	d0, d6
 8010a10:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010a14:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010a18:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8010af8 <__ieee754_rem_pio2+0x258>
 8010a1c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010a20:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010a24:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010a28:	e7b2      	b.n	8010990 <__ieee754_rem_pio2+0xf0>
 8010a2a:	4b3b      	ldr	r3, [pc, #236]	; (8010b18 <__ieee754_rem_pio2+0x278>)
 8010a2c:	429e      	cmp	r6, r3
 8010a2e:	dd06      	ble.n	8010a3e <__ieee754_rem_pio2+0x19e>
 8010a30:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010a34:	ed80 7b02 	vstr	d7, [r0, #8]
 8010a38:	ed80 7b00 	vstr	d7, [r0]
 8010a3c:	e742      	b.n	80108c4 <__ieee754_rem_pio2+0x24>
 8010a3e:	1532      	asrs	r2, r6, #20
 8010a40:	ee10 0a10 	vmov	r0, s0
 8010a44:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010a48:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010a4c:	ec41 0b17 	vmov	d7, r0, r1
 8010a50:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010a54:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8010b00 <__ieee754_rem_pio2+0x260>
 8010a58:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010a5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010a60:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010a64:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010a68:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010a6c:	a902      	add	r1, sp, #8
 8010a6e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010a72:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010a76:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010a7a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010a7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010a82:	2603      	movs	r6, #3
 8010a84:	4608      	mov	r0, r1
 8010a86:	ed91 7b04 	vldr	d7, [r1, #16]
 8010a8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a92:	4633      	mov	r3, r6
 8010a94:	f1a1 0108 	sub.w	r1, r1, #8
 8010a98:	f106 36ff 	add.w	r6, r6, #4294967295
 8010a9c:	d0f3      	beq.n	8010a86 <__ieee754_rem_pio2+0x1e6>
 8010a9e:	491f      	ldr	r1, [pc, #124]	; (8010b1c <__ieee754_rem_pio2+0x27c>)
 8010aa0:	9101      	str	r1, [sp, #4]
 8010aa2:	2102      	movs	r1, #2
 8010aa4:	9100      	str	r1, [sp, #0]
 8010aa6:	4621      	mov	r1, r4
 8010aa8:	f000 f8aa 	bl	8010c00 <__kernel_rem_pio2>
 8010aac:	2d00      	cmp	r5, #0
 8010aae:	f6bf af27 	bge.w	8010900 <__ieee754_rem_pio2+0x60>
 8010ab2:	ed94 7b00 	vldr	d7, [r4]
 8010ab6:	eeb1 7b47 	vneg.f64	d7, d7
 8010aba:	ed84 7b00 	vstr	d7, [r4]
 8010abe:	ed94 7b02 	vldr	d7, [r4, #8]
 8010ac2:	e79b      	b.n	80109fc <__ieee754_rem_pio2+0x15c>
 8010ac4:	f3af 8000 	nop.w
 8010ac8:	54400000 	.word	0x54400000
 8010acc:	3ff921fb 	.word	0x3ff921fb
 8010ad0:	1a626331 	.word	0x1a626331
 8010ad4:	3dd0b461 	.word	0x3dd0b461
 8010ad8:	1a600000 	.word	0x1a600000
 8010adc:	3dd0b461 	.word	0x3dd0b461
 8010ae0:	2e037073 	.word	0x2e037073
 8010ae4:	3ba3198a 	.word	0x3ba3198a
 8010ae8:	6dc9c883 	.word	0x6dc9c883
 8010aec:	3fe45f30 	.word	0x3fe45f30
 8010af0:	2e000000 	.word	0x2e000000
 8010af4:	3ba3198a 	.word	0x3ba3198a
 8010af8:	252049c1 	.word	0x252049c1
 8010afc:	397b839a 	.word	0x397b839a
 8010b00:	00000000 	.word	0x00000000
 8010b04:	41700000 	.word	0x41700000
 8010b08:	3fe921fb 	.word	0x3fe921fb
 8010b0c:	4002d97b 	.word	0x4002d97b
 8010b10:	413921fb 	.word	0x413921fb
 8010b14:	08011650 	.word	0x08011650
 8010b18:	7fefffff 	.word	0x7fefffff
 8010b1c:	080116d0 	.word	0x080116d0

08010b20 <__ieee754_sqrt>:
 8010b20:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010b24:	4770      	bx	lr
	...

08010b28 <__kernel_cos>:
 8010b28:	ee10 1a90 	vmov	r1, s1
 8010b2c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010b30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010b34:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010b38:	da05      	bge.n	8010b46 <__kernel_cos+0x1e>
 8010b3a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010b3e:	ee17 3a90 	vmov	r3, s15
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d03d      	beq.n	8010bc2 <__kernel_cos+0x9a>
 8010b46:	ee20 3b00 	vmul.f64	d3, d0, d0
 8010b4a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010bc8 <__kernel_cos+0xa0>
 8010b4e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010bd0 <__kernel_cos+0xa8>
 8010b52:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010b56:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010bd8 <__kernel_cos+0xb0>
 8010b5a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010b5e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010be0 <__kernel_cos+0xb8>
 8010b62:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010b66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010be8 <__kernel_cos+0xc0>
 8010b6a:	4b23      	ldr	r3, [pc, #140]	; (8010bf8 <__kernel_cos+0xd0>)
 8010b6c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010b70:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010bf0 <__kernel_cos+0xc8>
 8010b74:	4299      	cmp	r1, r3
 8010b76:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010b7a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010b7e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010b82:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010b86:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010b8a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010b8e:	dc04      	bgt.n	8010b9a <__kernel_cos+0x72>
 8010b90:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010b94:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010b98:	4770      	bx	lr
 8010b9a:	4b18      	ldr	r3, [pc, #96]	; (8010bfc <__kernel_cos+0xd4>)
 8010b9c:	4299      	cmp	r1, r3
 8010b9e:	dc0d      	bgt.n	8010bbc <__kernel_cos+0x94>
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010ba6:	ec43 2b15 	vmov	d5, r2, r3
 8010baa:	ee34 0b45 	vsub.f64	d0, d4, d5
 8010bae:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010bb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010bb6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010bba:	4770      	bx	lr
 8010bbc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010bc0:	e7f3      	b.n	8010baa <__kernel_cos+0x82>
 8010bc2:	eeb0 0b44 	vmov.f64	d0, d4
 8010bc6:	4770      	bx	lr
 8010bc8:	be8838d4 	.word	0xbe8838d4
 8010bcc:	bda8fae9 	.word	0xbda8fae9
 8010bd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8010bd4:	3e21ee9e 	.word	0x3e21ee9e
 8010bd8:	809c52ad 	.word	0x809c52ad
 8010bdc:	be927e4f 	.word	0xbe927e4f
 8010be0:	19cb1590 	.word	0x19cb1590
 8010be4:	3efa01a0 	.word	0x3efa01a0
 8010be8:	16c15177 	.word	0x16c15177
 8010bec:	bf56c16c 	.word	0xbf56c16c
 8010bf0:	5555554c 	.word	0x5555554c
 8010bf4:	3fa55555 	.word	0x3fa55555
 8010bf8:	3fd33332 	.word	0x3fd33332
 8010bfc:	3fe90000 	.word	0x3fe90000

08010c00 <__kernel_rem_pio2>:
 8010c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c04:	ed2d 8b06 	vpush	{d8-d10}
 8010c08:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8010c0c:	469b      	mov	fp, r3
 8010c0e:	460f      	mov	r7, r1
 8010c10:	4bcf      	ldr	r3, [pc, #828]	; (8010f50 <__kernel_rem_pio2+0x350>)
 8010c12:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8010c14:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8010c18:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8010c1c:	9000      	str	r0, [sp, #0]
 8010c1e:	f112 0f14 	cmn.w	r2, #20
 8010c22:	bfa8      	it	ge
 8010c24:	2318      	movge	r3, #24
 8010c26:	f10b 31ff 	add.w	r1, fp, #4294967295
 8010c2a:	bfb8      	it	lt
 8010c2c:	2300      	movlt	r3, #0
 8010c2e:	f06f 0417 	mvn.w	r4, #23
 8010c32:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010f38 <__kernel_rem_pio2+0x338>
 8010c36:	bfa4      	itt	ge
 8010c38:	f1a2 0a03 	subge.w	sl, r2, #3
 8010c3c:	fb9a f3f3 	sdivge	r3, sl, r3
 8010c40:	fb03 4404 	mla	r4, r3, r4, r4
 8010c44:	1a5d      	subs	r5, r3, r1
 8010c46:	4414      	add	r4, r2
 8010c48:	eb09 0601 	add.w	r6, r9, r1
 8010c4c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8010c50:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8010c54:	2200      	movs	r2, #0
 8010c56:	42b2      	cmp	r2, r6
 8010c58:	dd12      	ble.n	8010c80 <__kernel_rem_pio2+0x80>
 8010c5a:	aa18      	add	r2, sp, #96	; 0x60
 8010c5c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010c60:	460e      	mov	r6, r1
 8010c62:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8010c66:	f1cb 0a01 	rsb	sl, fp, #1
 8010c6a:	eb0a 0006 	add.w	r0, sl, r6
 8010c6e:	4581      	cmp	r9, r0
 8010c70:	db25      	blt.n	8010cbe <__kernel_rem_pio2+0xbe>
 8010c72:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010f38 <__kernel_rem_pio2+0x338>
 8010c76:	f8dd e000 	ldr.w	lr, [sp]
 8010c7a:	4615      	mov	r5, r2
 8010c7c:	2000      	movs	r0, #0
 8010c7e:	e015      	b.n	8010cac <__kernel_rem_pio2+0xac>
 8010c80:	42d5      	cmn	r5, r2
 8010c82:	d409      	bmi.n	8010c98 <__kernel_rem_pio2+0x98>
 8010c84:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010c88:	ee07 0a90 	vmov	s15, r0
 8010c8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c90:	eca8 7b02 	vstmia	r8!, {d7}
 8010c94:	3201      	adds	r2, #1
 8010c96:	e7de      	b.n	8010c56 <__kernel_rem_pio2+0x56>
 8010c98:	eeb0 7b46 	vmov.f64	d7, d6
 8010c9c:	e7f8      	b.n	8010c90 <__kernel_rem_pio2+0x90>
 8010c9e:	ecbe 5b02 	vldmia	lr!, {d5}
 8010ca2:	ed95 6b00 	vldr	d6, [r5]
 8010ca6:	3001      	adds	r0, #1
 8010ca8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010cac:	4288      	cmp	r0, r1
 8010cae:	f1a5 0508 	sub.w	r5, r5, #8
 8010cb2:	ddf4      	ble.n	8010c9e <__kernel_rem_pio2+0x9e>
 8010cb4:	eca8 7b02 	vstmia	r8!, {d7}
 8010cb8:	3208      	adds	r2, #8
 8010cba:	3601      	adds	r6, #1
 8010cbc:	e7d5      	b.n	8010c6a <__kernel_rem_pio2+0x6a>
 8010cbe:	aa04      	add	r2, sp, #16
 8010cc0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010f40 <__kernel_rem_pio2+0x340>
 8010cc4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010f48 <__kernel_rem_pio2+0x348>
 8010cc8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010ccc:	9201      	str	r2, [sp, #4]
 8010cce:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8010cd2:	464e      	mov	r6, r9
 8010cd4:	ab90      	add	r3, sp, #576	; 0x240
 8010cd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010cda:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8010cde:	ab04      	add	r3, sp, #16
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	4632      	mov	r2, r6
 8010ce4:	2a00      	cmp	r2, #0
 8010ce6:	dc4e      	bgt.n	8010d86 <__kernel_rem_pio2+0x186>
 8010ce8:	4620      	mov	r0, r4
 8010cea:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8010cee:	f000 fbd7 	bl	80114a0 <scalbn>
 8010cf2:	eeb0 8b40 	vmov.f64	d8, d0
 8010cf6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010cfa:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010cfe:	f000 fb5b 	bl	80113b8 <floor>
 8010d02:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010d06:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010d0a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010d0e:	2c00      	cmp	r4, #0
 8010d10:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010d14:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010d18:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010d1c:	ee17 8a90 	vmov	r8, s15
 8010d20:	dd46      	ble.n	8010db0 <__kernel_rem_pio2+0x1b0>
 8010d22:	1e70      	subs	r0, r6, #1
 8010d24:	aa04      	add	r2, sp, #16
 8010d26:	f1c4 0c18 	rsb	ip, r4, #24
 8010d2a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8010d2e:	fa45 f20c 	asr.w	r2, r5, ip
 8010d32:	4490      	add	r8, r2
 8010d34:	fa02 f20c 	lsl.w	r2, r2, ip
 8010d38:	1aad      	subs	r5, r5, r2
 8010d3a:	aa04      	add	r2, sp, #16
 8010d3c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010d40:	f1c4 0217 	rsb	r2, r4, #23
 8010d44:	4115      	asrs	r5, r2
 8010d46:	2d00      	cmp	r5, #0
 8010d48:	dd41      	ble.n	8010dce <__kernel_rem_pio2+0x1ce>
 8010d4a:	f04f 0c00 	mov.w	ip, #0
 8010d4e:	f108 0801 	add.w	r8, r8, #1
 8010d52:	4660      	mov	r0, ip
 8010d54:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010d58:	4566      	cmp	r6, ip
 8010d5a:	dc69      	bgt.n	8010e30 <__kernel_rem_pio2+0x230>
 8010d5c:	2c00      	cmp	r4, #0
 8010d5e:	dd03      	ble.n	8010d68 <__kernel_rem_pio2+0x168>
 8010d60:	2c01      	cmp	r4, #1
 8010d62:	d076      	beq.n	8010e52 <__kernel_rem_pio2+0x252>
 8010d64:	2c02      	cmp	r4, #2
 8010d66:	d07f      	beq.n	8010e68 <__kernel_rem_pio2+0x268>
 8010d68:	2d02      	cmp	r5, #2
 8010d6a:	d130      	bne.n	8010dce <__kernel_rem_pio2+0x1ce>
 8010d6c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010d70:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010d74:	b358      	cbz	r0, 8010dce <__kernel_rem_pio2+0x1ce>
 8010d76:	4620      	mov	r0, r4
 8010d78:	9102      	str	r1, [sp, #8]
 8010d7a:	f000 fb91 	bl	80114a0 <scalbn>
 8010d7e:	9902      	ldr	r1, [sp, #8]
 8010d80:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010d84:	e023      	b.n	8010dce <__kernel_rem_pio2+0x1ce>
 8010d86:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010d8a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010d8e:	3a01      	subs	r2, #1
 8010d90:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010d94:	ad68      	add	r5, sp, #416	; 0x1a0
 8010d96:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010d9a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010d9e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010da2:	eca0 0a01 	vstmia	r0!, {s0}
 8010da6:	ed95 0b00 	vldr	d0, [r5]
 8010daa:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010dae:	e799      	b.n	8010ce4 <__kernel_rem_pio2+0xe4>
 8010db0:	d105      	bne.n	8010dbe <__kernel_rem_pio2+0x1be>
 8010db2:	1e72      	subs	r2, r6, #1
 8010db4:	a804      	add	r0, sp, #16
 8010db6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8010dba:	15ed      	asrs	r5, r5, #23
 8010dbc:	e7c3      	b.n	8010d46 <__kernel_rem_pio2+0x146>
 8010dbe:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010dc2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dca:	da2f      	bge.n	8010e2c <__kernel_rem_pio2+0x22c>
 8010dcc:	2500      	movs	r5, #0
 8010dce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd6:	f040 8087 	bne.w	8010ee8 <__kernel_rem_pio2+0x2e8>
 8010dda:	1e73      	subs	r3, r6, #1
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f04f 0c00 	mov.w	ip, #0
 8010de2:	4548      	cmp	r0, r9
 8010de4:	da47      	bge.n	8010e76 <__kernel_rem_pio2+0x276>
 8010de6:	f1bc 0f00 	cmp.w	ip, #0
 8010dea:	d070      	beq.n	8010ece <__kernel_rem_pio2+0x2ce>
 8010dec:	aa04      	add	r2, sp, #16
 8010dee:	3c18      	subs	r4, #24
 8010df0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010df4:	2a00      	cmp	r2, #0
 8010df6:	d075      	beq.n	8010ee4 <__kernel_rem_pio2+0x2e4>
 8010df8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	9300      	str	r3, [sp, #0]
 8010e00:	f000 fb4e 	bl	80114a0 <scalbn>
 8010e04:	9b00      	ldr	r3, [sp, #0]
 8010e06:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010f40 <__kernel_rem_pio2+0x340>
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	2a00      	cmp	r2, #0
 8010e0e:	f280 80ac 	bge.w	8010f6a <__kernel_rem_pio2+0x36a>
 8010e12:	4619      	mov	r1, r3
 8010e14:	2000      	movs	r0, #0
 8010e16:	2900      	cmp	r1, #0
 8010e18:	f2c0 80cd 	blt.w	8010fb6 <__kernel_rem_pio2+0x3b6>
 8010e1c:	aa68      	add	r2, sp, #416	; 0x1a0
 8010e1e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010e22:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010f38 <__kernel_rem_pio2+0x338>
 8010e26:	4e4b      	ldr	r6, [pc, #300]	; (8010f54 <__kernel_rem_pio2+0x354>)
 8010e28:	2200      	movs	r2, #0
 8010e2a:	e0b8      	b.n	8010f9e <__kernel_rem_pio2+0x39e>
 8010e2c:	2502      	movs	r5, #2
 8010e2e:	e78c      	b.n	8010d4a <__kernel_rem_pio2+0x14a>
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	b948      	cbnz	r0, 8010e48 <__kernel_rem_pio2+0x248>
 8010e34:	b11a      	cbz	r2, 8010e3e <__kernel_rem_pio2+0x23e>
 8010e36:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010e3a:	601a      	str	r2, [r3, #0]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	f10c 0c01 	add.w	ip, ip, #1
 8010e42:	3304      	adds	r3, #4
 8010e44:	4610      	mov	r0, r2
 8010e46:	e787      	b.n	8010d58 <__kernel_rem_pio2+0x158>
 8010e48:	ebae 0202 	sub.w	r2, lr, r2
 8010e4c:	601a      	str	r2, [r3, #0]
 8010e4e:	4602      	mov	r2, r0
 8010e50:	e7f5      	b.n	8010e3e <__kernel_rem_pio2+0x23e>
 8010e52:	1e72      	subs	r2, r6, #1
 8010e54:	ab04      	add	r3, sp, #16
 8010e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e5a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010e5e:	f10d 0c10 	add.w	ip, sp, #16
 8010e62:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010e66:	e77f      	b.n	8010d68 <__kernel_rem_pio2+0x168>
 8010e68:	1e72      	subs	r2, r6, #1
 8010e6a:	ab04      	add	r3, sp, #16
 8010e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e70:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010e74:	e7f3      	b.n	8010e5e <__kernel_rem_pio2+0x25e>
 8010e76:	aa04      	add	r2, sp, #16
 8010e78:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010e7c:	3801      	subs	r0, #1
 8010e7e:	ea4c 0c02 	orr.w	ip, ip, r2
 8010e82:	e7ae      	b.n	8010de2 <__kernel_rem_pio2+0x1e2>
 8010e84:	3001      	adds	r0, #1
 8010e86:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010e8a:	2a00      	cmp	r2, #0
 8010e8c:	d0fa      	beq.n	8010e84 <__kernel_rem_pio2+0x284>
 8010e8e:	eb06 020b 	add.w	r2, r6, fp
 8010e92:	ad18      	add	r5, sp, #96	; 0x60
 8010e94:	1c73      	adds	r3, r6, #1
 8010e96:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010e9a:	4406      	add	r6, r0
 8010e9c:	429e      	cmp	r6, r3
 8010e9e:	f6ff af19 	blt.w	8010cd4 <__kernel_rem_pio2+0xd4>
 8010ea2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010ea6:	9d00      	ldr	r5, [sp, #0]
 8010ea8:	ee07 0a90 	vmov	s15, r0
 8010eac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010eb0:	2000      	movs	r0, #0
 8010eb2:	eca2 7b02 	vstmia	r2!, {d7}
 8010eb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010f38 <__kernel_rem_pio2+0x338>
 8010eba:	4694      	mov	ip, r2
 8010ebc:	4288      	cmp	r0, r1
 8010ebe:	dd09      	ble.n	8010ed4 <__kernel_rem_pio2+0x2d4>
 8010ec0:	a868      	add	r0, sp, #416	; 0x1a0
 8010ec2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8010ec6:	ed80 7b00 	vstr	d7, [r0]
 8010eca:	3301      	adds	r3, #1
 8010ecc:	e7e6      	b.n	8010e9c <__kernel_rem_pio2+0x29c>
 8010ece:	9b01      	ldr	r3, [sp, #4]
 8010ed0:	2001      	movs	r0, #1
 8010ed2:	e7d8      	b.n	8010e86 <__kernel_rem_pio2+0x286>
 8010ed4:	ecb5 5b02 	vldmia	r5!, {d5}
 8010ed8:	ed3c 6b02 	vldmdb	ip!, {d6}
 8010edc:	3001      	adds	r0, #1
 8010ede:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010ee2:	e7eb      	b.n	8010ebc <__kernel_rem_pio2+0x2bc>
 8010ee4:	3b01      	subs	r3, #1
 8010ee6:	e781      	b.n	8010dec <__kernel_rem_pio2+0x1ec>
 8010ee8:	4260      	negs	r0, r4
 8010eea:	eeb0 0b48 	vmov.f64	d0, d8
 8010eee:	f000 fad7 	bl	80114a0 <scalbn>
 8010ef2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010f48 <__kernel_rem_pio2+0x348>
 8010ef6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efe:	db2b      	blt.n	8010f58 <__kernel_rem_pio2+0x358>
 8010f00:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010f40 <__kernel_rem_pio2+0x340>
 8010f04:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010f08:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010f0c:	aa04      	add	r2, sp, #16
 8010f0e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010f12:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010f16:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010f1a:	a904      	add	r1, sp, #16
 8010f1c:	ee10 3a10 	vmov	r3, s0
 8010f20:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010f24:	ee17 2a10 	vmov	r2, s14
 8010f28:	1c73      	adds	r3, r6, #1
 8010f2a:	3418      	adds	r4, #24
 8010f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010f30:	e762      	b.n	8010df8 <__kernel_rem_pio2+0x1f8>
 8010f32:	bf00      	nop
 8010f34:	f3af 8000 	nop.w
	...
 8010f44:	3e700000 	.word	0x3e700000
 8010f48:	00000000 	.word	0x00000000
 8010f4c:	41700000 	.word	0x41700000
 8010f50:	08011818 	.word	0x08011818
 8010f54:	080117d8 	.word	0x080117d8
 8010f58:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010f5c:	aa04      	add	r2, sp, #16
 8010f5e:	ee10 3a10 	vmov	r3, s0
 8010f62:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010f66:	4633      	mov	r3, r6
 8010f68:	e746      	b.n	8010df8 <__kernel_rem_pio2+0x1f8>
 8010f6a:	a804      	add	r0, sp, #16
 8010f6c:	a968      	add	r1, sp, #416	; 0x1a0
 8010f6e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010f72:	9000      	str	r0, [sp, #0]
 8010f74:	ee07 0a90 	vmov	s15, r0
 8010f78:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010f7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010f80:	3a01      	subs	r2, #1
 8010f82:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010f86:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010f8a:	ed81 7b00 	vstr	d7, [r1]
 8010f8e:	e73d      	b.n	8010e0c <__kernel_rem_pio2+0x20c>
 8010f90:	ecb6 5b02 	vldmia	r6!, {d5}
 8010f94:	ecb4 6b02 	vldmia	r4!, {d6}
 8010f98:	3201      	adds	r2, #1
 8010f9a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010f9e:	454a      	cmp	r2, r9
 8010fa0:	dc01      	bgt.n	8010fa6 <__kernel_rem_pio2+0x3a6>
 8010fa2:	4290      	cmp	r0, r2
 8010fa4:	daf4      	bge.n	8010f90 <__kernel_rem_pio2+0x390>
 8010fa6:	aa40      	add	r2, sp, #256	; 0x100
 8010fa8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010fac:	ed82 7b00 	vstr	d7, [r2]
 8010fb0:	3901      	subs	r1, #1
 8010fb2:	3001      	adds	r0, #1
 8010fb4:	e72f      	b.n	8010e16 <__kernel_rem_pio2+0x216>
 8010fb6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010fb8:	2a02      	cmp	r2, #2
 8010fba:	dc0a      	bgt.n	8010fd2 <__kernel_rem_pio2+0x3d2>
 8010fbc:	2a00      	cmp	r2, #0
 8010fbe:	dc5a      	bgt.n	8011076 <__kernel_rem_pio2+0x476>
 8010fc0:	d039      	beq.n	8011036 <__kernel_rem_pio2+0x436>
 8010fc2:	f008 0007 	and.w	r0, r8, #7
 8010fc6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010fca:	ecbd 8b06 	vpop	{d8-d10}
 8010fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010fd4:	2a03      	cmp	r2, #3
 8010fd6:	d1f4      	bne.n	8010fc2 <__kernel_rem_pio2+0x3c2>
 8010fd8:	aa40      	add	r2, sp, #256	; 0x100
 8010fda:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010fde:	4611      	mov	r1, r2
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	2800      	cmp	r0, #0
 8010fe4:	f1a1 0108 	sub.w	r1, r1, #8
 8010fe8:	dc52      	bgt.n	8011090 <__kernel_rem_pio2+0x490>
 8010fea:	4619      	mov	r1, r3
 8010fec:	2901      	cmp	r1, #1
 8010fee:	f1a2 0208 	sub.w	r2, r2, #8
 8010ff2:	dc5d      	bgt.n	80110b0 <__kernel_rem_pio2+0x4b0>
 8010ff4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80110f8 <__kernel_rem_pio2+0x4f8>
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	dc69      	bgt.n	80110d0 <__kernel_rem_pio2+0x4d0>
 8010ffc:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8011000:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8011004:	2d00      	cmp	r5, #0
 8011006:	d16c      	bne.n	80110e2 <__kernel_rem_pio2+0x4e2>
 8011008:	ed87 5b00 	vstr	d5, [r7]
 801100c:	ed87 6b02 	vstr	d6, [r7, #8]
 8011010:	ed87 7b04 	vstr	d7, [r7, #16]
 8011014:	e7d5      	b.n	8010fc2 <__kernel_rem_pio2+0x3c2>
 8011016:	aa40      	add	r2, sp, #256	; 0x100
 8011018:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801101c:	ed92 6b00 	vldr	d6, [r2]
 8011020:	3b01      	subs	r3, #1
 8011022:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011026:	2b00      	cmp	r3, #0
 8011028:	daf5      	bge.n	8011016 <__kernel_rem_pio2+0x416>
 801102a:	b10d      	cbz	r5, 8011030 <__kernel_rem_pio2+0x430>
 801102c:	eeb1 7b47 	vneg.f64	d7, d7
 8011030:	ed87 7b00 	vstr	d7, [r7]
 8011034:	e7c5      	b.n	8010fc2 <__kernel_rem_pio2+0x3c2>
 8011036:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80110f8 <__kernel_rem_pio2+0x4f8>
 801103a:	e7f4      	b.n	8011026 <__kernel_rem_pio2+0x426>
 801103c:	a940      	add	r1, sp, #256	; 0x100
 801103e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011042:	ed91 7b00 	vldr	d7, [r1]
 8011046:	3a01      	subs	r2, #1
 8011048:	ee36 6b07 	vadd.f64	d6, d6, d7
 801104c:	2a00      	cmp	r2, #0
 801104e:	daf5      	bge.n	801103c <__kernel_rem_pio2+0x43c>
 8011050:	b1ad      	cbz	r5, 801107e <__kernel_rem_pio2+0x47e>
 8011052:	eeb1 7b46 	vneg.f64	d7, d6
 8011056:	ed87 7b00 	vstr	d7, [r7]
 801105a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 801105e:	a942      	add	r1, sp, #264	; 0x108
 8011060:	2201      	movs	r2, #1
 8011062:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011066:	4293      	cmp	r3, r2
 8011068:	da0c      	bge.n	8011084 <__kernel_rem_pio2+0x484>
 801106a:	b10d      	cbz	r5, 8011070 <__kernel_rem_pio2+0x470>
 801106c:	eeb1 7b47 	vneg.f64	d7, d7
 8011070:	ed87 7b02 	vstr	d7, [r7, #8]
 8011074:	e7a5      	b.n	8010fc2 <__kernel_rem_pio2+0x3c2>
 8011076:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80110f8 <__kernel_rem_pio2+0x4f8>
 801107a:	461a      	mov	r2, r3
 801107c:	e7e6      	b.n	801104c <__kernel_rem_pio2+0x44c>
 801107e:	eeb0 7b46 	vmov.f64	d7, d6
 8011082:	e7e8      	b.n	8011056 <__kernel_rem_pio2+0x456>
 8011084:	ecb1 6b02 	vldmia	r1!, {d6}
 8011088:	3201      	adds	r2, #1
 801108a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801108e:	e7ea      	b.n	8011066 <__kernel_rem_pio2+0x466>
 8011090:	ed91 7b00 	vldr	d7, [r1]
 8011094:	ed91 5b02 	vldr	d5, [r1, #8]
 8011098:	3801      	subs	r0, #1
 801109a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801109e:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110a2:	ed81 6b00 	vstr	d6, [r1]
 80110a6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80110aa:	ed81 7b02 	vstr	d7, [r1, #8]
 80110ae:	e798      	b.n	8010fe2 <__kernel_rem_pio2+0x3e2>
 80110b0:	ed92 7b00 	vldr	d7, [r2]
 80110b4:	ed92 5b02 	vldr	d5, [r2, #8]
 80110b8:	3901      	subs	r1, #1
 80110ba:	ee37 6b05 	vadd.f64	d6, d7, d5
 80110be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110c2:	ed82 6b00 	vstr	d6, [r2]
 80110c6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80110ca:	ed82 7b02 	vstr	d7, [r2, #8]
 80110ce:	e78d      	b.n	8010fec <__kernel_rem_pio2+0x3ec>
 80110d0:	aa40      	add	r2, sp, #256	; 0x100
 80110d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80110d6:	ed92 6b00 	vldr	d6, [r2]
 80110da:	3b01      	subs	r3, #1
 80110dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80110e0:	e78a      	b.n	8010ff8 <__kernel_rem_pio2+0x3f8>
 80110e2:	eeb1 5b45 	vneg.f64	d5, d5
 80110e6:	eeb1 6b46 	vneg.f64	d6, d6
 80110ea:	ed87 5b00 	vstr	d5, [r7]
 80110ee:	eeb1 7b47 	vneg.f64	d7, d7
 80110f2:	ed87 6b02 	vstr	d6, [r7, #8]
 80110f6:	e78b      	b.n	8011010 <__kernel_rem_pio2+0x410>
	...

08011100 <__kernel_sin>:
 8011100:	ee10 3a90 	vmov	r3, s1
 8011104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011108:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801110c:	da04      	bge.n	8011118 <__kernel_sin+0x18>
 801110e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011112:	ee17 3a90 	vmov	r3, s15
 8011116:	b35b      	cbz	r3, 8011170 <__kernel_sin+0x70>
 8011118:	ee20 6b00 	vmul.f64	d6, d0, d0
 801111c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011120:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011178 <__kernel_sin+0x78>
 8011124:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011180 <__kernel_sin+0x80>
 8011128:	eea6 4b07 	vfma.f64	d4, d6, d7
 801112c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011188 <__kernel_sin+0x88>
 8011130:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011134:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011190 <__kernel_sin+0x90>
 8011138:	eea7 4b06 	vfma.f64	d4, d7, d6
 801113c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011198 <__kernel_sin+0x98>
 8011140:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011144:	b930      	cbnz	r0, 8011154 <__kernel_sin+0x54>
 8011146:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80111a0 <__kernel_sin+0xa0>
 801114a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801114e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011152:	4770      	bx	lr
 8011154:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011158:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801115c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011160:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011164:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80111a8 <__kernel_sin+0xa8>
 8011168:	eea5 1b07 	vfma.f64	d1, d5, d7
 801116c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	f3af 8000 	nop.w
 8011178:	5acfd57c 	.word	0x5acfd57c
 801117c:	3de5d93a 	.word	0x3de5d93a
 8011180:	8a2b9ceb 	.word	0x8a2b9ceb
 8011184:	be5ae5e6 	.word	0xbe5ae5e6
 8011188:	57b1fe7d 	.word	0x57b1fe7d
 801118c:	3ec71de3 	.word	0x3ec71de3
 8011190:	19c161d5 	.word	0x19c161d5
 8011194:	bf2a01a0 	.word	0xbf2a01a0
 8011198:	1110f8a6 	.word	0x1110f8a6
 801119c:	3f811111 	.word	0x3f811111
 80111a0:	55555549 	.word	0x55555549
 80111a4:	bfc55555 	.word	0xbfc55555
 80111a8:	55555549 	.word	0x55555549
 80111ac:	3fc55555 	.word	0x3fc55555

080111b0 <atan>:
 80111b0:	b538      	push	{r3, r4, r5, lr}
 80111b2:	eeb0 7b40 	vmov.f64	d7, d0
 80111b6:	ee17 5a90 	vmov	r5, s15
 80111ba:	4b73      	ldr	r3, [pc, #460]	; (8011388 <atan+0x1d8>)
 80111bc:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80111c0:	429c      	cmp	r4, r3
 80111c2:	dd13      	ble.n	80111ec <atan+0x3c>
 80111c4:	4b71      	ldr	r3, [pc, #452]	; (801138c <atan+0x1dc>)
 80111c6:	429c      	cmp	r4, r3
 80111c8:	dc03      	bgt.n	80111d2 <atan+0x22>
 80111ca:	d107      	bne.n	80111dc <atan+0x2c>
 80111cc:	ee10 3a10 	vmov	r3, s0
 80111d0:	b123      	cbz	r3, 80111dc <atan+0x2c>
 80111d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80111d6:	eeb0 0b47 	vmov.f64	d0, d7
 80111da:	bd38      	pop	{r3, r4, r5, pc}
 80111dc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011318 <atan+0x168>
 80111e0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011320 <atan+0x170>
 80111e4:	2d00      	cmp	r5, #0
 80111e6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80111ea:	e7f4      	b.n	80111d6 <atan+0x26>
 80111ec:	4b68      	ldr	r3, [pc, #416]	; (8011390 <atan+0x1e0>)
 80111ee:	429c      	cmp	r4, r3
 80111f0:	dc11      	bgt.n	8011216 <atan+0x66>
 80111f2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80111f6:	429c      	cmp	r4, r3
 80111f8:	dc0a      	bgt.n	8011210 <atan+0x60>
 80111fa:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80111fe:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8011328 <atan+0x178>
 8011202:	ee30 6b06 	vadd.f64	d6, d0, d6
 8011206:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801120e:	dce2      	bgt.n	80111d6 <atan+0x26>
 8011210:	f04f 33ff 	mov.w	r3, #4294967295
 8011214:	e013      	b.n	801123e <atan+0x8e>
 8011216:	f000 f8c5 	bl	80113a4 <fabs>
 801121a:	4b5e      	ldr	r3, [pc, #376]	; (8011394 <atan+0x1e4>)
 801121c:	429c      	cmp	r4, r3
 801121e:	dc4f      	bgt.n	80112c0 <atan+0x110>
 8011220:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011224:	429c      	cmp	r4, r3
 8011226:	dc41      	bgt.n	80112ac <atan+0xfc>
 8011228:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801122c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011230:	2300      	movs	r3, #0
 8011232:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011236:	ee30 0b07 	vadd.f64	d0, d0, d7
 801123a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801123e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011330 <atan+0x180>
 8011242:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011246:	ee24 5b04 	vmul.f64	d5, d4, d4
 801124a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011338 <atan+0x188>
 801124e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8011252:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011340 <atan+0x190>
 8011256:	eea3 6b05 	vfma.f64	d6, d3, d5
 801125a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011348 <atan+0x198>
 801125e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011262:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011350 <atan+0x1a0>
 8011266:	eea3 6b05 	vfma.f64	d6, d3, d5
 801126a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011358 <atan+0x1a8>
 801126e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011360 <atan+0x1b0>
 8011272:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011276:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011368 <atan+0x1b8>
 801127a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801127e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011370 <atan+0x1c0>
 8011282:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011286:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011378 <atan+0x1c8>
 801128a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801128e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011380 <atan+0x1d0>
 8011292:	1c5a      	adds	r2, r3, #1
 8011294:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011298:	ee26 6b05 	vmul.f64	d6, d6, d5
 801129c:	eea3 6b04 	vfma.f64	d6, d3, d4
 80112a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80112a4:	d121      	bne.n	80112ea <atan+0x13a>
 80112a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112aa:	e794      	b.n	80111d6 <atan+0x26>
 80112ac:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80112b0:	2301      	movs	r3, #1
 80112b2:	ee30 6b47 	vsub.f64	d6, d0, d7
 80112b6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80112ba:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80112be:	e7be      	b.n	801123e <atan+0x8e>
 80112c0:	4b35      	ldr	r3, [pc, #212]	; (8011398 <atan+0x1e8>)
 80112c2:	429c      	cmp	r4, r3
 80112c4:	da0b      	bge.n	80112de <atan+0x12e>
 80112c6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80112ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80112ce:	ee30 5b47 	vsub.f64	d5, d0, d7
 80112d2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80112d6:	2302      	movs	r3, #2
 80112d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80112dc:	e7af      	b.n	801123e <atan+0x8e>
 80112de:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80112e2:	2303      	movs	r3, #3
 80112e4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80112e8:	e7a9      	b.n	801123e <atan+0x8e>
 80112ea:	4a2c      	ldr	r2, [pc, #176]	; (801139c <atan+0x1ec>)
 80112ec:	492c      	ldr	r1, [pc, #176]	; (80113a0 <atan+0x1f0>)
 80112ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80112f2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80112f6:	ed93 5b00 	vldr	d5, [r3]
 80112fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80112fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011302:	ed92 6b00 	vldr	d6, [r2]
 8011306:	2d00      	cmp	r5, #0
 8011308:	ee36 7b47 	vsub.f64	d7, d6, d7
 801130c:	bfb8      	it	lt
 801130e:	eeb1 7b47 	vneglt.f64	d7, d7
 8011312:	e760      	b.n	80111d6 <atan+0x26>
 8011314:	f3af 8000 	nop.w
 8011318:	54442d18 	.word	0x54442d18
 801131c:	3ff921fb 	.word	0x3ff921fb
 8011320:	54442d18 	.word	0x54442d18
 8011324:	bff921fb 	.word	0xbff921fb
 8011328:	8800759c 	.word	0x8800759c
 801132c:	7e37e43c 	.word	0x7e37e43c
 8011330:	e322da11 	.word	0xe322da11
 8011334:	3f90ad3a 	.word	0x3f90ad3a
 8011338:	24760deb 	.word	0x24760deb
 801133c:	3fa97b4b 	.word	0x3fa97b4b
 8011340:	a0d03d51 	.word	0xa0d03d51
 8011344:	3fb10d66 	.word	0x3fb10d66
 8011348:	c54c206e 	.word	0xc54c206e
 801134c:	3fb745cd 	.word	0x3fb745cd
 8011350:	920083ff 	.word	0x920083ff
 8011354:	3fc24924 	.word	0x3fc24924
 8011358:	5555550d 	.word	0x5555550d
 801135c:	3fd55555 	.word	0x3fd55555
 8011360:	52defd9a 	.word	0x52defd9a
 8011364:	bfadde2d 	.word	0xbfadde2d
 8011368:	2c6a6c2f 	.word	0x2c6a6c2f
 801136c:	bfa2b444 	.word	0xbfa2b444
 8011370:	af749a6d 	.word	0xaf749a6d
 8011374:	bfb3b0f2 	.word	0xbfb3b0f2
 8011378:	fe231671 	.word	0xfe231671
 801137c:	bfbc71c6 	.word	0xbfbc71c6
 8011380:	9998ebc4 	.word	0x9998ebc4
 8011384:	bfc99999 	.word	0xbfc99999
 8011388:	440fffff 	.word	0x440fffff
 801138c:	7ff00000 	.word	0x7ff00000
 8011390:	3fdbffff 	.word	0x3fdbffff
 8011394:	3ff2ffff 	.word	0x3ff2ffff
 8011398:	40038000 	.word	0x40038000
 801139c:	08011828 	.word	0x08011828
 80113a0:	08011848 	.word	0x08011848

080113a4 <fabs>:
 80113a4:	ec51 0b10 	vmov	r0, r1, d0
 80113a8:	ee10 2a10 	vmov	r2, s0
 80113ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113b0:	ec43 2b10 	vmov	d0, r2, r3
 80113b4:	4770      	bx	lr
	...

080113b8 <floor>:
 80113b8:	ee10 1a90 	vmov	r1, s1
 80113bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80113c0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80113c4:	2b13      	cmp	r3, #19
 80113c6:	b530      	push	{r4, r5, lr}
 80113c8:	ee10 0a10 	vmov	r0, s0
 80113cc:	ee10 5a10 	vmov	r5, s0
 80113d0:	dc31      	bgt.n	8011436 <floor+0x7e>
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	da15      	bge.n	8011402 <floor+0x4a>
 80113d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011490 <floor+0xd8>
 80113da:	ee30 0b07 	vadd.f64	d0, d0, d7
 80113de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80113e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e6:	dd07      	ble.n	80113f8 <floor+0x40>
 80113e8:	2900      	cmp	r1, #0
 80113ea:	da4e      	bge.n	801148a <floor+0xd2>
 80113ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113f0:	4318      	orrs	r0, r3
 80113f2:	d001      	beq.n	80113f8 <floor+0x40>
 80113f4:	4928      	ldr	r1, [pc, #160]	; (8011498 <floor+0xe0>)
 80113f6:	2000      	movs	r0, #0
 80113f8:	460b      	mov	r3, r1
 80113fa:	4602      	mov	r2, r0
 80113fc:	ec43 2b10 	vmov	d0, r2, r3
 8011400:	e020      	b.n	8011444 <floor+0x8c>
 8011402:	4a26      	ldr	r2, [pc, #152]	; (801149c <floor+0xe4>)
 8011404:	411a      	asrs	r2, r3
 8011406:	ea01 0402 	and.w	r4, r1, r2
 801140a:	4304      	orrs	r4, r0
 801140c:	d01a      	beq.n	8011444 <floor+0x8c>
 801140e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011490 <floor+0xd8>
 8011412:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011416:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801141e:	ddeb      	ble.n	80113f8 <floor+0x40>
 8011420:	2900      	cmp	r1, #0
 8011422:	bfbe      	ittt	lt
 8011424:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011428:	fa40 f303 	asrlt.w	r3, r0, r3
 801142c:	18c9      	addlt	r1, r1, r3
 801142e:	ea21 0102 	bic.w	r1, r1, r2
 8011432:	2000      	movs	r0, #0
 8011434:	e7e0      	b.n	80113f8 <floor+0x40>
 8011436:	2b33      	cmp	r3, #51	; 0x33
 8011438:	dd05      	ble.n	8011446 <floor+0x8e>
 801143a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801143e:	d101      	bne.n	8011444 <floor+0x8c>
 8011440:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011444:	bd30      	pop	{r4, r5, pc}
 8011446:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801144a:	f04f 32ff 	mov.w	r2, #4294967295
 801144e:	40e2      	lsrs	r2, r4
 8011450:	4202      	tst	r2, r0
 8011452:	d0f7      	beq.n	8011444 <floor+0x8c>
 8011454:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011490 <floor+0xd8>
 8011458:	ee30 0b07 	vadd.f64	d0, d0, d7
 801145c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011464:	ddc8      	ble.n	80113f8 <floor+0x40>
 8011466:	2900      	cmp	r1, #0
 8011468:	da02      	bge.n	8011470 <floor+0xb8>
 801146a:	2b14      	cmp	r3, #20
 801146c:	d103      	bne.n	8011476 <floor+0xbe>
 801146e:	3101      	adds	r1, #1
 8011470:	ea20 0002 	bic.w	r0, r0, r2
 8011474:	e7c0      	b.n	80113f8 <floor+0x40>
 8011476:	2401      	movs	r4, #1
 8011478:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801147c:	fa04 f303 	lsl.w	r3, r4, r3
 8011480:	4418      	add	r0, r3
 8011482:	42a8      	cmp	r0, r5
 8011484:	bf38      	it	cc
 8011486:	1909      	addcc	r1, r1, r4
 8011488:	e7f2      	b.n	8011470 <floor+0xb8>
 801148a:	2000      	movs	r0, #0
 801148c:	4601      	mov	r1, r0
 801148e:	e7b3      	b.n	80113f8 <floor+0x40>
 8011490:	8800759c 	.word	0x8800759c
 8011494:	7e37e43c 	.word	0x7e37e43c
 8011498:	bff00000 	.word	0xbff00000
 801149c:	000fffff 	.word	0x000fffff

080114a0 <scalbn>:
 80114a0:	b082      	sub	sp, #8
 80114a2:	ed8d 0b00 	vstr	d0, [sp]
 80114a6:	9b01      	ldr	r3, [sp, #4]
 80114a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80114ac:	b9a2      	cbnz	r2, 80114d8 <scalbn+0x38>
 80114ae:	9a00      	ldr	r2, [sp, #0]
 80114b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80114b4:	4313      	orrs	r3, r2
 80114b6:	d03a      	beq.n	801152e <scalbn+0x8e>
 80114b8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011590 <scalbn+0xf0>
 80114bc:	4b40      	ldr	r3, [pc, #256]	; (80115c0 <scalbn+0x120>)
 80114be:	ee20 7b07 	vmul.f64	d7, d0, d7
 80114c2:	4298      	cmp	r0, r3
 80114c4:	ed8d 7b00 	vstr	d7, [sp]
 80114c8:	da11      	bge.n	80114ee <scalbn+0x4e>
 80114ca:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011598 <scalbn+0xf8>
 80114ce:	ed9d 6b00 	vldr	d6, [sp]
 80114d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114d6:	e007      	b.n	80114e8 <scalbn+0x48>
 80114d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80114dc:	428a      	cmp	r2, r1
 80114de:	d10a      	bne.n	80114f6 <scalbn+0x56>
 80114e0:	ed9d 7b00 	vldr	d7, [sp]
 80114e4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80114e8:	ed8d 7b00 	vstr	d7, [sp]
 80114ec:	e01f      	b.n	801152e <scalbn+0x8e>
 80114ee:	9b01      	ldr	r3, [sp, #4]
 80114f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80114f4:	3a36      	subs	r2, #54	; 0x36
 80114f6:	4402      	add	r2, r0
 80114f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80114fc:	428a      	cmp	r2, r1
 80114fe:	dd0a      	ble.n	8011516 <scalbn+0x76>
 8011500:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80115a0 <scalbn+0x100>
 8011504:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80115a8 <scalbn+0x108>
 8011508:	eeb0 6b47 	vmov.f64	d6, d7
 801150c:	9b01      	ldr	r3, [sp, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011514:	e7dd      	b.n	80114d2 <scalbn+0x32>
 8011516:	2a00      	cmp	r2, #0
 8011518:	dd0d      	ble.n	8011536 <scalbn+0x96>
 801151a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801151e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011522:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011526:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801152a:	e9cd 0100 	strd	r0, r1, [sp]
 801152e:	ed9d 0b00 	vldr	d0, [sp]
 8011532:	b002      	add	sp, #8
 8011534:	4770      	bx	lr
 8011536:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801153a:	da18      	bge.n	801156e <scalbn+0xce>
 801153c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011540:	4298      	cmp	r0, r3
 8011542:	9b01      	ldr	r3, [sp, #4]
 8011544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011548:	dd09      	ble.n	801155e <scalbn+0xbe>
 801154a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80115a0 <scalbn+0x100>
 801154e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80115a8 <scalbn+0x108>
 8011552:	eeb0 6b47 	vmov.f64	d6, d7
 8011556:	2b00      	cmp	r3, #0
 8011558:	fe07 7b05 	vseleq.f64	d7, d7, d5
 801155c:	e7b9      	b.n	80114d2 <scalbn+0x32>
 801155e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011598 <scalbn+0xf8>
 8011562:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80115b0 <scalbn+0x110>
 8011566:	eeb0 6b47 	vmov.f64	d6, d7
 801156a:	2b00      	cmp	r3, #0
 801156c:	e7f4      	b.n	8011558 <scalbn+0xb8>
 801156e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011572:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011576:	3236      	adds	r2, #54	; 0x36
 8011578:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801157c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011580:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80115b8 <scalbn+0x118>
 8011584:	ec41 0b17 	vmov	d7, r0, r1
 8011588:	e7a3      	b.n	80114d2 <scalbn+0x32>
 801158a:	bf00      	nop
 801158c:	f3af 8000 	nop.w
 8011590:	00000000 	.word	0x00000000
 8011594:	43500000 	.word	0x43500000
 8011598:	c2f8f359 	.word	0xc2f8f359
 801159c:	01a56e1f 	.word	0x01a56e1f
 80115a0:	8800759c 	.word	0x8800759c
 80115a4:	7e37e43c 	.word	0x7e37e43c
 80115a8:	8800759c 	.word	0x8800759c
 80115ac:	fe37e43c 	.word	0xfe37e43c
 80115b0:	c2f8f359 	.word	0xc2f8f359
 80115b4:	81a56e1f 	.word	0x81a56e1f
 80115b8:	00000000 	.word	0x00000000
 80115bc:	3c900000 	.word	0x3c900000
 80115c0:	ffff3cb0 	.word	0xffff3cb0

080115c4 <_init>:
 80115c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115c6:	bf00      	nop
 80115c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ca:	bc08      	pop	{r3}
 80115cc:	469e      	mov	lr, r3
 80115ce:	4770      	bx	lr

080115d0 <_fini>:
 80115d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115d2:	bf00      	nop
 80115d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115d6:	bc08      	pop	{r3}
 80115d8:	469e      	mov	lr, r3
 80115da:	4770      	bx	lr
