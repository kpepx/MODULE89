
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010934  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08010bd0  08010bd0  00020bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010de8  08010de8  00020de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010df0  08010df0  00020df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010df4  08010df4  00020df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08010df8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08010e08  00030010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08010e68  00030070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f34  240000d0  08010ec8  000300d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24001004  08010ec8  00031004  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000372c1  00000000  00000000  000300fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dc7  00000000  00000000  000673bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  0006c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a98  00000000  00000000  0006dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b77  00000000  00000000  0006f840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000253db  00000000  00000000  000753b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00184e90  00000000  00000000  0009a792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021f622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b40  00000000  00000000  0021f678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010bb4 	.word	0x08010bb4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08010bb4 	.word	0x08010bb4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	61f8      	str	r0, [r7, #28]
 80005d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80005dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80005e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80005e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80005e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80005ec:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	222c      	movs	r2, #44	; 0x2c
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <setupPID+0x64>)
 80005fa:	4413      	add	r3, r2
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	611a      	str	r2, [r3, #16]
}
 8000628:	bf00      	nop
 800062a:	372c      	adds	r7, #44	; 0x2c
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	240000ec 	.word	0x240000ec

08000638 <calculator>:


float calculator(int num, int input, float setpoint){
 8000638:	b480      	push	{r7}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	222c      	movs	r2, #44	; 0x2c
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	4a50      	ldr	r2, [pc, #320]	; (8000790 <calculator+0x158>)
 8000650:	4413      	add	r3, r2
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	edd3 7a01 	vldr	s15, [r3, #4]
 800068c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000794 <calculator+0x15c>
 80006be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c6:	dd02      	ble.n	80006ce <calculator+0x96>
		pid->integral = 4095;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <calculator+0x160>)
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800079c <calculator+0x164>
 80006d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	d502      	bpl.n	80006e8 <calculator+0xb0>
		pid->integral = -4095;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <calculator+0x168>)
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80006f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80006fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000702:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	edd3 7a04 	vldr	s15, [r3, #16]
 800070c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000714:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 8000718:	ed97 7a08 	vldr	s14, [r7, #32]
 800071c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000724:	edd7 7a05 	vldr	s15, [r7, #20]
 8000728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	ed93 7a07 	vldr	s14, [r3, #28]
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	edd3 7a05 	vldr	s15, [r3, #20]
 800073e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000746:	dd04      	ble.n	8000752 <calculator+0x11a>
		pid->output = pid->Vmax;}
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	e00e      	b.n	8000770 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	ed93 7a07 	vldr	s14, [r3, #28]
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	edd3 7a06 	vldr	s15, [r3, #24]
 800075e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d503      	bpl.n	8000770 <calculator+0x138>
		pid->output = pid->Vmin;}
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	621a      	str	r2, [r3, #32]

	return pid->output;
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	ee07 3a90 	vmov	s15, r3
}
 8000780:	eeb0 0a67 	vmov.f32	s0, s15
 8000784:	372c      	adds	r7, #44	; 0x2c
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	240000ec 	.word	0x240000ec
 8000794:	457ff000 	.word	0x457ff000
 8000798:	457ff000 	.word	0x457ff000
 800079c:	c57ff000 	.word	0xc57ff000
 80007a0:	c57ff000 	.word	0xc57ff000

080007a4 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <enable_Encoder_OE+0x14>)
 80007b0:	f008 f810 	bl	80087d4 <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58020400 	.word	0x58020400

080007bc <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <Encoder_Start+0x48>)
 80007d4:	4413      	add	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f00b ff9a 	bl	800c714 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 80007f2:	f7ff ffd7 	bl	80007a4 <enable_Encoder_OE>
	Set_Encoder_Zero(num);
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f000 f822 	bl	8000840 <Set_Encoder_Zero>
}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	240001c8 	.word	0x240001c8

08000808 <Get_Value_Encoder>:

uint32_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <Get_Value_Encoder+0x34>)
 800081c:	4413      	add	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	240001c8 	.word	0x240001c8

08000840 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num){
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <Set_Encoder_Zero+0x30>)
 8000854:	4413      	add	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, OFFSET);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	240001c8 	.word	0x240001c8

08000874 <Stepper_Setup>:
#include "PID.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2254      	movs	r2, #84	; 0x54
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <Stepper_Setup+0x54>)
 800088c:	4413      	add	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	8c3a      	ldrh	r2, [r7, #32]
 80008ac:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	return SERR_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	24000204 	.word	0x24000204

080008cc <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d02d      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d028      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <Stepper_SetStepTimer+0x78>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fe:	d30b      	bcc.n	8000918 <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <Stepper_SetStepTimer+0x7c>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	0bdb      	lsrs	r3, r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	0852      	lsrs	r2, r2, #1
 8000936:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	24000d6c 	.word	0x24000d6c
 8000948:	80008001 	.word	0x80008001

0800094c <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2254      	movs	r2, #84	; 0x54
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <Stepper_DefaultState+0x60>)
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2201      	movs	r2, #1
 800096e:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <Stepper_DefaultState+0x64>)
 8000974:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	699a      	ldr	r2, [r3, #24]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f247 5230 	movw	r2, #30000	; 0x7530
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f7ff ffa0 	bl	80008cc <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4619      	mov	r1, r3
 8000996:	4610      	mov	r0, r2
 8000998:	f00b fc72 	bl	800c280 <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 800099c:	f000 f954 	bl	8000c48 <enable_Stepper_OE>

	return SERR_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	24000204 	.word	0x24000204
 80009b0:	00061a80 	.word	0x00061a80

080009b4 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, float_t value){
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2254      	movs	r2, #84	; 0x54
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <Stepper_SetMinPosition+0x30>)
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	621a      	str	r2, [r3, #32]
	return SERR_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	24000204 	.word	0x24000204

080009e8 <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, float_t value){
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2254      	movs	r2, #84	; 0x54
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <Stepper_SetMaxPosition+0x30>)
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	24000204 	.word	0x24000204

08000a1c <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2254      	movs	r2, #84	; 0x54
 8000a2c:	fb02 f303 	mul.w	r3, r2, r3
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <Stepper_SetMinSpeed+0x30>)
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000a36:	887a      	ldrh	r2, [r7, #2]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	619a      	str	r2, [r3, #24]
	return SERR_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	24000204 	.word	0x24000204

08000a50 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2254      	movs	r2, #84	; 0x54
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <Stepper_SetMaxSpeed+0x30>)
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000a6a:	887a      	ldrh	r2, [r7, #2]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	61da      	str	r2, [r3, #28]
	return SERR_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	24000204 	.word	0x24000204

08000a84 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, float_t value){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2254      	movs	r2, #84	; 0x54
 8000a94:	fb02 f303 	mul.w	r3, r2, r3
 8000a98:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <Stepper_SetTraget+0xd8>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b80      	cmp	r3, #128	; 0x80
 8000aa8:	d053      	beq.n	8000b52 <Stepper_SetTraget+0xce>
		if(value<stepper->minPosition){
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ab0:	ed97 7a00 	vldr	s14, [r7]
 8000ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abc:	d513      	bpl.n	8000ae6 <Stepper_SetTraget+0x62>
			stepper->targetPosition_real = stepper->minPosition;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a1a      	ldr	r2, [r3, #32]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, stepper->minPosition) + OFFSET;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	edd3 7a08 	vldr	s15, [r3, #32]
 8000acc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 fa25 	bl	8000f20 <joint_to_encoder>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	f247 5330 	movw	r3, #30000	; 0x7530
 8000adc:	4413      	add	r3, r2
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	e036      	b.n	8000b54 <Stepper_SetTraget+0xd0>
		}
		else if (value>stepper->maxPosition) {
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000aec:	ed97 7a00 	vldr	s14, [r7]
 8000af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af8:	dd13      	ble.n	8000b22 <Stepper_SetTraget+0x9e>
			stepper->targetPosition_real = stepper->maxPosition;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, stepper->maxPosition) + OFFSET;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000b08:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 fa07 	bl	8000f20 <joint_to_encoder>
 8000b12:	4602      	mov	r2, r0
 8000b14:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b18:	4413      	add	r3, r2
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	e018      	b.n	8000b54 <Stepper_SetTraget+0xd0>
		}
		else {
			stepper->targetPosition_real = value;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, value*100.00) + OFFSET;
 8000b28:	edd7 7a00 	vldr	s15, [r7]
 8000b2c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000b60 <Stepper_SetTraget+0xdc>
 8000b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b34:	eeb0 0a67 	vmov.f32	s0, s15
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f9f1 	bl	8000f20 <joint_to_encoder>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b44:	4413      	add	r3, r2
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	6353      	str	r3, [r2, #52]	; 0x34
			stepper->status = SS_STARTING;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
	}
	return SERR_OK;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000204 	.word	0x24000204
 8000b60:	42c80000 	.word	0x42c80000

08000b64 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2254      	movs	r2, #84	; 0x54
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <Stepper_SetSpeed+0x54>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	da04      	bge.n	8000b90 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	699a      	ldr	r2, [r3, #24]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8e:	e00c      	b.n	8000baa <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	dd04      	ble.n	8000ba4 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba2:	e002      	b.n	8000baa <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000baa:	bf00      	nop
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	24000204 	.word	0x24000204

08000bbc <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681c      	ldr	r4, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe1b 	bl	8000808 <Get_Value_Encoder>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000be2:	eeb0 0a67 	vmov.f32	s0, s15
 8000be6:	4611      	mov	r1, r2
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff fd25 	bl	8000638 <calculator>
 8000bee:	eef0 7a40 	vmov.f32	s15, s0
 8000bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf6:	ee17 3a90 	vmov	r3, s15
 8000bfa:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	f7ff ffaa 	bl	8000b64 <Stepper_SetSpeed>
	if(input<0){
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da0b      	bge.n	8000c2e <Stepper_Direction+0x72>
		stepper->status = SS_RUNNING_FORWARD;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2202      	movs	r2, #2
 8000c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	8a1b      	ldrh	r3, [r3, #16]
 8000c22:	461a      	mov	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0412      	lsls	r2, r2, #16
 8000c2a:	619a      	str	r2, [r3, #24]
	}
	else {
		stepper->status = SS_RUNNING_BACKWARD;
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
	}
}
 8000c2c:	e008      	b.n	8000c40 <Stepper_Direction+0x84>
		stepper->status = SS_RUNNING_BACKWARD;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	8a1a      	ldrh	r2, [r3, #16]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	619a      	str	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}

08000c48 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c52:	4802      	ldr	r0, [pc, #8]	; (8000c5c <enable_Stepper_OE+0x14>)
 8000c54:	f007 fdbe 	bl	80087d4 <HAL_GPIO_WritePin>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58020400 	.word	0x58020400

08000c60 <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2254      	movs	r2, #84	; 0x54
 8000c6c:	fb02 f303 	mul.w	r3, r2, r3
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <Stepper_runStep+0x70>)
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
	Stepper_currentPosition(num);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f8a8 	bl	8000dcc <Stepper_currentPosition>
	Stepper_currentPosition_real(num);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f8bf 	bl	8000e00 <Stepper_currentPosition_real>
	if(stepper->status != SS_STOPPED){
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b80      	cmp	r3, #128	; 0x80
 8000c8c:	d014      	beq.n	8000cb8 <Stepper_runStep+0x58>
//		enable_Stepper_OE();
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4610      	mov	r0, r2
 8000c9a:	f00b faf1 	bl	800c280 <HAL_TIM_PWM_Start>
		if(stepper->home_status){
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00e      	beq.n	8000cc8 <Stepper_runStep+0x68>
			Stepper_Direction(stepper);
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff ff86 	bl	8000bbc <Stepper_Direction>
			Stepper_SetStepTimer(stepper);
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff fe0b 	bl	80008cc <Stepper_SetStepTimer>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8000cb6:	e007      	b.n	8000cc8 <Stepper_runStep+0x68>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	f00b fbea 	bl	800c49c <HAL_TIM_PWM_Stop>
}
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000204 	.word	0x24000204

08000cd4 <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2254      	movs	r2, #84	; 0x54
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <Stepper_StartStop+0x40>)
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 8000cee:	78fb      	ldrb	r3, [r7, #3]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d104      	bne.n	8000cfe <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8000cfc:	e003      	b.n	8000d06 <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	24000204 	.word	0x24000204

08000d18 <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2254      	movs	r2, #84	; 0x54
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <Stepper_updateHome+0x4c>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 0){
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10e      	bne.n	8000d5a <Stepper_updateHome+0x42>
		Set_Encoder_Zero(num);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fd7f 	bl	8000840 <Set_Encoder_Zero>
		stepper->home_status = value;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b25a      	sxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Stepper_DefaultState(num);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff fdfd 	bl	800094c <Stepper_DefaultState>
		stepper -> status = SS_STARTING;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2204      	movs	r2, #4
 8000d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	24000204 	.word	0x24000204

08000d68 <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper->home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2254      	movs	r2, #84	; 0x54
 8000d78:	fb02 f303 	mul.w	r3, r2, r3
 8000d7c:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <Stepper_SetHome+0x60>)
 8000d7e:	4413      	add	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]
	if(on){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d019      	beq.n	8000dbc <Stepper_SetHome+0x54>
		stepper->home_status = 0;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	8a1a      	ldrh	r2, [r3, #16]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	619a      	str	r2, [r3, #24]
		stepper -> STEP_TIMER -> Instance -> PSC = 5;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2205      	movs	r2, #5
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = 25000;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = 25000/2;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000dba:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	24000204 	.word	0x24000204

08000dcc <Stepper_currentPosition>:

int32_t Stepper_currentPosition(int num){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2254      	movs	r2, #84	; 0x54
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <Stepper_currentPosition+0x30>)
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition = Get_Value_Encoder(num);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fd10 	bl	8000808 <Get_Value_Encoder>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38
	return stepper->currentPosition;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	24000204 	.word	0x24000204

08000e00 <Stepper_currentPosition_real>:

float_t Stepper_currentPosition_real(int num){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2254      	movs	r2, #84	; 0x54
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <Stepper_currentPosition_real+0x54>)
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition_real = encoder_to_joint(num, abs(Stepper_currentPosition(num)-OFFSET))/100.00;
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffd8 	bl	8000dcc <Stepper_currentPosition>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <Stepper_currentPosition_real+0x58>)
 8000e20:	4413      	add	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bfb8      	it	lt
 8000e26:	425b      	neglt	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f818 	bl	8000e60 <encoder_to_joint>
 8000e30:	eeb0 7a40 	vmov.f32	s14, s0
 8000e34:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000e5c <Stepper_currentPosition_real+0x5c>
 8000e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	return stepper->currentPosition_real;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	ee07 3a90 	vmov	s15, r3
}
 8000e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24000204 	.word	0x24000204
 8000e58:	ffff8ad0 	.word	0xffff8ad0
 8000e5c:	42c80000 	.word	0x42c80000

08000e60 <encoder_to_joint>:

float_t encoder_to_joint(int num, int32_t value){
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	float_t ans;
	if(num == 1){
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d111      	bne.n	8000e94 <encoder_to_joint+0x34>
		ans = value*ENCODER1_TO_ANGLE;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e7a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000f00 <encoder_to_joint+0xa0>
 8000e7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e82:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000f08 <encoder_to_joint+0xa8>
 8000e86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e8e:	edc7 7a03 	vstr	s15, [r7, #12]
 8000e92:	e028      	b.n	8000ee6 <encoder_to_joint+0x86>
	}
	else if(num == 2){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d111      	bne.n	8000ebe <encoder_to_joint+0x5e>
		ans = value*ENCODER2_TO_ANGLE;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ea4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000f00 <encoder_to_joint+0xa0>
 8000ea8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000eac:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000f08 <encoder_to_joint+0xa8>
 8000eb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb8:	edc7 7a03 	vstr	s15, [r7, #12]
 8000ebc:	e013      	b.n	8000ee6 <encoder_to_joint+0x86>
	}
	else if(num == 3){
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d110      	bne.n	8000ee6 <encoder_to_joint+0x86>
		ans = value*ENCODER3_TO_SCALAR;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ece:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000f10 <encoder_to_joint+0xb0>
 8000ed2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ed6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000f18 <encoder_to_joint+0xb8>
 8000eda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ede:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ee2:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ans;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	ee07 3a90 	vmov	s15, r3
}
 8000eec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	f3af 8000 	nop.w
 8000f00:	00000000 	.word	0x00000000
 8000f04:	40e19400 	.word	0x40e19400
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	40ce0480 	.word	0x40ce0480
 8000f10:	00000000 	.word	0x00000000
 8000f14:	40c4cd00 	.word	0x40c4cd00
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	40d21880 	.word	0x40d21880

08000f20 <joint_to_encoder>:

int32_t joint_to_encoder(int num, float_t value){
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	ed87 0a00 	vstr	s0, [r7]
	int32_t ans;
	if(num == 1){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d111      	bne.n	8000f56 <joint_to_encoder+0x36>
		ans = value*ANGLE_TO_ENCODER1;
 8000f32:	edd7 7a00 	vldr	s15, [r7]
 8000f36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f3a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000fb8 <joint_to_encoder+0x98>
 8000f3e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f42:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000fc0 <joint_to_encoder+0xa0>
 8000f46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f4e:	ee17 3a90 	vmov	r3, s15
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e028      	b.n	8000fa8 <joint_to_encoder+0x88>
	}
	else if(num == 2){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d111      	bne.n	8000f80 <joint_to_encoder+0x60>
		ans = value*ANGLE_TO_ENCODER2;
 8000f5c:	edd7 7a00 	vldr	s15, [r7]
 8000f60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f64:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8000fb8 <joint_to_encoder+0x98>
 8000f68:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f6c:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000fc0 <joint_to_encoder+0xa0>
 8000f70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f74:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f78:	ee17 3a90 	vmov	r3, s15
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	e013      	b.n	8000fa8 <joint_to_encoder+0x88>
	}
	else if(num == 3){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d110      	bne.n	8000fa8 <joint_to_encoder+0x88>
		ans = value*SCALAR_TO_ENCODER3;
 8000f86:	edd7 7a00 	vldr	s15, [r7]
 8000f8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f8e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000fc8 <joint_to_encoder+0xa8>
 8000f92:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f96:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000fd0 <joint_to_encoder+0xb0>
 8000f9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fa2:	ee17 3a90 	vmov	r3, s15
 8000fa6:	60fb      	str	r3, [r7, #12]
	}
	return ans;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40ce0480 	.word	0x40ce0480
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40e19400 	.word	0x40e19400
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	40d21880 	.word	0x40d21880
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	40c4cd00 	.word	0x40c4cd00

08000fd8 <Serial_Setup>:
#include "STEPPER.h"
#include "TASKSPACE.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2258      	movs	r2, #88	; 0x58
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <Serial_Setup+0x3c>)
 8000fec:	4413      	add	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6858      	ldr	r0, [r3, #4]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3335      	adds	r3, #53	; 0x35
 8001004:	220e      	movs	r2, #14
 8001006:	4619      	mov	r1, r3
 8001008:	f00c fdaa 	bl	800db60 <HAL_UART_Receive_DMA>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2400040c 	.word	0x2400040c

08001018 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	e00b      	b.n	8001042 <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	3326      	adds	r3, #38	; 0x26
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b29a      	uxth	r2, r3
 8001036:	89fb      	ldrh	r3, [r7, #14]
 8001038:	4413      	add	r3, r2
 800103a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	3301      	adds	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001048:	3304      	adds	r3, #4
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	429a      	cmp	r2, r3
 800104e:	ddec      	ble.n	800102a <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 8001050:	89fb      	ldrh	r3, [r7, #14]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	b2db      	uxtb	r3, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	b2db      	uxtb	r3, r3
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <Servo_gripperChess>:

void Servo_gripperChess(int num, uint8_t value){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	serial_state * serial = &Serials[num];
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2258      	movs	r2, #88	; 0x58
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	4a16      	ldr	r2, [pc, #88]	; (800110c <Servo_gripperChess+0x70>)
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2202      	movs	r2, #2
 80010ba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2202      	movs	r2, #2
 80010c2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2214      	movs	r2, #20
 80010ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffc6 	bl	8001064 <SHIFT_TO_LSB>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffc9 	bl	800107e <SHIFT_TO_MSB>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 f87a 	bl	80011f0 <iWrite>
	sendIPacket(serial);
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f8c6 	bl	800128e <sendIPacket>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2400040c 	.word	0x2400040c

08001110 <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2258      	movs	r2, #88	; 0x58
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <Servo_tragetPos+0x6c>)
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2202      	movs	r2, #2
 800112e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2202      	movs	r2, #2
 8001136:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2220      	movs	r2, #32
 800113e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff8d 	bl	8001064 <SHIFT_TO_LSB>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff91 	bl	800107e <SHIFT_TO_MSB>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 f842 	bl	80011f0 <iWrite>
	sendIPacket(serial);
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f88e 	bl	800128e <sendIPacket>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2400040c 	.word	0x2400040c

08001180 <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2258      	movs	r2, #88	; 0x58
 8001190:	fb02 f303 	mul.w	r3, r2, r3
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <Servo_StartStop+0x6c>)
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2202      	movs	r2, #2
 800119e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2202      	movs	r2, #2
 80011a6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2211      	movs	r2, #17
 80011ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff55 	bl	8001064 <SHIFT_TO_LSB>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff59 	bl	800107e <SHIFT_TO_MSB>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 f80a 	bl	80011f0 <iWrite>
	sendIPacket(serial);
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f000 f856 	bl	800128e <sendIPacket>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2400040c 	.word	0x2400040c

080011f0 <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	22ff      	movs	r2, #255	; 0xff
 80011fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	22fd      	movs	r2, #253	; 0xfd
 8001204:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800120e:	3303      	adds	r3, #3
 8001210:	b2da      	uxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 8001230:	2305      	movs	r3, #5
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e00e      	b.n	8001254 <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3b05      	subs	r3, #5
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	3326      	adds	r3, #38	; 0x26
 800124a:	460a      	mov	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800125a:	3304      	adds	r3, #4
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	429a      	cmp	r2, r3
 8001260:	dde9      	ble.n	8001236 <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fed8 	bl	8001018 <Cal_sum>
 8001268:	4603      	mov	r3, r0
 800126a:	4619      	mov	r1, r3
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	3326      	adds	r3, #38	; 0x26
 8001274:	460a      	mov	r2, r1
 8001276:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <sendIPacket>:

void sendIPacket(serial_state * serial){
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6858      	ldr	r0, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	230a      	movs	r3, #10
 80012aa:	f00c fbc3 	bl	800da34 <HAL_UART_Transmit>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2258      	movs	r2, #88	; 0x58
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <data_in+0x2c>)
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2400040c 	.word	0x2400040c

080012e8 <selectPacket>:

void selectPacket(int num){
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2258      	movs	r2, #88	; 0x58
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	4ab9      	ldr	r2, [pc, #740]	; (80015e0 <selectPacket+0x2f8>)
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8205 	beq.w	8001714 <selectPacket+0x42c>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001310:	2bff      	cmp	r3, #255	; 0xff
 8001312:	f040 81f6 	bne.w	8001702 <selectPacket+0x41a>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800131c:	2bfd      	cmp	r3, #253	; 0xfd
 800131e:	f040 81f0 	bne.w	8001702 <selectPacket+0x41a>
			switch (serial->rPacket[3]) {
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001328:	2b03      	cmp	r3, #3
 800132a:	f000 81ec 	beq.w	8001706 <selectPacket+0x41e>
 800132e:	2b03      	cmp	r3, #3
 8001330:	f300 81eb 	bgt.w	800170a <selectPacket+0x422>
 8001334:	2b01      	cmp	r3, #1
 8001336:	d002      	beq.n	800133e <selectPacket+0x56>
 8001338:	2b02      	cmp	r3, #2
 800133a:	d009      	beq.n	8001350 <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 800133c:	e1e5      	b.n	800170a <selectPacket+0x422>
				switch (serial->rPacket[4]) {
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001344:	2b15      	cmp	r3, #21
 8001346:	d001      	beq.n	800134c <selectPacket+0x64>
 8001348:	2b16      	cmp	r3, #22
					break;
 800134a:	e000      	b.n	800134e <selectPacket+0x66>
					break;
 800134c:	bf00      	nop
				break;
 800134e:	e1dd      	b.n	800170c <selectPacket+0x424>
					switch (serial->rPacket[4]) {
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001356:	3b02      	subs	r3, #2
 8001358:	2b12      	cmp	r3, #18
 800135a:	f200 81d0 	bhi.w	80016fe <selectPacket+0x416>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <selectPacket+0x7c>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	080016ff 	.word	0x080016ff
 8001368:	080013b1 	.word	0x080013b1
 800136c:	08001419 	.word	0x08001419
 8001370:	08001481 	.word	0x08001481
 8001374:	080014e3 	.word	0x080014e3
 8001378:	080016ff 	.word	0x080016ff
 800137c:	080016ff 	.word	0x080016ff
 8001380:	080016ff 	.word	0x080016ff
 8001384:	080016ff 	.word	0x080016ff
 8001388:	080016ff 	.word	0x080016ff
 800138c:	080016ff 	.word	0x080016ff
 8001390:	080016ff 	.word	0x080016ff
 8001394:	080016ff 	.word	0x080016ff
 8001398:	080016ff 	.word	0x080016ff
 800139c:	08001545 	.word	0x08001545
 80013a0:	08001595 	.word	0x08001595
 80013a4:	080015e9 	.word	0x080015e9
 80013a8:	080016a7 	.word	0x080016a7
 80013ac:	080016ef 	.word	0x080016ef
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80013be:	4413      	add	r3, r2
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c8:	eeb0 0a67 	vmov.f32	s0, s15
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff faf1 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80013e0:	4413      	add	r3, r2
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	2002      	movs	r0, #2
 80013f0:	f7ff fae0 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001402:	4413      	add	r3, r2
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	2003      	movs	r0, #3
 8001412:	f7ff facf 	bl	80009b4 <Stepper_SetMinPosition>
						break;
 8001416:	e173      	b.n	8001700 <selectPacket+0x418>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001426:	4413      	add	r3, r2
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fad7 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001448:	4413      	add	r3, r2
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	2002      	movs	r0, #2
 8001458:	f7ff fac6 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800146a:	4413      	add	r3, r2
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001474:	eeb0 0a67 	vmov.f32	s0, s15
 8001478:	2003      	movs	r0, #3
 800147a:	f7ff fab5 	bl	80009e8 <Stepper_SetMaxPosition>
						break;
 800147e:	e13f      	b.n	8001700 <selectPacket+0x418>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001486:	b29b      	uxth	r3, r3
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001492:	b29b      	uxth	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	4619      	mov	r1, r3
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fabe 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff faae 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4619      	mov	r1, r3
 80014da:	2003      	movs	r0, #3
 80014dc:	f7ff fa9e 	bl	8000a1c <Stepper_SetMinSpeed>
						break;
 80014e0:	e10e      	b.n	8001700 <selectPacket+0x418>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff faa7 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001508:	b29b      	uxth	r3, r3
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001514:	b29b      	uxth	r3, r3
 8001516:	4413      	add	r3, r2
 8001518:	b29b      	uxth	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff fa97 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001528:	b29b      	uxth	r3, r3
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001534:	b29b      	uxth	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	2003      	movs	r0, #3
 800153e:	f7ff fa87 	bl	8000a50 <Stepper_SetMaxSpeed>
						break;
 8001542:	e0dd      	b.n	8001700 <selectPacket+0x418>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001552:	4413      	add	r3, r2
 8001554:	461a      	mov	r2, r3
 8001556:	2100      	movs	r1, #0
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff fc05 	bl	8000d68 <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800156c:	4413      	add	r3, r2
 800156e:	461a      	mov	r2, r3
 8001570:	2100      	movs	r1, #0
 8001572:	2002      	movs	r0, #2
 8001574:	f7ff fbf8 	bl	8000d68 <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001586:	4413      	add	r3, r2
 8001588:	461a      	mov	r2, r3
 800158a:	2100      	movs	r1, #0
 800158c:	2003      	movs	r0, #3
 800158e:	f7ff fbeb 	bl	8000d68 <Stepper_SetHome>
						break;
 8001592:	e0b5      	b.n	8001700 <selectPacket+0x418>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800159a:	4619      	mov	r1, r3
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff fb99 	bl	8000cd4 <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a8:	4619      	mov	r1, r3
 80015aa:	2002      	movs	r0, #2
 80015ac:	f7ff fb92 	bl	8000cd4 <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015b6:	4619      	mov	r1, r3
 80015b8:	2003      	movs	r0, #3
 80015ba:	f7ff fb8b 	bl	8000cd4 <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff fdd1 	bl	8001180 <Servo_StartStop>
						break;
 80015de:	e08f      	b.n	8001700 <selectPacket+0x418>
 80015e0:	2400040c 	.word	0x2400040c
 80015e4:	42c80000 	.word	0x42c80000
						Stepper_SetTraget(1, ((float_t)(serial->rPacket[6]<<8) + serial->rPacket[5])/100.00);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160a:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 80015e4 <selectPacket+0x2fc>
 800160e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001612:	eeb0 0a47 	vmov.f32	s0, s14
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff fa34 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(2, ((float_t)(serial->rPacket[8]<<8) + serial->rPacket[7])/100.00);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163e:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 80015e4 <selectPacket+0x2fc>
 8001642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001646:	eeb0 0a47 	vmov.f32	s0, s14
 800164a:	2002      	movs	r0, #2
 800164c:	f7ff fa1a 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(3, ((float_t)(serial->rPacket[10]<<8) + serial->rPacket[9])/100.00);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001672:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 80015e4 <selectPacket+0x2fc>
 8001676:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800167a:	eeb0 0a47 	vmov.f32	s0, s14
 800167e:	2003      	movs	r0, #3
 8001680:	f7ff fa00 	bl	8000a84 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800168a:	b29b      	uxth	r3, r3
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001696:	b29b      	uxth	r3, r3
 8001698:	4413      	add	r3, r2
 800169a:	b29b      	uxth	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	2002      	movs	r0, #2
 80016a0:	f7ff fd36 	bl	8001110 <Servo_tragetPos>
						break;
 80016a4:	e02c      	b.n	8001700 <selectPacket+0x418>
						updateJoint((serial->rPacket[12]<<8) + serial->rPacket[11], (serial->rPacket[6]<<8) + serial->rPacket[5], (serial->rPacket[8]<<8) + serial->rPacket[7], (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80016b4:	1898      	adds	r0, r3, r2
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80016c4:	1899      	adds	r1, r3, r2
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80016d4:	189c      	adds	r4, r3, r2
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80016e4:	4413      	add	r3, r2
 80016e6:	4622      	mov	r2, r4
 80016e8:	f000 f83a 	bl	8001760 <updateJoint>
						break;
 80016ec:	e008      	b.n	8001700 <selectPacket+0x418>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016f4:	4619      	mov	r1, r3
 80016f6:	2002      	movs	r0, #2
 80016f8:	f7ff fcd0 	bl	800109c <Servo_gripperChess>
						break;
 80016fc:	e000      	b.n	8001700 <selectPacket+0x418>
						break;
 80016fe:	bf00      	nop
					break;
 8001700:	e004      	b.n	800170c <selectPacket+0x424>
			}
		}
 8001702:	bf00      	nop
 8001704:	e002      	b.n	800170c <selectPacket+0x424>
						break;
 8001706:	bf00      	nop
 8001708:	e000      	b.n	800170c <selectPacket+0x424>
						break;
 800170a:	bf00      	nop
		serial->state = 0;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bd90      	pop	{r4, r7, pc}
 800171c:	0000      	movs	r0, r0
	...

08001720 <to_radian>:

void updateXYZ(int32_t x, int32_t y, int32_t z){
//	taskspace_state * taskspace = &taskspaces[0];
}

double to_radian(double value){
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	ed87 0b00 	vstr	d0, [r7]
	return value * 180.0 / M_PI;
 800172a:	ed97 7b00 	vldr	d7, [r7]
 800172e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001750 <to_radian+0x30>
 8001732:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001736:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001758 <to_radian+0x38>
 800173a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800173e:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001742:	eeb0 0b47 	vmov.f64	d0, d7
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	00000000 	.word	0x00000000
 8001754:	40668000 	.word	0x40668000
 8001758:	54442d18 	.word	0x54442d18
 800175c:	400921fb 	.word	0x400921fb

08001760 <updateJoint>:

void updateJoint(int32_t roll, int32_t x, int32_t y, int32_t z){
 8001760:	b580      	push	{r7, lr}
 8001762:	b096      	sub	sp, #88	; 0x58
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
	taskspace_state * taskspace = &taskspaces[0];
 800176e:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <updateJoint+0x188>)
 8001770:	657b      	str	r3, [r7, #84]	; 0x54
	taskspace->qi1 = (double)Stepper_currentPosition_real(1);
 8001772:	2001      	movs	r0, #1
 8001774:	f7ff fb44 	bl	8000e00 <Stepper_currentPosition_real>
 8001778:	eef0 7a40 	vmov.f32	s15, s0
 800177c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001782:	ed83 7b08 	vstr	d7, [r3, #32]
	taskspace->qi2 = (double)Stepper_currentPosition_real(2);
 8001786:	2002      	movs	r0, #2
 8001788:	f7ff fb3a 	bl	8000e00 <Stepper_currentPosition_real>
 800178c:	eef0 7a40 	vmov.f32	s15, s0
 8001790:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001796:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	taskspace->qi3 = (double)Stepper_currentPosition_real(3);
 800179a:	2003      	movs	r0, #3
 800179c:	f7ff fb30 	bl	8000e00 <Stepper_currentPosition_real>
 80017a0:	eef0 7a40 	vmov.f32	s15, s0
 80017a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017aa:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	taskspace->qi4 = (double)0.0;
 80017ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	double qi[4] = {taskspace->qi1, taskspace->qi2, taskspace->qi3, taskspace->qi4};
 80017bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80017c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80017c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80017d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80017d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80017da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double deltak[4] = {(double)(roll/100.00), (double)(x/100.00), (double)(y/100.00), (double)(z/100.00)};
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017ee:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 80018e0 <updateJoint+0x180>
 80017f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017f6:	ed87 7b04 	vstr	d7, [r7, #16]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001804:	ed9f 5b36 	vldr	d5, [pc, #216]	; 80018e0 <updateJoint+0x180>
 8001808:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800180c:	ed87 7b06 	vstr	d7, [r7, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800181a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80018e0 <updateJoint+0x180>
 800181e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001822:	ed87 7b08 	vstr	d7, [r7, #32]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001830:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80018e0 <updateJoint+0x180>
 8001834:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001838:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

	cartesianJog(qi, deltak);
 800183c:	f107 0210 	add.w	r2, r7, #16
 8001840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f852 	bl	80018f0 <cartesianJog>
	taskspace->q1 = get_cartesian_q1();
 800184c:	f000 f96a 	bl	8001b24 <get_cartesian_q1>
 8001850:	eeb0 7b40 	vmov.f64	d7, d0
 8001854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001856:	ed83 7b00 	vstr	d7, [r3]
	taskspace->q2 = get_cartesian_q2();
 800185a:	f000 f977 	bl	8001b4c <get_cartesian_q2>
 800185e:	eeb0 7b40 	vmov.f64	d7, d0
 8001862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001864:	ed83 7b02 	vstr	d7, [r3, #8]
	taskspace->q3 = get_cartesian_q3();
 8001868:	f000 f984 	bl	8001b74 <get_cartesian_q3>
 800186c:	eeb0 7b40 	vmov.f64	d7, d0
 8001870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001872:	ed83 7b04 	vstr	d7, [r3, #16]
	taskspace->q4 = get_cartesian_q4();
 8001876:	f000 f991 	bl	8001b9c <get_cartesian_q4>
 800187a:	eeb0 7b40 	vmov.f64	d7, d0
 800187e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001880:	ed83 7b06 	vstr	d7, [r3, #24]
	Stepper_SetTraget(1, to_radian(taskspace->q1));
 8001884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001886:	ed93 7b00 	vldr	d7, [r3]
 800188a:	eeb0 0b47 	vmov.f64	d0, d7
 800188e:	f7ff ff47 	bl	8001720 <to_radian>
 8001892:	eeb0 7b40 	vmov.f64	d7, d0
 8001896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800189a:	eeb0 0a67 	vmov.f32	s0, s15
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff f8f0 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(2, to_radian(taskspace->q2));
 80018a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80018aa:	eeb0 0b47 	vmov.f64	d0, d7
 80018ae:	f7ff ff37 	bl	8001720 <to_radian>
 80018b2:	eeb0 7b40 	vmov.f64	d7, d0
 80018b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ba:	eeb0 0a67 	vmov.f32	s0, s15
 80018be:	2002      	movs	r0, #2
 80018c0:	f7ff f8e0 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(3, taskspace->q3);
 80018c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c6:	ed93 7b04 	vldr	d7, [r3, #16]
 80018ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	2003      	movs	r0, #3
 80018d4:	f7ff f8d6 	bl	8000a84 <Stepper_SetTraget>
}
 80018d8:	bf00      	nop
 80018da:	3758      	adds	r7, #88	; 0x58
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40590000 	.word	0x40590000
 80018e8:	240003a8 	.word	0x240003a8
 80018ec:	00000000 	.word	0x00000000

080018f0 <cartesianJog>:
 */

static cartesian_state cartesians[NUM_CARTESIAN];

void cartesianJog(double qi[4], double deltak[4])
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	ed2d 8b04 	vpush	{d8-d9}
 80018f6:	b08e      	sub	sp, #56	; 0x38
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	cartesian_state * cartesian = &cartesians[0];
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <cartesianJog+0x230>)
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
	double b_qf_tmp;
	double c_qf_tmp;
	double d_qf_tmp;
	double qf_tmp;
	double qf_tmp_tmp;
	qf_tmp = sin(qi[1]);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3308      	adds	r3, #8
 8001906:	ed93 7b00 	vldr	d7, [r3]
 800190a:	eeb0 0b47 	vmov.f64	d0, d7
 800190e:	f00e fb73 	bl	800fff8 <sin>
 8001912:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	qf_tmp_tmp = qi[0] + qi[1];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	ed93 6b00 	vldr	d6, [r3]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3308      	adds	r3, #8
 8001920:	ed93 7b00 	vldr	d7, [r3]
 8001924:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001928:	ed87 7b08 	vstr	d7, [r7, #32]
	b_qf_tmp = cos(qf_tmp_tmp);
 800192c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001930:	f00e fb1a 	bl	800ff68 <cos>
 8001934:	ed87 0b06 	vstr	d0, [r7, #24]
	qf_tmp_tmp = sin(qf_tmp_tmp);
 8001938:	ed97 0b08 	vldr	d0, [r7, #32]
 800193c:	f00e fb5c 	bl	800fff8 <sin>
 8001940:	ed87 0b08 	vstr	d0, [r7, #32]
	c_qf_tmp = cos(qi[0]);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	ed93 7b00 	vldr	d7, [r3]
 800194a:	eeb0 0b47 	vmov.f64	d0, d7
 800194e:	f00e fb0b 	bl	800ff68 <cos>
 8001952:	ed87 0b04 	vstr	d0, [r7, #16]
	d_qf_tmp = sin(qi[0]);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	ed93 7b00 	vldr	d7, [r3]
 800195c:	eeb0 0b47 	vmov.f64	d0, d7
 8001960:	f00e fb4a 	bl	800fff8 <sin>
 8001964:	ed87 0b02 	vstr	d0, [r7, #8]

	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] * qf_tmp) / (248.0 * qf_tmp);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	3308      	adds	r3, #8
 800196c:	ed93 6b00 	vldr	d6, [r3]
 8001970:	ed97 7b06 	vldr	d7, [r7, #24]
 8001974:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	3310      	adds	r3, #16
 800197c:	ed93 5b00 	vldr	d5, [r3]
 8001980:	ed97 7b08 	vldr	d7, [r7, #32]
 8001984:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001988:	ee36 6b07 	vadd.f64	d6, d6, d7
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	ed93 7b00 	vldr	d7, [r3]
 8001992:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8001b08 <cartesianJog+0x218>
 8001996:	ee27 5b05 	vmul.f64	d5, d7, d5
 800199a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800199e:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019a2:	ee36 5b07 	vadd.f64	d5, d6, d7
 80019a6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80019aa:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001b08 <cartesianJog+0x218>
 80019ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b8:	ed83 7b00 	vstr	d7, [r3]
	cartesian->q2 = (qi[1] - deltak[1] * (1651.0 * b_qf_tmp / 4.0 + 248.0 * c_qf_tmp) / (102362.0 * qf_tmp)) - deltak[2] * (1651.0 * qf_tmp_tmp / 4.0 + 248.0 * d_qf_tmp) / (102362.0 * sin(qi[1]));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3308      	adds	r3, #8
 80019c0:	ed93 6b00 	vldr	d6, [r3]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	3308      	adds	r3, #8
 80019c8:	ed93 5b00 	vldr	d5, [r3]
 80019cc:	ed97 7b06 	vldr	d7, [r7, #24]
 80019d0:	ed9f 4b4f 	vldr	d4, [pc, #316]	; 8001b10 <cartesianJog+0x220>
 80019d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80019d8:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 80019dc:	ee87 4b03 	vdiv.f64	d4, d7, d3
 80019e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80019e4:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8001b08 <cartesianJog+0x218>
 80019e8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80019ec:	ee34 7b07 	vadd.f64	d7, d4, d7
 80019f0:	ee25 4b07 	vmul.f64	d4, d5, d7
 80019f4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80019f8:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001b18 <cartesianJog+0x228>
 80019fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001a00:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001a04:	ee36 8b47 	vsub.f64	d8, d6, d7
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	3310      	adds	r3, #16
 8001a0c:	ed93 6b00 	vldr	d6, [r3]
 8001a10:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a14:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001b10 <cartesianJog+0x220>
 8001a18:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a1c:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001a20:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001a24:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a28:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8001b08 <cartesianJog+0x218>
 8001a2c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001a30:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001a34:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	ed93 7b00 	vldr	d7, [r3]
 8001a40:	eeb0 0b47 	vmov.f64	d0, d7
 8001a44:	f00e fad8 	bl	800fff8 <sin>
 8001a48:	eeb0 7b40 	vmov.f64	d7, d0
 8001a4c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001b18 <cartesianJog+0x228>
 8001a50:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a54:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001a58:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5e:	ed83 7b02 	vstr	d7, [r3, #8]
	cartesian->q3 = qi[2] - deltak[3];
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3310      	adds	r3, #16
 8001a66:	ed93 6b00 	vldr	d6, [r3]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	ed93 7b00 	vldr	d7, [r3]
 8001a72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	ed83 7b04 	vstr	d7, [r3, #16]
	cartesian->q4 = (((4.0 * deltak[1] * c_qf_tmp + 1651.0 * deltak[0] * qf_tmp) + 4.0 * deltak[2] * d_qf_tmp) + 1651.0 * qi[3] * qf_tmp) / (1651.0 * qf_tmp);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	3308      	adds	r3, #8
 8001a80:	ed93 7b00 	vldr	d7, [r3]
 8001a84:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001a88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a8c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a90:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	ed93 7b00 	vldr	d7, [r3]
 8001a9a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001b10 <cartesianJog+0x220>
 8001a9e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001aa2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001aa6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001aaa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3310      	adds	r3, #16
 8001ab2:	ed93 7b00 	vldr	d7, [r3]
 8001ab6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001aba:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001abe:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ac2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ac6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3318      	adds	r3, #24
 8001ace:	ed93 7b00 	vldr	d7, [r3]
 8001ad2:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001b10 <cartesianJog+0x220>
 8001ad6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001ada:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ade:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ae2:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001ae6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001aea:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001b10 <cartesianJog+0x220>
 8001aee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001af2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af8:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	3738      	adds	r7, #56	; 0x38
 8001b00:	46bd      	mov	sp, r7
 8001b02:	ecbd 8b04 	vpop	{d8-d9}
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	406f0000 	.word	0x406f0000
 8001b10:	00000000 	.word	0x00000000
 8001b14:	4099cc00 	.word	0x4099cc00
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40f8fda0 	.word	0x40f8fda0
 8001b20:	240003e8 	.word	0x240003e8

08001b24 <get_cartesian_q1>:

double get_cartesian_q1(){
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <get_cartesian_q1+0x24>)
 8001b2c:	607b      	str	r3, [r7, #4]
	return cartesian->q1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b38:	eeb0 0b47 	vmov.f64	d0, d7
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	240003e8 	.word	0x240003e8

08001b4c <get_cartesian_q2>:

double get_cartesian_q2(){
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <get_cartesian_q2+0x24>)
 8001b54:	607b      	str	r3, [r7, #4]
	return cartesian->q2;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b5c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b60:	eeb0 0b47 	vmov.f64	d0, d7
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	240003e8 	.word	0x240003e8

08001b74 <get_cartesian_q3>:

double get_cartesian_q3(){
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <get_cartesian_q3+0x24>)
 8001b7c:	607b      	str	r3, [r7, #4]
	return cartesian->q3;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b84:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b88:	eeb0 0b47 	vmov.f64	d0, d7
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	240003e8 	.word	0x240003e8

08001b9c <get_cartesian_q4>:

double get_cartesian_q4(){
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <get_cartesian_q4+0x24>)
 8001ba4:	607b      	str	r3, [r7, #4]
	return cartesian->q4;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001bac:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bb0:	eeb0 0b47 	vmov.f64	d0, d7
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	240003e8 	.word	0x240003e8

08001bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bca:	f002 f881 	bl	8003cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bce:	f000 f94d 	bl	8001e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd2:	f000 ff43 	bl	8002a5c <MX_GPIO_Init>
  MX_BDMA_Init();
 8001bd6:	f000 fef9 	bl	80029cc <MX_BDMA_Init>
  MX_DMA_Init();
 8001bda:	f000 ff17 	bl	8002a0c <MX_DMA_Init>
  MX_ETH_Init();
 8001bde:	f000 fa31 	bl	8002044 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001be2:	f000 fec1 	bl	8002968 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001be6:	f000 fb2f 	bl	8002248 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bea:	f000 fb81 	bl	80022f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bee:	f000 fbd5 	bl	800239c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001bf2:	f000 facf 	bl	8002194 <MX_TIM1_Init>
  MX_SPI3_Init();
 8001bf6:	f000 fa77 	bl	80020e8 <MX_SPI3_Init>
  MX_ADC3_Init();
 8001bfa:	f000 f9bd 	bl	8001f78 <MX_ADC3_Init>
  MX_TIM5_Init();
 8001bfe:	f000 fc23 	bl	8002448 <MX_TIM5_Init>
  MX_UART7_Init();
 8001c02:	f000 fe63 	bl	80028cc <MX_UART7_Init>
  MX_TIM12_Init();
 8001c06:	f000 fc6d 	bl	80024e4 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001c0a:	f000 fccf 	bl	80025ac <MX_TIM13_Init>
  MX_TIM16_Init();
 8001c0e:	f000 fd1b 	bl	8002648 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001c12:	f000 fd93 	bl	800273c <MX_TIM17_Init>
  MX_UART5_Init();
 8001c16:	f000 fe0b 	bl	8002830 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 8001c1a:	f007 fefd 	bl	8009a18 <HAL_RCC_GetHCLKFreq>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a7a      	ldr	r2, [pc, #488]	; (8001e0c <main+0x248>)
 8001c22:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8001c24:	f007 fef8 	bl	8009a18 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b79      	ldr	r3, [pc, #484]	; (8001e10 <main+0x24c>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4a78      	ldr	r2, [pc, #480]	; (8001e14 <main+0x250>)
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	4a77      	ldr	r2, [pc, #476]	; (8001e18 <main+0x254>)
 8001c3a:	6013      	str	r3, [r2, #0]
  //htim12 stepper 4



  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	2320      	movs	r3, #32
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4b75      	ldr	r3, [pc, #468]	; (8001e1c <main+0x258>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	4975      	ldr	r1, [pc, #468]	; (8001e20 <main+0x25c>)
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7fe fe12 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(1, 0.0);
 8001c50:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8001e24 <main+0x260>
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7fe fead 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 360.00);
 8001c5a:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8001e28 <main+0x264>
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7fe fec2 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 8001c64:	2300      	movs	r3, #0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2310      	movs	r3, #16
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4b6b      	ldr	r3, [pc, #428]	; (8001e1c <main+0x258>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	496e      	ldr	r1, [pc, #440]	; (8001e2c <main+0x268>)
 8001c72:	2002      	movs	r0, #2
 8001c74:	f7fe fdfe 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(2, 0.0);
 8001c78:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8001e24 <main+0x260>
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f7fe fe99 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 360.00);
 8001c82:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8001e28 <main+0x264>
 8001c86:	2002      	movs	r0, #2
 8001c88:	f7fe feae 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <main+0x26c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4966      	ldr	r1, [pc, #408]	; (8001e34 <main+0x270>)
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f7fe fde9 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(3, 0.0);
 8001ca2:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8001e24 <main+0x260>
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f7fe fe84 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 150.00);
 8001cac:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8001e38 <main+0x274>
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f7fe fe99 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <main+0x258>)
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	495d      	ldr	r1, [pc, #372]	; (8001e3c <main+0x278>)
 8001cc6:	2004      	movs	r0, #4
 8001cc8:	f7fe fdd4 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 8001ccc:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8001e24 <main+0x260>
 8001cd0:	2004      	movs	r0, #4
 8001cd2:	f7fe fe6f 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 36000);
 8001cd6:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8001e40 <main+0x27c>
 8001cda:	2004      	movs	r0, #4
 8001cdc:	f7fe fe84 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7fe fe33 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(2);
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f7fe fe30 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(3);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f7fe fe2d 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(4);
 8001cf2:	2004      	movs	r0, #4
 8001cf4:	f7fe fe2a 	bl	800094c <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 8001cf8:	4845      	ldr	r0, [pc, #276]	; (8001e10 <main+0x24c>)
 8001cfa:	f00a f9e7 	bl	800c0cc <HAL_TIM_Base_Start_IT>

  //PID Setup
  setupPID(1, 0.05, -3200, 3200, 1, 0, 0);
 8001cfe:	eddf 2a49 	vldr	s5, [pc, #292]	; 8001e24 <main+0x260>
 8001d02:	ed9f 2a48 	vldr	s4, [pc, #288]	; 8001e24 <main+0x260>
 8001d06:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001d0a:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8001e44 <main+0x280>
 8001d0e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8001e48 <main+0x284>
 8001d12:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8001e4c <main+0x288>
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7fe fc5a 	bl	80005d0 <setupPID>
  setupPID(2, 0.05, -3200, 3200, 1, 0, 0);
 8001d1c:	eddf 2a41 	vldr	s5, [pc, #260]	; 8001e24 <main+0x260>
 8001d20:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8001e24 <main+0x260>
 8001d24:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001d28:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8001e44 <main+0x280>
 8001d2c:	eddf 0a46 	vldr	s1, [pc, #280]	; 8001e48 <main+0x284>
 8001d30:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8001e4c <main+0x288>
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7fe fc4b 	bl	80005d0 <setupPID>
  setupPID(3, 0.05, -3200, 3200, 1, 0, 0);
 8001d3a:	eddf 2a3a 	vldr	s5, [pc, #232]	; 8001e24 <main+0x260>
 8001d3e:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8001e24 <main+0x260>
 8001d42:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001d46:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8001e44 <main+0x280>
 8001d4a:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8001e48 <main+0x284>
 8001d4e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8001e4c <main+0x288>
 8001d52:	2003      	movs	r0, #3
 8001d54:	f7fe fc3c 	bl	80005d0 <setupPID>
  setupPID(4, 0.05, -3200, 3200, 1, 0, 0);
 8001d58:	eddf 2a32 	vldr	s5, [pc, #200]	; 8001e24 <main+0x260>
 8001d5c:	ed9f 2a31 	vldr	s4, [pc, #196]	; 8001e24 <main+0x260>
 8001d60:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001d64:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8001e44 <main+0x280>
 8001d68:	eddf 0a37 	vldr	s1, [pc, #220]	; 8001e48 <main+0x284>
 8001d6c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001e4c <main+0x288>
 8001d70:	2004      	movs	r0, #4
 8001d72:	f7fe fc2d 	bl	80005d0 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 8001d76:	223c      	movs	r2, #60	; 0x3c
 8001d78:	4935      	ldr	r1, [pc, #212]	; (8001e50 <main+0x28c>)
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f7fe fd1e 	bl	80007bc <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 8001d80:	223c      	movs	r2, #60	; 0x3c
 8001d82:	4934      	ldr	r1, [pc, #208]	; (8001e54 <main+0x290>)
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7fe fd19 	bl	80007bc <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 8001d8a:	223c      	movs	r2, #60	; 0x3c
 8001d8c:	4932      	ldr	r1, [pc, #200]	; (8001e58 <main+0x294>)
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f7fe fd14 	bl	80007bc <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 8001d94:	223c      	movs	r2, #60	; 0x3c
 8001d96:	4931      	ldr	r1, [pc, #196]	; (8001e5c <main+0x298>)
 8001d98:	2004      	movs	r0, #4
 8001d9a:	f7fe fd0f 	bl	80007bc <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 8001d9e:	4930      	ldr	r1, [pc, #192]	; (8001e60 <main+0x29c>)
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff f919 	bl	8000fd8 <Serial_Setup>
  Serial_Setup(2, &huart7);
 8001da6:	492f      	ldr	r1, [pc, #188]	; (8001e64 <main+0x2a0>)
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff f915 	bl	8000fd8 <Serial_Setup>

  Stepper_updateHome(1, 1);
 8001dae:	2101      	movs	r1, #1
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7fe ffb1 	bl	8000d18 <Stepper_updateHome>
  Stepper_updateHome(2, 1);
 8001db6:	2101      	movs	r1, #1
 8001db8:	2002      	movs	r0, #2
 8001dba:	f7fe ffad 	bl	8000d18 <Stepper_updateHome>
  Stepper_updateHome(3, 1);
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f7fe ffa9 	bl	8000d18 <Stepper_updateHome>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  a = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
	  Stepper_runStep(1);
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7fe ff4a 	bl	8000c60 <Stepper_runStep>
	  Stepper_runStep(2);
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f7fe ff47 	bl	8000c60 <Stepper_runStep>
	  Stepper_runStep(3);
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f7fe ff44 	bl	8000c60 <Stepper_runStep>
	  Stepper_runStep(4);
 8001dd8:	2004      	movs	r0, #4
 8001dda:	f7fe ff41 	bl	8000c60 <Stepper_runStep>
	  if(state){
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <main+0x2a4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00e      	beq.n	8001e04 <main+0x240>
		  Stepper_runStep(1);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7fe ff3a 	bl	8000c60 <Stepper_runStep>
		  Stepper_runStep(2);
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7fe ff37 	bl	8000c60 <Stepper_runStep>
		  Stepper_runStep(3);
 8001df2:	2003      	movs	r0, #3
 8001df4:	f7fe ff34 	bl	8000c60 <Stepper_runStep>
		  Stepper_runStep(4);
 8001df8:	2004      	movs	r0, #4
 8001dfa:	f7fe ff31 	bl	8000c60 <Stepper_runStep>
		  state = 0;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <main+0x2a4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
	  }

	  selectPacket(1);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff fa6f 	bl	80012e8 <selectPacket>
	  Stepper_runStep(1);
 8001e0a:	e7dc      	b.n	8001dc6 <main+0x202>
 8001e0c:	24000d6c 	.word	0x24000d6c
 8001e10:	24000abc 	.word	0x24000abc
 8001e14:	000f4240 	.word	0x000f4240
 8001e18:	24000d1c 	.word	0x24000d1c
 8001e1c:	58021400 	.word	0x58021400
 8001e20:	24000f3c 	.word	0x24000f3c
 8001e24:	00000000 	.word	0x00000000
 8001e28:	43b40000 	.word	0x43b40000
 8001e2c:	240009f8 	.word	0x240009f8
 8001e30:	58021000 	.word	0x58021000
 8001e34:	24000cd0 	.word	0x24000cd0
 8001e38:	43160000 	.word	0x43160000
 8001e3c:	24000e34 	.word	0x24000e34
 8001e40:	470ca000 	.word	0x470ca000
 8001e44:	45480000 	.word	0x45480000
 8001e48:	c5480000 	.word	0xc5480000
 8001e4c:	3d4ccccd 	.word	0x3d4ccccd
 8001e50:	24000d20 	.word	0x24000d20
 8001e54:	24000b08 	.word	0x24000b08
 8001e58:	240005a4 	.word	0x240005a4
 8001e5c:	24000d70 	.word	0x24000d70
 8001e60:	24000bdc 	.word	0x24000bdc
 8001e64:	24000514 	.word	0x24000514
 8001e68:	24000408 	.word	0x24000408

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b09c      	sub	sp, #112	; 0x70
 8001e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	224c      	movs	r2, #76	; 0x4c
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f00e f86c 	bl	800ff58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2220      	movs	r2, #32
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f00e f866 	bl	800ff58 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f006 fe1d 	bl	8008acc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e92:	2300      	movs	r3, #0
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <SystemClock_Config+0x100>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <SystemClock_Config+0x100>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ea2:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <SystemClock_Config+0x100>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <SystemClock_Config+0x104>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001eb4:	4a2e      	ldr	r2, [pc, #184]	; (8001f70 <SystemClock_Config+0x104>)
 8001eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <SystemClock_Config+0x104>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ec8:	bf00      	nop
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <SystemClock_Config+0x104>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ed6:	d1f8      	bne.n	8001eca <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <SystemClock_Config+0x108>)
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <SystemClock_Config+0x108>)
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001ee4:	2322      	movs	r3, #34	; 0x22
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eec:	2340      	movs	r3, #64	; 0x40
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001efc:	2304      	movs	r3, #4
 8001efe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001f00:	2319      	movs	r3, #25
 8001f02:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f10:	230c      	movs	r3, #12
 8001f12:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	4618      	mov	r0, r3
 8001f22:	f006 fe1d 	bl	8008b60 <HAL_RCC_OscConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f2c:	f000 ff38 	bl	8002da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f30:	233f      	movs	r3, #63	; 0x3f
 8001f32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f34:	2303      	movs	r3, #3
 8001f36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2102      	movs	r1, #2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f007 fa2f 	bl	80093b8 <HAL_RCC_ClockConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001f60:	f000 ff1e 	bl	8002da0 <Error_Handler>
  }
}
 8001f64:	bf00      	nop
 8001f66:	3770      	adds	r7, #112	; 0x70
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	58000400 	.word	0x58000400
 8001f70:	58024800 	.word	0x58024800
 8001f74:	58024400 	.word	0x58024400

08001f78 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
 8001f8c:	615a      	str	r2, [r3, #20]
 8001f8e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001f92:	4a2a      	ldr	r2, [pc, #168]	; (800203c <MX_ADC3_Init+0xc4>)
 8001f94:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001f98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f9c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001faa:	4b23      	ldr	r3, [pc, #140]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fac:	2204      	movs	r2, #4
 8001fae:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001fb0:	4b21      	ldr	r3, [pc, #132]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001fee:	4812      	ldr	r0, [pc, #72]	; (8002038 <MX_ADC3_Init+0xc0>)
 8001ff0:	f002 f8e6 	bl	80041c0 <HAL_ADC_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001ffa:	f000 fed1 	bl	8002da0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <MX_ADC3_Init+0xc8>)
 8002000:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002002:	2306      	movs	r3, #6
 8002004:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800200a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800200e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002010:	2304      	movs	r3, #4
 8002012:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	4619      	mov	r1, r3
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_ADC3_Init+0xc0>)
 8002022:	f002 fa6d 	bl	8004500 <HAL_ADC_ConfigChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 800202c:	f000 feb8 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	24000c6c 	.word	0x24000c6c
 800203c:	58026000 	.word	0x58026000
 8002040:	04300002 	.word	0x04300002

08002044 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002048:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <MX_ETH_Init+0x90>)
 800204a:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <MX_ETH_Init+0x94>)
 800204c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800204e:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <MX_ETH_Init+0x90>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <MX_ETH_Init+0x90>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	3301      	adds	r3, #1
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <MX_ETH_Init+0x90>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	3302      	adds	r3, #2
 8002066:	22e1      	movs	r2, #225	; 0xe1
 8002068:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <MX_ETH_Init+0x90>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	3303      	adds	r3, #3
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <MX_ETH_Init+0x90>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	3304      	adds	r3, #4
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <MX_ETH_Init+0x90>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	3305      	adds	r3, #5
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <MX_ETH_Init+0x90>)
 800208a:	2201      	movs	r2, #1
 800208c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_ETH_Init+0x90>)
 8002090:	4a12      	ldr	r2, [pc, #72]	; (80020dc <MX_ETH_Init+0x98>)
 8002092:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_ETH_Init+0x90>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <MX_ETH_Init+0x9c>)
 8002098:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MX_ETH_Init+0x90>)
 800209c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80020a0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80020a2:	480c      	ldr	r0, [pc, #48]	; (80020d4 <MX_ETH_Init+0x90>)
 80020a4:	f005 fdd0 	bl	8007c48 <HAL_ETH_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80020ae:	f000 fe77 	bl	8002da0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80020b2:	2234      	movs	r2, #52	; 0x34
 80020b4:	2100      	movs	r1, #0
 80020b6:	480b      	ldr	r0, [pc, #44]	; (80020e4 <MX_ETH_Init+0xa0>)
 80020b8:	f00d ff4e 	bl	800ff58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_ETH_Init+0xa0>)
 80020be:	2221      	movs	r2, #33	; 0x21
 80020c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <MX_ETH_Init+0xa0>)
 80020c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_ETH_Init+0xa0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	24000e80 	.word	0x24000e80
 80020d8:	40028000 	.word	0x40028000
 80020dc:	24000070 	.word	0x24000070
 80020e0:	24000010 	.word	0x24000010
 80020e4:	24000f08 	.word	0x24000f08

080020e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <MX_SPI3_Init+0xa4>)
 80020ee:	4a28      	ldr	r2, [pc, #160]	; (8002190 <MX_SPI3_Init+0xa8>)
 80020f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <MX_SPI3_Init+0xa4>)
 80020f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <MX_SPI3_Init+0xa4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <MX_SPI3_Init+0xa4>)
 8002102:	2203      	movs	r2, #3
 8002104:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_SPI3_Init+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_SPI3_Init+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_SPI3_Init+0xa4>)
 8002114:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002118:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_SPI3_Init+0xa4>)
 800211c:	2200      	movs	r2, #0
 800211e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_SPI3_Init+0xa4>)
 8002122:	2200      	movs	r2, #0
 8002124:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <MX_SPI3_Init+0xa4>)
 8002128:	2200      	movs	r2, #0
 800212a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <MX_SPI3_Init+0xa4>)
 800212e:	2200      	movs	r2, #0
 8002130:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <MX_SPI3_Init+0xa4>)
 8002134:	2200      	movs	r2, #0
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_SPI3_Init+0xa4>)
 800213a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800213e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <MX_SPI3_Init+0xa4>)
 8002142:	2200      	movs	r2, #0
 8002144:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_SPI3_Init+0xa4>)
 8002148:	2200      	movs	r2, #0
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_SPI3_Init+0xa4>)
 800214e:	2200      	movs	r2, #0
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_SPI3_Init+0xa4>)
 8002154:	2200      	movs	r2, #0
 8002156:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_SPI3_Init+0xa4>)
 800215a:	2200      	movs	r2, #0
 800215c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_SPI3_Init+0xa4>)
 8002160:	2200      	movs	r2, #0
 8002162:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_SPI3_Init+0xa4>)
 8002166:	2200      	movs	r2, #0
 8002168:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_SPI3_Init+0xa4>)
 800216c:	2200      	movs	r2, #0
 800216e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_SPI3_Init+0xa4>)
 8002172:	2200      	movs	r2, #0
 8002174:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_SPI3_Init+0xa4>)
 8002178:	f009 fe30 	bl	800bddc <HAL_SPI_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8002182:	f000 fe0d 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	24000b54 	.word	0x24000b54
 8002190:	40003c00 	.word	0x40003c00

08002194 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00d fed8 	bl	800ff58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	463b      	mov	r3, r7
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <MX_TIM1_Init+0xac>)
 80021b4:	4a23      	ldr	r2, [pc, #140]	; (8002244 <MX_TIM1_Init+0xb0>)
 80021b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <MX_TIM1_Init+0xac>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <MX_TIM1_Init+0xac>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <MX_TIM1_Init+0xac>)
 80021c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <MX_TIM1_Init+0xac>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <MX_TIM1_Init+0xac>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <MX_TIM1_Init+0xac>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021de:	2303      	movs	r3, #3
 80021e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021e6:	2301      	movs	r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021f6:	2301      	movs	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	4619      	mov	r1, r3
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <MX_TIM1_Init+0xac>)
 800220a:	f00a f9dd 	bl	800c5c8 <HAL_TIM_Encoder_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002214:	f000 fdc4 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002218:	2300      	movs	r3, #0
 800221a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_TIM1_Init+0xac>)
 800222a:	f00b fa89 	bl	800d740 <HAL_TIMEx_MasterConfigSynchronization>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002234:	f000 fdb4 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	3730      	adds	r7, #48	; 0x30
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	24000d20 	.word	0x24000d20
 8002244:	40010000 	.word	0x40010000

08002248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	2224      	movs	r2, #36	; 0x24
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f00d fe7e 	bl	800ff58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	463b      	mov	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <MX_TIM2_Init+0xa4>)
 8002268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <MX_TIM2_Init+0xa4>)
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <MX_TIM2_Init+0xa4>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <MX_TIM2_Init+0xa4>)
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <MX_TIM2_Init+0xa4>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002288:	4b18      	ldr	r3, [pc, #96]	; (80022ec <MX_TIM2_Init+0xa4>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800228e:	2301      	movs	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002296:	2301      	movs	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022a6:	2301      	movs	r3, #1
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	4619      	mov	r1, r3
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <MX_TIM2_Init+0xa4>)
 80022ba:	f00a f985 	bl	800c5c8 <HAL_TIM_Encoder_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80022c4:	f000 fd6c 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d0:	463b      	mov	r3, r7
 80022d2:	4619      	mov	r1, r3
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_TIM2_Init+0xa4>)
 80022d6:	f00b fa33 	bl	800d740 <HAL_TIMEx_MasterConfigSynchronization>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80022e0:	f000 fd5e 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	3730      	adds	r7, #48	; 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	24000d70 	.word	0x24000d70

080022f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	2224      	movs	r2, #36	; 0x24
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f00d fe2a 	bl	800ff58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	463b      	mov	r3, r7
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <MX_TIM3_Init+0xa4>)
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <MX_TIM3_Init+0xa8>)
 8002312:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <MX_TIM3_Init+0xa4>)
 8002316:	2200      	movs	r2, #0
 8002318:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <MX_TIM3_Init+0xa4>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <MX_TIM3_Init+0xa4>)
 8002322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002326:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <MX_TIM3_Init+0xa4>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <MX_TIM3_Init+0xa4>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002334:	2303      	movs	r3, #3
 8002336:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800233c:	2301      	movs	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800234c:	2301      	movs	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	4619      	mov	r1, r3
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <MX_TIM3_Init+0xa4>)
 8002360:	f00a f932 	bl	800c5c8 <HAL_TIM_Encoder_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800236a:	f000 fd19 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002376:	463b      	mov	r3, r7
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <MX_TIM3_Init+0xa4>)
 800237c:	f00b f9e0 	bl	800d740 <HAL_TIMEx_MasterConfigSynchronization>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002386:	f000 fd0b 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	3730      	adds	r7, #48	; 0x30
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	24000b08 	.word	0x24000b08
 8002398:	40000400 	.word	0x40000400

0800239c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2224      	movs	r2, #36	; 0x24
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f00d fdd4 	bl	800ff58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	463b      	mov	r3, r7
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <MX_TIM4_Init+0xa4>)
 80023bc:	4a21      	ldr	r2, [pc, #132]	; (8002444 <MX_TIM4_Init+0xa8>)
 80023be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <MX_TIM4_Init+0xa4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <MX_TIM4_Init+0xa4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <MX_TIM4_Init+0xa4>)
 80023ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <MX_TIM4_Init+0xa4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MX_TIM4_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023e0:	2303      	movs	r3, #3
 80023e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023e8:	2301      	movs	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4619      	mov	r1, r3
 800240a:	480d      	ldr	r0, [pc, #52]	; (8002440 <MX_TIM4_Init+0xa4>)
 800240c:	f00a f8dc 	bl	800c5c8 <HAL_TIM_Encoder_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002416:	f000 fcc3 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	4619      	mov	r1, r3
 8002426:	4806      	ldr	r0, [pc, #24]	; (8002440 <MX_TIM4_Init+0xa4>)
 8002428:	f00b f98a 	bl	800d740 <HAL_TIMEx_MasterConfigSynchronization>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002432:	f000 fcb5 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	; 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	240005a4 	.word	0x240005a4
 8002444:	40000800 	.word	0x40000800

08002448 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <MX_TIM5_Init+0x94>)
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <MX_TIM5_Init+0x98>)
 800246a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <MX_TIM5_Init+0x94>)
 800246e:	2200      	movs	r2, #0
 8002470:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <MX_TIM5_Init+0x94>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8002478:	4b18      	ldr	r3, [pc, #96]	; (80024dc <MX_TIM5_Init+0x94>)
 800247a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800247e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <MX_TIM5_Init+0x94>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <MX_TIM5_Init+0x94>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800248c:	4813      	ldr	r0, [pc, #76]	; (80024dc <MX_TIM5_Init+0x94>)
 800248e:	f009 fdc6 	bl	800c01e <HAL_TIM_Base_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002498:	f000 fc82 	bl	8002da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	4619      	mov	r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <MX_TIM5_Init+0x94>)
 80024aa:	f00a fbf5 	bl	800cc98 <HAL_TIM_ConfigClockSource>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80024b4:	f000 fc74 	bl	8002da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	4619      	mov	r1, r3
 80024c4:	4805      	ldr	r0, [pc, #20]	; (80024dc <MX_TIM5_Init+0x94>)
 80024c6:	f00b f93b 	bl	800d740 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80024d0:	f000 fc66 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	24000abc 	.word	0x24000abc
 80024e0:	40000c00 	.word	0x40000c00

080024e4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ea:	f107 0320 	add.w	r3, r7, #32
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
 8002504:	611a      	str	r2, [r3, #16]
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <MX_TIM12_Init+0xc0>)
 800250c:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <MX_TIM12_Init+0xc4>)
 800250e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <MX_TIM12_Init+0xc0>)
 8002512:	2200      	movs	r2, #0
 8002514:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <MX_TIM12_Init+0xc0>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <MX_TIM12_Init+0xc0>)
 800251e:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002522:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002524:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <MX_TIM12_Init+0xc0>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <MX_TIM12_Init+0xc0>)
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002530:	481c      	ldr	r0, [pc, #112]	; (80025a4 <MX_TIM12_Init+0xc0>)
 8002532:	f009 fd74 	bl	800c01e <HAL_TIM_Base_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800253c:	f000 fc30 	bl	8002da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002544:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	4619      	mov	r1, r3
 800254c:	4815      	ldr	r0, [pc, #84]	; (80025a4 <MX_TIM12_Init+0xc0>)
 800254e:	f00a fba3 	bl	800cc98 <HAL_TIM_ConfigClockSource>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002558:	f000 fc22 	bl	8002da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800255c:	4811      	ldr	r0, [pc, #68]	; (80025a4 <MX_TIM12_Init+0xc0>)
 800255e:	f009 fe2d 	bl	800c1bc <HAL_TIM_PWM_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002568:	f000 fc1a 	bl	8002da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256c:	2360      	movs	r3, #96	; 0x60
 800256e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002570:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2204      	movs	r2, #4
 8002582:	4619      	mov	r1, r3
 8002584:	4807      	ldr	r0, [pc, #28]	; (80025a4 <MX_TIM12_Init+0xc0>)
 8002586:	f00a fa73 	bl	800ca70 <HAL_TIM_PWM_ConfigChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002590:	f000 fc06 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <MX_TIM12_Init+0xc0>)
 8002596:	f000 fff1 	bl	800357c <HAL_TIM_MspPostInit>

}
 800259a:	bf00      	nop
 800259c:	3730      	adds	r7, #48	; 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	24000e34 	.word	0x24000e34
 80025a8:	40001800 	.word	0x40001800

080025ac <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
 80025c0:	615a      	str	r2, [r3, #20]
 80025c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80025c4:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <MX_TIM13_Init+0x94>)
 80025c6:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <MX_TIM13_Init+0x98>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <MX_TIM13_Init+0x94>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <MX_TIM13_Init+0x94>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_TIM13_Init+0x94>)
 80025d8:	f24f 4224 	movw	r2, #62500	; 0xf424
 80025dc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <MX_TIM13_Init+0x94>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_TIM13_Init+0x94>)
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80025ea:	4815      	ldr	r0, [pc, #84]	; (8002640 <MX_TIM13_Init+0x94>)
 80025ec:	f009 fd17 	bl	800c01e <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80025f6:	f000 fbd3 	bl	8002da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80025fa:	4811      	ldr	r0, [pc, #68]	; (8002640 <MX_TIM13_Init+0x94>)
 80025fc:	f009 fdde 	bl	800c1bc <HAL_TIM_PWM_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002606:	f000 fbcb 	bl	8002da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260a:	2360      	movs	r3, #96	; 0x60
 800260c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 800260e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002612:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	2200      	movs	r2, #0
 8002620:	4619      	mov	r1, r3
 8002622:	4807      	ldr	r0, [pc, #28]	; (8002640 <MX_TIM13_Init+0x94>)
 8002624:	f00a fa24 	bl	800ca70 <HAL_TIM_PWM_ConfigChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 800262e:	f000 fbb7 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002632:	4803      	ldr	r0, [pc, #12]	; (8002640 <MX_TIM13_Init+0x94>)
 8002634:	f000 ffa2 	bl	800357c <HAL_TIM_MspPostInit>

}
 8002638:	bf00      	nop
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	24000cd0 	.word	0x24000cd0
 8002644:	40001c00 	.word	0x40001c00

08002648 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b092      	sub	sp, #72	; 0x48
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800264e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002662:	463b      	mov	r3, r7
 8002664:	222c      	movs	r2, #44	; 0x2c
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f00d fc75 	bl	800ff58 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <MX_TIM16_Init+0xec>)
 8002670:	4a31      	ldr	r2, [pc, #196]	; (8002738 <MX_TIM16_Init+0xf0>)
 8002672:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002674:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <MX_TIM16_Init+0xec>)
 8002676:	2200      	movs	r2, #0
 8002678:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <MX_TIM16_Init+0xec>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <MX_TIM16_Init+0xec>)
 8002682:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002686:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <MX_TIM16_Init+0xec>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <MX_TIM16_Init+0xec>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <MX_TIM16_Init+0xec>)
 8002696:	2280      	movs	r2, #128	; 0x80
 8002698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800269a:	4826      	ldr	r0, [pc, #152]	; (8002734 <MX_TIM16_Init+0xec>)
 800269c:	f009 fcbf 	bl	800c01e <HAL_TIM_Base_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80026a6:	f000 fb7b 	bl	8002da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80026aa:	4822      	ldr	r0, [pc, #136]	; (8002734 <MX_TIM16_Init+0xec>)
 80026ac:	f009 fd86 	bl	800c1bc <HAL_TIM_PWM_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80026b6:	f000 fb73 	bl	8002da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ba:	2360      	movs	r3, #96	; 0x60
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 80026be:	f647 2312 	movw	r3, #31250	; 0x7a12
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c4:	2300      	movs	r3, #0
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026c8:	2300      	movs	r3, #0
 80026ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026dc:	2200      	movs	r2, #0
 80026de:	4619      	mov	r1, r3
 80026e0:	4814      	ldr	r0, [pc, #80]	; (8002734 <MX_TIM16_Init+0xec>)
 80026e2:	f00a f9c5 	bl	800ca70 <HAL_TIM_PWM_ConfigChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80026ec:	f000 fb58 	bl	8002da0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002708:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002712:	463b      	mov	r3, r7
 8002714:	4619      	mov	r1, r3
 8002716:	4807      	ldr	r0, [pc, #28]	; (8002734 <MX_TIM16_Init+0xec>)
 8002718:	f00b f8a0 	bl	800d85c <HAL_TIMEx_ConfigBreakDeadTime>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002722:	f000 fb3d 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002726:	4803      	ldr	r0, [pc, #12]	; (8002734 <MX_TIM16_Init+0xec>)
 8002728:	f000 ff28 	bl	800357c <HAL_TIM_MspPostInit>

}
 800272c:	bf00      	nop
 800272e:	3748      	adds	r7, #72	; 0x48
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	24000f3c 	.word	0x24000f3c
 8002738:	40014400 	.word	0x40014400

0800273c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b092      	sub	sp, #72	; 0x48
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	611a      	str	r2, [r3, #16]
 8002752:	615a      	str	r2, [r3, #20]
 8002754:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002756:	463b      	mov	r3, r7
 8002758:	222c      	movs	r2, #44	; 0x2c
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f00d fbfb 	bl	800ff58 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002762:	4b31      	ldr	r3, [pc, #196]	; (8002828 <MX_TIM17_Init+0xec>)
 8002764:	4a31      	ldr	r2, [pc, #196]	; (800282c <MX_TIM17_Init+0xf0>)
 8002766:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002768:	4b2f      	ldr	r3, [pc, #188]	; (8002828 <MX_TIM17_Init+0xec>)
 800276a:	2200      	movs	r2, #0
 800276c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276e:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <MX_TIM17_Init+0xec>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8002774:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <MX_TIM17_Init+0xec>)
 8002776:	f24f 4224 	movw	r2, #62500	; 0xf424
 800277a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277c:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <MX_TIM17_Init+0xec>)
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002782:	4b29      	ldr	r3, [pc, #164]	; (8002828 <MX_TIM17_Init+0xec>)
 8002784:	2200      	movs	r2, #0
 8002786:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <MX_TIM17_Init+0xec>)
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800278e:	4826      	ldr	r0, [pc, #152]	; (8002828 <MX_TIM17_Init+0xec>)
 8002790:	f009 fc45 	bl	800c01e <HAL_TIM_Base_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800279a:	f000 fb01 	bl	8002da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800279e:	4822      	ldr	r0, [pc, #136]	; (8002828 <MX_TIM17_Init+0xec>)
 80027a0:	f009 fd0c 	bl	800c1bc <HAL_TIM_PWM_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80027aa:	f000 faf9 	bl	8002da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ae:	2360      	movs	r3, #96	; 0x60
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 80027b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b8:	2300      	movs	r3, #0
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027bc:	2300      	movs	r3, #0
 80027be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d0:	2200      	movs	r2, #0
 80027d2:	4619      	mov	r1, r3
 80027d4:	4814      	ldr	r0, [pc, #80]	; (8002828 <MX_TIM17_Init+0xec>)
 80027d6:	f00a f94b 	bl	800ca70 <HAL_TIM_PWM_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80027e0:	f000 fade 	bl	8002da0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002806:	463b      	mov	r3, r7
 8002808:	4619      	mov	r1, r3
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <MX_TIM17_Init+0xec>)
 800280c:	f00b f826 	bl	800d85c <HAL_TIMEx_ConfigBreakDeadTime>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8002816:	f000 fac3 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800281a:	4803      	ldr	r0, [pc, #12]	; (8002828 <MX_TIM17_Init+0xec>)
 800281c:	f000 feae 	bl	800357c <HAL_TIM_MspPostInit>

}
 8002820:	bf00      	nop
 8002822:	3748      	adds	r7, #72	; 0x48
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	240009f8 	.word	0x240009f8
 800282c:	40014800 	.word	0x40014800

08002830 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <MX_UART5_Init+0x90>)
 8002836:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <MX_UART5_Init+0x94>)
 8002838:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <MX_UART5_Init+0x90>)
 800283c:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <MX_UART5_Init+0x98>)
 800283e:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002840:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <MX_UART5_Init+0x90>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <MX_UART5_Init+0x90>)
 8002848:	2200      	movs	r2, #0
 800284a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800284c:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <MX_UART5_Init+0x90>)
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <MX_UART5_Init+0x90>)
 8002854:	220c      	movs	r2, #12
 8002856:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <MX_UART5_Init+0x90>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800285e:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <MX_UART5_Init+0x90>)
 8002860:	2200      	movs	r2, #0
 8002862:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002864:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <MX_UART5_Init+0x90>)
 8002866:	2200      	movs	r2, #0
 8002868:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <MX_UART5_Init+0x90>)
 800286c:	2200      	movs	r2, #0
 800286e:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <MX_UART5_Init+0x90>)
 8002872:	2200      	movs	r2, #0
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002876:	4812      	ldr	r0, [pc, #72]	; (80028c0 <MX_UART5_Init+0x90>)
 8002878:	f00b f88c 	bl	800d994 <HAL_UART_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 8002882:	f000 fa8d 	bl	8002da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002886:	2100      	movs	r1, #0
 8002888:	480d      	ldr	r0, [pc, #52]	; (80028c0 <MX_UART5_Init+0x90>)
 800288a:	f00c ff72 	bl	800f772 <HAL_UARTEx_SetTxFifoThreshold>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_UART5_Init+0x68>
  {
    Error_Handler();
 8002894:	f000 fa84 	bl	8002da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002898:	2100      	movs	r1, #0
 800289a:	4809      	ldr	r0, [pc, #36]	; (80028c0 <MX_UART5_Init+0x90>)
 800289c:	f00c ffa7 	bl	800f7ee <HAL_UARTEx_SetRxFifoThreshold>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 80028a6:	f000 fa7b 	bl	8002da0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_UART5_Init+0x90>)
 80028ac:	f00c ff28 	bl	800f700 <HAL_UARTEx_DisableFifoMode>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 80028b6:	f000 fa73 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	24000bdc 	.word	0x24000bdc
 80028c4:	40005000 	.word	0x40005000
 80028c8:	000f4240 	.word	0x000f4240

080028cc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <MX_UART7_Init+0x90>)
 80028d2:	4a23      	ldr	r2, [pc, #140]	; (8002960 <MX_UART7_Init+0x94>)
 80028d4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <MX_UART7_Init+0x90>)
 80028d8:	4a22      	ldr	r2, [pc, #136]	; (8002964 <MX_UART7_Init+0x98>)
 80028da:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <MX_UART7_Init+0x90>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <MX_UART7_Init+0x90>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80028e8:	4b1c      	ldr	r3, [pc, #112]	; (800295c <MX_UART7_Init+0x90>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <MX_UART7_Init+0x90>)
 80028f0:	220c      	movs	r2, #12
 80028f2:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <MX_UART7_Init+0x90>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_UART7_Init+0x90>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <MX_UART7_Init+0x90>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <MX_UART7_Init+0x90>)
 8002908:	2200      	movs	r2, #0
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <MX_UART7_Init+0x90>)
 800290e:	2200      	movs	r2, #0
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002912:	4812      	ldr	r0, [pc, #72]	; (800295c <MX_UART7_Init+0x90>)
 8002914:	f00b f83e 	bl	800d994 <HAL_UART_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 800291e:	f000 fa3f 	bl	8002da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002922:	2100      	movs	r1, #0
 8002924:	480d      	ldr	r0, [pc, #52]	; (800295c <MX_UART7_Init+0x90>)
 8002926:	f00c ff24 	bl	800f772 <HAL_UARTEx_SetTxFifoThreshold>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8002930:	f000 fa36 	bl	8002da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002934:	2100      	movs	r1, #0
 8002936:	4809      	ldr	r0, [pc, #36]	; (800295c <MX_UART7_Init+0x90>)
 8002938:	f00c ff59 	bl	800f7ee <HAL_UARTEx_SetRxFifoThreshold>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8002942:	f000 fa2d 	bl	8002da0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_UART7_Init+0x90>)
 8002948:	f00c feda 	bl	800f700 <HAL_UARTEx_DisableFifoMode>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8002952:	f000 fa25 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	24000514 	.word	0x24000514
 8002960:	40007800 	.word	0x40007800
 8002964:	000f4240 	.word	0x000f4240

08002968 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800296e:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002970:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002974:	2209      	movs	r2, #9
 8002976:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800297a:	2202      	movs	r2, #2
 800297c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002986:	2202      	movs	r2, #2
 8002988:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800298c:	2201      	movs	r2, #1
 800298e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002998:	2200      	movs	r2, #0
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800299e:	2201      	movs	r2, #1
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029b0:	f005 ff43 	bl	800883a <HAL_PCD_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80029ba:	f000 f9f1 	bl	8002da0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	240005f0 	.word	0x240005f0
 80029c8:	40080000 	.word	0x40080000

080029cc <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <MX_BDMA_Init+0x3c>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d8:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <MX_BDMA_Init+0x3c>)
 80029da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <MX_BDMA_Init+0x3c>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	2081      	movs	r0, #129	; 0x81
 80029f6:	f002 fab8 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80029fa:	2081      	movs	r0, #129	; 0x81
 80029fc:	f002 facf 	bl	8004f9e <HAL_NVIC_EnableIRQ>

}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	58024400 	.word	0x58024400

08002a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_DMA_Init+0x4c>)
 8002a14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a18:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <MX_DMA_Init+0x4c>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <MX_DMA_Init+0x4c>)
 8002a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	200b      	movs	r0, #11
 8002a36:	f002 fa98 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a3a:	200b      	movs	r0, #11
 8002a3c:	f002 faaf 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2100      	movs	r1, #0
 8002a44:	200c      	movs	r0, #12
 8002a46:	f002 fa90 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002a4a:	200c      	movs	r0, #12
 8002a4c:	f002 faa7 	bl	8004f9e <HAL_NVIC_EnableIRQ>

}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	58024400 	.word	0x58024400

08002a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a72:	4b9d      	ldr	r3, [pc, #628]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a78:	4a9b      	ldr	r2, [pc, #620]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a82:	4b99      	ldr	r3, [pc, #612]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a90:	4b95      	ldr	r3, [pc, #596]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a96:	4a94      	ldr	r2, [pc, #592]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002a98:	f043 0320 	orr.w	r3, r3, #32
 8002a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa0:	4b91      	ldr	r3, [pc, #580]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aae:	4b8e      	ldr	r3, [pc, #568]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab4:	4a8c      	ldr	r2, [pc, #560]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002abe:	4b8a      	ldr	r3, [pc, #552]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	4b86      	ldr	r3, [pc, #536]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad2:	4a85      	ldr	r2, [pc, #532]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002adc:	4b82      	ldr	r3, [pc, #520]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b7f      	ldr	r3, [pc, #508]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af0:	4a7d      	ldr	r2, [pc, #500]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afa:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b08:	4b77      	ldr	r3, [pc, #476]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0e:	4a76      	ldr	r2, [pc, #472]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b18:	4b73      	ldr	r3, [pc, #460]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b26:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002b2e:	f043 0310 	orr.w	r3, r3, #16
 8002b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b36:	4b6c      	ldr	r3, [pc, #432]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4a:	4a67      	ldr	r2, [pc, #412]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002b4c:	f043 0308 	orr.w	r3, r3, #8
 8002b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b54:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <MX_GPIO_Init+0x28c>)
 8002b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002b68:	4860      	ldr	r0, [pc, #384]	; (8002cec <MX_GPIO_Init+0x290>)
 8002b6a:	f005 fe33 	bl	80087d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f644 4101 	movw	r1, #19457	; 0x4c01
 8002b74:	485e      	ldr	r0, [pc, #376]	; (8002cf0 <MX_GPIO_Init+0x294>)
 8002b76:	f005 fe2d 	bl	80087d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002b80:	485c      	ldr	r0, [pc, #368]	; (8002cf4 <MX_GPIO_Init+0x298>)
 8002b82:	f005 fe27 	bl	80087d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002b8c:	485a      	ldr	r0, [pc, #360]	; (8002cf8 <MX_GPIO_Init+0x29c>)
 8002b8e:	f005 fe21 	bl	80087d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002b92:	2200      	movs	r2, #0
 8002b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b98:	4858      	ldr	r0, [pc, #352]	; (8002cfc <MX_GPIO_Init+0x2a0>)
 8002b9a:	f005 fe1b 	bl	80087d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4853      	ldr	r0, [pc, #332]	; (8002d00 <MX_GPIO_Init+0x2a4>)
 8002bb4:	f005 fc5e 	bl	8008474 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin PF9 DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin;
 8002bb8:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4846      	ldr	r0, [pc, #280]	; (8002cec <MX_GPIO_Init+0x290>)
 8002bd2:	f005 fc4f 	bl	8008474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 8002bd6:	f644 4301 	movw	r3, #19457	; 0x4c01
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	4619      	mov	r1, r3
 8002bee:	4840      	ldr	r0, [pc, #256]	; (8002cf0 <MX_GPIO_Init+0x294>)
 8002bf0:	f005 fc40 	bl	8008474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002bf4:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2300      	movs	r3, #0
 8002c04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4839      	ldr	r0, [pc, #228]	; (8002cf4 <MX_GPIO_Init+0x298>)
 8002c0e:	f005 fc31 	bl	8008474 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|LD2_Pin;
 8002c12:	f44f 7381 	mov.w	r3, #258	; 0x102
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4833      	ldr	r0, [pc, #204]	; (8002cf8 <MX_GPIO_Init+0x29c>)
 8002c2c:	f005 fc22 	bl	8008474 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c42:	2307      	movs	r3, #7
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	482b      	ldr	r0, [pc, #172]	; (8002cfc <MX_GPIO_Init+0x2a0>)
 8002c4e:	f005 fc11 	bl	8008474 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4824      	ldr	r0, [pc, #144]	; (8002cfc <MX_GPIO_Init+0x2a0>)
 8002c6c:	f005 fc02 	bl	8008474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c70:	2304      	movs	r3, #4
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c82:	4619      	mov	r1, r3
 8002c84:	481b      	ldr	r0, [pc, #108]	; (8002cf4 <MX_GPIO_Init+0x298>)
 8002c86:	f005 fbf5 	bl	8008474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4817      	ldr	r0, [pc, #92]	; (8002cfc <MX_GPIO_Init+0x2a0>)
 8002ca0:	f005 fbe8 	bl	8008474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 8002ca4:	23f0      	movs	r3, #240	; 0xf0
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ca8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4810      	ldr	r0, [pc, #64]	; (8002cfc <MX_GPIO_Init+0x2a0>)
 8002cba:	f005 fbdb 	bl	8008474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	200a      	movs	r0, #10
 8002cc4:	f002 f951 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002cc8:	200a      	movs	r0, #10
 8002cca:	f002 f968 	bl	8004f9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2017      	movs	r0, #23
 8002cd4:	f002 f949 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cd8:	2017      	movs	r0, #23
 8002cda:	f002 f960 	bl	8004f9e <HAL_NVIC_EnableIRQ>

}
 8002cde:	bf00      	nop
 8002ce0:	3738      	adds	r7, #56	; 0x38
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	58024400 	.word	0x58024400
 8002cec:	58021400 	.word	0x58021400
 8002cf0:	58020400 	.word	0x58020400
 8002cf4:	58021800 	.word	0x58021800
 8002cf8:	58021000 	.word	0x58021000
 8002cfc:	58020c00 	.word	0x58020c00
 8002d00:	58020800 	.word	0x58020800

08002d04 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <HAL_UART_RxCpltCallback+0x2c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7fe facf 	bl	80012b8 <data_in>
	}
	if(huart==&huart7){
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <HAL_UART_RxCpltCallback+0x30>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d102      	bne.n	8002d28 <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 8002d22:	2002      	movs	r0, #2
 8002d24:	f7fe fac8 	bl	80012b8 <data_in>
	}
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	24000bdc 	.word	0x24000bdc
 8002d34:	24000514 	.word	0x24000514

08002d38 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a06      	ldr	r2, [pc, #24]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d102      	bne.n	8002d4e <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
	}
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	24000abc 	.word	0x24000abc
 8002d60:	24000408 	.word	0x24000408

08002d64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d103      	bne.n	8002d7c <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 1);
 8002d74:	2101      	movs	r1, #1
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7fd ffce 	bl	8000d18 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d103      	bne.n	8002d8a <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 1);
 8002d82:	2101      	movs	r1, #1
 8002d84:	2002      	movs	r0, #2
 8002d86:	f7fd ffc7 	bl	8000d18 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	d103      	bne.n	8002d98 <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 1);
 8002d90:	2101      	movs	r1, #1
 8002d92:	2003      	movs	r0, #3
 8002d94:	f7fd ffc0 	bl	8000d18 <Stepper_updateHome>
    }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <Error_Handler+0x8>
	...

08002dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_MspInit+0x30>)
 8002db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_MspInit+0x30>)
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_MspInit+0x30>)
 8002dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	58024400 	.word	0x58024400

08002de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b0ba      	sub	sp, #232	; 0xe8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002df8:	f107 0318 	add.w	r3, r7, #24
 8002dfc:	22bc      	movs	r2, #188	; 0xbc
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f00d f8a9 	bl	800ff58 <memset>
  if(hadc->Instance==ADC3)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a50      	ldr	r2, [pc, #320]	; (8002f4c <HAL_ADC_MspInit+0x16c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	f040 8099 	bne.w	8002f44 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8002e18:	2304      	movs	r3, #4
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8002e1c:	230a      	movs	r3, #10
 8002e1e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002e20:	2302      	movs	r3, #2
 8002e22:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002e24:	2302      	movs	r3, #2
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8002e28:	2304      	movs	r3, #4
 8002e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002e2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e30:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e36:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8002e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e44:	f107 0318 	add.w	r3, r7, #24
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f006 fe41 	bl	8009ad0 <HAL_RCCEx_PeriphCLKConfig>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8002e54:	f7ff ffa4 	bl	8002da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002e58:	4b3d      	ldr	r3, [pc, #244]	; (8002f50 <HAL_ADC_MspInit+0x170>)
 8002e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5e:	4a3c      	ldr	r2, [pc, #240]	; (8002f50 <HAL_ADC_MspInit+0x170>)
 8002e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e68:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_ADC_MspInit+0x170>)
 8002e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_ADC_MspInit+0x170>)
 8002e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7c:	4a34      	ldr	r2, [pc, #208]	; (8002f50 <HAL_ADC_MspInit+0x170>)
 8002e7e:	f043 0320 	orr.w	r3, r3, #32
 8002e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_ADC_MspInit+0x170>)
 8002e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e94:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_ADC_MspInit+0x170>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9a:	4a2d      	ldr	r2, [pc, #180]	; (8002f50 <HAL_ADC_MspInit+0x170>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <HAL_ADC_MspInit+0x170>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ec6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4821      	ldr	r0, [pc, #132]	; (8002f54 <HAL_ADC_MspInit+0x174>)
 8002ece:	f005 fad1 	bl	8008474 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002ed2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002ed6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002eda:	f000 ffcf 	bl	8003e7c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002ede:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002ee2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002ee6:	f000 ffc9 	bl	8003e7c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002eec:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_ADC_MspInit+0x17c>)
 8002eee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002ef2:	2211      	movs	r2, #17
 8002ef4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f08:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f10:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002f14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f18:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f20:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002f28:	480b      	ldr	r0, [pc, #44]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002f2a:	f002 f853 	bl	8004fd4 <HAL_DMA_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 8002f34:	f7ff ff34 	bl	8002da0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002f3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f3e:	4a06      	ldr	r2, [pc, #24]	; (8002f58 <HAL_ADC_MspInit+0x178>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f44:	bf00      	nop
 8002f46:	37e8      	adds	r7, #232	; 0xe8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	58026000 	.word	0x58026000
 8002f50:	58024400 	.word	0x58024400
 8002f54:	58021400 	.word	0x58021400
 8002f58:	24000a44 	.word	0x24000a44
 8002f5c:	58025408 	.word	0x58025408

08002f60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08e      	sub	sp, #56	; 0x38
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a59      	ldr	r2, [pc, #356]	; (80030e4 <HAL_ETH_MspInit+0x184>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	f040 80ab 	bne.w	80030da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002f84:	4b58      	ldr	r3, [pc, #352]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002f86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f8a:	4a57      	ldr	r2, [pc, #348]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f94:	4b54      	ldr	r3, [pc, #336]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002f96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002fa2:	4b51      	ldr	r3, [pc, #324]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fa8:	4a4f      	ldr	r2, [pc, #316]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fb2:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002fc0:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fc6:	4a48      	ldr	r2, [pc, #288]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fcc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fd0:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fde:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe4:	4a40      	ldr	r2, [pc, #256]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fee:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffc:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8002ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003002:	4a39      	ldr	r2, [pc, #228]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 800300e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 800301c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003020:	4a31      	ldr	r2, [pc, #196]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 800302c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 800303a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800303e:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 8003040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_ETH_MspInit+0x188>)
 800304a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003056:	2332      	movs	r3, #50	; 0x32
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003066:	230b      	movs	r3, #11
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800306a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306e:	4619      	mov	r1, r3
 8003070:	481e      	ldr	r0, [pc, #120]	; (80030ec <HAL_ETH_MspInit+0x18c>)
 8003072:	f005 f9ff 	bl	8008474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003076:	2386      	movs	r3, #134	; 0x86
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003086:	230b      	movs	r3, #11
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308e:	4619      	mov	r1, r3
 8003090:	4817      	ldr	r0, [pc, #92]	; (80030f0 <HAL_ETH_MspInit+0x190>)
 8003092:	f005 f9ef 	bl	8008474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a4:	2300      	movs	r3, #0
 80030a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030a8:	230b      	movs	r3, #11
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b0:	4619      	mov	r1, r3
 80030b2:	4810      	ldr	r0, [pc, #64]	; (80030f4 <HAL_ETH_MspInit+0x194>)
 80030b4:	f005 f9de 	bl	8008474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80030b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030ca:	230b      	movs	r3, #11
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d2:	4619      	mov	r1, r3
 80030d4:	4808      	ldr	r0, [pc, #32]	; (80030f8 <HAL_ETH_MspInit+0x198>)
 80030d6:	f005 f9cd 	bl	8008474 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80030da:	bf00      	nop
 80030dc:	3738      	adds	r7, #56	; 0x38
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40028000 	.word	0x40028000
 80030e8:	58024400 	.word	0x58024400
 80030ec:	58020800 	.word	0x58020800
 80030f0:	58020000 	.word	0x58020000
 80030f4:	58020400 	.word	0x58020400
 80030f8:	58021800 	.word	0x58021800

080030fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b0ba      	sub	sp, #232	; 0xe8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003114:	f107 0318 	add.w	r3, r7, #24
 8003118:	22bc      	movs	r2, #188	; 0xbc
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f00c ff1b 	bl	800ff58 <memset>
  if(hspi->Instance==SPI3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a37      	ldr	r2, [pc, #220]	; (8003204 <HAL_SPI_MspInit+0x108>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d166      	bne.n	80031fa <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800312c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003130:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003132:	2300      	movs	r3, #0
 8003134:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003136:	f107 0318 	add.w	r3, r7, #24
 800313a:	4618      	mov	r0, r3
 800313c:	f006 fcc8 	bl	8009ad0 <HAL_RCCEx_PeriphCLKConfig>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003146:	f7ff fe2b 	bl	8002da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800314a:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_SPI_MspInit+0x10c>)
 800314c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003150:	4a2d      	ldr	r2, [pc, #180]	; (8003208 <HAL_SPI_MspInit+0x10c>)
 8003152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003156:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_SPI_MspInit+0x10c>)
 800315c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <HAL_SPI_MspInit+0x10c>)
 800316a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800316e:	4a26      	ldr	r2, [pc, #152]	; (8003208 <HAL_SPI_MspInit+0x10c>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <HAL_SPI_MspInit+0x10c>)
 800317a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <HAL_SPI_MspInit+0x10c>)
 8003188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800318c:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <HAL_SPI_MspInit+0x10c>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_SPI_MspInit+0x10c>)
 8003198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031a4:	2310      	movs	r3, #16
 80031a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031bc:	2306      	movs	r3, #6
 80031be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031c6:	4619      	mov	r1, r3
 80031c8:	4810      	ldr	r0, [pc, #64]	; (800320c <HAL_SPI_MspInit+0x110>)
 80031ca:	f005 f953 	bl	8008474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80031ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80031d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031e8:	2306      	movs	r3, #6
 80031ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4806      	ldr	r0, [pc, #24]	; (8003210 <HAL_SPI_MspInit+0x114>)
 80031f6:	f005 f93d 	bl	8008474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80031fa:	bf00      	nop
 80031fc:	37e8      	adds	r7, #232	; 0xe8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40003c00 	.word	0x40003c00
 8003208:	58024400 	.word	0x58024400
 800320c:	58020000 	.word	0x58020000
 8003210:	58020800 	.word	0x58020800

08003214 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b090      	sub	sp, #64	; 0x40
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a78      	ldr	r2, [pc, #480]	; (8003414 <HAL_TIM_Encoder_MspInit+0x200>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d12f      	bne.n	8003296 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003236:	4b78      	ldr	r3, [pc, #480]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 8003238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800323c:	4a76      	ldr	r2, [pc, #472]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003246:	4b74      	ldr	r3, [pc, #464]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 8003248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003254:	4b70      	ldr	r3, [pc, #448]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 8003256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325a:	4a6f      	ldr	r2, [pc, #444]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 800325c:	f043 0310 	orr.w	r3, r3, #16
 8003260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003264:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 8003266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 8003272:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003284:	2301      	movs	r3, #1
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800328c:	4619      	mov	r1, r3
 800328e:	4863      	ldr	r0, [pc, #396]	; (800341c <HAL_TIM_Encoder_MspInit+0x208>)
 8003290:	f005 f8f0 	bl	8008474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003294:	e0ba      	b.n	800340c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d14d      	bne.n	800333c <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032a0:	4b5d      	ldr	r3, [pc, #372]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80032a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a6:	4a5c      	ldr	r2, [pc, #368]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80032b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	623b      	str	r3, [r7, #32]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c4:	4a54      	ldr	r2, [pc, #336]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ce:	4b52      	ldr	r3, [pc, #328]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032dc:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80032de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e2:	4a4d      	ldr	r2, [pc, #308]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80032e4:	f043 0302 	orr.w	r3, r3, #2
 80032e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ec:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80032ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 80032fa:	2320      	movs	r3, #32
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003306:	2300      	movs	r3, #0
 8003308:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800330a:	2301      	movs	r3, #1
 800330c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 800330e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003312:	4619      	mov	r1, r3
 8003314:	4842      	ldr	r0, [pc, #264]	; (8003420 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003316:	f005 f8ad 	bl	8008474 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 800331a:	2308      	movs	r3, #8
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331e:	2302      	movs	r3, #2
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003326:	2300      	movs	r3, #0
 8003328:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800332a:	2301      	movs	r3, #1
 800332c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 800332e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003332:	4619      	mov	r1, r3
 8003334:	483b      	ldr	r0, [pc, #236]	; (8003424 <HAL_TIM_Encoder_MspInit+0x210>)
 8003336:	f005 f89d 	bl	8008474 <HAL_GPIO_Init>
}
 800333a:	e067      	b.n	800340c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a39      	ldr	r2, [pc, #228]	; (8003428 <HAL_TIM_Encoder_MspInit+0x214>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d12e      	bne.n	80033a4 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003346:	4b34      	ldr	r3, [pc, #208]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 8003348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800334c:	4a32      	ldr	r2, [pc, #200]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 800334e:	f043 0302 	orr.w	r3, r3, #2
 8003352:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003356:	4b30      	ldr	r3, [pc, #192]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 8003358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003364:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 8003366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336a:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 8003376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 8003382:	2330      	movs	r3, #48	; 0x30
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003392:	2302      	movs	r3, #2
 8003394:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800339a:	4619      	mov	r1, r3
 800339c:	4821      	ldr	r0, [pc, #132]	; (8003424 <HAL_TIM_Encoder_MspInit+0x210>)
 800339e:	f005 f869 	bl	8008474 <HAL_GPIO_Init>
}
 80033a2:	e033      	b.n	800340c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a20      	ldr	r2, [pc, #128]	; (800342c <HAL_TIM_Encoder_MspInit+0x218>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d12e      	bne.n	800340c <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80033b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80033c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80033ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d2:	4a11      	ldr	r2, [pc, #68]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80033d4:	f043 0308 	orr.w	r3, r3, #8
 80033d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_TIM_Encoder_MspInit+0x204>)
 80033de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 80033ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f8:	2300      	movs	r3, #0
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033fc:	2302      	movs	r3, #2
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003404:	4619      	mov	r1, r3
 8003406:	480a      	ldr	r0, [pc, #40]	; (8003430 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003408:	f005 f834 	bl	8008474 <HAL_GPIO_Init>
}
 800340c:	bf00      	nop
 800340e:	3740      	adds	r7, #64	; 0x40
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40010000 	.word	0x40010000
 8003418:	58024400 	.word	0x58024400
 800341c:	58021000 	.word	0x58021000
 8003420:	58020000 	.word	0x58020000
 8003424:	58020400 	.word	0x58020400
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800
 8003430:	58020c00 	.word	0x58020c00

08003434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a48      	ldr	r2, [pc, #288]	; (8003564 <HAL_TIM_Base_MspInit+0x130>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d117      	bne.n	8003476 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003446:	4b48      	ldr	r3, [pc, #288]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 8003448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800344c:	4a46      	ldr	r2, [pc, #280]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 800344e:	f043 0308 	orr.w	r3, r3, #8
 8003452:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 8003458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003464:	2200      	movs	r2, #0
 8003466:	2100      	movs	r1, #0
 8003468:	2032      	movs	r0, #50	; 0x32
 800346a:	f001 fd7e 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800346e:	2032      	movs	r0, #50	; 0x32
 8003470:	f001 fd95 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003474:	e072      	b.n	800355c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a3c      	ldr	r2, [pc, #240]	; (800356c <HAL_TIM_Base_MspInit+0x138>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d117      	bne.n	80034b0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 8003482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003486:	4a38      	ldr	r2, [pc, #224]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 8003488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800348c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003490:	4b35      	ldr	r3, [pc, #212]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 8003492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	202b      	movs	r0, #43	; 0x2b
 80034a4:	f001 fd61 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80034a8:	202b      	movs	r0, #43	; 0x2b
 80034aa:	f001 fd78 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 80034ae:	e055      	b.n	800355c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2e      	ldr	r2, [pc, #184]	; (8003570 <HAL_TIM_Base_MspInit+0x13c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d117      	bne.n	80034ea <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 80034bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034c0:	4a29      	ldr	r2, [pc, #164]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 80034c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034ca:	4b27      	ldr	r3, [pc, #156]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 80034cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	2100      	movs	r1, #0
 80034dc:	202c      	movs	r0, #44	; 0x2c
 80034de:	f001 fd44 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80034e2:	202c      	movs	r0, #44	; 0x2c
 80034e4:	f001 fd5b 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 80034e8:	e038      	b.n	800355c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_TIM_Base_MspInit+0x140>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d117      	bne.n	8003524 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 80034f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034fa:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 80034fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003500:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 8003506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	2075      	movs	r0, #117	; 0x75
 8003518:	f001 fd27 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800351c:	2075      	movs	r0, #117	; 0x75
 800351e:	f001 fd3e 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 8003522:	e01b      	b.n	800355c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <HAL_TIM_Base_MspInit+0x144>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d116      	bne.n	800355c <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 8003530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003534:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 8003536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_TIM_Base_MspInit+0x134>)
 8003540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	2076      	movs	r0, #118	; 0x76
 8003552:	f001 fd0a 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003556:	2076      	movs	r0, #118	; 0x76
 8003558:	f001 fd21 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 800355c:	bf00      	nop
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40000c00 	.word	0x40000c00
 8003568:	58024400 	.word	0x58024400
 800356c:	40001800 	.word	0x40001800
 8003570:	40001c00 	.word	0x40001c00
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800

0800357c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	; 0x30
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 031c 	add.w	r3, r7, #28
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a4b      	ldr	r2, [pc, #300]	; (80036c8 <HAL_TIM_MspPostInit+0x14c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d120      	bne.n	80035e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359e:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 80035a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a4:	4a49      	ldr	r2, [pc, #292]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 80035b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 80035bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035c6:	2302      	movs	r3, #2
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ca:	2300      	movs	r3, #0
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80035ce:	2302      	movs	r3, #2
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 80035d2:	f107 031c 	add.w	r3, r7, #28
 80035d6:	4619      	mov	r1, r3
 80035d8:	483d      	ldr	r0, [pc, #244]	; (80036d0 <HAL_TIM_MspPostInit+0x154>)
 80035da:	f004 ff4b 	bl	8008474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80035de:	e06f      	b.n	80036c0 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <HAL_TIM_MspPostInit+0x158>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d11f      	bne.n	800362a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ea:	4b38      	ldr	r3, [pc, #224]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 80035ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f0:	4a36      	ldr	r2, [pc, #216]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035fa:	4b34      	ldr	r3, [pc, #208]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 80035fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8003608:	2340      	movs	r3, #64	; 0x40
 800360a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003614:	2300      	movs	r3, #0
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003618:	2309      	movs	r3, #9
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 800361c:	f107 031c 	add.w	r3, r7, #28
 8003620:	4619      	mov	r1, r3
 8003622:	482d      	ldr	r0, [pc, #180]	; (80036d8 <HAL_TIM_MspPostInit+0x15c>)
 8003624:	f004 ff26 	bl	8008474 <HAL_GPIO_Init>
}
 8003628:	e04a      	b.n	80036c0 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <HAL_TIM_MspPostInit+0x160>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d120      	bne.n	8003676 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 8003636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363a:	4a24      	ldr	r2, [pc, #144]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003644:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 8003646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 8003652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800365c:	2301      	movs	r3, #1
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003660:	2300      	movs	r3, #0
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003664:	2301      	movs	r3, #1
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	4619      	mov	r1, r3
 800366e:	4818      	ldr	r0, [pc, #96]	; (80036d0 <HAL_TIM_MspPostInit+0x154>)
 8003670:	f004 ff00 	bl	8008474 <HAL_GPIO_Init>
}
 8003674:	e024      	b.n	80036c0 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_TIM_MspPostInit+0x164>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d11f      	bne.n	80036c0 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003680:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 8003682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003686:	4a11      	ldr	r2, [pc, #68]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003690:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <HAL_TIM_MspPostInit+0x150>)
 8003692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 800369e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036a8:	2302      	movs	r3, #2
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80036b0:	2301      	movs	r3, #1
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 80036b4:	f107 031c 	add.w	r3, r7, #28
 80036b8:	4619      	mov	r1, r3
 80036ba:	4805      	ldr	r0, [pc, #20]	; (80036d0 <HAL_TIM_MspPostInit+0x154>)
 80036bc:	f004 feda 	bl	8008474 <HAL_GPIO_Init>
}
 80036c0:	bf00      	nop
 80036c2:	3730      	adds	r7, #48	; 0x30
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40001800 	.word	0x40001800
 80036cc:	58024400 	.word	0x58024400
 80036d0:	58020400 	.word	0x58020400
 80036d4:	40001c00 	.word	0x40001c00
 80036d8:	58020000 	.word	0x58020000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800

080036e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b0ba      	sub	sp, #232	; 0xe8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036fc:	f107 0318 	add.w	r3, r7, #24
 8003700:	22bc      	movs	r2, #188	; 0xbc
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f00c fc27 	bl	800ff58 <memset>
  if(huart->Instance==UART5)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7f      	ldr	r2, [pc, #508]	; (800390c <HAL_UART_MspInit+0x228>)
 8003710:	4293      	cmp	r3, r2
 8003712:	f040 80a8 	bne.w	8003866 <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003716:	2302      	movs	r3, #2
 8003718:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003720:	f107 0318 	add.w	r3, r7, #24
 8003724:	4618      	mov	r0, r3
 8003726:	f006 f9d3 	bl	8009ad0 <HAL_RCCEx_PeriphCLKConfig>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003730:	f7ff fb36 	bl	8002da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003734:	4b76      	ldr	r3, [pc, #472]	; (8003910 <HAL_UART_MspInit+0x22c>)
 8003736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800373a:	4a75      	ldr	r2, [pc, #468]	; (8003910 <HAL_UART_MspInit+0x22c>)
 800373c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003740:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003744:	4b72      	ldr	r3, [pc, #456]	; (8003910 <HAL_UART_MspInit+0x22c>)
 8003746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800374a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003752:	4b6f      	ldr	r3, [pc, #444]	; (8003910 <HAL_UART_MspInit+0x22c>)
 8003754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003758:	4a6d      	ldr	r2, [pc, #436]	; (8003910 <HAL_UART_MspInit+0x22c>)
 800375a:	f043 0302 	orr.w	r3, r3, #2
 800375e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003762:	4b6b      	ldr	r3, [pc, #428]	; (8003910 <HAL_UART_MspInit+0x22c>)
 8003764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003770:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003778:	2302      	movs	r3, #2
 800377a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003784:	2300      	movs	r3, #0
 8003786:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800378a:	230e      	movs	r3, #14
 800378c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003790:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003794:	4619      	mov	r1, r3
 8003796:	485f      	ldr	r0, [pc, #380]	; (8003914 <HAL_UART_MspInit+0x230>)
 8003798:	f004 fe6c 	bl	8008474 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 800379c:	4b5e      	ldr	r3, [pc, #376]	; (8003918 <HAL_UART_MspInit+0x234>)
 800379e:	4a5f      	ldr	r2, [pc, #380]	; (800391c <HAL_UART_MspInit+0x238>)
 80037a0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80037a2:	4b5d      	ldr	r3, [pc, #372]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037a4:	2241      	movs	r2, #65	; 0x41
 80037a6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037a8:	4b5b      	ldr	r3, [pc, #364]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ae:	4b5a      	ldr	r3, [pc, #360]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037b4:	4b58      	ldr	r3, [pc, #352]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ba:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037bc:	4b56      	ldr	r3, [pc, #344]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037be:	2200      	movs	r2, #0
 80037c0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037c2:	4b55      	ldr	r3, [pc, #340]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80037c8:	4b53      	ldr	r3, [pc, #332]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ce:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037d0:	4b51      	ldr	r3, [pc, #324]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037d8:	2200      	movs	r2, #0
 80037da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80037dc:	484e      	ldr	r0, [pc, #312]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037de:	f001 fbf9 	bl	8004fd4 <HAL_DMA_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80037e8:	f7ff fada 	bl	8002da0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a4a      	ldr	r2, [pc, #296]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80037f2:	4a49      	ldr	r2, [pc, #292]	; (8003918 <HAL_UART_MspInit+0x234>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 80037f8:	4b49      	ldr	r3, [pc, #292]	; (8003920 <HAL_UART_MspInit+0x23c>)
 80037fa:	4a4a      	ldr	r2, [pc, #296]	; (8003924 <HAL_UART_MspInit+0x240>)
 80037fc:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80037fe:	4b48      	ldr	r3, [pc, #288]	; (8003920 <HAL_UART_MspInit+0x23c>)
 8003800:	2242      	movs	r2, #66	; 0x42
 8003802:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003804:	4b46      	ldr	r3, [pc, #280]	; (8003920 <HAL_UART_MspInit+0x23c>)
 8003806:	2240      	movs	r2, #64	; 0x40
 8003808:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800380a:	4b45      	ldr	r3, [pc, #276]	; (8003920 <HAL_UART_MspInit+0x23c>)
 800380c:	2200      	movs	r2, #0
 800380e:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003810:	4b43      	ldr	r3, [pc, #268]	; (8003920 <HAL_UART_MspInit+0x23c>)
 8003812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003816:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003818:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_UART_MspInit+0x23c>)
 800381a:	2200      	movs	r2, #0
 800381c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <HAL_UART_MspInit+0x23c>)
 8003820:	2200      	movs	r2, #0
 8003822:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8003824:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <HAL_UART_MspInit+0x23c>)
 8003826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800382a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800382c:	4b3c      	ldr	r3, [pc, #240]	; (8003920 <HAL_UART_MspInit+0x23c>)
 800382e:	2200      	movs	r2, #0
 8003830:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_UART_MspInit+0x23c>)
 8003834:	2200      	movs	r2, #0
 8003836:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003838:	4839      	ldr	r0, [pc, #228]	; (8003920 <HAL_UART_MspInit+0x23c>)
 800383a:	f001 fbcb 	bl	8004fd4 <HAL_DMA_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8003844:	f7ff faac 	bl	8002da0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a35      	ldr	r2, [pc, #212]	; (8003920 <HAL_UART_MspInit+0x23c>)
 800384c:	679a      	str	r2, [r3, #120]	; 0x78
 800384e:	4a34      	ldr	r2, [pc, #208]	; (8003920 <HAL_UART_MspInit+0x23c>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003854:	2200      	movs	r2, #0
 8003856:	2100      	movs	r1, #0
 8003858:	2035      	movs	r0, #53	; 0x35
 800385a:	f001 fb86 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800385e:	2035      	movs	r0, #53	; 0x35
 8003860:	f001 fb9d 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003864:	e04e      	b.n	8003904 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <HAL_UART_MspInit+0x244>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d149      	bne.n	8003904 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003870:	2302      	movs	r3, #2
 8003872:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003874:	2300      	movs	r3, #0
 8003876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800387a:	f107 0318 	add.w	r3, r7, #24
 800387e:	4618      	mov	r0, r3
 8003880:	f006 f926 	bl	8009ad0 <HAL_RCCEx_PeriphCLKConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800388a:	f7ff fa89 	bl	8002da0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_UART_MspInit+0x22c>)
 8003890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003894:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_UART_MspInit+0x22c>)
 8003896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800389a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_UART_MspInit+0x22c>)
 80038a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038ac:	4b18      	ldr	r3, [pc, #96]	; (8003910 <HAL_UART_MspInit+0x22c>)
 80038ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b2:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_UART_MspInit+0x22c>)
 80038b4:	f043 0320 	orr.w	r3, r3, #32
 80038b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <HAL_UART_MspInit+0x22c>)
 80038be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 80038ca:	23c0      	movs	r3, #192	; 0xc0
 80038cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80038e2:	2307      	movs	r3, #7
 80038e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038ec:	4619      	mov	r1, r3
 80038ee:	480f      	ldr	r0, [pc, #60]	; (800392c <HAL_UART_MspInit+0x248>)
 80038f0:	f004 fdc0 	bl	8008474 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80038f4:	2200      	movs	r2, #0
 80038f6:	2100      	movs	r1, #0
 80038f8:	2052      	movs	r0, #82	; 0x52
 80038fa:	f001 fb36 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80038fe:	2052      	movs	r0, #82	; 0x52
 8003900:	f001 fb4d 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 8003904:	bf00      	nop
 8003906:	37e8      	adds	r7, #232	; 0xe8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40005000 	.word	0x40005000
 8003910:	58024400 	.word	0x58024400
 8003914:	58020400 	.word	0x58020400
 8003918:	24000dbc 	.word	0x24000dbc
 800391c:	40020028 	.word	0x40020028
 8003920:	24000f88 	.word	0x24000f88
 8003924:	40020010 	.word	0x40020010
 8003928:	40007800 	.word	0x40007800
 800392c:	58021400 	.word	0x58021400

08003930 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b0b8      	sub	sp, #224	; 0xe0
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003948:	f107 0310 	add.w	r3, r7, #16
 800394c:	22bc      	movs	r2, #188	; 0xbc
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f00c fb01 	bl	800ff58 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2f      	ldr	r2, [pc, #188]	; (8003a18 <HAL_PCD_MspInit+0xe8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d156      	bne.n	8003a0e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003964:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003966:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800396a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800396e:	f107 0310 	add.w	r3, r7, #16
 8003972:	4618      	mov	r0, r3
 8003974:	f006 f8ac 	bl	8009ad0 <HAL_RCCEx_PeriphCLKConfig>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800397e:	f7ff fa0f 	bl	8002da0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003982:	f005 f8dd 	bl	8008b40 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003986:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_PCD_MspInit+0xec>)
 8003988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800398c:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <HAL_PCD_MspInit+0xec>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003996:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <HAL_PCD_MspInit+0xec>)
 8003998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80039a4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80039a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80039be:	230a      	movs	r3, #10
 80039c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039c8:	4619      	mov	r1, r3
 80039ca:	4815      	ldr	r0, [pc, #84]	; (8003a20 <HAL_PCD_MspInit+0xf0>)
 80039cc:	f004 fd52 	bl	8008474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80039d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039e8:	4619      	mov	r1, r3
 80039ea:	480d      	ldr	r0, [pc, #52]	; (8003a20 <HAL_PCD_MspInit+0xf0>)
 80039ec:	f004 fd42 	bl	8008474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_PCD_MspInit+0xec>)
 80039f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_PCD_MspInit+0xec>)
 80039f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_PCD_MspInit+0xec>)
 8003a02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003a0e:	bf00      	nop
 8003a10:	37e0      	adds	r7, #224	; 0xe0
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40080000 	.word	0x40080000
 8003a1c:	58024400 	.word	0x58024400
 8003a20:	58020000 	.word	0x58020000

08003a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a28:	e7fe      	b.n	8003a28 <NMI_Handler+0x4>

08003a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2e:	e7fe      	b.n	8003a2e <HardFault_Handler+0x4>

08003a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <MemManage_Handler+0x4>

08003a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <BusFault_Handler+0x4>

08003a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <UsageFault_Handler+0x4>

08003a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a70:	f000 f9a0 	bl	8003db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003a7c:	2010      	movs	r0, #16
 8003a7e:	f004 fec2 	bl	8008806 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <DMA1_Stream0_IRQHandler+0x10>)
 8003a8e:	f002 fdc9 	bl	8006624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	24000f88 	.word	0x24000f88

08003a9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <DMA1_Stream1_IRQHandler+0x10>)
 8003aa2:	f002 fdbf 	bl	8006624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24000dbc 	.word	0x24000dbc

08003ab0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003ab4:	2020      	movs	r0, #32
 8003ab6:	f004 fea6 	bl	8008806 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003aba:	2040      	movs	r0, #64	; 0x40
 8003abc:	f004 fea3 	bl	8008806 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003ac0:	2080      	movs	r0, #128	; 0x80
 8003ac2:	f004 fea0 	bl	8008806 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003ad0:	4802      	ldr	r0, [pc, #8]	; (8003adc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003ad2:	f008 fead 	bl	800c830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	24000e34 	.word	0x24000e34

08003ae0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003ae4:	4802      	ldr	r0, [pc, #8]	; (8003af0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003ae6:	f008 fea3 	bl	800c830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	24000cd0 	.word	0x24000cd0

08003af4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003af8:	4802      	ldr	r0, [pc, #8]	; (8003b04 <TIM5_IRQHandler+0x10>)
 8003afa:	f008 fe99 	bl	800c830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	24000abc 	.word	0x24000abc

08003b08 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003b0c:	4802      	ldr	r0, [pc, #8]	; (8003b18 <UART5_IRQHandler+0x10>)
 8003b0e:	f00a f87d 	bl	800dc0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	24000bdc 	.word	0x24000bdc

08003b1c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003b20:	4802      	ldr	r0, [pc, #8]	; (8003b2c <UART7_IRQHandler+0x10>)
 8003b22:	f00a f873 	bl	800dc0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	24000514 	.word	0x24000514

08003b30 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003b34:	4802      	ldr	r0, [pc, #8]	; (8003b40 <TIM16_IRQHandler+0x10>)
 8003b36:	f008 fe7b 	bl	800c830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	24000f3c 	.word	0x24000f3c

08003b44 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003b48:	4802      	ldr	r0, [pc, #8]	; (8003b54 <TIM17_IRQHandler+0x10>)
 8003b4a:	f008 fe71 	bl	800c830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	240009f8 	.word	0x240009f8

08003b58 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003b5c:	4802      	ldr	r0, [pc, #8]	; (8003b68 <BDMA_Channel0_IRQHandler+0x10>)
 8003b5e:	f002 fd61 	bl	8006624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	24000a44 	.word	0x24000a44

08003b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b70:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <SystemInit+0xe4>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	4a36      	ldr	r2, [pc, #216]	; (8003c50 <SystemInit+0xe4>)
 8003b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b80:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <SystemInit+0xe8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	2b06      	cmp	r3, #6
 8003b8a:	d807      	bhi.n	8003b9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b8c:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <SystemInit+0xe8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 030f 	bic.w	r3, r3, #15
 8003b94:	4a2f      	ldr	r2, [pc, #188]	; (8003c54 <SystemInit+0xe8>)
 8003b96:	f043 0307 	orr.w	r3, r3, #7
 8003b9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <SystemInit+0xec>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	; (8003c58 <SystemInit+0xec>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <SystemInit+0xec>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003bae:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <SystemInit+0xec>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4929      	ldr	r1, [pc, #164]	; (8003c58 <SystemInit+0xec>)
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <SystemInit+0xf0>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003bba:	4b26      	ldr	r3, [pc, #152]	; (8003c54 <SystemInit+0xe8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003bc6:	4b23      	ldr	r3, [pc, #140]	; (8003c54 <SystemInit+0xe8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 030f 	bic.w	r3, r3, #15
 8003bce:	4a21      	ldr	r2, [pc, #132]	; (8003c54 <SystemInit+0xe8>)
 8003bd0:	f043 0307 	orr.w	r3, r3, #7
 8003bd4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <SystemInit+0xec>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003bdc:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <SystemInit+0xec>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <SystemInit+0xec>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <SystemInit+0xec>)
 8003bea:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <SystemInit+0xf4>)
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003bee:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <SystemInit+0xec>)
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <SystemInit+0xf8>)
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <SystemInit+0xec>)
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <SystemInit+0xfc>)
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003bfa:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <SystemInit+0xec>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003c00:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <SystemInit+0xec>)
 8003c02:	4a19      	ldr	r2, [pc, #100]	; (8003c68 <SystemInit+0xfc>)
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003c06:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <SystemInit+0xec>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <SystemInit+0xec>)
 8003c0e:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <SystemInit+0xfc>)
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003c12:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <SystemInit+0xec>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <SystemInit+0xec>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <SystemInit+0xec>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <SystemInit+0xec>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <SystemInit+0x100>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <SystemInit+0x104>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c36:	d202      	bcs.n	8003c3e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <SystemInit+0x108>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <SystemInit+0x10c>)
 8003c40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003c44:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000ed00 	.word	0xe000ed00
 8003c54:	52002000 	.word	0x52002000
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c60:	02020200 	.word	0x02020200
 8003c64:	01ff0000 	.word	0x01ff0000
 8003c68:	01010280 	.word	0x01010280
 8003c6c:	5c001000 	.word	0x5c001000
 8003c70:	ffff0000 	.word	0xffff0000
 8003c74:	51008108 	.word	0x51008108
 8003c78:	52004000 	.word	0x52004000

08003c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c80:	f7ff ff74 	bl	8003b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c84:	480c      	ldr	r0, [pc, #48]	; (8003cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c86:	490d      	ldr	r1, [pc, #52]	; (8003cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c8c:	e002      	b.n	8003c94 <LoopCopyDataInit>

08003c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c92:	3304      	adds	r3, #4

08003c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c98:	d3f9      	bcc.n	8003c8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c9c:	4c0a      	ldr	r4, [pc, #40]	; (8003cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ca0:	e001      	b.n	8003ca6 <LoopFillZerobss>

08003ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ca4:	3204      	adds	r2, #4

08003ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ca8:	d3fb      	bcc.n	8003ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003caa:	f00c f931 	bl	800ff10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cae:	f7fd ff89 	bl	8001bc4 <main>
  bx  lr
 8003cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003cb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003cb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003cbc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8003cc0:	08010df8 	.word	0x08010df8
  ldr r2, =_sbss
 8003cc4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8003cc8:	24001004 	.word	0x24001004

08003ccc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ccc:	e7fe      	b.n	8003ccc <ADC3_IRQHandler>
	...

08003cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	f001 f93c 	bl	8004f54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cdc:	f005 fd22 	bl	8009724 <HAL_RCC_GetSysClockFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <HAL_Init+0x68>)
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	4913      	ldr	r1, [pc, #76]	; (8003d3c <HAL_Init+0x6c>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <HAL_Init+0x68>)
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <HAL_Init+0x6c>)
 8003d04:	5cd3      	ldrb	r3, [r2, r3]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d10:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <HAL_Init+0x70>)
 8003d12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d14:	4a0b      	ldr	r2, [pc, #44]	; (8003d44 <HAL_Init+0x74>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	f000 f814 	bl	8003d48 <HAL_InitTick>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e002      	b.n	8003d30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d2a:	f7ff f83f 	bl	8002dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	08010bd0 	.word	0x08010bd0
 8003d40:	24000004 	.word	0x24000004
 8003d44:	24000000 	.word	0x24000000

08003d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003d50:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <HAL_InitTick+0x60>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e021      	b.n	8003da0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003d5c:	4b13      	ldr	r3, [pc, #76]	; (8003dac <HAL_InitTick+0x64>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <HAL_InitTick+0x60>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 f921 	bl	8004fba <HAL_SYSTICK_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00e      	b.n	8003da0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b0f      	cmp	r3, #15
 8003d86:	d80a      	bhi.n	8003d9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d90:	f001 f8eb 	bl	8004f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d94:	4a06      	ldr	r2, [pc, #24]	; (8003db0 <HAL_InitTick+0x68>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e000      	b.n	8003da0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	2400000c 	.word	0x2400000c
 8003dac:	24000000 	.word	0x24000000
 8003db0:	24000008 	.word	0x24000008

08003db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_IncTick+0x20>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_IncTick+0x24>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <HAL_IncTick+0x24>)
 8003dc6:	6013      	str	r3, [r2, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	2400000c 	.word	0x2400000c
 8003dd8:	24001000 	.word	0x24001000

08003ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return uwTick;
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <HAL_GetTick+0x14>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	24001000 	.word	0x24001000

08003df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dfc:	f7ff ffee 	bl	8003ddc <HAL_GetTick>
 8003e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d005      	beq.n	8003e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <HAL_Delay+0x44>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e1a:	bf00      	nop
 8003e1c:	f7ff ffde 	bl	8003ddc <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d8f7      	bhi.n	8003e1c <HAL_Delay+0x28>
  {
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2400000c 	.word	0x2400000c

08003e3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <HAL_GetREVID+0x14>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0c1b      	lsrs	r3, r3, #16
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	5c001000 	.word	0x5c001000

08003e54 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e64:	4904      	ldr	r1, [pc, #16]	; (8003e78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	58000400 	.word	0x58000400

08003e7c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	4904      	ldr	r1, [pc, #16]	; (8003ea4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	58000400 	.word	0x58000400

08003ea8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	609a      	str	r2, [r3, #8]
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3360      	adds	r3, #96	; 0x60
 8003f22:	461a      	mov	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	611a      	str	r2, [r3, #16]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b087      	sub	sp, #28
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3360      	adds	r3, #96	; 0x60
 8003f92:	461a      	mov	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	601a      	str	r2, [r3, #0]
  }
}
 8003fac:	bf00      	nop
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3330      	adds	r3, #48	; 0x30
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	4413      	add	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	211f      	movs	r1, #31
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	401a      	ands	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0e9b      	lsrs	r3, r3, #26
 8003ff0:	f003 011f 	and.w	r1, r3, #31
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffe:	431a      	orrs	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3314      	adds	r3, #20
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	0e5b      	lsrs	r3, r3, #25
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	4413      	add	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	0d1b      	lsrs	r3, r3, #20
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2107      	movs	r1, #7
 800403e:	fa01 f303 	lsl.w	r3, r1, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	401a      	ands	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	0d1b      	lsrs	r3, r3, #20
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	fa01 f303 	lsl.w	r3, r1, r3
 8004054:	431a      	orrs	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004080:	43db      	mvns	r3, r3
 8004082:	401a      	ands	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f003 0318 	and.w	r3, r3, #24
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800408c:	40d9      	lsrs	r1, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	400b      	ands	r3, r1
 8004092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004096:	431a      	orrs	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	000fffff 	.word	0x000fffff

080040b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80040be:	4013      	ands	r3, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6093      	str	r3, [r2, #8]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	5fffffc0 	.word	0x5fffffc0

080040d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e8:	d101      	bne.n	80040ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <LL_ADC_EnableInternalRegulator+0x24>)
 800410a:	4013      	ands	r3, r2
 800410c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	6fffffc0 	.word	0x6fffffc0

08004124 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004138:	d101      	bne.n	800413e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <LL_ADC_IsEnabled+0x18>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <LL_ADC_IsEnabled+0x1a>
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d101      	bne.n	800418a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d101      	bne.n	80041b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e18e      	b.n	80044f8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fe fdf9 	bl	8002de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff67 	bl	80040d4 <LL_ADC_IsDeepPowerDownEnabled>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ff4d 	bl	80040b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ff82 	bl	8004124 <LL_ADC_IsInternalRegulatorEnabled>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d114      	bne.n	8004250 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ff66 	bl	80040fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004230:	4b9a      	ldr	r3, [pc, #616]	; (800449c <HAL_ADC_Init+0x2dc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	4a9a      	ldr	r2, [pc, #616]	; (80044a0 <HAL_ADC_Init+0x2e0>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	099b      	lsrs	r3, r3, #6
 800423e:	3301      	adds	r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004242:	e002      	b.n	800424a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	3b01      	subs	r3, #1
 8004248:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f9      	bne.n	8004244 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff65 	bl	8004124 <LL_ADC_IsInternalRegulatorEnabled>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f043 0210 	orr.w	r2, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	f043 0201 	orr.w	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff76 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 8004286:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 8128 	bne.w	80044e6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f040 8124 	bne.w	80044e6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80042a6:	f043 0202 	orr.w	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff ff4a 	bl	800414c <LL_ADC_IsEnabled>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d136      	bne.n	800432c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a78      	ldr	r2, [pc, #480]	; (80044a4 <HAL_ADC_Init+0x2e4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_ADC_Init+0x112>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a76      	ldr	r2, [pc, #472]	; (80044a8 <HAL_ADC_Init+0x2e8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10e      	bne.n	80042f0 <HAL_ADC_Init+0x130>
 80042d2:	4874      	ldr	r0, [pc, #464]	; (80044a4 <HAL_ADC_Init+0x2e4>)
 80042d4:	f7ff ff3a 	bl	800414c <LL_ADC_IsEnabled>
 80042d8:	4604      	mov	r4, r0
 80042da:	4873      	ldr	r0, [pc, #460]	; (80044a8 <HAL_ADC_Init+0x2e8>)
 80042dc:	f7ff ff36 	bl	800414c <LL_ADC_IsEnabled>
 80042e0:	4603      	mov	r3, r0
 80042e2:	4323      	orrs	r3, r4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e008      	b.n	8004302 <HAL_ADC_Init+0x142>
 80042f0:	486e      	ldr	r0, [pc, #440]	; (80044ac <HAL_ADC_Init+0x2ec>)
 80042f2:	f7ff ff2b 	bl	800414c <LL_ADC_IsEnabled>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d012      	beq.n	800432c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a66      	ldr	r2, [pc, #408]	; (80044a4 <HAL_ADC_Init+0x2e4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_ADC_Init+0x15a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a64      	ldr	r2, [pc, #400]	; (80044a8 <HAL_ADC_Init+0x2e8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d101      	bne.n	800431e <HAL_ADC_Init+0x15e>
 800431a:	4a65      	ldr	r2, [pc, #404]	; (80044b0 <HAL_ADC_Init+0x2f0>)
 800431c:	e000      	b.n	8004320 <HAL_ADC_Init+0x160>
 800431e:	4a65      	ldr	r2, [pc, #404]	; (80044b4 <HAL_ADC_Init+0x2f4>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7ff fdbe 	bl	8003ea8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800432c:	f7ff fd86 	bl	8003e3c <HAL_GetREVID>
 8004330:	4603      	mov	r3, r0
 8004332:	f241 0203 	movw	r2, #4099	; 0x1003
 8004336:	4293      	cmp	r3, r2
 8004338:	d914      	bls.n	8004364 <HAL_ADC_Init+0x1a4>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d110      	bne.n	8004364 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	7d5b      	ldrb	r3, [r3, #21]
 8004346:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800434c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004352:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	7f1b      	ldrb	r3, [r3, #28]
 8004358:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800435a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800435c:	f043 030c 	orr.w	r3, r3, #12
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e00d      	b.n	8004380 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	7d5b      	ldrb	r3, [r3, #21]
 8004368:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800436e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004374:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7f1b      	ldrb	r3, [r3, #28]
 800437a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	7f1b      	ldrb	r3, [r3, #28]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d106      	bne.n	8004396 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	3b01      	subs	r3, #1
 800438e:	045b      	lsls	r3, r3, #17
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_ADC_Init+0x2f8>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fed1 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 80043d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fede 	bl	8004198 <LL_ADC_INJ_IsConversionOngoing>
 80043dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d14a      	bne.n	800447a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d147      	bne.n	800447a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	7d1b      	ldrb	r3, [r3, #20]
 80043ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <HAL_ADC_Init+0x2fc>)
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	69b9      	ldr	r1, [r7, #24]
 8004408:	430b      	orrs	r3, r1
 800440a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004412:	2b01      	cmp	r3, #1
 8004414:	d11b      	bne.n	800444e <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_ADC_Init+0x300>)
 8004424:	4013      	ands	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800442a:	3a01      	subs	r2, #1
 800442c:	0411      	lsls	r1, r2, #16
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004432:	4311      	orrs	r1, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004438:	4311      	orrs	r1, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800443e:	430a      	orrs	r2, r1
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	611a      	str	r2, [r3, #16]
 800444c:	e007      	b.n	800445e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fb93 	bl	8004ba0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d120      	bne.n	80044c4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	f023 010f 	bic.w	r1, r3, #15
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	1e5a      	subs	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
 800449a:	e01b      	b.n	80044d4 <HAL_ADC_Init+0x314>
 800449c:	24000000 	.word	0x24000000
 80044a0:	053e2d63 	.word	0x053e2d63
 80044a4:	40022000 	.word	0x40022000
 80044a8:	40022100 	.word	0x40022100
 80044ac:	58026000 	.word	0x58026000
 80044b0:	40022300 	.word	0x40022300
 80044b4:	58026300 	.word	0x58026300
 80044b8:	fff0c003 	.word	0xfff0c003
 80044bc:	ffffbffc 	.word	0xffffbffc
 80044c0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 020f 	bic.w	r2, r2, #15
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f023 0303 	bic.w	r3, r3, #3
 80044dc:	f043 0201 	orr.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
 80044e4:	e007      	b.n	80044f6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f043 0210 	orr.w	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3724      	adds	r7, #36	; 0x24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd90      	pop	{r4, r7, pc}

08004500 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b0a1      	sub	sp, #132	; 0x84
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a9d      	ldr	r2, [pc, #628]	; (8004790 <HAL_ADC_ConfigChannel+0x290>)
 800451a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_ADC_ConfigChannel+0x2a>
 8004526:	2302      	movs	r3, #2
 8004528:	e321      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x66e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fe1b 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 8306 	bne.w	8004b50 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800454c:	2b00      	cmp	r3, #0
 800454e:	d108      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x62>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2201      	movs	r2, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	e016      	b.n	8004590 <HAL_ADC_ConfigChannel+0x90>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004572:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800457a:	2320      	movs	r3, #32
 800457c:	e003      	b.n	8004586 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800457e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004580:	fab3 f383 	clz	r3, r3
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	2201      	movs	r2, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	69d1      	ldr	r1, [r2, #28]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	430b      	orrs	r3, r1
 800459c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6859      	ldr	r1, [r3, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7ff fd04 	bl	8003fb8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fddc 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 80045ba:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fde9 	bl	8004198 <LL_ADC_INJ_IsConversionOngoing>
 80045c6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 80b3 	bne.w	8004736 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 80af 	bne.w	8004736 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	461a      	mov	r2, r3
 80045e6:	f7ff fd13 	bl	8004010 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045ea:	4b6a      	ldr	r3, [pc, #424]	; (8004794 <HAL_ADC_ConfigChannel+0x294>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80045f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f6:	d10b      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x110>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	e01d      	b.n	800464c <HAL_ADC_ConfigChannel+0x14c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x136>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	089b      	lsrs	r3, r3, #2
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	e00a      	b.n	800464c <HAL_ADC_ConfigChannel+0x14c>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d027      	beq.n	80046a6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6919      	ldr	r1, [r3, #16]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004664:	f7ff fc54 	bl	8003f10 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6919      	ldr	r1, [r3, #16]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	7e5b      	ldrb	r3, [r3, #25]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d102      	bne.n	800467e <HAL_ADC_ConfigChannel+0x17e>
 8004678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800467c:	e000      	b.n	8004680 <HAL_ADC_ConfigChannel+0x180>
 800467e:	2300      	movs	r3, #0
 8004680:	461a      	mov	r2, r3
 8004682:	f7ff fc7e 	bl	8003f82 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6919      	ldr	r1, [r3, #16]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	7e1b      	ldrb	r3, [r3, #24]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d102      	bne.n	800469c <HAL_ADC_ConfigChannel+0x19c>
 8004696:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800469a:	e000      	b.n	800469e <HAL_ADC_ConfigChannel+0x19e>
 800469c:	2300      	movs	r3, #0
 800469e:	461a      	mov	r2, r3
 80046a0:	f7ff fc56 	bl	8003f50 <LL_ADC_SetDataRightShift>
 80046a4:	e047      	b.n	8004736 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	069b      	lsls	r3, r3, #26
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d107      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046c8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	069b      	lsls	r3, r3, #26
 80046da:	429a      	cmp	r2, r3
 80046dc:	d107      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046ec:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	069b      	lsls	r3, r3, #26
 80046fe:	429a      	cmp	r2, r3
 8004700:	d107      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004710:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004718:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	069b      	lsls	r3, r3, #26
 8004722:	429a      	cmp	r2, r3
 8004724:	d107      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004734:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fd06 	bl	800414c <LL_ADC_IsEnabled>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 820d 	bne.w	8004b62 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6819      	ldr	r1, [r3, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	461a      	mov	r2, r3
 8004756:	f7ff fc87 	bl	8004068 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	4a0c      	ldr	r2, [pc, #48]	; (8004790 <HAL_ADC_ConfigChannel+0x290>)
 8004760:	4293      	cmp	r3, r2
 8004762:	f040 8133 	bne.w	80049cc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004772:	2b00      	cmp	r3, #0
 8004774:	d110      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x298>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	0e9b      	lsrs	r3, r3, #26
 800477c:	3301      	adds	r3, #1
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	2b09      	cmp	r3, #9
 8004784:	bf94      	ite	ls
 8004786:	2301      	movls	r3, #1
 8004788:	2300      	movhi	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	e01e      	b.n	80047cc <HAL_ADC_ConfigChannel+0x2cc>
 800478e:	bf00      	nop
 8004790:	47ff0000 	.word	0x47ff0000
 8004794:	5c001000 	.word	0x5c001000
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a0:	fa93 f3a3 	rbit	r3, r3
 80047a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80047a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80047b0:	2320      	movs	r3, #32
 80047b2:	e003      	b.n	80047bc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80047b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	3301      	adds	r3, #1
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2b09      	cmp	r3, #9
 80047c4:	bf94      	ite	ls
 80047c6:	2301      	movls	r3, #1
 80047c8:	2300      	movhi	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d079      	beq.n	80048c4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x2ec>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	3301      	adds	r3, #1
 80047e4:	069b      	lsls	r3, r3, #26
 80047e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ea:	e015      	b.n	8004818 <HAL_ADC_ConfigChannel+0x318>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80047fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80047fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004804:	2320      	movs	r3, #32
 8004806:	e003      	b.n	8004810 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3301      	adds	r3, #1
 8004812:	069b      	lsls	r3, r3, #26
 8004814:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x338>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	0e9b      	lsrs	r3, r3, #26
 800482a:	3301      	adds	r3, #1
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	2101      	movs	r1, #1
 8004832:	fa01 f303 	lsl.w	r3, r1, r3
 8004836:	e017      	b.n	8004868 <HAL_ADC_ConfigChannel+0x368>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800484a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004850:	2320      	movs	r3, #32
 8004852:	e003      	b.n	800485c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004856:	fab3 f383 	clz	r3, r3
 800485a:	b2db      	uxtb	r3, r3
 800485c:	3301      	adds	r3, #1
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2101      	movs	r1, #1
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	ea42 0103 	orr.w	r1, r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <HAL_ADC_ConfigChannel+0x38e>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	0e9b      	lsrs	r3, r3, #26
 800487e:	3301      	adds	r3, #1
 8004880:	f003 021f 	and.w	r2, r3, #31
 8004884:	4613      	mov	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	051b      	lsls	r3, r3, #20
 800488c:	e018      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x3c0>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80048a6:	2320      	movs	r3, #32
 80048a8:	e003      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	f003 021f 	and.w	r2, r3, #31
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048c0:	430b      	orrs	r3, r1
 80048c2:	e07e      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d107      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x3e0>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0e9b      	lsrs	r3, r3, #26
 80048d6:	3301      	adds	r3, #1
 80048d8:	069b      	lsls	r3, r3, #26
 80048da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048de:	e015      	b.n	800490c <HAL_ADC_ConfigChannel+0x40c>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80048f8:	2320      	movs	r3, #32
 80048fa:	e003      	b.n	8004904 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	3301      	adds	r3, #1
 8004906:	069b      	lsls	r3, r3, #26
 8004908:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <HAL_ADC_ConfigChannel+0x42c>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	0e9b      	lsrs	r3, r3, #26
 800491e:	3301      	adds	r3, #1
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2101      	movs	r1, #1
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	e017      	b.n	800495c <HAL_ADC_ConfigChannel+0x45c>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	fa93 f3a3 	rbit	r3, r3
 8004938:	61bb      	str	r3, [r7, #24]
  return result;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004944:	2320      	movs	r3, #32
 8004946:	e003      	b.n	8004950 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	3301      	adds	r3, #1
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2101      	movs	r1, #1
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	ea42 0103 	orr.w	r1, r2, r3
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10d      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x488>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	0e9b      	lsrs	r3, r3, #26
 8004972:	3301      	adds	r3, #1
 8004974:	f003 021f 	and.w	r2, r3, #31
 8004978:	4613      	mov	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4413      	add	r3, r2
 800497e:	3b1e      	subs	r3, #30
 8004980:	051b      	lsls	r3, r3, #20
 8004982:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004986:	e01b      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x4c0>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	fa93 f3a3 	rbit	r3, r3
 8004994:	60fb      	str	r3, [r7, #12]
  return result;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80049a0:	2320      	movs	r3, #32
 80049a2:	e003      	b.n	80049ac <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	3301      	adds	r3, #1
 80049ae:	f003 021f 	and.w	r2, r3, #31
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	3b1e      	subs	r3, #30
 80049ba:	051b      	lsls	r3, r3, #20
 80049bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c0:	430b      	orrs	r3, r1
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	6892      	ldr	r2, [r2, #8]
 80049c6:	4619      	mov	r1, r3
 80049c8:	f7ff fb22 	bl	8004010 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f280 80c6 	bge.w	8004b62 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a67      	ldr	r2, [pc, #412]	; (8004b78 <HAL_ADC_ConfigChannel+0x678>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_ADC_ConfigChannel+0x4ea>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a65      	ldr	r2, [pc, #404]	; (8004b7c <HAL_ADC_ConfigChannel+0x67c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d101      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x4ee>
 80049ea:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <HAL_ADC_ConfigChannel+0x680>)
 80049ec:	e000      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x4f0>
 80049ee:	4b65      	ldr	r3, [pc, #404]	; (8004b84 <HAL_ADC_ConfigChannel+0x684>)
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fa7f 	bl	8003ef4 <LL_ADC_GetCommonPathInternalCh>
 80049f6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a5e      	ldr	r2, [pc, #376]	; (8004b78 <HAL_ADC_ConfigChannel+0x678>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_ADC_ConfigChannel+0x50c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a5d      	ldr	r2, [pc, #372]	; (8004b7c <HAL_ADC_ConfigChannel+0x67c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d10e      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x52a>
 8004a0c:	485a      	ldr	r0, [pc, #360]	; (8004b78 <HAL_ADC_ConfigChannel+0x678>)
 8004a0e:	f7ff fb9d 	bl	800414c <LL_ADC_IsEnabled>
 8004a12:	4604      	mov	r4, r0
 8004a14:	4859      	ldr	r0, [pc, #356]	; (8004b7c <HAL_ADC_ConfigChannel+0x67c>)
 8004a16:	f7ff fb99 	bl	800414c <LL_ADC_IsEnabled>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4323      	orrs	r3, r4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e008      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x53c>
 8004a2a:	4857      	ldr	r0, [pc, #348]	; (8004b88 <HAL_ADC_ConfigChannel+0x688>)
 8004a2c:	f7ff fb8e 	bl	800414c <LL_ADC_IsEnabled>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d07d      	beq.n	8004b3c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a51      	ldr	r2, [pc, #324]	; (8004b8c <HAL_ADC_ConfigChannel+0x68c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d130      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x5ac>
 8004a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d12b      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a4b      	ldr	r2, [pc, #300]	; (8004b88 <HAL_ADC_ConfigChannel+0x688>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	f040 8081 	bne.w	8004b62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a44      	ldr	r2, [pc, #272]	; (8004b78 <HAL_ADC_ConfigChannel+0x678>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_ADC_ConfigChannel+0x574>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a43      	ldr	r2, [pc, #268]	; (8004b7c <HAL_ADC_ConfigChannel+0x67c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x578>
 8004a74:	4a42      	ldr	r2, [pc, #264]	; (8004b80 <HAL_ADC_ConfigChannel+0x680>)
 8004a76:	e000      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x57a>
 8004a78:	4a42      	ldr	r2, [pc, #264]	; (8004b84 <HAL_ADC_ConfigChannel+0x684>)
 8004a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7ff fa23 	bl	8003ece <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a88:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <HAL_ADC_ConfigChannel+0x690>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	4a41      	ldr	r2, [pc, #260]	; (8004b94 <HAL_ADC_ConfigChannel+0x694>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	3301      	adds	r3, #1
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a9c:	e002      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f9      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aaa:	e05a      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a39      	ldr	r2, [pc, #228]	; (8004b98 <HAL_ADC_ConfigChannel+0x698>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d11e      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x5f4>
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d119      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a30      	ldr	r2, [pc, #192]	; (8004b88 <HAL_ADC_ConfigChannel+0x688>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d14b      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <HAL_ADC_ConfigChannel+0x678>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_ADC_ConfigChannel+0x5de>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a28      	ldr	r2, [pc, #160]	; (8004b7c <HAL_ADC_ConfigChannel+0x67c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x5e2>
 8004ade:	4a28      	ldr	r2, [pc, #160]	; (8004b80 <HAL_ADC_ConfigChannel+0x680>)
 8004ae0:	e000      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x5e4>
 8004ae2:	4a28      	ldr	r2, [pc, #160]	; (8004b84 <HAL_ADC_ConfigChannel+0x684>)
 8004ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7ff f9ee 	bl	8003ece <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004af2:	e036      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <HAL_ADC_ConfigChannel+0x69c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d131      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x662>
 8004afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d12c      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <HAL_ADC_ConfigChannel+0x688>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d127      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <HAL_ADC_ConfigChannel+0x678>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_ADC_ConfigChannel+0x626>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <HAL_ADC_ConfigChannel+0x67c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d101      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x62a>
 8004b26:	4a16      	ldr	r2, [pc, #88]	; (8004b80 <HAL_ADC_ConfigChannel+0x680>)
 8004b28:	e000      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x62c>
 8004b2a:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <HAL_ADC_ConfigChannel+0x684>)
 8004b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f7ff f9ca 	bl	8003ece <LL_ADC_SetCommonPathInternalCh>
 8004b3a:	e012      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	f043 0220 	orr.w	r2, r3, #32
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b4e:	e008      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3784      	adds	r7, #132	; 0x84
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd90      	pop	{r4, r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40022000 	.word	0x40022000
 8004b7c:	40022100 	.word	0x40022100
 8004b80:	40022300 	.word	0x40022300
 8004b84:	58026300 	.word	0x58026300
 8004b88:	58026000 	.word	0x58026000
 8004b8c:	cb840000 	.word	0xcb840000
 8004b90:	24000000 	.word	0x24000000
 8004b94:	053e2d63 	.word	0x053e2d63
 8004b98:	c7520000 	.word	0xc7520000
 8004b9c:	cfb80000 	.word	0xcfb80000

08004ba0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a79      	ldr	r2, [pc, #484]	; (8004d94 <ADC_ConfigureBoostMode+0x1f4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <ADC_ConfigureBoostMode+0x1c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a78      	ldr	r2, [pc, #480]	; (8004d98 <ADC_ConfigureBoostMode+0x1f8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d109      	bne.n	8004bd0 <ADC_ConfigureBoostMode+0x30>
 8004bbc:	4b77      	ldr	r3, [pc, #476]	; (8004d9c <ADC_ConfigureBoostMode+0x1fc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e008      	b.n	8004be2 <ADC_ConfigureBoostMode+0x42>
 8004bd0:	4b73      	ldr	r3, [pc, #460]	; (8004da0 <ADC_ConfigureBoostMode+0x200>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01c      	beq.n	8004c20 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004be6:	f004 ff17 	bl	8009a18 <HAL_RCC_GetHCLKFreq>
 8004bea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bf4:	d010      	beq.n	8004c18 <ADC_ConfigureBoostMode+0x78>
 8004bf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bfa:	d871      	bhi.n	8004ce0 <ADC_ConfigureBoostMode+0x140>
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d002      	beq.n	8004c08 <ADC_ConfigureBoostMode+0x68>
 8004c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c06:	d16b      	bne.n	8004ce0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	60fb      	str	r3, [r7, #12]
        break;
 8004c16:	e066      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	089b      	lsrs	r3, r3, #2
 8004c1c:	60fb      	str	r3, [r7, #12]
        break;
 8004c1e:	e062      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004c20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004c24:	f005 fe94 	bl	800a950 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c28:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c32:	d051      	beq.n	8004cd8 <ADC_ConfigureBoostMode+0x138>
 8004c34:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c38:	d854      	bhi.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
 8004c3a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c3e:	d047      	beq.n	8004cd0 <ADC_ConfigureBoostMode+0x130>
 8004c40:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c44:	d84e      	bhi.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
 8004c46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c4a:	d03d      	beq.n	8004cc8 <ADC_ConfigureBoostMode+0x128>
 8004c4c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c50:	d848      	bhi.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
 8004c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c56:	d033      	beq.n	8004cc0 <ADC_ConfigureBoostMode+0x120>
 8004c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c5c:	d842      	bhi.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
 8004c5e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c62:	d029      	beq.n	8004cb8 <ADC_ConfigureBoostMode+0x118>
 8004c64:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c68:	d83c      	bhi.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
 8004c6a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c6e:	d01a      	beq.n	8004ca6 <ADC_ConfigureBoostMode+0x106>
 8004c70:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c74:	d836      	bhi.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
 8004c76:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c7a:	d014      	beq.n	8004ca6 <ADC_ConfigureBoostMode+0x106>
 8004c7c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c80:	d830      	bhi.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
 8004c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c86:	d00e      	beq.n	8004ca6 <ADC_ConfigureBoostMode+0x106>
 8004c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8c:	d82a      	bhi.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
 8004c8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c92:	d008      	beq.n	8004ca6 <ADC_ConfigureBoostMode+0x106>
 8004c94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c98:	d824      	bhi.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
 8004c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c9e:	d002      	beq.n	8004ca6 <ADC_ConfigureBoostMode+0x106>
 8004ca0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ca4:	d11e      	bne.n	8004ce4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	0c9b      	lsrs	r3, r3, #18
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
        break;
 8004cb6:	e016      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	60fb      	str	r3, [r7, #12]
        break;
 8004cbe:	e012      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	60fb      	str	r3, [r7, #12]
        break;
 8004cc6:	e00e      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	099b      	lsrs	r3, r3, #6
 8004ccc:	60fb      	str	r3, [r7, #12]
        break;
 8004cce:	e00a      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	09db      	lsrs	r3, r3, #7
 8004cd4:	60fb      	str	r3, [r7, #12]
        break;
 8004cd6:	e006      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	60fb      	str	r3, [r7, #12]
        break;
 8004cde:	e002      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x146>
        break;
 8004ce0:	bf00      	nop
 8004ce2:	e000      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004ce4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004ce6:	f7ff f8a9 	bl	8003e3c <HAL_GetREVID>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d815      	bhi.n	8004d20 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a2b      	ldr	r2, [pc, #172]	; (8004da4 <ADC_ConfigureBoostMode+0x204>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d908      	bls.n	8004d0e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d0a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004d0c:	e03e      	b.n	8004d8c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d1c:	609a      	str	r2, [r3, #8]
}
 8004d1e:	e035      	b.n	8004d8c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <ADC_ConfigureBoostMode+0x208>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d808      	bhi.n	8004d40 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d3c:	609a      	str	r2, [r3, #8]
}
 8004d3e:	e025      	b.n	8004d8c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a1a      	ldr	r2, [pc, #104]	; (8004dac <ADC_ConfigureBoostMode+0x20c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d80a      	bhi.n	8004d5e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d5a:	609a      	str	r2, [r3, #8]
}
 8004d5c:	e016      	b.n	8004d8c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <ADC_ConfigureBoostMode+0x210>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d80a      	bhi.n	8004d7c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d78:	609a      	str	r2, [r3, #8]
}
 8004d7a:	e007      	b.n	8004d8c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40022100 	.word	0x40022100
 8004d9c:	40022300 	.word	0x40022300
 8004da0:	58026300 	.word	0x58026300
 8004da4:	01312d00 	.word	0x01312d00
 8004da8:	005f5e10 	.word	0x005f5e10
 8004dac:	00bebc20 	.word	0x00bebc20
 8004db0:	017d7840 	.word	0x017d7840

08004db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <__NVIC_SetPriorityGrouping+0x40>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004de2:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <__NVIC_SetPriorityGrouping+0x40>)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	60d3      	str	r3, [r2, #12]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	e000ed00 	.word	0xe000ed00
 8004df8:	05fa0000 	.word	0x05fa0000

08004dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <__NVIC_GetPriorityGrouping+0x18>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	0a1b      	lsrs	r3, r3, #8
 8004e06:	f003 0307 	and.w	r3, r3, #7
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000ed00 	.word	0xe000ed00

08004e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	db0b      	blt.n	8004e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	f003 021f 	and.w	r2, r3, #31
 8004e30:	4907      	ldr	r1, [pc, #28]	; (8004e50 <__NVIC_EnableIRQ+0x38>)
 8004e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	2001      	movs	r0, #1
 8004e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	e000e100 	.word	0xe000e100

08004e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	6039      	str	r1, [r7, #0]
 8004e5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	db0a      	blt.n	8004e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	490c      	ldr	r1, [pc, #48]	; (8004ea0 <__NVIC_SetPriority+0x4c>)
 8004e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e72:	0112      	lsls	r2, r2, #4
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	440b      	add	r3, r1
 8004e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e7c:	e00a      	b.n	8004e94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4908      	ldr	r1, [pc, #32]	; (8004ea4 <__NVIC_SetPriority+0x50>)
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	3b04      	subs	r3, #4
 8004e8c:	0112      	lsls	r2, r2, #4
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	440b      	add	r3, r1
 8004e92:	761a      	strb	r2, [r3, #24]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000e100 	.word	0xe000e100
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f1c3 0307 	rsb	r3, r3, #7
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	bf28      	it	cs
 8004ec6:	2304      	movcs	r3, #4
 8004ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d902      	bls.n	8004ed8 <NVIC_EncodePriority+0x30>
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3b03      	subs	r3, #3
 8004ed6:	e000      	b.n	8004eda <NVIC_EncodePriority+0x32>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004edc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43da      	mvns	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	401a      	ands	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	43d9      	mvns	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f00:	4313      	orrs	r3, r2
         );
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3724      	adds	r7, #36	; 0x24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f20:	d301      	bcc.n	8004f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f22:	2301      	movs	r3, #1
 8004f24:	e00f      	b.n	8004f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f26:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <SysTick_Config+0x40>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f2e:	210f      	movs	r1, #15
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	f7ff ff8e 	bl	8004e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <SysTick_Config+0x40>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <SysTick_Config+0x40>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010

08004f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ff29 	bl	8004db4 <__NVIC_SetPriorityGrouping>
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	4603      	mov	r3, r0
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f78:	f7ff ff40 	bl	8004dfc <__NVIC_GetPriorityGrouping>
 8004f7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	6978      	ldr	r0, [r7, #20]
 8004f84:	f7ff ff90 	bl	8004ea8 <NVIC_EncodePriority>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ff5f 	bl	8004e54 <__NVIC_SetPriority>
}
 8004f96:	bf00      	nop
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff ff33 	bl	8004e18 <__NVIC_EnableIRQ>
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff ffa4 	bl	8004f10 <SysTick_Config>
 8004fc8:	4603      	mov	r3, r0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fdc:	f7fe fefe 	bl	8003ddc <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e316      	b.n	800561a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a66      	ldr	r2, [pc, #408]	; (800518c <HAL_DMA_Init+0x1b8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d04a      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a65      	ldr	r2, [pc, #404]	; (8005190 <HAL_DMA_Init+0x1bc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d045      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a63      	ldr	r2, [pc, #396]	; (8005194 <HAL_DMA_Init+0x1c0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d040      	beq.n	800508c <HAL_DMA_Init+0xb8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a62      	ldr	r2, [pc, #392]	; (8005198 <HAL_DMA_Init+0x1c4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d03b      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a60      	ldr	r2, [pc, #384]	; (800519c <HAL_DMA_Init+0x1c8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d036      	beq.n	800508c <HAL_DMA_Init+0xb8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a5f      	ldr	r2, [pc, #380]	; (80051a0 <HAL_DMA_Init+0x1cc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d031      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a5d      	ldr	r2, [pc, #372]	; (80051a4 <HAL_DMA_Init+0x1d0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d02c      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a5c      	ldr	r2, [pc, #368]	; (80051a8 <HAL_DMA_Init+0x1d4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d027      	beq.n	800508c <HAL_DMA_Init+0xb8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a5a      	ldr	r2, [pc, #360]	; (80051ac <HAL_DMA_Init+0x1d8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a59      	ldr	r2, [pc, #356]	; (80051b0 <HAL_DMA_Init+0x1dc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d01d      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a57      	ldr	r2, [pc, #348]	; (80051b4 <HAL_DMA_Init+0x1e0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_DMA_Init+0xb8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a56      	ldr	r2, [pc, #344]	; (80051b8 <HAL_DMA_Init+0x1e4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a54      	ldr	r2, [pc, #336]	; (80051bc <HAL_DMA_Init+0x1e8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_DMA_Init+0xb8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a53      	ldr	r2, [pc, #332]	; (80051c0 <HAL_DMA_Init+0x1ec>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a51      	ldr	r2, [pc, #324]	; (80051c4 <HAL_DMA_Init+0x1f0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_DMA_Init+0xb8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a50      	ldr	r2, [pc, #320]	; (80051c8 <HAL_DMA_Init+0x1f4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d101      	bne.n	8005090 <HAL_DMA_Init+0xbc>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <HAL_DMA_Init+0xbe>
 8005090:	2300      	movs	r3, #0
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 813b 	beq.w	800530e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a37      	ldr	r2, [pc, #220]	; (800518c <HAL_DMA_Init+0x1b8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d04a      	beq.n	8005148 <HAL_DMA_Init+0x174>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a36      	ldr	r2, [pc, #216]	; (8005190 <HAL_DMA_Init+0x1bc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d045      	beq.n	8005148 <HAL_DMA_Init+0x174>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a34      	ldr	r2, [pc, #208]	; (8005194 <HAL_DMA_Init+0x1c0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d040      	beq.n	8005148 <HAL_DMA_Init+0x174>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a33      	ldr	r2, [pc, #204]	; (8005198 <HAL_DMA_Init+0x1c4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d03b      	beq.n	8005148 <HAL_DMA_Init+0x174>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a31      	ldr	r2, [pc, #196]	; (800519c <HAL_DMA_Init+0x1c8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d036      	beq.n	8005148 <HAL_DMA_Init+0x174>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a30      	ldr	r2, [pc, #192]	; (80051a0 <HAL_DMA_Init+0x1cc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d031      	beq.n	8005148 <HAL_DMA_Init+0x174>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2e      	ldr	r2, [pc, #184]	; (80051a4 <HAL_DMA_Init+0x1d0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d02c      	beq.n	8005148 <HAL_DMA_Init+0x174>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <HAL_DMA_Init+0x1d4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d027      	beq.n	8005148 <HAL_DMA_Init+0x174>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2b      	ldr	r2, [pc, #172]	; (80051ac <HAL_DMA_Init+0x1d8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_DMA_Init+0x174>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <HAL_DMA_Init+0x1dc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01d      	beq.n	8005148 <HAL_DMA_Init+0x174>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <HAL_DMA_Init+0x1e0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <HAL_DMA_Init+0x174>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <HAL_DMA_Init+0x1e4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_DMA_Init+0x174>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a25      	ldr	r2, [pc, #148]	; (80051bc <HAL_DMA_Init+0x1e8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_DMA_Init+0x174>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a24      	ldr	r2, [pc, #144]	; (80051c0 <HAL_DMA_Init+0x1ec>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_DMA_Init+0x174>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <HAL_DMA_Init+0x1f0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_DMA_Init+0x174>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <HAL_DMA_Init+0x1f4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <HAL_DMA_Init+0x186>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e007      	b.n	800516a <HAL_DMA_Init+0x196>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800516a:	e02f      	b.n	80051cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800516c:	f7fe fe36 	bl	8003ddc <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b05      	cmp	r3, #5
 8005178:	d928      	bls.n	80051cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2203      	movs	r2, #3
 8005184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e246      	b.n	800561a <HAL_DMA_Init+0x646>
 800518c:	40020010 	.word	0x40020010
 8005190:	40020028 	.word	0x40020028
 8005194:	40020040 	.word	0x40020040
 8005198:	40020058 	.word	0x40020058
 800519c:	40020070 	.word	0x40020070
 80051a0:	40020088 	.word	0x40020088
 80051a4:	400200a0 	.word	0x400200a0
 80051a8:	400200b8 	.word	0x400200b8
 80051ac:	40020410 	.word	0x40020410
 80051b0:	40020428 	.word	0x40020428
 80051b4:	40020440 	.word	0x40020440
 80051b8:	40020458 	.word	0x40020458
 80051bc:	40020470 	.word	0x40020470
 80051c0:	40020488 	.word	0x40020488
 80051c4:	400204a0 	.word	0x400204a0
 80051c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1c8      	bne.n	800516c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4b83      	ldr	r3, [pc, #524]	; (80053f4 <HAL_DMA_Init+0x420>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80051f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b04      	cmp	r3, #4
 800521e:	d107      	bne.n	8005230 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	4313      	orrs	r3, r2
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005230:	4b71      	ldr	r3, [pc, #452]	; (80053f8 <HAL_DMA_Init+0x424>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b71      	ldr	r3, [pc, #452]	; (80053fc <HAL_DMA_Init+0x428>)
 8005236:	4013      	ands	r3, r2
 8005238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800523c:	d328      	bcc.n	8005290 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b28      	cmp	r3, #40	; 0x28
 8005244:	d903      	bls.n	800524e <HAL_DMA_Init+0x27a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b2e      	cmp	r3, #46	; 0x2e
 800524c:	d917      	bls.n	800527e <HAL_DMA_Init+0x2aa>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b3e      	cmp	r3, #62	; 0x3e
 8005254:	d903      	bls.n	800525e <HAL_DMA_Init+0x28a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b42      	cmp	r3, #66	; 0x42
 800525c:	d90f      	bls.n	800527e <HAL_DMA_Init+0x2aa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b46      	cmp	r3, #70	; 0x46
 8005264:	d903      	bls.n	800526e <HAL_DMA_Init+0x29a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b48      	cmp	r3, #72	; 0x48
 800526c:	d907      	bls.n	800527e <HAL_DMA_Init+0x2aa>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b4e      	cmp	r3, #78	; 0x4e
 8005274:	d905      	bls.n	8005282 <HAL_DMA_Init+0x2ae>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b52      	cmp	r3, #82	; 0x52
 800527c:	d801      	bhi.n	8005282 <HAL_DMA_Init+0x2ae>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_DMA_Init+0x2b0>
 8005282:	2300      	movs	r3, #0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800528e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0307 	bic.w	r3, r3, #7
 80052a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d117      	bne.n	80052ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00e      	beq.n	80052ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f002 fb31 	bl	8007934 <DMA_CheckFifoParam>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2240      	movs	r2, #64	; 0x40
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e197      	b.n	800561a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f002 fa6c 	bl	80077d0 <DMA_CalcBaseAndBitshift>
 80052f8:	4603      	mov	r3, r0
 80052fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	223f      	movs	r2, #63	; 0x3f
 8005306:	409a      	lsls	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	609a      	str	r2, [r3, #8]
 800530c:	e0cd      	b.n	80054aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3b      	ldr	r2, [pc, #236]	; (8005400 <HAL_DMA_Init+0x42c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d022      	beq.n	800535e <HAL_DMA_Init+0x38a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a39      	ldr	r2, [pc, #228]	; (8005404 <HAL_DMA_Init+0x430>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01d      	beq.n	800535e <HAL_DMA_Init+0x38a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a38      	ldr	r2, [pc, #224]	; (8005408 <HAL_DMA_Init+0x434>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d018      	beq.n	800535e <HAL_DMA_Init+0x38a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a36      	ldr	r2, [pc, #216]	; (800540c <HAL_DMA_Init+0x438>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_DMA_Init+0x38a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a35      	ldr	r2, [pc, #212]	; (8005410 <HAL_DMA_Init+0x43c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_DMA_Init+0x38a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a33      	ldr	r2, [pc, #204]	; (8005414 <HAL_DMA_Init+0x440>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_DMA_Init+0x38a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a32      	ldr	r2, [pc, #200]	; (8005418 <HAL_DMA_Init+0x444>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_DMA_Init+0x38a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a30      	ldr	r2, [pc, #192]	; (800541c <HAL_DMA_Init+0x448>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <HAL_DMA_Init+0x38e>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_DMA_Init+0x390>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8097 	beq.w	8005498 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a24      	ldr	r2, [pc, #144]	; (8005400 <HAL_DMA_Init+0x42c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d021      	beq.n	80053b8 <HAL_DMA_Init+0x3e4>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a22      	ldr	r2, [pc, #136]	; (8005404 <HAL_DMA_Init+0x430>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01c      	beq.n	80053b8 <HAL_DMA_Init+0x3e4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a21      	ldr	r2, [pc, #132]	; (8005408 <HAL_DMA_Init+0x434>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d017      	beq.n	80053b8 <HAL_DMA_Init+0x3e4>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1f      	ldr	r2, [pc, #124]	; (800540c <HAL_DMA_Init+0x438>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d012      	beq.n	80053b8 <HAL_DMA_Init+0x3e4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <HAL_DMA_Init+0x43c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00d      	beq.n	80053b8 <HAL_DMA_Init+0x3e4>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <HAL_DMA_Init+0x440>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d008      	beq.n	80053b8 <HAL_DMA_Init+0x3e4>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <HAL_DMA_Init+0x444>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <HAL_DMA_Init+0x3e4>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a19      	ldr	r2, [pc, #100]	; (800541c <HAL_DMA_Init+0x448>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2202      	movs	r2, #2
 80053be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4b12      	ldr	r3, [pc, #72]	; (8005420 <HAL_DMA_Init+0x44c>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d020      	beq.n	8005424 <HAL_DMA_Init+0x450>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b80      	cmp	r3, #128	; 0x80
 80053e8:	d102      	bne.n	80053f0 <HAL_DMA_Init+0x41c>
 80053ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053ee:	e01a      	b.n	8005426 <HAL_DMA_Init+0x452>
 80053f0:	2300      	movs	r3, #0
 80053f2:	e018      	b.n	8005426 <HAL_DMA_Init+0x452>
 80053f4:	fe10803f 	.word	0xfe10803f
 80053f8:	5c001000 	.word	0x5c001000
 80053fc:	ffff0000 	.word	0xffff0000
 8005400:	58025408 	.word	0x58025408
 8005404:	5802541c 	.word	0x5802541c
 8005408:	58025430 	.word	0x58025430
 800540c:	58025444 	.word	0x58025444
 8005410:	58025458 	.word	0x58025458
 8005414:	5802546c 	.word	0x5802546c
 8005418:	58025480 	.word	0x58025480
 800541c:	58025494 	.word	0x58025494
 8005420:	fffe000f 	.word	0xfffe000f
 8005424:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68d2      	ldr	r2, [r2, #12]
 800542a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800542c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800543c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800544c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005454:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	4b6e      	ldr	r3, [pc, #440]	; (8005624 <HAL_DMA_Init+0x650>)
 800546c:	4413      	add	r3, r2
 800546e:	4a6e      	ldr	r2, [pc, #440]	; (8005628 <HAL_DMA_Init+0x654>)
 8005470:	fba2 2303 	umull	r2, r3, r2, r3
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	009a      	lsls	r2, r3, #2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f002 f9a7 	bl	80077d0 <DMA_CalcBaseAndBitshift>
 8005482:	4603      	mov	r3, r0
 8005484:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2201      	movs	r2, #1
 8005490:	409a      	lsls	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	e008      	b.n	80054aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2240      	movs	r2, #64	; 0x40
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2203      	movs	r2, #3
 80054a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e0b7      	b.n	800561a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a5f      	ldr	r2, [pc, #380]	; (800562c <HAL_DMA_Init+0x658>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d072      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a5d      	ldr	r2, [pc, #372]	; (8005630 <HAL_DMA_Init+0x65c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d06d      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a5c      	ldr	r2, [pc, #368]	; (8005634 <HAL_DMA_Init+0x660>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d068      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a5a      	ldr	r2, [pc, #360]	; (8005638 <HAL_DMA_Init+0x664>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d063      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a59      	ldr	r2, [pc, #356]	; (800563c <HAL_DMA_Init+0x668>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d05e      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a57      	ldr	r2, [pc, #348]	; (8005640 <HAL_DMA_Init+0x66c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d059      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a56      	ldr	r2, [pc, #344]	; (8005644 <HAL_DMA_Init+0x670>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d054      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a54      	ldr	r2, [pc, #336]	; (8005648 <HAL_DMA_Init+0x674>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d04f      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a53      	ldr	r2, [pc, #332]	; (800564c <HAL_DMA_Init+0x678>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d04a      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a51      	ldr	r2, [pc, #324]	; (8005650 <HAL_DMA_Init+0x67c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d045      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a50      	ldr	r2, [pc, #320]	; (8005654 <HAL_DMA_Init+0x680>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d040      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a4e      	ldr	r2, [pc, #312]	; (8005658 <HAL_DMA_Init+0x684>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d03b      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a4d      	ldr	r2, [pc, #308]	; (800565c <HAL_DMA_Init+0x688>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d036      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a4b      	ldr	r2, [pc, #300]	; (8005660 <HAL_DMA_Init+0x68c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d031      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a4a      	ldr	r2, [pc, #296]	; (8005664 <HAL_DMA_Init+0x690>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d02c      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a48      	ldr	r2, [pc, #288]	; (8005668 <HAL_DMA_Init+0x694>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d027      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a47      	ldr	r2, [pc, #284]	; (800566c <HAL_DMA_Init+0x698>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d022      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a45      	ldr	r2, [pc, #276]	; (8005670 <HAL_DMA_Init+0x69c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01d      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a44      	ldr	r2, [pc, #272]	; (8005674 <HAL_DMA_Init+0x6a0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a42      	ldr	r2, [pc, #264]	; (8005678 <HAL_DMA_Init+0x6a4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a41      	ldr	r2, [pc, #260]	; (800567c <HAL_DMA_Init+0x6a8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a3f      	ldr	r2, [pc, #252]	; (8005680 <HAL_DMA_Init+0x6ac>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3e      	ldr	r2, [pc, #248]	; (8005684 <HAL_DMA_Init+0x6b0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_DMA_Init+0x5c6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3c      	ldr	r2, [pc, #240]	; (8005688 <HAL_DMA_Init+0x6b4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_DMA_Init+0x5ca>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <HAL_DMA_Init+0x5cc>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d032      	beq.n	800560a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f002 fa41 	bl	8007a2c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b80      	cmp	r3, #128	; 0x80
 80055b0:	d102      	bne.n	80055b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d010      	beq.n	80055f8 <HAL_DMA_Init+0x624>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d80c      	bhi.n	80055f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f002 fabe 	bl	8007b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	e008      	b.n	800560a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	a7fdabf8 	.word	0xa7fdabf8
 8005628:	cccccccd 	.word	0xcccccccd
 800562c:	40020010 	.word	0x40020010
 8005630:	40020028 	.word	0x40020028
 8005634:	40020040 	.word	0x40020040
 8005638:	40020058 	.word	0x40020058
 800563c:	40020070 	.word	0x40020070
 8005640:	40020088 	.word	0x40020088
 8005644:	400200a0 	.word	0x400200a0
 8005648:	400200b8 	.word	0x400200b8
 800564c:	40020410 	.word	0x40020410
 8005650:	40020428 	.word	0x40020428
 8005654:	40020440 	.word	0x40020440
 8005658:	40020458 	.word	0x40020458
 800565c:	40020470 	.word	0x40020470
 8005660:	40020488 	.word	0x40020488
 8005664:	400204a0 	.word	0x400204a0
 8005668:	400204b8 	.word	0x400204b8
 800566c:	58025408 	.word	0x58025408
 8005670:	5802541c 	.word	0x5802541c
 8005674:	58025430 	.word	0x58025430
 8005678:	58025444 	.word	0x58025444
 800567c:	58025458 	.word	0x58025458
 8005680:	5802546c 	.word	0x5802546c
 8005684:	58025480 	.word	0x58025480
 8005688:	58025494 	.word	0x58025494

0800568c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e226      	b.n	8005af6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_DMA_Start_IT+0x2a>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e21f      	b.n	8005af6 <HAL_DMA_Start_IT+0x46a>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	f040 820a 	bne.w	8005ae0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a68      	ldr	r2, [pc, #416]	; (8005880 <HAL_DMA_Start_IT+0x1f4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d04a      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a66      	ldr	r2, [pc, #408]	; (8005884 <HAL_DMA_Start_IT+0x1f8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d045      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a65      	ldr	r2, [pc, #404]	; (8005888 <HAL_DMA_Start_IT+0x1fc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d040      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a63      	ldr	r2, [pc, #396]	; (800588c <HAL_DMA_Start_IT+0x200>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d03b      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a62      	ldr	r2, [pc, #392]	; (8005890 <HAL_DMA_Start_IT+0x204>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d036      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a60      	ldr	r2, [pc, #384]	; (8005894 <HAL_DMA_Start_IT+0x208>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d031      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a5f      	ldr	r2, [pc, #380]	; (8005898 <HAL_DMA_Start_IT+0x20c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d02c      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a5d      	ldr	r2, [pc, #372]	; (800589c <HAL_DMA_Start_IT+0x210>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d027      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a5c      	ldr	r2, [pc, #368]	; (80058a0 <HAL_DMA_Start_IT+0x214>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d022      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a5a      	ldr	r2, [pc, #360]	; (80058a4 <HAL_DMA_Start_IT+0x218>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01d      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a59      	ldr	r2, [pc, #356]	; (80058a8 <HAL_DMA_Start_IT+0x21c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d018      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a57      	ldr	r2, [pc, #348]	; (80058ac <HAL_DMA_Start_IT+0x220>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a56      	ldr	r2, [pc, #344]	; (80058b0 <HAL_DMA_Start_IT+0x224>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00e      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a54      	ldr	r2, [pc, #336]	; (80058b4 <HAL_DMA_Start_IT+0x228>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d009      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a53      	ldr	r2, [pc, #332]	; (80058b8 <HAL_DMA_Start_IT+0x22c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_DMA_Start_IT+0xee>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a51      	ldr	r2, [pc, #324]	; (80058bc <HAL_DMA_Start_IT+0x230>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d108      	bne.n	800578c <HAL_DMA_Start_IT+0x100>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e007      	b.n	800579c <HAL_DMA_Start_IT+0x110>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f001 fe68 	bl	8007478 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a34      	ldr	r2, [pc, #208]	; (8005880 <HAL_DMA_Start_IT+0x1f4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d04a      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a33      	ldr	r2, [pc, #204]	; (8005884 <HAL_DMA_Start_IT+0x1f8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d045      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a31      	ldr	r2, [pc, #196]	; (8005888 <HAL_DMA_Start_IT+0x1fc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d040      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a30      	ldr	r2, [pc, #192]	; (800588c <HAL_DMA_Start_IT+0x200>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d03b      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2e      	ldr	r2, [pc, #184]	; (8005890 <HAL_DMA_Start_IT+0x204>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d036      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2d      	ldr	r2, [pc, #180]	; (8005894 <HAL_DMA_Start_IT+0x208>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d031      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a2b      	ldr	r2, [pc, #172]	; (8005898 <HAL_DMA_Start_IT+0x20c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d02c      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a2a      	ldr	r2, [pc, #168]	; (800589c <HAL_DMA_Start_IT+0x210>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d027      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a28      	ldr	r2, [pc, #160]	; (80058a0 <HAL_DMA_Start_IT+0x214>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d022      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a27      	ldr	r2, [pc, #156]	; (80058a4 <HAL_DMA_Start_IT+0x218>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d01d      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a25      	ldr	r2, [pc, #148]	; (80058a8 <HAL_DMA_Start_IT+0x21c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d018      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a24      	ldr	r2, [pc, #144]	; (80058ac <HAL_DMA_Start_IT+0x220>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a22      	ldr	r2, [pc, #136]	; (80058b0 <HAL_DMA_Start_IT+0x224>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00e      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a21      	ldr	r2, [pc, #132]	; (80058b4 <HAL_DMA_Start_IT+0x228>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <HAL_DMA_Start_IT+0x22c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d004      	beq.n	8005848 <HAL_DMA_Start_IT+0x1bc>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <HAL_DMA_Start_IT+0x230>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d101      	bne.n	800584c <HAL_DMA_Start_IT+0x1c0>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <HAL_DMA_Start_IT+0x1c2>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d036      	beq.n	80058c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 021e 	bic.w	r2, r3, #30
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0216 	orr.w	r2, r2, #22
 8005864:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d03e      	beq.n	80058ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0208 	orr.w	r2, r2, #8
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e035      	b.n	80058ec <HAL_DMA_Start_IT+0x260>
 8005880:	40020010 	.word	0x40020010
 8005884:	40020028 	.word	0x40020028
 8005888:	40020040 	.word	0x40020040
 800588c:	40020058 	.word	0x40020058
 8005890:	40020070 	.word	0x40020070
 8005894:	40020088 	.word	0x40020088
 8005898:	400200a0 	.word	0x400200a0
 800589c:	400200b8 	.word	0x400200b8
 80058a0:	40020410 	.word	0x40020410
 80058a4:	40020428 	.word	0x40020428
 80058a8:	40020440 	.word	0x40020440
 80058ac:	40020458 	.word	0x40020458
 80058b0:	40020470 	.word	0x40020470
 80058b4:	40020488 	.word	0x40020488
 80058b8:	400204a0 	.word	0x400204a0
 80058bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f023 020e 	bic.w	r2, r3, #14
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 020a 	orr.w	r2, r2, #10
 80058d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0204 	orr.w	r2, r2, #4
 80058ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a83      	ldr	r2, [pc, #524]	; (8005b00 <HAL_DMA_Start_IT+0x474>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d072      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a82      	ldr	r2, [pc, #520]	; (8005b04 <HAL_DMA_Start_IT+0x478>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d06d      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a80      	ldr	r2, [pc, #512]	; (8005b08 <HAL_DMA_Start_IT+0x47c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d068      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a7f      	ldr	r2, [pc, #508]	; (8005b0c <HAL_DMA_Start_IT+0x480>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d063      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a7d      	ldr	r2, [pc, #500]	; (8005b10 <HAL_DMA_Start_IT+0x484>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d05e      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a7c      	ldr	r2, [pc, #496]	; (8005b14 <HAL_DMA_Start_IT+0x488>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d059      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a7a      	ldr	r2, [pc, #488]	; (8005b18 <HAL_DMA_Start_IT+0x48c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d054      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a79      	ldr	r2, [pc, #484]	; (8005b1c <HAL_DMA_Start_IT+0x490>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d04f      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a77      	ldr	r2, [pc, #476]	; (8005b20 <HAL_DMA_Start_IT+0x494>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d04a      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a76      	ldr	r2, [pc, #472]	; (8005b24 <HAL_DMA_Start_IT+0x498>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d045      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a74      	ldr	r2, [pc, #464]	; (8005b28 <HAL_DMA_Start_IT+0x49c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d040      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a73      	ldr	r2, [pc, #460]	; (8005b2c <HAL_DMA_Start_IT+0x4a0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d03b      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a71      	ldr	r2, [pc, #452]	; (8005b30 <HAL_DMA_Start_IT+0x4a4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d036      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a70      	ldr	r2, [pc, #448]	; (8005b34 <HAL_DMA_Start_IT+0x4a8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d031      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a6e      	ldr	r2, [pc, #440]	; (8005b38 <HAL_DMA_Start_IT+0x4ac>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d02c      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6d      	ldr	r2, [pc, #436]	; (8005b3c <HAL_DMA_Start_IT+0x4b0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d027      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a6b      	ldr	r2, [pc, #428]	; (8005b40 <HAL_DMA_Start_IT+0x4b4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d022      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6a      	ldr	r2, [pc, #424]	; (8005b44 <HAL_DMA_Start_IT+0x4b8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d01d      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a68      	ldr	r2, [pc, #416]	; (8005b48 <HAL_DMA_Start_IT+0x4bc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d018      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a67      	ldr	r2, [pc, #412]	; (8005b4c <HAL_DMA_Start_IT+0x4c0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d013      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a65      	ldr	r2, [pc, #404]	; (8005b50 <HAL_DMA_Start_IT+0x4c4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00e      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a64      	ldr	r2, [pc, #400]	; (8005b54 <HAL_DMA_Start_IT+0x4c8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d009      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a62      	ldr	r2, [pc, #392]	; (8005b58 <HAL_DMA_Start_IT+0x4cc>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d004      	beq.n	80059dc <HAL_DMA_Start_IT+0x350>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a61      	ldr	r2, [pc, #388]	; (8005b5c <HAL_DMA_Start_IT+0x4d0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d101      	bne.n	80059e0 <HAL_DMA_Start_IT+0x354>
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <HAL_DMA_Start_IT+0x356>
 80059e0:	2300      	movs	r3, #0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01a      	beq.n	8005a1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a37      	ldr	r2, [pc, #220]	; (8005b00 <HAL_DMA_Start_IT+0x474>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d04a      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a36      	ldr	r2, [pc, #216]	; (8005b04 <HAL_DMA_Start_IT+0x478>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d045      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a34      	ldr	r2, [pc, #208]	; (8005b08 <HAL_DMA_Start_IT+0x47c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d040      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a33      	ldr	r2, [pc, #204]	; (8005b0c <HAL_DMA_Start_IT+0x480>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d03b      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a31      	ldr	r2, [pc, #196]	; (8005b10 <HAL_DMA_Start_IT+0x484>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d036      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a30      	ldr	r2, [pc, #192]	; (8005b14 <HAL_DMA_Start_IT+0x488>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d031      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a2e      	ldr	r2, [pc, #184]	; (8005b18 <HAL_DMA_Start_IT+0x48c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d02c      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2d      	ldr	r2, [pc, #180]	; (8005b1c <HAL_DMA_Start_IT+0x490>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d027      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2b      	ldr	r2, [pc, #172]	; (8005b20 <HAL_DMA_Start_IT+0x494>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d022      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a2a      	ldr	r2, [pc, #168]	; (8005b24 <HAL_DMA_Start_IT+0x498>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d01d      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a28      	ldr	r2, [pc, #160]	; (8005b28 <HAL_DMA_Start_IT+0x49c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d018      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a27      	ldr	r2, [pc, #156]	; (8005b2c <HAL_DMA_Start_IT+0x4a0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d013      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a25      	ldr	r2, [pc, #148]	; (8005b30 <HAL_DMA_Start_IT+0x4a4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00e      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a24      	ldr	r2, [pc, #144]	; (8005b34 <HAL_DMA_Start_IT+0x4a8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <HAL_DMA_Start_IT+0x4ac>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_DMA_Start_IT+0x430>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <HAL_DMA_Start_IT+0x4b0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d108      	bne.n	8005ace <HAL_DMA_Start_IT+0x442>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e012      	b.n	8005af4 <HAL_DMA_Start_IT+0x468>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e009      	b.n	8005af4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40020010 	.word	0x40020010
 8005b04:	40020028 	.word	0x40020028
 8005b08:	40020040 	.word	0x40020040
 8005b0c:	40020058 	.word	0x40020058
 8005b10:	40020070 	.word	0x40020070
 8005b14:	40020088 	.word	0x40020088
 8005b18:	400200a0 	.word	0x400200a0
 8005b1c:	400200b8 	.word	0x400200b8
 8005b20:	40020410 	.word	0x40020410
 8005b24:	40020428 	.word	0x40020428
 8005b28:	40020440 	.word	0x40020440
 8005b2c:	40020458 	.word	0x40020458
 8005b30:	40020470 	.word	0x40020470
 8005b34:	40020488 	.word	0x40020488
 8005b38:	400204a0 	.word	0x400204a0
 8005b3c:	400204b8 	.word	0x400204b8
 8005b40:	58025408 	.word	0x58025408
 8005b44:	5802541c 	.word	0x5802541c
 8005b48:	58025430 	.word	0x58025430
 8005b4c:	58025444 	.word	0x58025444
 8005b50:	58025458 	.word	0x58025458
 8005b54:	5802546c 	.word	0x5802546c
 8005b58:	58025480 	.word	0x58025480
 8005b5c:	58025494 	.word	0x58025494

08005b60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005b68:	f7fe f938 	bl	8003ddc <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e2dc      	b.n	8006132 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d008      	beq.n	8005b96 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2280      	movs	r2, #128	; 0x80
 8005b88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e2cd      	b.n	8006132 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a76      	ldr	r2, [pc, #472]	; (8005d74 <HAL_DMA_Abort+0x214>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d04a      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a74      	ldr	r2, [pc, #464]	; (8005d78 <HAL_DMA_Abort+0x218>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d045      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a73      	ldr	r2, [pc, #460]	; (8005d7c <HAL_DMA_Abort+0x21c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d040      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a71      	ldr	r2, [pc, #452]	; (8005d80 <HAL_DMA_Abort+0x220>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d03b      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a70      	ldr	r2, [pc, #448]	; (8005d84 <HAL_DMA_Abort+0x224>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d036      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a6e      	ldr	r2, [pc, #440]	; (8005d88 <HAL_DMA_Abort+0x228>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d031      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a6d      	ldr	r2, [pc, #436]	; (8005d8c <HAL_DMA_Abort+0x22c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d02c      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a6b      	ldr	r2, [pc, #428]	; (8005d90 <HAL_DMA_Abort+0x230>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d027      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a6a      	ldr	r2, [pc, #424]	; (8005d94 <HAL_DMA_Abort+0x234>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d022      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a68      	ldr	r2, [pc, #416]	; (8005d98 <HAL_DMA_Abort+0x238>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a67      	ldr	r2, [pc, #412]	; (8005d9c <HAL_DMA_Abort+0x23c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d018      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a65      	ldr	r2, [pc, #404]	; (8005da0 <HAL_DMA_Abort+0x240>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a64      	ldr	r2, [pc, #400]	; (8005da4 <HAL_DMA_Abort+0x244>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a62      	ldr	r2, [pc, #392]	; (8005da8 <HAL_DMA_Abort+0x248>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a61      	ldr	r2, [pc, #388]	; (8005dac <HAL_DMA_Abort+0x24c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <HAL_DMA_Abort+0xd6>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a5f      	ldr	r2, [pc, #380]	; (8005db0 <HAL_DMA_Abort+0x250>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <HAL_DMA_Abort+0xda>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <HAL_DMA_Abort+0xdc>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d013      	beq.n	8005c68 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 021e 	bic.w	r2, r2, #30
 8005c4e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c5e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	e00a      	b.n	8005c7e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 020e 	bic.w	r2, r2, #14
 8005c76:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a3c      	ldr	r2, [pc, #240]	; (8005d74 <HAL_DMA_Abort+0x214>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d072      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a3a      	ldr	r2, [pc, #232]	; (8005d78 <HAL_DMA_Abort+0x218>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d06d      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a39      	ldr	r2, [pc, #228]	; (8005d7c <HAL_DMA_Abort+0x21c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d068      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a37      	ldr	r2, [pc, #220]	; (8005d80 <HAL_DMA_Abort+0x220>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d063      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a36      	ldr	r2, [pc, #216]	; (8005d84 <HAL_DMA_Abort+0x224>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d05e      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a34      	ldr	r2, [pc, #208]	; (8005d88 <HAL_DMA_Abort+0x228>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d059      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a33      	ldr	r2, [pc, #204]	; (8005d8c <HAL_DMA_Abort+0x22c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d054      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a31      	ldr	r2, [pc, #196]	; (8005d90 <HAL_DMA_Abort+0x230>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d04f      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a30      	ldr	r2, [pc, #192]	; (8005d94 <HAL_DMA_Abort+0x234>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d04a      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2e      	ldr	r2, [pc, #184]	; (8005d98 <HAL_DMA_Abort+0x238>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d045      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a2d      	ldr	r2, [pc, #180]	; (8005d9c <HAL_DMA_Abort+0x23c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d040      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a2b      	ldr	r2, [pc, #172]	; (8005da0 <HAL_DMA_Abort+0x240>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d03b      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a2a      	ldr	r2, [pc, #168]	; (8005da4 <HAL_DMA_Abort+0x244>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d036      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a28      	ldr	r2, [pc, #160]	; (8005da8 <HAL_DMA_Abort+0x248>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d031      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a27      	ldr	r2, [pc, #156]	; (8005dac <HAL_DMA_Abort+0x24c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d02c      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a25      	ldr	r2, [pc, #148]	; (8005db0 <HAL_DMA_Abort+0x250>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d027      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a24      	ldr	r2, [pc, #144]	; (8005db4 <HAL_DMA_Abort+0x254>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d022      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a22      	ldr	r2, [pc, #136]	; (8005db8 <HAL_DMA_Abort+0x258>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01d      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a21      	ldr	r2, [pc, #132]	; (8005dbc <HAL_DMA_Abort+0x25c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d018      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1f      	ldr	r2, [pc, #124]	; (8005dc0 <HAL_DMA_Abort+0x260>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1e      	ldr	r2, [pc, #120]	; (8005dc4 <HAL_DMA_Abort+0x264>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1c      	ldr	r2, [pc, #112]	; (8005dc8 <HAL_DMA_Abort+0x268>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1b      	ldr	r2, [pc, #108]	; (8005dcc <HAL_DMA_Abort+0x26c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_DMA_Abort+0x20e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a19      	ldr	r2, [pc, #100]	; (8005dd0 <HAL_DMA_Abort+0x270>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d132      	bne.n	8005dd4 <HAL_DMA_Abort+0x274>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e031      	b.n	8005dd6 <HAL_DMA_Abort+0x276>
 8005d72:	bf00      	nop
 8005d74:	40020010 	.word	0x40020010
 8005d78:	40020028 	.word	0x40020028
 8005d7c:	40020040 	.word	0x40020040
 8005d80:	40020058 	.word	0x40020058
 8005d84:	40020070 	.word	0x40020070
 8005d88:	40020088 	.word	0x40020088
 8005d8c:	400200a0 	.word	0x400200a0
 8005d90:	400200b8 	.word	0x400200b8
 8005d94:	40020410 	.word	0x40020410
 8005d98:	40020428 	.word	0x40020428
 8005d9c:	40020440 	.word	0x40020440
 8005da0:	40020458 	.word	0x40020458
 8005da4:	40020470 	.word	0x40020470
 8005da8:	40020488 	.word	0x40020488
 8005dac:	400204a0 	.word	0x400204a0
 8005db0:	400204b8 	.word	0x400204b8
 8005db4:	58025408 	.word	0x58025408
 8005db8:	5802541c 	.word	0x5802541c
 8005dbc:	58025430 	.word	0x58025430
 8005dc0:	58025444 	.word	0x58025444
 8005dc4:	58025458 	.word	0x58025458
 8005dc8:	5802546c 	.word	0x5802546c
 8005dcc:	58025480 	.word	0x58025480
 8005dd0:	58025494 	.word	0x58025494
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6d      	ldr	r2, [pc, #436]	; (8005fa4 <HAL_DMA_Abort+0x444>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04a      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a6b      	ldr	r2, [pc, #428]	; (8005fa8 <HAL_DMA_Abort+0x448>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d045      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a6a      	ldr	r2, [pc, #424]	; (8005fac <HAL_DMA_Abort+0x44c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d040      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a68      	ldr	r2, [pc, #416]	; (8005fb0 <HAL_DMA_Abort+0x450>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d03b      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a67      	ldr	r2, [pc, #412]	; (8005fb4 <HAL_DMA_Abort+0x454>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d036      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a65      	ldr	r2, [pc, #404]	; (8005fb8 <HAL_DMA_Abort+0x458>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d031      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a64      	ldr	r2, [pc, #400]	; (8005fbc <HAL_DMA_Abort+0x45c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d02c      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a62      	ldr	r2, [pc, #392]	; (8005fc0 <HAL_DMA_Abort+0x460>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d027      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a61      	ldr	r2, [pc, #388]	; (8005fc4 <HAL_DMA_Abort+0x464>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a5f      	ldr	r2, [pc, #380]	; (8005fc8 <HAL_DMA_Abort+0x468>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01d      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a5e      	ldr	r2, [pc, #376]	; (8005fcc <HAL_DMA_Abort+0x46c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a5c      	ldr	r2, [pc, #368]	; (8005fd0 <HAL_DMA_Abort+0x470>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a5b      	ldr	r2, [pc, #364]	; (8005fd4 <HAL_DMA_Abort+0x474>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a59      	ldr	r2, [pc, #356]	; (8005fd8 <HAL_DMA_Abort+0x478>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a58      	ldr	r2, [pc, #352]	; (8005fdc <HAL_DMA_Abort+0x47c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_DMA_Abort+0x32a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a56      	ldr	r2, [pc, #344]	; (8005fe0 <HAL_DMA_Abort+0x480>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d108      	bne.n	8005e9c <HAL_DMA_Abort+0x33c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0201 	bic.w	r2, r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e007      	b.n	8005eac <HAL_DMA_Abort+0x34c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005eac:	e013      	b.n	8005ed6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eae:	f7fd ff95 	bl	8003ddc <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b05      	cmp	r3, #5
 8005eba:	d90c      	bls.n	8005ed6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e12d      	b.n	8006132 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e5      	bne.n	8005eae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <HAL_DMA_Abort+0x444>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d04a      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	; (8005fa8 <HAL_DMA_Abort+0x448>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d045      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a2c      	ldr	r2, [pc, #176]	; (8005fac <HAL_DMA_Abort+0x44c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d040      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <HAL_DMA_Abort+0x450>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d03b      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a29      	ldr	r2, [pc, #164]	; (8005fb4 <HAL_DMA_Abort+0x454>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d036      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a27      	ldr	r2, [pc, #156]	; (8005fb8 <HAL_DMA_Abort+0x458>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d031      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a26      	ldr	r2, [pc, #152]	; (8005fbc <HAL_DMA_Abort+0x45c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d02c      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a24      	ldr	r2, [pc, #144]	; (8005fc0 <HAL_DMA_Abort+0x460>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d027      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a23      	ldr	r2, [pc, #140]	; (8005fc4 <HAL_DMA_Abort+0x464>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d022      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a21      	ldr	r2, [pc, #132]	; (8005fc8 <HAL_DMA_Abort+0x468>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d01d      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a20      	ldr	r2, [pc, #128]	; (8005fcc <HAL_DMA_Abort+0x46c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d018      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <HAL_DMA_Abort+0x470>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d013      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a1d      	ldr	r2, [pc, #116]	; (8005fd4 <HAL_DMA_Abort+0x474>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00e      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <HAL_DMA_Abort+0x478>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d009      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1a      	ldr	r2, [pc, #104]	; (8005fdc <HAL_DMA_Abort+0x47c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d004      	beq.n	8005f82 <HAL_DMA_Abort+0x422>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <HAL_DMA_Abort+0x480>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d101      	bne.n	8005f86 <HAL_DMA_Abort+0x426>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <HAL_DMA_Abort+0x428>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d02b      	beq.n	8005fe4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	223f      	movs	r2, #63	; 0x3f
 8005f9c:	409a      	lsls	r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	609a      	str	r2, [r3, #8]
 8005fa2:	e02a      	b.n	8005ffa <HAL_DMA_Abort+0x49a>
 8005fa4:	40020010 	.word	0x40020010
 8005fa8:	40020028 	.word	0x40020028
 8005fac:	40020040 	.word	0x40020040
 8005fb0:	40020058 	.word	0x40020058
 8005fb4:	40020070 	.word	0x40020070
 8005fb8:	40020088 	.word	0x40020088
 8005fbc:	400200a0 	.word	0x400200a0
 8005fc0:	400200b8 	.word	0x400200b8
 8005fc4:	40020410 	.word	0x40020410
 8005fc8:	40020428 	.word	0x40020428
 8005fcc:	40020440 	.word	0x40020440
 8005fd0:	40020458 	.word	0x40020458
 8005fd4:	40020470 	.word	0x40020470
 8005fd8:	40020488 	.word	0x40020488
 8005fdc:	400204a0 	.word	0x400204a0
 8005fe0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a4f      	ldr	r2, [pc, #316]	; (800613c <HAL_DMA_Abort+0x5dc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d072      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a4d      	ldr	r2, [pc, #308]	; (8006140 <HAL_DMA_Abort+0x5e0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d06d      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a4c      	ldr	r2, [pc, #304]	; (8006144 <HAL_DMA_Abort+0x5e4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d068      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a4a      	ldr	r2, [pc, #296]	; (8006148 <HAL_DMA_Abort+0x5e8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d063      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a49      	ldr	r2, [pc, #292]	; (800614c <HAL_DMA_Abort+0x5ec>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d05e      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a47      	ldr	r2, [pc, #284]	; (8006150 <HAL_DMA_Abort+0x5f0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d059      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a46      	ldr	r2, [pc, #280]	; (8006154 <HAL_DMA_Abort+0x5f4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d054      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a44      	ldr	r2, [pc, #272]	; (8006158 <HAL_DMA_Abort+0x5f8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d04f      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a43      	ldr	r2, [pc, #268]	; (800615c <HAL_DMA_Abort+0x5fc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d04a      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a41      	ldr	r2, [pc, #260]	; (8006160 <HAL_DMA_Abort+0x600>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d045      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a40      	ldr	r2, [pc, #256]	; (8006164 <HAL_DMA_Abort+0x604>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d040      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a3e      	ldr	r2, [pc, #248]	; (8006168 <HAL_DMA_Abort+0x608>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d03b      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a3d      	ldr	r2, [pc, #244]	; (800616c <HAL_DMA_Abort+0x60c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d036      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a3b      	ldr	r2, [pc, #236]	; (8006170 <HAL_DMA_Abort+0x610>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d031      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a3a      	ldr	r2, [pc, #232]	; (8006174 <HAL_DMA_Abort+0x614>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d02c      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a38      	ldr	r2, [pc, #224]	; (8006178 <HAL_DMA_Abort+0x618>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d027      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a37      	ldr	r2, [pc, #220]	; (800617c <HAL_DMA_Abort+0x61c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a35      	ldr	r2, [pc, #212]	; (8006180 <HAL_DMA_Abort+0x620>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a34      	ldr	r2, [pc, #208]	; (8006184 <HAL_DMA_Abort+0x624>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a32      	ldr	r2, [pc, #200]	; (8006188 <HAL_DMA_Abort+0x628>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a31      	ldr	r2, [pc, #196]	; (800618c <HAL_DMA_Abort+0x62c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2f      	ldr	r2, [pc, #188]	; (8006190 <HAL_DMA_Abort+0x630>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2e      	ldr	r2, [pc, #184]	; (8006194 <HAL_DMA_Abort+0x634>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_DMA_Abort+0x58a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2c      	ldr	r2, [pc, #176]	; (8006198 <HAL_DMA_Abort+0x638>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <HAL_DMA_Abort+0x58e>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <HAL_DMA_Abort+0x590>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d015      	beq.n	8006120 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00c      	beq.n	8006120 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006114:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800611e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40020010 	.word	0x40020010
 8006140:	40020028 	.word	0x40020028
 8006144:	40020040 	.word	0x40020040
 8006148:	40020058 	.word	0x40020058
 800614c:	40020070 	.word	0x40020070
 8006150:	40020088 	.word	0x40020088
 8006154:	400200a0 	.word	0x400200a0
 8006158:	400200b8 	.word	0x400200b8
 800615c:	40020410 	.word	0x40020410
 8006160:	40020428 	.word	0x40020428
 8006164:	40020440 	.word	0x40020440
 8006168:	40020458 	.word	0x40020458
 800616c:	40020470 	.word	0x40020470
 8006170:	40020488 	.word	0x40020488
 8006174:	400204a0 	.word	0x400204a0
 8006178:	400204b8 	.word	0x400204b8
 800617c:	58025408 	.word	0x58025408
 8006180:	5802541c 	.word	0x5802541c
 8006184:	58025430 	.word	0x58025430
 8006188:	58025444 	.word	0x58025444
 800618c:	58025458 	.word	0x58025458
 8006190:	5802546c 	.word	0x5802546c
 8006194:	58025480 	.word	0x58025480
 8006198:	58025494 	.word	0x58025494

0800619c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e205      	b.n	80065ba <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d004      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2280      	movs	r2, #128	; 0x80
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e1fa      	b.n	80065ba <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a8c      	ldr	r2, [pc, #560]	; (80063fc <HAL_DMA_Abort_IT+0x260>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d04a      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a8b      	ldr	r2, [pc, #556]	; (8006400 <HAL_DMA_Abort_IT+0x264>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d045      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a89      	ldr	r2, [pc, #548]	; (8006404 <HAL_DMA_Abort_IT+0x268>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d040      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a88      	ldr	r2, [pc, #544]	; (8006408 <HAL_DMA_Abort_IT+0x26c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d03b      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a86      	ldr	r2, [pc, #536]	; (800640c <HAL_DMA_Abort_IT+0x270>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d036      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a85      	ldr	r2, [pc, #532]	; (8006410 <HAL_DMA_Abort_IT+0x274>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d031      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a83      	ldr	r2, [pc, #524]	; (8006414 <HAL_DMA_Abort_IT+0x278>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d02c      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a82      	ldr	r2, [pc, #520]	; (8006418 <HAL_DMA_Abort_IT+0x27c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d027      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a80      	ldr	r2, [pc, #512]	; (800641c <HAL_DMA_Abort_IT+0x280>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d022      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a7f      	ldr	r2, [pc, #508]	; (8006420 <HAL_DMA_Abort_IT+0x284>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d01d      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a7d      	ldr	r2, [pc, #500]	; (8006424 <HAL_DMA_Abort_IT+0x288>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d018      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a7c      	ldr	r2, [pc, #496]	; (8006428 <HAL_DMA_Abort_IT+0x28c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d013      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a7a      	ldr	r2, [pc, #488]	; (800642c <HAL_DMA_Abort_IT+0x290>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00e      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a79      	ldr	r2, [pc, #484]	; (8006430 <HAL_DMA_Abort_IT+0x294>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d009      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a77      	ldr	r2, [pc, #476]	; (8006434 <HAL_DMA_Abort_IT+0x298>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d004      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a76      	ldr	r2, [pc, #472]	; (8006438 <HAL_DMA_Abort_IT+0x29c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d101      	bne.n	8006268 <HAL_DMA_Abort_IT+0xcc>
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_DMA_Abort_IT+0xce>
 8006268:	2300      	movs	r3, #0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d065      	beq.n	800633a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2204      	movs	r2, #4
 8006272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a60      	ldr	r2, [pc, #384]	; (80063fc <HAL_DMA_Abort_IT+0x260>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d04a      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a5e      	ldr	r2, [pc, #376]	; (8006400 <HAL_DMA_Abort_IT+0x264>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d045      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a5d      	ldr	r2, [pc, #372]	; (8006404 <HAL_DMA_Abort_IT+0x268>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d040      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a5b      	ldr	r2, [pc, #364]	; (8006408 <HAL_DMA_Abort_IT+0x26c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d03b      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a5a      	ldr	r2, [pc, #360]	; (800640c <HAL_DMA_Abort_IT+0x270>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d036      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a58      	ldr	r2, [pc, #352]	; (8006410 <HAL_DMA_Abort_IT+0x274>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d031      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a57      	ldr	r2, [pc, #348]	; (8006414 <HAL_DMA_Abort_IT+0x278>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d02c      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a55      	ldr	r2, [pc, #340]	; (8006418 <HAL_DMA_Abort_IT+0x27c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d027      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a54      	ldr	r2, [pc, #336]	; (800641c <HAL_DMA_Abort_IT+0x280>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d022      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a52      	ldr	r2, [pc, #328]	; (8006420 <HAL_DMA_Abort_IT+0x284>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d01d      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a51      	ldr	r2, [pc, #324]	; (8006424 <HAL_DMA_Abort_IT+0x288>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d018      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a4f      	ldr	r2, [pc, #316]	; (8006428 <HAL_DMA_Abort_IT+0x28c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a4e      	ldr	r2, [pc, #312]	; (800642c <HAL_DMA_Abort_IT+0x290>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00e      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a4c      	ldr	r2, [pc, #304]	; (8006430 <HAL_DMA_Abort_IT+0x294>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d009      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a4b      	ldr	r2, [pc, #300]	; (8006434 <HAL_DMA_Abort_IT+0x298>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_DMA_Abort_IT+0x17a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a49      	ldr	r2, [pc, #292]	; (8006438 <HAL_DMA_Abort_IT+0x29c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d108      	bne.n	8006328 <HAL_DMA_Abort_IT+0x18c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0201 	bic.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	e147      	b.n	80065b8 <HAL_DMA_Abort_IT+0x41c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e13e      	b.n	80065b8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 020e 	bic.w	r2, r2, #14
 8006348:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <HAL_DMA_Abort_IT+0x260>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d04a      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a29      	ldr	r2, [pc, #164]	; (8006400 <HAL_DMA_Abort_IT+0x264>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d045      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a28      	ldr	r2, [pc, #160]	; (8006404 <HAL_DMA_Abort_IT+0x268>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d040      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a26      	ldr	r2, [pc, #152]	; (8006408 <HAL_DMA_Abort_IT+0x26c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d03b      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a25      	ldr	r2, [pc, #148]	; (800640c <HAL_DMA_Abort_IT+0x270>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d036      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a23      	ldr	r2, [pc, #140]	; (8006410 <HAL_DMA_Abort_IT+0x274>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d031      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a22      	ldr	r2, [pc, #136]	; (8006414 <HAL_DMA_Abort_IT+0x278>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d02c      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a20      	ldr	r2, [pc, #128]	; (8006418 <HAL_DMA_Abort_IT+0x27c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d027      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1f      	ldr	r2, [pc, #124]	; (800641c <HAL_DMA_Abort_IT+0x280>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d022      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <HAL_DMA_Abort_IT+0x284>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01d      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1c      	ldr	r2, [pc, #112]	; (8006424 <HAL_DMA_Abort_IT+0x288>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d018      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1a      	ldr	r2, [pc, #104]	; (8006428 <HAL_DMA_Abort_IT+0x28c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a19      	ldr	r2, [pc, #100]	; (800642c <HAL_DMA_Abort_IT+0x290>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a17      	ldr	r2, [pc, #92]	; (8006430 <HAL_DMA_Abort_IT+0x294>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d009      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a16      	ldr	r2, [pc, #88]	; (8006434 <HAL_DMA_Abort_IT+0x298>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <HAL_DMA_Abort_IT+0x24e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a14      	ldr	r2, [pc, #80]	; (8006438 <HAL_DMA_Abort_IT+0x29c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d128      	bne.n	800643c <HAL_DMA_Abort_IT+0x2a0>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0201 	bic.w	r2, r2, #1
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e027      	b.n	800644c <HAL_DMA_Abort_IT+0x2b0>
 80063fc:	40020010 	.word	0x40020010
 8006400:	40020028 	.word	0x40020028
 8006404:	40020040 	.word	0x40020040
 8006408:	40020058 	.word	0x40020058
 800640c:	40020070 	.word	0x40020070
 8006410:	40020088 	.word	0x40020088
 8006414:	400200a0 	.word	0x400200a0
 8006418:	400200b8 	.word	0x400200b8
 800641c:	40020410 	.word	0x40020410
 8006420:	40020428 	.word	0x40020428
 8006424:	40020440 	.word	0x40020440
 8006428:	40020458 	.word	0x40020458
 800642c:	40020470 	.word	0x40020470
 8006430:	40020488 	.word	0x40020488
 8006434:	400204a0 	.word	0x400204a0
 8006438:	400204b8 	.word	0x400204b8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5c      	ldr	r2, [pc, #368]	; (80065c4 <HAL_DMA_Abort_IT+0x428>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d072      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a5b      	ldr	r2, [pc, #364]	; (80065c8 <HAL_DMA_Abort_IT+0x42c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d06d      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a59      	ldr	r2, [pc, #356]	; (80065cc <HAL_DMA_Abort_IT+0x430>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d068      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a58      	ldr	r2, [pc, #352]	; (80065d0 <HAL_DMA_Abort_IT+0x434>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d063      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a56      	ldr	r2, [pc, #344]	; (80065d4 <HAL_DMA_Abort_IT+0x438>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d05e      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a55      	ldr	r2, [pc, #340]	; (80065d8 <HAL_DMA_Abort_IT+0x43c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d059      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a53      	ldr	r2, [pc, #332]	; (80065dc <HAL_DMA_Abort_IT+0x440>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d054      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a52      	ldr	r2, [pc, #328]	; (80065e0 <HAL_DMA_Abort_IT+0x444>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d04f      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a50      	ldr	r2, [pc, #320]	; (80065e4 <HAL_DMA_Abort_IT+0x448>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d04a      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a4f      	ldr	r2, [pc, #316]	; (80065e8 <HAL_DMA_Abort_IT+0x44c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d045      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a4d      	ldr	r2, [pc, #308]	; (80065ec <HAL_DMA_Abort_IT+0x450>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d040      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a4c      	ldr	r2, [pc, #304]	; (80065f0 <HAL_DMA_Abort_IT+0x454>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d03b      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a4a      	ldr	r2, [pc, #296]	; (80065f4 <HAL_DMA_Abort_IT+0x458>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d036      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a49      	ldr	r2, [pc, #292]	; (80065f8 <HAL_DMA_Abort_IT+0x45c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d031      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a47      	ldr	r2, [pc, #284]	; (80065fc <HAL_DMA_Abort_IT+0x460>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d02c      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a46      	ldr	r2, [pc, #280]	; (8006600 <HAL_DMA_Abort_IT+0x464>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d027      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a44      	ldr	r2, [pc, #272]	; (8006604 <HAL_DMA_Abort_IT+0x468>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d022      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a43      	ldr	r2, [pc, #268]	; (8006608 <HAL_DMA_Abort_IT+0x46c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d01d      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a41      	ldr	r2, [pc, #260]	; (800660c <HAL_DMA_Abort_IT+0x470>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d018      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a40      	ldr	r2, [pc, #256]	; (8006610 <HAL_DMA_Abort_IT+0x474>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d013      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a3e      	ldr	r2, [pc, #248]	; (8006614 <HAL_DMA_Abort_IT+0x478>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00e      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a3d      	ldr	r2, [pc, #244]	; (8006618 <HAL_DMA_Abort_IT+0x47c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d009      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a3b      	ldr	r2, [pc, #236]	; (800661c <HAL_DMA_Abort_IT+0x480>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d004      	beq.n	800653c <HAL_DMA_Abort_IT+0x3a0>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a3a      	ldr	r2, [pc, #232]	; (8006620 <HAL_DMA_Abort_IT+0x484>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d101      	bne.n	8006540 <HAL_DMA_Abort_IT+0x3a4>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <HAL_DMA_Abort_IT+0x3a6>
 8006540:	2300      	movs	r3, #0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d028      	beq.n	8006598 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006554:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	2201      	movs	r2, #1
 8006566:	409a      	lsls	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006574:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00c      	beq.n	8006598 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800658c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006596:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40020010 	.word	0x40020010
 80065c8:	40020028 	.word	0x40020028
 80065cc:	40020040 	.word	0x40020040
 80065d0:	40020058 	.word	0x40020058
 80065d4:	40020070 	.word	0x40020070
 80065d8:	40020088 	.word	0x40020088
 80065dc:	400200a0 	.word	0x400200a0
 80065e0:	400200b8 	.word	0x400200b8
 80065e4:	40020410 	.word	0x40020410
 80065e8:	40020428 	.word	0x40020428
 80065ec:	40020440 	.word	0x40020440
 80065f0:	40020458 	.word	0x40020458
 80065f4:	40020470 	.word	0x40020470
 80065f8:	40020488 	.word	0x40020488
 80065fc:	400204a0 	.word	0x400204a0
 8006600:	400204b8 	.word	0x400204b8
 8006604:	58025408 	.word	0x58025408
 8006608:	5802541c 	.word	0x5802541c
 800660c:	58025430 	.word	0x58025430
 8006610:	58025444 	.word	0x58025444
 8006614:	58025458 	.word	0x58025458
 8006618:	5802546c 	.word	0x5802546c
 800661c:	58025480 	.word	0x58025480
 8006620:	58025494 	.word	0x58025494

08006624 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006630:	4b67      	ldr	r3, [pc, #412]	; (80067d0 <HAL_DMA_IRQHandler+0x1ac>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a67      	ldr	r2, [pc, #412]	; (80067d4 <HAL_DMA_IRQHandler+0x1b0>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	0a9b      	lsrs	r3, r3, #10
 800663c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006642:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006648:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a5f      	ldr	r2, [pc, #380]	; (80067d8 <HAL_DMA_IRQHandler+0x1b4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d04a      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a5d      	ldr	r2, [pc, #372]	; (80067dc <HAL_DMA_IRQHandler+0x1b8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d045      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5c      	ldr	r2, [pc, #368]	; (80067e0 <HAL_DMA_IRQHandler+0x1bc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d040      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a5a      	ldr	r2, [pc, #360]	; (80067e4 <HAL_DMA_IRQHandler+0x1c0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d03b      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a59      	ldr	r2, [pc, #356]	; (80067e8 <HAL_DMA_IRQHandler+0x1c4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d036      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a57      	ldr	r2, [pc, #348]	; (80067ec <HAL_DMA_IRQHandler+0x1c8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d031      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a56      	ldr	r2, [pc, #344]	; (80067f0 <HAL_DMA_IRQHandler+0x1cc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d02c      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a54      	ldr	r2, [pc, #336]	; (80067f4 <HAL_DMA_IRQHandler+0x1d0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d027      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a53      	ldr	r2, [pc, #332]	; (80067f8 <HAL_DMA_IRQHandler+0x1d4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d022      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a51      	ldr	r2, [pc, #324]	; (80067fc <HAL_DMA_IRQHandler+0x1d8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01d      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a50      	ldr	r2, [pc, #320]	; (8006800 <HAL_DMA_IRQHandler+0x1dc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d018      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a4e      	ldr	r2, [pc, #312]	; (8006804 <HAL_DMA_IRQHandler+0x1e0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a4d      	ldr	r2, [pc, #308]	; (8006808 <HAL_DMA_IRQHandler+0x1e4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a4b      	ldr	r2, [pc, #300]	; (800680c <HAL_DMA_IRQHandler+0x1e8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4a      	ldr	r2, [pc, #296]	; (8006810 <HAL_DMA_IRQHandler+0x1ec>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a48      	ldr	r2, [pc, #288]	; (8006814 <HAL_DMA_IRQHandler+0x1f0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d101      	bne.n	80066fa <HAL_DMA_IRQHandler+0xd6>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <HAL_DMA_IRQHandler+0xd8>
 80066fa:	2300      	movs	r3, #0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 842b 	beq.w	8006f58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	2208      	movs	r2, #8
 800670c:	409a      	lsls	r2, r3
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80a2 	beq.w	800685c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2e      	ldr	r2, [pc, #184]	; (80067d8 <HAL_DMA_IRQHandler+0x1b4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d04a      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <HAL_DMA_IRQHandler+0x1b8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d045      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a2b      	ldr	r2, [pc, #172]	; (80067e0 <HAL_DMA_IRQHandler+0x1bc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d040      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2a      	ldr	r2, [pc, #168]	; (80067e4 <HAL_DMA_IRQHandler+0x1c0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d03b      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a28      	ldr	r2, [pc, #160]	; (80067e8 <HAL_DMA_IRQHandler+0x1c4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d036      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <HAL_DMA_IRQHandler+0x1c8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d031      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <HAL_DMA_IRQHandler+0x1cc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d02c      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a24      	ldr	r2, [pc, #144]	; (80067f4 <HAL_DMA_IRQHandler+0x1d0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d027      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a22      	ldr	r2, [pc, #136]	; (80067f8 <HAL_DMA_IRQHandler+0x1d4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d022      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a21      	ldr	r2, [pc, #132]	; (80067fc <HAL_DMA_IRQHandler+0x1d8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d01d      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1f      	ldr	r2, [pc, #124]	; (8006800 <HAL_DMA_IRQHandler+0x1dc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d018      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <HAL_DMA_IRQHandler+0x1e0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1c      	ldr	r2, [pc, #112]	; (8006808 <HAL_DMA_IRQHandler+0x1e4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00e      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1b      	ldr	r2, [pc, #108]	; (800680c <HAL_DMA_IRQHandler+0x1e8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d009      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a19      	ldr	r2, [pc, #100]	; (8006810 <HAL_DMA_IRQHandler+0x1ec>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a18      	ldr	r2, [pc, #96]	; (8006814 <HAL_DMA_IRQHandler+0x1f0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d12f      	bne.n	8006818 <HAL_DMA_IRQHandler+0x1f4>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bf14      	ite	ne
 80067c6:	2301      	movne	r3, #1
 80067c8:	2300      	moveq	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	e02e      	b.n	800682c <HAL_DMA_IRQHandler+0x208>
 80067ce:	bf00      	nop
 80067d0:	24000000 	.word	0x24000000
 80067d4:	1b4e81b5 	.word	0x1b4e81b5
 80067d8:	40020010 	.word	0x40020010
 80067dc:	40020028 	.word	0x40020028
 80067e0:	40020040 	.word	0x40020040
 80067e4:	40020058 	.word	0x40020058
 80067e8:	40020070 	.word	0x40020070
 80067ec:	40020088 	.word	0x40020088
 80067f0:	400200a0 	.word	0x400200a0
 80067f4:	400200b8 	.word	0x400200b8
 80067f8:	40020410 	.word	0x40020410
 80067fc:	40020428 	.word	0x40020428
 8006800:	40020440 	.word	0x40020440
 8006804:	40020458 	.word	0x40020458
 8006808:	40020470 	.word	0x40020470
 800680c:	40020488 	.word	0x40020488
 8006810:	400204a0 	.word	0x400204a0
 8006814:	400204b8 	.word	0x400204b8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf14      	ite	ne
 8006826:	2301      	movne	r3, #1
 8006828:	2300      	moveq	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d015      	beq.n	800685c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0204 	bic.w	r2, r2, #4
 800683e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	2208      	movs	r2, #8
 800684a:	409a      	lsls	r2, r3
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006854:	f043 0201 	orr.w	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d06e      	beq.n	8006950 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a69      	ldr	r2, [pc, #420]	; (8006a1c <HAL_DMA_IRQHandler+0x3f8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d04a      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a67      	ldr	r2, [pc, #412]	; (8006a20 <HAL_DMA_IRQHandler+0x3fc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d045      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a66      	ldr	r2, [pc, #408]	; (8006a24 <HAL_DMA_IRQHandler+0x400>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d040      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a64      	ldr	r2, [pc, #400]	; (8006a28 <HAL_DMA_IRQHandler+0x404>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d03b      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a63      	ldr	r2, [pc, #396]	; (8006a2c <HAL_DMA_IRQHandler+0x408>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d036      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a61      	ldr	r2, [pc, #388]	; (8006a30 <HAL_DMA_IRQHandler+0x40c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d031      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a60      	ldr	r2, [pc, #384]	; (8006a34 <HAL_DMA_IRQHandler+0x410>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d02c      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a5e      	ldr	r2, [pc, #376]	; (8006a38 <HAL_DMA_IRQHandler+0x414>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d027      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a5d      	ldr	r2, [pc, #372]	; (8006a3c <HAL_DMA_IRQHandler+0x418>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d022      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a5b      	ldr	r2, [pc, #364]	; (8006a40 <HAL_DMA_IRQHandler+0x41c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d01d      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a5a      	ldr	r2, [pc, #360]	; (8006a44 <HAL_DMA_IRQHandler+0x420>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d018      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a58      	ldr	r2, [pc, #352]	; (8006a48 <HAL_DMA_IRQHandler+0x424>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d013      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a57      	ldr	r2, [pc, #348]	; (8006a4c <HAL_DMA_IRQHandler+0x428>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00e      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a55      	ldr	r2, [pc, #340]	; (8006a50 <HAL_DMA_IRQHandler+0x42c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d009      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a54      	ldr	r2, [pc, #336]	; (8006a54 <HAL_DMA_IRQHandler+0x430>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d004      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a52      	ldr	r2, [pc, #328]	; (8006a58 <HAL_DMA_IRQHandler+0x434>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d10a      	bne.n	8006928 <HAL_DMA_IRQHandler+0x304>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e003      	b.n	8006930 <HAL_DMA_IRQHandler+0x30c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00d      	beq.n	8006950 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2201      	movs	r2, #1
 800693e:	409a      	lsls	r2, r3
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	f043 0202 	orr.w	r2, r3, #2
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2204      	movs	r2, #4
 800695a:	409a      	lsls	r2, r3
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	4013      	ands	r3, r2
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 808f 	beq.w	8006a84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2c      	ldr	r2, [pc, #176]	; (8006a1c <HAL_DMA_IRQHandler+0x3f8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d04a      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a2a      	ldr	r2, [pc, #168]	; (8006a20 <HAL_DMA_IRQHandler+0x3fc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d045      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a29      	ldr	r2, [pc, #164]	; (8006a24 <HAL_DMA_IRQHandler+0x400>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d040      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a27      	ldr	r2, [pc, #156]	; (8006a28 <HAL_DMA_IRQHandler+0x404>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d03b      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <HAL_DMA_IRQHandler+0x408>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d036      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <HAL_DMA_IRQHandler+0x40c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d031      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a23      	ldr	r2, [pc, #140]	; (8006a34 <HAL_DMA_IRQHandler+0x410>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d02c      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a21      	ldr	r2, [pc, #132]	; (8006a38 <HAL_DMA_IRQHandler+0x414>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d027      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a20      	ldr	r2, [pc, #128]	; (8006a3c <HAL_DMA_IRQHandler+0x418>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d022      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <HAL_DMA_IRQHandler+0x41c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01d      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <HAL_DMA_IRQHandler+0x420>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d018      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_DMA_IRQHandler+0x424>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <HAL_DMA_IRQHandler+0x428>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00e      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <HAL_DMA_IRQHandler+0x42c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d009      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a17      	ldr	r2, [pc, #92]	; (8006a54 <HAL_DMA_IRQHandler+0x430>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d004      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <HAL_DMA_IRQHandler+0x434>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d12a      	bne.n	8006a5c <HAL_DMA_IRQHandler+0x438>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	e023      	b.n	8006a64 <HAL_DMA_IRQHandler+0x440>
 8006a1c:	40020010 	.word	0x40020010
 8006a20:	40020028 	.word	0x40020028
 8006a24:	40020040 	.word	0x40020040
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	40020070 	.word	0x40020070
 8006a30:	40020088 	.word	0x40020088
 8006a34:	400200a0 	.word	0x400200a0
 8006a38:	400200b8 	.word	0x400200b8
 8006a3c:	40020410 	.word	0x40020410
 8006a40:	40020428 	.word	0x40020428
 8006a44:	40020440 	.word	0x40020440
 8006a48:	40020458 	.word	0x40020458
 8006a4c:	40020470 	.word	0x40020470
 8006a50:	40020488 	.word	0x40020488
 8006a54:	400204a0 	.word	0x400204a0
 8006a58:	400204b8 	.word	0x400204b8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00d      	beq.n	8006a84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	2204      	movs	r2, #4
 8006a72:	409a      	lsls	r2, r3
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	f043 0204 	orr.w	r2, r3, #4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80a6 	beq.w	8006be6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a85      	ldr	r2, [pc, #532]	; (8006cb4 <HAL_DMA_IRQHandler+0x690>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d04a      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a83      	ldr	r2, [pc, #524]	; (8006cb8 <HAL_DMA_IRQHandler+0x694>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d045      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a82      	ldr	r2, [pc, #520]	; (8006cbc <HAL_DMA_IRQHandler+0x698>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d040      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a80      	ldr	r2, [pc, #512]	; (8006cc0 <HAL_DMA_IRQHandler+0x69c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d03b      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7f      	ldr	r2, [pc, #508]	; (8006cc4 <HAL_DMA_IRQHandler+0x6a0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d036      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a7d      	ldr	r2, [pc, #500]	; (8006cc8 <HAL_DMA_IRQHandler+0x6a4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d031      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a7c      	ldr	r2, [pc, #496]	; (8006ccc <HAL_DMA_IRQHandler+0x6a8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d02c      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a7a      	ldr	r2, [pc, #488]	; (8006cd0 <HAL_DMA_IRQHandler+0x6ac>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d027      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a79      	ldr	r2, [pc, #484]	; (8006cd4 <HAL_DMA_IRQHandler+0x6b0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d022      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a77      	ldr	r2, [pc, #476]	; (8006cd8 <HAL_DMA_IRQHandler+0x6b4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d01d      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a76      	ldr	r2, [pc, #472]	; (8006cdc <HAL_DMA_IRQHandler+0x6b8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d018      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a74      	ldr	r2, [pc, #464]	; (8006ce0 <HAL_DMA_IRQHandler+0x6bc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d013      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a73      	ldr	r2, [pc, #460]	; (8006ce4 <HAL_DMA_IRQHandler+0x6c0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00e      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a71      	ldr	r2, [pc, #452]	; (8006ce8 <HAL_DMA_IRQHandler+0x6c4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d009      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a70      	ldr	r2, [pc, #448]	; (8006cec <HAL_DMA_IRQHandler+0x6c8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d004      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6e      	ldr	r2, [pc, #440]	; (8006cf0 <HAL_DMA_IRQHandler+0x6cc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d10a      	bne.n	8006b50 <HAL_DMA_IRQHandler+0x52c>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf14      	ite	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	2300      	moveq	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	e009      	b.n	8006b64 <HAL_DMA_IRQHandler+0x540>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bf14      	ite	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	2300      	moveq	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d03e      	beq.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	2210      	movs	r2, #16
 8006b72:	409a      	lsls	r2, r3
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d018      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d108      	bne.n	8006ba6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d024      	beq.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	4798      	blx	r3
 8006ba4:	e01f      	b.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01b      	beq.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
 8006bb6:	e016      	b.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d107      	bne.n	8006bd6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0208 	bic.w	r2, r2, #8
 8006bd4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	2220      	movs	r2, #32
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8110 	beq.w	8006e1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a2c      	ldr	r2, [pc, #176]	; (8006cb4 <HAL_DMA_IRQHandler+0x690>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d04a      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a2b      	ldr	r2, [pc, #172]	; (8006cb8 <HAL_DMA_IRQHandler+0x694>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d045      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a29      	ldr	r2, [pc, #164]	; (8006cbc <HAL_DMA_IRQHandler+0x698>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d040      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a28      	ldr	r2, [pc, #160]	; (8006cc0 <HAL_DMA_IRQHandler+0x69c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d03b      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a26      	ldr	r2, [pc, #152]	; (8006cc4 <HAL_DMA_IRQHandler+0x6a0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d036      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a25      	ldr	r2, [pc, #148]	; (8006cc8 <HAL_DMA_IRQHandler+0x6a4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d031      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <HAL_DMA_IRQHandler+0x6a8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d02c      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a22      	ldr	r2, [pc, #136]	; (8006cd0 <HAL_DMA_IRQHandler+0x6ac>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d027      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a20      	ldr	r2, [pc, #128]	; (8006cd4 <HAL_DMA_IRQHandler+0x6b0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d022      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a1f      	ldr	r2, [pc, #124]	; (8006cd8 <HAL_DMA_IRQHandler+0x6b4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d01d      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a1d      	ldr	r2, [pc, #116]	; (8006cdc <HAL_DMA_IRQHandler+0x6b8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d018      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ce0 <HAL_DMA_IRQHandler+0x6bc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d013      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1a      	ldr	r2, [pc, #104]	; (8006ce4 <HAL_DMA_IRQHandler+0x6c0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00e      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a19      	ldr	r2, [pc, #100]	; (8006ce8 <HAL_DMA_IRQHandler+0x6c4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d009      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a17      	ldr	r2, [pc, #92]	; (8006cec <HAL_DMA_IRQHandler+0x6c8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a16      	ldr	r2, [pc, #88]	; (8006cf0 <HAL_DMA_IRQHandler+0x6cc>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d12b      	bne.n	8006cf4 <HAL_DMA_IRQHandler+0x6d0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf14      	ite	ne
 8006caa:	2301      	movne	r3, #1
 8006cac:	2300      	moveq	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	e02a      	b.n	8006d08 <HAL_DMA_IRQHandler+0x6e4>
 8006cb2:	bf00      	nop
 8006cb4:	40020010 	.word	0x40020010
 8006cb8:	40020028 	.word	0x40020028
 8006cbc:	40020040 	.word	0x40020040
 8006cc0:	40020058 	.word	0x40020058
 8006cc4:	40020070 	.word	0x40020070
 8006cc8:	40020088 	.word	0x40020088
 8006ccc:	400200a0 	.word	0x400200a0
 8006cd0:	400200b8 	.word	0x400200b8
 8006cd4:	40020410 	.word	0x40020410
 8006cd8:	40020428 	.word	0x40020428
 8006cdc:	40020440 	.word	0x40020440
 8006ce0:	40020458 	.word	0x40020458
 8006ce4:	40020470 	.word	0x40020470
 8006ce8:	40020488 	.word	0x40020488
 8006cec:	400204a0 	.word	0x400204a0
 8006cf0:	400204b8 	.word	0x400204b8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bf14      	ite	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	2300      	moveq	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8087 	beq.w	8006e1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2220      	movs	r2, #32
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d139      	bne.n	8006d9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0216 	bic.w	r2, r2, #22
 8006d38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <HAL_DMA_IRQHandler+0x736>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0208 	bic.w	r2, r2, #8
 8006d68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	223f      	movs	r2, #63	; 0x3f
 8006d74:	409a      	lsls	r2, r3
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 834a 	beq.w	8007428 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
          }
          return;
 8006d9c:	e344      	b.n	8007428 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d018      	beq.n	8006dde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d108      	bne.n	8006dcc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d02c      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
 8006dca:	e027      	b.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d023      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
 8006ddc:	e01e      	b.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10f      	bne.n	8006e0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0210 	bic.w	r2, r2, #16
 8006dfa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8306 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8088 	beq.w	8006f44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2204      	movs	r2, #4
 8006e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a7a      	ldr	r2, [pc, #488]	; (800702c <HAL_DMA_IRQHandler+0xa08>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d04a      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a79      	ldr	r2, [pc, #484]	; (8007030 <HAL_DMA_IRQHandler+0xa0c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d045      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a77      	ldr	r2, [pc, #476]	; (8007034 <HAL_DMA_IRQHandler+0xa10>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d040      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a76      	ldr	r2, [pc, #472]	; (8007038 <HAL_DMA_IRQHandler+0xa14>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d03b      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a74      	ldr	r2, [pc, #464]	; (800703c <HAL_DMA_IRQHandler+0xa18>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d036      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a73      	ldr	r2, [pc, #460]	; (8007040 <HAL_DMA_IRQHandler+0xa1c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d031      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a71      	ldr	r2, [pc, #452]	; (8007044 <HAL_DMA_IRQHandler+0xa20>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d02c      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a70      	ldr	r2, [pc, #448]	; (8007048 <HAL_DMA_IRQHandler+0xa24>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d027      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6e      	ldr	r2, [pc, #440]	; (800704c <HAL_DMA_IRQHandler+0xa28>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d022      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6d      	ldr	r2, [pc, #436]	; (8007050 <HAL_DMA_IRQHandler+0xa2c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d01d      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a6b      	ldr	r2, [pc, #428]	; (8007054 <HAL_DMA_IRQHandler+0xa30>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d018      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a6a      	ldr	r2, [pc, #424]	; (8007058 <HAL_DMA_IRQHandler+0xa34>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d013      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a68      	ldr	r2, [pc, #416]	; (800705c <HAL_DMA_IRQHandler+0xa38>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00e      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a67      	ldr	r2, [pc, #412]	; (8007060 <HAL_DMA_IRQHandler+0xa3c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d009      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a65      	ldr	r2, [pc, #404]	; (8007064 <HAL_DMA_IRQHandler+0xa40>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d004      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a64      	ldr	r2, [pc, #400]	; (8007068 <HAL_DMA_IRQHandler+0xa44>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d108      	bne.n	8006eee <HAL_DMA_IRQHandler+0x8ca>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0201 	bic.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e007      	b.n	8006efe <HAL_DMA_IRQHandler+0x8da>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d307      	bcc.n	8006f1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1f2      	bne.n	8006efe <HAL_DMA_IRQHandler+0x8da>
 8006f18:	e000      	b.n	8006f1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006f32:	e003      	b.n	8006f3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8272 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
 8006f56:	e26c      	b.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a43      	ldr	r2, [pc, #268]	; (800706c <HAL_DMA_IRQHandler+0xa48>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d022      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a42      	ldr	r2, [pc, #264]	; (8007070 <HAL_DMA_IRQHandler+0xa4c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a40      	ldr	r2, [pc, #256]	; (8007074 <HAL_DMA_IRQHandler+0xa50>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d018      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a3f      	ldr	r2, [pc, #252]	; (8007078 <HAL_DMA_IRQHandler+0xa54>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a3d      	ldr	r2, [pc, #244]	; (800707c <HAL_DMA_IRQHandler+0xa58>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a3c      	ldr	r2, [pc, #240]	; (8007080 <HAL_DMA_IRQHandler+0xa5c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a3a      	ldr	r2, [pc, #232]	; (8007084 <HAL_DMA_IRQHandler+0xa60>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a39      	ldr	r2, [pc, #228]	; (8007088 <HAL_DMA_IRQHandler+0xa64>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d101      	bne.n	8006fac <HAL_DMA_IRQHandler+0x988>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <HAL_DMA_IRQHandler+0x98a>
 8006fac:	2300      	movs	r3, #0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 823f 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	409a      	lsls	r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80cd 	beq.w	800716c <HAL_DMA_IRQHandler+0xb48>
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80c7 	beq.w	800716c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	409a      	lsls	r2, r3
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d049      	beq.n	800708c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 8210 	beq.w	800742c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007014:	e20a      	b.n	800742c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8206 	beq.w	800742c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007028:	e200      	b.n	800742c <HAL_DMA_IRQHandler+0xe08>
 800702a:	bf00      	nop
 800702c:	40020010 	.word	0x40020010
 8007030:	40020028 	.word	0x40020028
 8007034:	40020040 	.word	0x40020040
 8007038:	40020058 	.word	0x40020058
 800703c:	40020070 	.word	0x40020070
 8007040:	40020088 	.word	0x40020088
 8007044:	400200a0 	.word	0x400200a0
 8007048:	400200b8 	.word	0x400200b8
 800704c:	40020410 	.word	0x40020410
 8007050:	40020428 	.word	0x40020428
 8007054:	40020440 	.word	0x40020440
 8007058:	40020458 	.word	0x40020458
 800705c:	40020470 	.word	0x40020470
 8007060:	40020488 	.word	0x40020488
 8007064:	400204a0 	.word	0x400204a0
 8007068:	400204b8 	.word	0x400204b8
 800706c:	58025408 	.word	0x58025408
 8007070:	5802541c 	.word	0x5802541c
 8007074:	58025430 	.word	0x58025430
 8007078:	58025444 	.word	0x58025444
 800707c:	58025458 	.word	0x58025458
 8007080:	5802546c 	.word	0x5802546c
 8007084:	58025480 	.word	0x58025480
 8007088:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d160      	bne.n	8007158 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a8c      	ldr	r2, [pc, #560]	; (80072cc <HAL_DMA_IRQHandler+0xca8>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d04a      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a8a      	ldr	r2, [pc, #552]	; (80072d0 <HAL_DMA_IRQHandler+0xcac>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d045      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a89      	ldr	r2, [pc, #548]	; (80072d4 <HAL_DMA_IRQHandler+0xcb0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d040      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a87      	ldr	r2, [pc, #540]	; (80072d8 <HAL_DMA_IRQHandler+0xcb4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d03b      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a86      	ldr	r2, [pc, #536]	; (80072dc <HAL_DMA_IRQHandler+0xcb8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d036      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a84      	ldr	r2, [pc, #528]	; (80072e0 <HAL_DMA_IRQHandler+0xcbc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d031      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a83      	ldr	r2, [pc, #524]	; (80072e4 <HAL_DMA_IRQHandler+0xcc0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d02c      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a81      	ldr	r2, [pc, #516]	; (80072e8 <HAL_DMA_IRQHandler+0xcc4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d027      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a80      	ldr	r2, [pc, #512]	; (80072ec <HAL_DMA_IRQHandler+0xcc8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a7e      	ldr	r2, [pc, #504]	; (80072f0 <HAL_DMA_IRQHandler+0xccc>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01d      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a7d      	ldr	r2, [pc, #500]	; (80072f4 <HAL_DMA_IRQHandler+0xcd0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a7b      	ldr	r2, [pc, #492]	; (80072f8 <HAL_DMA_IRQHandler+0xcd4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a7a      	ldr	r2, [pc, #488]	; (80072fc <HAL_DMA_IRQHandler+0xcd8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a78      	ldr	r2, [pc, #480]	; (8007300 <HAL_DMA_IRQHandler+0xcdc>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a77      	ldr	r2, [pc, #476]	; (8007304 <HAL_DMA_IRQHandler+0xce0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a75      	ldr	r2, [pc, #468]	; (8007308 <HAL_DMA_IRQHandler+0xce4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d108      	bne.n	8007148 <HAL_DMA_IRQHandler+0xb24>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0208 	bic.w	r2, r2, #8
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e007      	b.n	8007158 <HAL_DMA_IRQHandler+0xb34>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0204 	bic.w	r2, r2, #4
 8007156:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8165 	beq.w	800742c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800716a:	e15f      	b.n	800742c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	2202      	movs	r2, #2
 8007176:	409a      	lsls	r2, r3
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	4013      	ands	r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80c5 	beq.w	800730c <HAL_DMA_IRQHandler+0xce8>
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 80bf 	beq.w	800730c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2202      	movs	r2, #2
 8007198:	409a      	lsls	r2, r3
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d018      	beq.n	80071da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 813a 	beq.w	8007430 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071c4:	e134      	b.n	8007430 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8130 	beq.w	8007430 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d8:	e12a      	b.n	8007430 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d168      	bne.n	80072b6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a38      	ldr	r2, [pc, #224]	; (80072cc <HAL_DMA_IRQHandler+0xca8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d04a      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a37      	ldr	r2, [pc, #220]	; (80072d0 <HAL_DMA_IRQHandler+0xcac>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d045      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a35      	ldr	r2, [pc, #212]	; (80072d4 <HAL_DMA_IRQHandler+0xcb0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d040      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a34      	ldr	r2, [pc, #208]	; (80072d8 <HAL_DMA_IRQHandler+0xcb4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d03b      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a32      	ldr	r2, [pc, #200]	; (80072dc <HAL_DMA_IRQHandler+0xcb8>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d036      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a31      	ldr	r2, [pc, #196]	; (80072e0 <HAL_DMA_IRQHandler+0xcbc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d031      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <HAL_DMA_IRQHandler+0xcc0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d02c      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2e      	ldr	r2, [pc, #184]	; (80072e8 <HAL_DMA_IRQHandler+0xcc4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d027      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2c      	ldr	r2, [pc, #176]	; (80072ec <HAL_DMA_IRQHandler+0xcc8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d022      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a2b      	ldr	r2, [pc, #172]	; (80072f0 <HAL_DMA_IRQHandler+0xccc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d01d      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a29      	ldr	r2, [pc, #164]	; (80072f4 <HAL_DMA_IRQHandler+0xcd0>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d018      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <HAL_DMA_IRQHandler+0xcd4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a26      	ldr	r2, [pc, #152]	; (80072fc <HAL_DMA_IRQHandler+0xcd8>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00e      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a25      	ldr	r2, [pc, #148]	; (8007300 <HAL_DMA_IRQHandler+0xcdc>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a23      	ldr	r2, [pc, #140]	; (8007304 <HAL_DMA_IRQHandler+0xce0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_DMA_IRQHandler+0xc60>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a22      	ldr	r2, [pc, #136]	; (8007308 <HAL_DMA_IRQHandler+0xce4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d108      	bne.n	8007296 <HAL_DMA_IRQHandler+0xc72>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0214 	bic.w	r2, r2, #20
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e007      	b.n	80072a6 <HAL_DMA_IRQHandler+0xc82>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 020a 	bic.w	r2, r2, #10
 80072a4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 80b8 	beq.w	8007430 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072c8:	e0b2      	b.n	8007430 <HAL_DMA_IRQHandler+0xe0c>
 80072ca:	bf00      	nop
 80072cc:	40020010 	.word	0x40020010
 80072d0:	40020028 	.word	0x40020028
 80072d4:	40020040 	.word	0x40020040
 80072d8:	40020058 	.word	0x40020058
 80072dc:	40020070 	.word	0x40020070
 80072e0:	40020088 	.word	0x40020088
 80072e4:	400200a0 	.word	0x400200a0
 80072e8:	400200b8 	.word	0x400200b8
 80072ec:	40020410 	.word	0x40020410
 80072f0:	40020428 	.word	0x40020428
 80072f4:	40020440 	.word	0x40020440
 80072f8:	40020458 	.word	0x40020458
 80072fc:	40020470 	.word	0x40020470
 8007300:	40020488 	.word	0x40020488
 8007304:	400204a0 	.word	0x400204a0
 8007308:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	2208      	movs	r2, #8
 8007316:	409a      	lsls	r2, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8088 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8082 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a41      	ldr	r2, [pc, #260]	; (8007438 <HAL_DMA_IRQHandler+0xe14>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d04a      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a3f      	ldr	r2, [pc, #252]	; (800743c <HAL_DMA_IRQHandler+0xe18>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d045      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a3e      	ldr	r2, [pc, #248]	; (8007440 <HAL_DMA_IRQHandler+0xe1c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d040      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a3c      	ldr	r2, [pc, #240]	; (8007444 <HAL_DMA_IRQHandler+0xe20>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d03b      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a3b      	ldr	r2, [pc, #236]	; (8007448 <HAL_DMA_IRQHandler+0xe24>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d036      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a39      	ldr	r2, [pc, #228]	; (800744c <HAL_DMA_IRQHandler+0xe28>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d031      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a38      	ldr	r2, [pc, #224]	; (8007450 <HAL_DMA_IRQHandler+0xe2c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d02c      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a36      	ldr	r2, [pc, #216]	; (8007454 <HAL_DMA_IRQHandler+0xe30>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d027      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a35      	ldr	r2, [pc, #212]	; (8007458 <HAL_DMA_IRQHandler+0xe34>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d022      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a33      	ldr	r2, [pc, #204]	; (800745c <HAL_DMA_IRQHandler+0xe38>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d01d      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a32      	ldr	r2, [pc, #200]	; (8007460 <HAL_DMA_IRQHandler+0xe3c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d018      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a30      	ldr	r2, [pc, #192]	; (8007464 <HAL_DMA_IRQHandler+0xe40>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d013      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2f      	ldr	r2, [pc, #188]	; (8007468 <HAL_DMA_IRQHandler+0xe44>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00e      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a2d      	ldr	r2, [pc, #180]	; (800746c <HAL_DMA_IRQHandler+0xe48>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d009      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2c      	ldr	r2, [pc, #176]	; (8007470 <HAL_DMA_IRQHandler+0xe4c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a2a      	ldr	r2, [pc, #168]	; (8007474 <HAL_DMA_IRQHandler+0xe50>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d108      	bne.n	80073e0 <HAL_DMA_IRQHandler+0xdbc>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 021c 	bic.w	r2, r2, #28
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e007      	b.n	80073f0 <HAL_DMA_IRQHandler+0xdcc>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 020e 	bic.w	r2, r2, #14
 80073ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	2201      	movs	r2, #1
 80073fa:	409a      	lsls	r2, r3
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
 8007426:	e004      	b.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007430:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007432:	3728      	adds	r7, #40	; 0x28
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40020010 	.word	0x40020010
 800743c:	40020028 	.word	0x40020028
 8007440:	40020040 	.word	0x40020040
 8007444:	40020058 	.word	0x40020058
 8007448:	40020070 	.word	0x40020070
 800744c:	40020088 	.word	0x40020088
 8007450:	400200a0 	.word	0x400200a0
 8007454:	400200b8 	.word	0x400200b8
 8007458:	40020410 	.word	0x40020410
 800745c:	40020428 	.word	0x40020428
 8007460:	40020440 	.word	0x40020440
 8007464:	40020458 	.word	0x40020458
 8007468:	40020470 	.word	0x40020470
 800746c:	40020488 	.word	0x40020488
 8007470:	400204a0 	.word	0x400204a0
 8007474:	400204b8 	.word	0x400204b8

08007478 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007490:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a84      	ldr	r2, [pc, #528]	; (80076a8 <DMA_SetConfig+0x230>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d072      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a82      	ldr	r2, [pc, #520]	; (80076ac <DMA_SetConfig+0x234>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d06d      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a81      	ldr	r2, [pc, #516]	; (80076b0 <DMA_SetConfig+0x238>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d068      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a7f      	ldr	r2, [pc, #508]	; (80076b4 <DMA_SetConfig+0x23c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d063      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a7e      	ldr	r2, [pc, #504]	; (80076b8 <DMA_SetConfig+0x240>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d05e      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a7c      	ldr	r2, [pc, #496]	; (80076bc <DMA_SetConfig+0x244>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d059      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a7b      	ldr	r2, [pc, #492]	; (80076c0 <DMA_SetConfig+0x248>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d054      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a79      	ldr	r2, [pc, #484]	; (80076c4 <DMA_SetConfig+0x24c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d04f      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a78      	ldr	r2, [pc, #480]	; (80076c8 <DMA_SetConfig+0x250>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d04a      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a76      	ldr	r2, [pc, #472]	; (80076cc <DMA_SetConfig+0x254>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d045      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a75      	ldr	r2, [pc, #468]	; (80076d0 <DMA_SetConfig+0x258>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d040      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a73      	ldr	r2, [pc, #460]	; (80076d4 <DMA_SetConfig+0x25c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d03b      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a72      	ldr	r2, [pc, #456]	; (80076d8 <DMA_SetConfig+0x260>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d036      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a70      	ldr	r2, [pc, #448]	; (80076dc <DMA_SetConfig+0x264>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d031      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a6f      	ldr	r2, [pc, #444]	; (80076e0 <DMA_SetConfig+0x268>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d02c      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a6d      	ldr	r2, [pc, #436]	; (80076e4 <DMA_SetConfig+0x26c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d027      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a6c      	ldr	r2, [pc, #432]	; (80076e8 <DMA_SetConfig+0x270>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d022      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a6a      	ldr	r2, [pc, #424]	; (80076ec <DMA_SetConfig+0x274>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a69      	ldr	r2, [pc, #420]	; (80076f0 <DMA_SetConfig+0x278>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a67      	ldr	r2, [pc, #412]	; (80076f4 <DMA_SetConfig+0x27c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a66      	ldr	r2, [pc, #408]	; (80076f8 <DMA_SetConfig+0x280>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a64      	ldr	r2, [pc, #400]	; (80076fc <DMA_SetConfig+0x284>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a63      	ldr	r2, [pc, #396]	; (8007700 <DMA_SetConfig+0x288>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a61      	ldr	r2, [pc, #388]	; (8007704 <DMA_SetConfig+0x28c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d101      	bne.n	8007586 <DMA_SetConfig+0x10e>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <DMA_SetConfig+0x110>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00d      	beq.n	80075a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007594:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a3e      	ldr	r2, [pc, #248]	; (80076a8 <DMA_SetConfig+0x230>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d04a      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a3d      	ldr	r2, [pc, #244]	; (80076ac <DMA_SetConfig+0x234>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d045      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a3b      	ldr	r2, [pc, #236]	; (80076b0 <DMA_SetConfig+0x238>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d040      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a3a      	ldr	r2, [pc, #232]	; (80076b4 <DMA_SetConfig+0x23c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d03b      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a38      	ldr	r2, [pc, #224]	; (80076b8 <DMA_SetConfig+0x240>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d036      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a37      	ldr	r2, [pc, #220]	; (80076bc <DMA_SetConfig+0x244>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d031      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a35      	ldr	r2, [pc, #212]	; (80076c0 <DMA_SetConfig+0x248>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d02c      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a34      	ldr	r2, [pc, #208]	; (80076c4 <DMA_SetConfig+0x24c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d027      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a32      	ldr	r2, [pc, #200]	; (80076c8 <DMA_SetConfig+0x250>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d022      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a31      	ldr	r2, [pc, #196]	; (80076cc <DMA_SetConfig+0x254>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d01d      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a2f      	ldr	r2, [pc, #188]	; (80076d0 <DMA_SetConfig+0x258>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d018      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a2e      	ldr	r2, [pc, #184]	; (80076d4 <DMA_SetConfig+0x25c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2c      	ldr	r2, [pc, #176]	; (80076d8 <DMA_SetConfig+0x260>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00e      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a2b      	ldr	r2, [pc, #172]	; (80076dc <DMA_SetConfig+0x264>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d009      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a29      	ldr	r2, [pc, #164]	; (80076e0 <DMA_SetConfig+0x268>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a28      	ldr	r2, [pc, #160]	; (80076e4 <DMA_SetConfig+0x26c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d101      	bne.n	800764c <DMA_SetConfig+0x1d4>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <DMA_SetConfig+0x1d6>
 800764c:	2300      	movs	r3, #0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d05a      	beq.n	8007708 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	223f      	movs	r2, #63	; 0x3f
 800765c:	409a      	lsls	r2, r3
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007670:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d108      	bne.n	8007694 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007692:	e087      	b.n	80077a4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	60da      	str	r2, [r3, #12]
}
 80076a4:	e07e      	b.n	80077a4 <DMA_SetConfig+0x32c>
 80076a6:	bf00      	nop
 80076a8:	40020010 	.word	0x40020010
 80076ac:	40020028 	.word	0x40020028
 80076b0:	40020040 	.word	0x40020040
 80076b4:	40020058 	.word	0x40020058
 80076b8:	40020070 	.word	0x40020070
 80076bc:	40020088 	.word	0x40020088
 80076c0:	400200a0 	.word	0x400200a0
 80076c4:	400200b8 	.word	0x400200b8
 80076c8:	40020410 	.word	0x40020410
 80076cc:	40020428 	.word	0x40020428
 80076d0:	40020440 	.word	0x40020440
 80076d4:	40020458 	.word	0x40020458
 80076d8:	40020470 	.word	0x40020470
 80076dc:	40020488 	.word	0x40020488
 80076e0:	400204a0 	.word	0x400204a0
 80076e4:	400204b8 	.word	0x400204b8
 80076e8:	58025408 	.word	0x58025408
 80076ec:	5802541c 	.word	0x5802541c
 80076f0:	58025430 	.word	0x58025430
 80076f4:	58025444 	.word	0x58025444
 80076f8:	58025458 	.word	0x58025458
 80076fc:	5802546c 	.word	0x5802546c
 8007700:	58025480 	.word	0x58025480
 8007704:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a28      	ldr	r2, [pc, #160]	; (80077b0 <DMA_SetConfig+0x338>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d022      	beq.n	8007758 <DMA_SetConfig+0x2e0>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <DMA_SetConfig+0x33c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d01d      	beq.n	8007758 <DMA_SetConfig+0x2e0>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a25      	ldr	r2, [pc, #148]	; (80077b8 <DMA_SetConfig+0x340>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d018      	beq.n	8007758 <DMA_SetConfig+0x2e0>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a24      	ldr	r2, [pc, #144]	; (80077bc <DMA_SetConfig+0x344>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d013      	beq.n	8007758 <DMA_SetConfig+0x2e0>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a22      	ldr	r2, [pc, #136]	; (80077c0 <DMA_SetConfig+0x348>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00e      	beq.n	8007758 <DMA_SetConfig+0x2e0>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a21      	ldr	r2, [pc, #132]	; (80077c4 <DMA_SetConfig+0x34c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d009      	beq.n	8007758 <DMA_SetConfig+0x2e0>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1f      	ldr	r2, [pc, #124]	; (80077c8 <DMA_SetConfig+0x350>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d004      	beq.n	8007758 <DMA_SetConfig+0x2e0>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1e      	ldr	r2, [pc, #120]	; (80077cc <DMA_SetConfig+0x354>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d101      	bne.n	800775c <DMA_SetConfig+0x2e4>
 8007758:	2301      	movs	r3, #1
 800775a:	e000      	b.n	800775e <DMA_SetConfig+0x2e6>
 800775c:	2300      	movs	r3, #0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d020      	beq.n	80077a4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	2201      	movs	r2, #1
 800776c:	409a      	lsls	r2, r3
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d108      	bne.n	8007794 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	60da      	str	r2, [r3, #12]
}
 8007792:	e007      	b.n	80077a4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]
}
 80077a4:	bf00      	nop
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	58025408 	.word	0x58025408
 80077b4:	5802541c 	.word	0x5802541c
 80077b8:	58025430 	.word	0x58025430
 80077bc:	58025444 	.word	0x58025444
 80077c0:	58025458 	.word	0x58025458
 80077c4:	5802546c 	.word	0x5802546c
 80077c8:	58025480 	.word	0x58025480
 80077cc:	58025494 	.word	0x58025494

080077d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a42      	ldr	r2, [pc, #264]	; (80078e8 <DMA_CalcBaseAndBitshift+0x118>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d04a      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a41      	ldr	r2, [pc, #260]	; (80078ec <DMA_CalcBaseAndBitshift+0x11c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d045      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a3f      	ldr	r2, [pc, #252]	; (80078f0 <DMA_CalcBaseAndBitshift+0x120>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d040      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a3e      	ldr	r2, [pc, #248]	; (80078f4 <DMA_CalcBaseAndBitshift+0x124>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d03b      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a3c      	ldr	r2, [pc, #240]	; (80078f8 <DMA_CalcBaseAndBitshift+0x128>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d036      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a3b      	ldr	r2, [pc, #236]	; (80078fc <DMA_CalcBaseAndBitshift+0x12c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d031      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a39      	ldr	r2, [pc, #228]	; (8007900 <DMA_CalcBaseAndBitshift+0x130>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d02c      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a38      	ldr	r2, [pc, #224]	; (8007904 <DMA_CalcBaseAndBitshift+0x134>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d027      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a36      	ldr	r2, [pc, #216]	; (8007908 <DMA_CalcBaseAndBitshift+0x138>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d022      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a35      	ldr	r2, [pc, #212]	; (800790c <DMA_CalcBaseAndBitshift+0x13c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d01d      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a33      	ldr	r2, [pc, #204]	; (8007910 <DMA_CalcBaseAndBitshift+0x140>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d018      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a32      	ldr	r2, [pc, #200]	; (8007914 <DMA_CalcBaseAndBitshift+0x144>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d013      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a30      	ldr	r2, [pc, #192]	; (8007918 <DMA_CalcBaseAndBitshift+0x148>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00e      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a2f      	ldr	r2, [pc, #188]	; (800791c <DMA_CalcBaseAndBitshift+0x14c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d009      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a2d      	ldr	r2, [pc, #180]	; (8007920 <DMA_CalcBaseAndBitshift+0x150>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2c      	ldr	r2, [pc, #176]	; (8007924 <DMA_CalcBaseAndBitshift+0x154>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d101      	bne.n	800787c <DMA_CalcBaseAndBitshift+0xac>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <DMA_CalcBaseAndBitshift+0xae>
 800787c:	2300      	movs	r3, #0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d024      	beq.n	80078cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	3b10      	subs	r3, #16
 800788a:	4a27      	ldr	r2, [pc, #156]	; (8007928 <DMA_CalcBaseAndBitshift+0x158>)
 800788c:	fba2 2303 	umull	r2, r3, r2, r3
 8007890:	091b      	lsrs	r3, r3, #4
 8007892:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	4a24      	ldr	r2, [pc, #144]	; (800792c <DMA_CalcBaseAndBitshift+0x15c>)
 800789c:	5cd3      	ldrb	r3, [r2, r3]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d908      	bls.n	80078bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	4b1f      	ldr	r3, [pc, #124]	; (8007930 <DMA_CalcBaseAndBitshift+0x160>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	659a      	str	r2, [r3, #88]	; 0x58
 80078ba:	e00d      	b.n	80078d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	4b1b      	ldr	r3, [pc, #108]	; (8007930 <DMA_CalcBaseAndBitshift+0x160>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6593      	str	r3, [r2, #88]	; 0x58
 80078ca:	e005      	b.n	80078d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	40020010 	.word	0x40020010
 80078ec:	40020028 	.word	0x40020028
 80078f0:	40020040 	.word	0x40020040
 80078f4:	40020058 	.word	0x40020058
 80078f8:	40020070 	.word	0x40020070
 80078fc:	40020088 	.word	0x40020088
 8007900:	400200a0 	.word	0x400200a0
 8007904:	400200b8 	.word	0x400200b8
 8007908:	40020410 	.word	0x40020410
 800790c:	40020428 	.word	0x40020428
 8007910:	40020440 	.word	0x40020440
 8007914:	40020458 	.word	0x40020458
 8007918:	40020470 	.word	0x40020470
 800791c:	40020488 	.word	0x40020488
 8007920:	400204a0 	.word	0x400204a0
 8007924:	400204b8 	.word	0x400204b8
 8007928:	aaaaaaab 	.word	0xaaaaaaab
 800792c:	08010be0 	.word	0x08010be0
 8007930:	fffffc00 	.word	0xfffffc00

08007934 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d120      	bne.n	800798a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	2b03      	cmp	r3, #3
 800794e:	d858      	bhi.n	8007a02 <DMA_CheckFifoParam+0xce>
 8007950:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <DMA_CheckFifoParam+0x24>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	08007969 	.word	0x08007969
 800795c:	0800797b 	.word	0x0800797b
 8007960:	08007969 	.word	0x08007969
 8007964:	08007a03 	.word	0x08007a03
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d048      	beq.n	8007a06 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007978:	e045      	b.n	8007a06 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007982:	d142      	bne.n	8007a0a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007988:	e03f      	b.n	8007a0a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007992:	d123      	bne.n	80079dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	2b03      	cmp	r3, #3
 800799a:	d838      	bhi.n	8007a0e <DMA_CheckFifoParam+0xda>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <DMA_CheckFifoParam+0x70>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	080079b5 	.word	0x080079b5
 80079a8:	080079bb 	.word	0x080079bb
 80079ac:	080079b5 	.word	0x080079b5
 80079b0:	080079cd 	.word	0x080079cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	73fb      	strb	r3, [r7, #15]
        break;
 80079b8:	e030      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d025      	beq.n	8007a12 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079ca:	e022      	b.n	8007a12 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079d4:	d11f      	bne.n	8007a16 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079da:	e01c      	b.n	8007a16 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d902      	bls.n	80079ea <DMA_CheckFifoParam+0xb6>
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d003      	beq.n	80079f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80079e8:	e018      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	73fb      	strb	r3, [r7, #15]
        break;
 80079ee:	e015      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00e      	beq.n	8007a1a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007a00:	e00b      	b.n	8007a1a <DMA_CheckFifoParam+0xe6>
        break;
 8007a02:	bf00      	nop
 8007a04:	e00a      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a06:	bf00      	nop
 8007a08:	e008      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a0a:	bf00      	nop
 8007a0c:	e006      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a0e:	bf00      	nop
 8007a10:	e004      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a12:	bf00      	nop
 8007a14:	e002      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a16:	bf00      	nop
 8007a18:	e000      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
    break;
 8007a1a:	bf00      	nop
    }
  }

  return status;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a38      	ldr	r2, [pc, #224]	; (8007b20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d022      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a36      	ldr	r2, [pc, #216]	; (8007b24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d01d      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a35      	ldr	r2, [pc, #212]	; (8007b28 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d018      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a33      	ldr	r2, [pc, #204]	; (8007b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d013      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a32      	ldr	r2, [pc, #200]	; (8007b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00e      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a30      	ldr	r2, [pc, #192]	; (8007b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d009      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a2f      	ldr	r2, [pc, #188]	; (8007b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a2d      	ldr	r2, [pc, #180]	; (8007b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d101      	bne.n	8007a8e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01a      	beq.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	3b08      	subs	r3, #8
 8007a9c:	4a28      	ldr	r2, [pc, #160]	; (8007b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa2:	091b      	lsrs	r3, r3, #4
 8007aa4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4b26      	ldr	r3, [pc, #152]	; (8007b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	461a      	mov	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a24      	ldr	r2, [pc, #144]	; (8007b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007ab8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	409a      	lsls	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ac8:	e024      	b.n	8007b14 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	3b10      	subs	r3, #16
 8007ad2:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4a1c      	ldr	r2, [pc, #112]	; (8007b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d806      	bhi.n	8007af2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d902      	bls.n	8007af2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3308      	adds	r3, #8
 8007af0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a16      	ldr	r2, [pc, #88]	; (8007b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f003 031f 	and.w	r3, r3, #31
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	409a      	lsls	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	58025408 	.word	0x58025408
 8007b24:	5802541c 	.word	0x5802541c
 8007b28:	58025430 	.word	0x58025430
 8007b2c:	58025444 	.word	0x58025444
 8007b30:	58025458 	.word	0x58025458
 8007b34:	5802546c 	.word	0x5802546c
 8007b38:	58025480 	.word	0x58025480
 8007b3c:	58025494 	.word	0x58025494
 8007b40:	cccccccd 	.word	0xcccccccd
 8007b44:	16009600 	.word	0x16009600
 8007b48:	58025880 	.word	0x58025880
 8007b4c:	aaaaaaab 	.word	0xaaaaaaab
 8007b50:	400204b8 	.word	0x400204b8
 8007b54:	4002040f 	.word	0x4002040f
 8007b58:	10008200 	.word	0x10008200
 8007b5c:	40020880 	.word	0x40020880

08007b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d04a      	beq.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d847      	bhi.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a25      	ldr	r2, [pc, #148]	; (8007c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d022      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a24      	ldr	r2, [pc, #144]	; (8007c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d01d      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a22      	ldr	r2, [pc, #136]	; (8007c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d018      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a21      	ldr	r2, [pc, #132]	; (8007c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1f      	ldr	r2, [pc, #124]	; (8007c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00e      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a1e      	ldr	r2, [pc, #120]	; (8007c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d101      	bne.n	8007bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a15      	ldr	r2, [pc, #84]	; (8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007be8:	671a      	str	r2, [r3, #112]	; 0x70
 8007bea:	e009      	b.n	8007c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a11      	ldr	r2, [pc, #68]	; (8007c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007bfe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	2201      	movs	r2, #1
 8007c06:	409a      	lsls	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	58025408 	.word	0x58025408
 8007c1c:	5802541c 	.word	0x5802541c
 8007c20:	58025430 	.word	0x58025430
 8007c24:	58025444 	.word	0x58025444
 8007c28:	58025458 	.word	0x58025458
 8007c2c:	5802546c 	.word	0x5802546c
 8007c30:	58025480 	.word	0x58025480
 8007c34:	58025494 	.word	0x58025494
 8007c38:	1600963f 	.word	0x1600963f
 8007c3c:	58025940 	.word	0x58025940
 8007c40:	1000823f 	.word	0x1000823f
 8007c44:	40020940 	.word	0x40020940

08007c48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e0c6      	b.n	8007de8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fb f97c 	bl	8002f60 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2223      	movs	r2, #35	; 0x23
 8007c6c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c6e:	4b60      	ldr	r3, [pc, #384]	; (8007df0 <HAL_ETH_Init+0x1a8>)
 8007c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c74:	4a5e      	ldr	r2, [pc, #376]	; (8007df0 <HAL_ETH_Init+0x1a8>)
 8007c76:	f043 0302 	orr.w	r3, r3, #2
 8007c7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c7e:	4b5c      	ldr	r3, [pc, #368]	; (8007df0 <HAL_ETH_Init+0x1a8>)
 8007c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	60bb      	str	r3, [r7, #8]
 8007c8a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7a1b      	ldrb	r3, [r3, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d103      	bne.n	8007c9c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007c94:	2000      	movs	r0, #0
 8007c96:	f7fc f8dd 	bl	8003e54 <HAL_SYSCFG_ETHInterfaceSelect>
 8007c9a:	e003      	b.n	8007ca4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8007c9c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007ca0:	f7fc f8d8 	bl	8003e54 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0201 	orr.w	r2, r2, #1
 8007cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cbc:	f7fc f88e 	bl	8003ddc <HAL_GetTick>
 8007cc0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007cc2:	e00f      	b.n	8007ce4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8007cc4:	f7fc f88a 	bl	8003ddc <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007cd2:	d907      	bls.n	8007ce4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	22e0      	movs	r2, #224	; 0xe0
 8007cde:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e081      	b.n	8007de8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fac0 	bl	800827c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007cfc:	f001 fe8c 	bl	8009a18 <HAL_RCC_GetHCLKFreq>
 8007d00:	4603      	mov	r3, r0
 8007d02:	4a3c      	ldr	r2, [pc, #240]	; (8007df4 <HAL_ETH_Init+0x1ac>)
 8007d04:	fba2 2303 	umull	r2, r3, r2, r3
 8007d08:	0c9a      	lsrs	r2, r3, #18
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3a01      	subs	r2, #1
 8007d10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fa13 	bl	8008140 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007d30:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007d34:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	22e0      	movs	r2, #224	; 0xe0
 8007d4c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e04a      	b.n	8007de8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	f241 1308 	movw	r3, #4360	; 0x1108
 8007d5a:	4413      	add	r3, r2
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4b26      	ldr	r3, [pc, #152]	; (8007df8 <HAL_ETH_Init+0x1b0>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	6952      	ldr	r2, [r2, #20]
 8007d66:	0052      	lsls	r2, r2, #1
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	6809      	ldr	r1, [r1, #0]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	f241 1308 	movw	r3, #4360	; 0x1108
 8007d72:	440b      	add	r3, r1
 8007d74:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fad8 	bl	800832c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fb1c 	bl	80083ba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	3305      	adds	r3, #5
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	021a      	lsls	r2, r3, #8
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	3304      	adds	r3, #4
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	4619      	mov	r1, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	3303      	adds	r3, #3
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	061a      	lsls	r2, r3, #24
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	3302      	adds	r3, #2
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	041b      	lsls	r3, r3, #16
 8007db4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007dc0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007dce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007dd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2210      	movs	r2, #16
 8007dde:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2210      	movs	r2, #16
 8007de4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	58024400 	.word	0x58024400
 8007df4:	431bde83 	.word	0x431bde83
 8007df8:	ffff8001 	.word	0xffff8001

08007dfc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8007e0e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	791b      	ldrb	r3, [r3, #4]
 8007e14:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8007e16:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	7b1b      	ldrb	r3, [r3, #12]
 8007e1c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8007e1e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	7b5b      	ldrb	r3, [r3, #13]
 8007e24:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007e26:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	7b9b      	ldrb	r3, [r3, #14]
 8007e2c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007e2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	7bdb      	ldrb	r3, [r3, #15]
 8007e34:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007e36:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	d102      	bne.n	8007e46 <ETH_SetMACConfig+0x4a>
 8007e40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007e44:	e000      	b.n	8007e48 <ETH_SetMACConfig+0x4c>
 8007e46:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007e48:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	7c52      	ldrb	r2, [r2, #17]
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	d102      	bne.n	8007e58 <ETH_SetMACConfig+0x5c>
 8007e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e56:	e000      	b.n	8007e5a <ETH_SetMACConfig+0x5e>
 8007e58:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007e5a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	7c9b      	ldrb	r3, [r3, #18]
 8007e60:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007e62:	431a      	orrs	r2, r3
                                macconf->Speed |
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007e68:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8007e6e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	7f1b      	ldrb	r3, [r3, #28]
 8007e74:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8007e76:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	7f5b      	ldrb	r3, [r3, #29]
 8007e7c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8007e7e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	7f92      	ldrb	r2, [r2, #30]
 8007e84:	2a00      	cmp	r2, #0
 8007e86:	d102      	bne.n	8007e8e <ETH_SetMACConfig+0x92>
 8007e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e8c:	e000      	b.n	8007e90 <ETH_SetMACConfig+0x94>
 8007e8e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8007e90:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	7fdb      	ldrb	r3, [r3, #31]
 8007e96:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8007e98:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007ea0:	2a00      	cmp	r2, #0
 8007ea2:	d102      	bne.n	8007eaa <ETH_SetMACConfig+0xae>
 8007ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ea8:	e000      	b.n	8007eac <ETH_SetMACConfig+0xb0>
 8007eaa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8007eac:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8007eb2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eba:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8007ebc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4b56      	ldr	r3, [pc, #344]	; (8008028 <ETH_SetMACConfig+0x22c>)
 8007ece:	4013      	ands	r3, r2
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	68f9      	ldr	r1, [r7, #12]
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ee6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007ee8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ef0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007ef2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007efa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8007efc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	d102      	bne.n	8007f0e <ETH_SetMACConfig+0x112>
 8007f08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007f0c:	e000      	b.n	8007f10 <ETH_SetMACConfig+0x114>
 8007f0e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8007f10:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	4b42      	ldr	r3, [pc, #264]	; (800802c <ETH_SetMACConfig+0x230>)
 8007f22:	4013      	ands	r3, r2
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	68f9      	ldr	r1, [r7, #12]
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	4b3a      	ldr	r3, [pc, #232]	; (8008030 <ETH_SetMACConfig+0x234>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6812      	ldr	r2, [r2, #0]
 8007f4c:	68f9      	ldr	r1, [r7, #12]
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007f58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007f5e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d101      	bne.n	8007f6e <ETH_SetMACConfig+0x172>
 8007f6a:	2280      	movs	r2, #128	; 0x80
 8007f6c:	e000      	b.n	8007f70 <ETH_SetMACConfig+0x174>
 8007f6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007f70:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f82:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8007f86:	4013      	ands	r3, r2
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	68f9      	ldr	r1, [r7, #12]
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007fa0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fae:	f023 0103 	bic.w	r1, r3, #3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007fc6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007fe2:	2a00      	cmp	r2, #0
 8007fe4:	d101      	bne.n	8007fea <ETH_SetMACConfig+0x1ee>
 8007fe6:	2240      	movs	r2, #64	; 0x40
 8007fe8:	e000      	b.n	8007fec <ETH_SetMACConfig+0x1f0>
 8007fea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007fec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007ff4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007ff6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007ffe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800800c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	430a      	orrs	r2, r1
 8008018:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	00048083 	.word	0x00048083
 800802c:	c0f88000 	.word	0xc0f88000
 8008030:	fffffef0 	.word	0xfffffef0

08008034 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4b38      	ldr	r3, [pc, #224]	; (800812c <ETH_SetDMAConfig+0xf8>)
 800804a:	4013      	ands	r3, r2
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	6809      	ldr	r1, [r1, #0]
 8008054:	431a      	orrs	r2, r3
 8008056:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800805a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	791b      	ldrb	r3, [r3, #4]
 8008060:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008066:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	7b1b      	ldrb	r3, [r3, #12]
 800806c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	f241 0304 	movw	r3, #4100	; 0x1004
 800807a:	4413      	add	r3, r2
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4b2c      	ldr	r3, [pc, #176]	; (8008130 <ETH_SetDMAConfig+0xfc>)
 8008080:	4013      	ands	r3, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6811      	ldr	r1, [r2, #0]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	431a      	orrs	r2, r3
 800808a:	f241 0304 	movw	r3, #4100	; 0x1004
 800808e:	440b      	add	r3, r1
 8008090:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	7b5b      	ldrb	r3, [r3, #13]
 8008096:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4b22      	ldr	r3, [pc, #136]	; (8008134 <ETH_SetDMAConfig+0x100>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6811      	ldr	r1, [r2, #0]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	431a      	orrs	r2, r3
 80080b6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80080ba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	7d1b      	ldrb	r3, [r3, #20]
 80080c4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80080c6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	7f5b      	ldrb	r3, [r3, #29]
 80080cc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80080ce:	4313      	orrs	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80080da:	4413      	add	r3, r2
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4b16      	ldr	r3, [pc, #88]	; (8008138 <ETH_SetDMAConfig+0x104>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6811      	ldr	r1, [r2, #0]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	431a      	orrs	r2, r3
 80080ea:	f241 1304 	movw	r3, #4356	; 0x1104
 80080ee:	440b      	add	r3, r1
 80080f0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	7f1b      	ldrb	r3, [r3, #28]
 80080f6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	f241 1308 	movw	r3, #4360	; 0x1108
 8008108:	4413      	add	r3, r2
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	4b0b      	ldr	r3, [pc, #44]	; (800813c <ETH_SetDMAConfig+0x108>)
 800810e:	4013      	ands	r3, r2
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6811      	ldr	r1, [r2, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	431a      	orrs	r2, r3
 8008118:	f241 1308 	movw	r3, #4360	; 0x1108
 800811c:	440b      	add	r3, r1
 800811e:	601a      	str	r2, [r3, #0]
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	ffff87fd 	.word	0xffff87fd
 8008130:	ffff2ffe 	.word	0xffff2ffe
 8008134:	fffec000 	.word	0xfffec000
 8008138:	ffc0efef 	.word	0xffc0efef
 800813c:	7fc0ffff 	.word	0x7fc0ffff

08008140 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b0a4      	sub	sp, #144	; 0x90
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800814e:	2300      	movs	r3, #0
 8008150:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8008152:	2300      	movs	r3, #0
 8008154:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008158:	2300      	movs	r3, #0
 800815a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008164:	2301      	movs	r3, #1
 8008166:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008170:	2300      	movs	r3, #0
 8008172:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800817c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008180:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8008182:	2300      	movs	r3, #0
 8008184:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008188:	2300      	movs	r3, #0
 800818a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800818c:	2300      	movs	r3, #0
 800818e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008192:	2300      	movs	r3, #0
 8008194:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008198:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800819c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800819e:	2300      	movs	r3, #0
 80081a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80081a4:	2300      	movs	r3, #0
 80081a6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80081a8:	2301      	movs	r3, #1
 80081aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80081ba:	2300      	movs	r3, #0
 80081bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80081be:	2300      	movs	r3, #0
 80081c0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80081c2:	2300      	movs	r3, #0
 80081c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80081c6:	2300      	movs	r3, #0
 80081c8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80081cc:	2300      	movs	r3, #0
 80081ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80081d8:	2320      	movs	r3, #32
 80081da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80081de:	2301      	movs	r3, #1
 80081e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80081ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80081f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80081f4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80081f6:	2300      	movs	r3, #0
 80081f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80081fc:	2302      	movs	r3, #2
 80081fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008202:	2300      	movs	r3, #0
 8008204:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008208:	2300      	movs	r3, #0
 800820a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800820e:	2300      	movs	r3, #0
 8008210:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800821a:	2300      	movs	r3, #0
 800821c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800821e:	2301      	movs	r3, #1
 8008220:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff fde6 	bl	8007dfc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008230:	2301      	movs	r3, #1
 8008232:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008234:	2301      	movs	r3, #1
 8008236:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008238:	2300      	movs	r3, #0
 800823a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800823c:	2300      	movs	r3, #0
 800823e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008242:	2300      	movs	r3, #0
 8008244:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008246:	2300      	movs	r3, #0
 8008248:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800824a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800824e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008250:	2300      	movs	r3, #0
 8008252:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008258:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800825a:	2300      	movs	r3, #0
 800825c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8008260:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008264:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008266:	f107 0308 	add.w	r3, r7, #8
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff fee1 	bl	8008034 <ETH_SetDMAConfig>
}
 8008272:	bf00      	nop
 8008274:	3790      	adds	r7, #144	; 0x90
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800828c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008294:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008296:	f001 fbbf 	bl	8009a18 <HAL_RCC_GetHCLKFreq>
 800829a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4a1e      	ldr	r2, [pc, #120]	; (8008318 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d908      	bls.n	80082b6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4a1d      	ldr	r2, [pc, #116]	; (800831c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d804      	bhi.n	80082b6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e027      	b.n	8008306 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4a18      	ldr	r2, [pc, #96]	; (800831c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d908      	bls.n	80082d0 <ETH_MAC_MDIO_ClkConfig+0x54>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4a17      	ldr	r2, [pc, #92]	; (8008320 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d204      	bcs.n	80082d0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	e01a      	b.n	8008306 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4a13      	ldr	r2, [pc, #76]	; (8008320 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d303      	bcc.n	80082e0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4a12      	ldr	r2, [pc, #72]	; (8008324 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d911      	bls.n	8008304 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4a10      	ldr	r2, [pc, #64]	; (8008324 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d908      	bls.n	80082fa <ETH_MAC_MDIO_ClkConfig+0x7e>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4a0f      	ldr	r2, [pc, #60]	; (8008328 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d804      	bhi.n	80082fa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	e005      	b.n	8008306 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e000      	b.n	8008306 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008304:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	01312cff 	.word	0x01312cff
 800831c:	02160ebf 	.word	0x02160ebf
 8008320:	03938700 	.word	0x03938700
 8008324:	05f5e0ff 	.word	0x05f5e0ff
 8008328:	08f0d17f 	.word	0x08f0d17f

0800832c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e01d      	b.n	8008376 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68d9      	ldr	r1, [r3, #12]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4613      	mov	r3, r2
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	4413      	add	r3, r2
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	440b      	add	r3, r1
 800834a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2200      	movs	r2, #0
 8008356:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2200      	movs	r2, #0
 800835c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2200      	movs	r2, #0
 8008362:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	3206      	adds	r2, #6
 800836c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3301      	adds	r3, #1
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d9de      	bls.n	800833a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	f241 132c 	movw	r3, #4396	; 0x112c
 800838a:	4413      	add	r3, r2
 800838c:	2203      	movs	r2, #3
 800838e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68d9      	ldr	r1, [r3, #12]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	f241 1314 	movw	r3, #4372	; 0x1114
 800839c:	4413      	add	r3, r2
 800839e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80083ac:	601a      	str	r2, [r3, #0]
}
 80083ae:	bf00      	nop
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	e024      	b.n	8008412 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6919      	ldr	r1, [r3, #16]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4613      	mov	r3, r2
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	440b      	add	r3, r1
 80083d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2200      	movs	r2, #0
 80083e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2200      	movs	r2, #0
 80083ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2200      	movs	r2, #0
 80083f6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2200      	movs	r2, #0
 80083fc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3310      	adds	r3, #16
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b03      	cmp	r3, #3
 8008416:	d9d7      	bls.n	80083c8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	f241 1330 	movw	r3, #4400	; 0x1130
 800843e:	4413      	add	r3, r2
 8008440:	2203      	movs	r2, #3
 8008442:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6919      	ldr	r1, [r3, #16]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008450:	4413      	add	r3, r2
 8008452:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	f241 1328 	movw	r3, #4392	; 0x1128
 8008464:	4413      	add	r3, r2
 8008466:	6019      	str	r1, [r3, #0]
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008474:	b480      	push	{r7}
 8008476:	b089      	sub	sp, #36	; 0x24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800847e:	2300      	movs	r3, #0
 8008480:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008482:	4b89      	ldr	r3, [pc, #548]	; (80086a8 <HAL_GPIO_Init+0x234>)
 8008484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008486:	e194      	b.n	80087b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	2101      	movs	r1, #1
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	fa01 f303 	lsl.w	r3, r1, r3
 8008494:	4013      	ands	r3, r2
 8008496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 8186 	beq.w	80087ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f003 0303 	and.w	r3, r3, #3
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d005      	beq.n	80084b8 <HAL_GPIO_Init+0x44>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f003 0303 	and.w	r3, r3, #3
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d130      	bne.n	800851a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	2203      	movs	r2, #3
 80084c4:	fa02 f303 	lsl.w	r3, r2, r3
 80084c8:	43db      	mvns	r3, r3
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	4013      	ands	r3, r2
 80084ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	fa02 f303 	lsl.w	r3, r2, r3
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	4313      	orrs	r3, r2
 80084e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80084ee:	2201      	movs	r2, #1
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	fa02 f303 	lsl.w	r3, r2, r3
 80084f6:	43db      	mvns	r3, r3
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	4013      	ands	r3, r2
 80084fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	091b      	lsrs	r3, r3, #4
 8008504:	f003 0201 	and.w	r2, r3, #1
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	4313      	orrs	r3, r2
 8008512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	2b03      	cmp	r3, #3
 8008524:	d017      	beq.n	8008556 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	2203      	movs	r2, #3
 8008532:	fa02 f303 	lsl.w	r3, r2, r3
 8008536:	43db      	mvns	r3, r3
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	4013      	ands	r3, r2
 800853c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	4313      	orrs	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d123      	bne.n	80085aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	08da      	lsrs	r2, r3, #3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3208      	adds	r2, #8
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	220f      	movs	r2, #15
 800857a:	fa02 f303 	lsl.w	r3, r2, r3
 800857e:	43db      	mvns	r3, r3
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	4013      	ands	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	691a      	ldr	r2, [r3, #16]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	4313      	orrs	r3, r2
 800859a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	08da      	lsrs	r2, r3, #3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3208      	adds	r2, #8
 80085a4:	69b9      	ldr	r1, [r7, #24]
 80085a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	2203      	movs	r2, #3
 80085b6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ba:	43db      	mvns	r3, r3
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	4013      	ands	r3, r2
 80085c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f003 0203 	and.w	r2, r3, #3
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	fa02 f303 	lsl.w	r3, r2, r3
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 80e0 	beq.w	80087ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085ec:	4b2f      	ldr	r3, [pc, #188]	; (80086ac <HAL_GPIO_Init+0x238>)
 80085ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085f2:	4a2e      	ldr	r2, [pc, #184]	; (80086ac <HAL_GPIO_Init+0x238>)
 80085f4:	f043 0302 	orr.w	r3, r3, #2
 80085f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80085fc:	4b2b      	ldr	r3, [pc, #172]	; (80086ac <HAL_GPIO_Init+0x238>)
 80085fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800860a:	4a29      	ldr	r2, [pc, #164]	; (80086b0 <HAL_GPIO_Init+0x23c>)
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	089b      	lsrs	r3, r3, #2
 8008610:	3302      	adds	r3, #2
 8008612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	220f      	movs	r2, #15
 8008622:	fa02 f303 	lsl.w	r3, r2, r3
 8008626:	43db      	mvns	r3, r3
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	4013      	ands	r3, r2
 800862c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a20      	ldr	r2, [pc, #128]	; (80086b4 <HAL_GPIO_Init+0x240>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d052      	beq.n	80086dc <HAL_GPIO_Init+0x268>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a1f      	ldr	r2, [pc, #124]	; (80086b8 <HAL_GPIO_Init+0x244>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d031      	beq.n	80086a2 <HAL_GPIO_Init+0x22e>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a1e      	ldr	r2, [pc, #120]	; (80086bc <HAL_GPIO_Init+0x248>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d02b      	beq.n	800869e <HAL_GPIO_Init+0x22a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a1d      	ldr	r2, [pc, #116]	; (80086c0 <HAL_GPIO_Init+0x24c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d025      	beq.n	800869a <HAL_GPIO_Init+0x226>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a1c      	ldr	r2, [pc, #112]	; (80086c4 <HAL_GPIO_Init+0x250>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01f      	beq.n	8008696 <HAL_GPIO_Init+0x222>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a1b      	ldr	r2, [pc, #108]	; (80086c8 <HAL_GPIO_Init+0x254>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d019      	beq.n	8008692 <HAL_GPIO_Init+0x21e>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a1a      	ldr	r2, [pc, #104]	; (80086cc <HAL_GPIO_Init+0x258>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d013      	beq.n	800868e <HAL_GPIO_Init+0x21a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a19      	ldr	r2, [pc, #100]	; (80086d0 <HAL_GPIO_Init+0x25c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00d      	beq.n	800868a <HAL_GPIO_Init+0x216>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a18      	ldr	r2, [pc, #96]	; (80086d4 <HAL_GPIO_Init+0x260>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d007      	beq.n	8008686 <HAL_GPIO_Init+0x212>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a17      	ldr	r2, [pc, #92]	; (80086d8 <HAL_GPIO_Init+0x264>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d101      	bne.n	8008682 <HAL_GPIO_Init+0x20e>
 800867e:	2309      	movs	r3, #9
 8008680:	e02d      	b.n	80086de <HAL_GPIO_Init+0x26a>
 8008682:	230a      	movs	r3, #10
 8008684:	e02b      	b.n	80086de <HAL_GPIO_Init+0x26a>
 8008686:	2308      	movs	r3, #8
 8008688:	e029      	b.n	80086de <HAL_GPIO_Init+0x26a>
 800868a:	2307      	movs	r3, #7
 800868c:	e027      	b.n	80086de <HAL_GPIO_Init+0x26a>
 800868e:	2306      	movs	r3, #6
 8008690:	e025      	b.n	80086de <HAL_GPIO_Init+0x26a>
 8008692:	2305      	movs	r3, #5
 8008694:	e023      	b.n	80086de <HAL_GPIO_Init+0x26a>
 8008696:	2304      	movs	r3, #4
 8008698:	e021      	b.n	80086de <HAL_GPIO_Init+0x26a>
 800869a:	2303      	movs	r3, #3
 800869c:	e01f      	b.n	80086de <HAL_GPIO_Init+0x26a>
 800869e:	2302      	movs	r3, #2
 80086a0:	e01d      	b.n	80086de <HAL_GPIO_Init+0x26a>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e01b      	b.n	80086de <HAL_GPIO_Init+0x26a>
 80086a6:	bf00      	nop
 80086a8:	58000080 	.word	0x58000080
 80086ac:	58024400 	.word	0x58024400
 80086b0:	58000400 	.word	0x58000400
 80086b4:	58020000 	.word	0x58020000
 80086b8:	58020400 	.word	0x58020400
 80086bc:	58020800 	.word	0x58020800
 80086c0:	58020c00 	.word	0x58020c00
 80086c4:	58021000 	.word	0x58021000
 80086c8:	58021400 	.word	0x58021400
 80086cc:	58021800 	.word	0x58021800
 80086d0:	58021c00 	.word	0x58021c00
 80086d4:	58022000 	.word	0x58022000
 80086d8:	58022400 	.word	0x58022400
 80086dc:	2300      	movs	r3, #0
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	f002 0203 	and.w	r2, r2, #3
 80086e4:	0092      	lsls	r2, r2, #2
 80086e6:	4093      	lsls	r3, r2
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086ee:	4938      	ldr	r1, [pc, #224]	; (80087d0 <HAL_GPIO_Init+0x35c>)
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	089b      	lsrs	r3, r3, #2
 80086f4:	3302      	adds	r3, #2
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80086fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	43db      	mvns	r3, r3
 8008708:	69ba      	ldr	r2, [r7, #24]
 800870a:	4013      	ands	r3, r2
 800870c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	4313      	orrs	r3, r2
 8008720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800872a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	43db      	mvns	r3, r3
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	4013      	ands	r3, r2
 800873a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d003      	beq.n	8008750 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	4313      	orrs	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	43db      	mvns	r3, r3
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	4013      	ands	r3, r2
 8008766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	4313      	orrs	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	43db      	mvns	r3, r3
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	4013      	ands	r3, r2
 8008790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	3301      	adds	r3, #1
 80087b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	fa22 f303 	lsr.w	r3, r2, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f47f ae63 	bne.w	8008488 <HAL_GPIO_Init+0x14>
  }
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	3724      	adds	r7, #36	; 0x24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	58000400 	.word	0x58000400

080087d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	807b      	strh	r3, [r7, #2]
 80087e0:	4613      	mov	r3, r2
 80087e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087e4:	787b      	ldrb	r3, [r7, #1]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087ea:	887a      	ldrh	r2, [r7, #2]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80087f0:	e003      	b.n	80087fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80087f2:	887b      	ldrh	r3, [r7, #2]
 80087f4:	041a      	lsls	r2, r3, #16
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	619a      	str	r2, [r3, #24]
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	4603      	mov	r3, r0
 800880e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008814:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008818:	88fb      	ldrh	r3, [r7, #6]
 800881a:	4013      	ands	r3, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d008      	beq.n	8008832 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008824:	88fb      	ldrh	r3, [r7, #6]
 8008826:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	4618      	mov	r0, r3
 800882e:	f7fa fa99 	bl	8002d64 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800883a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800883c:	b08f      	sub	sp, #60	; 0x3c
 800883e:	af0a      	add	r7, sp, #40	; 0x28
 8008840:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e116      	b.n	8008a7a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d106      	bne.n	800886c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7fb f862 	bl	8003930 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2203      	movs	r2, #3
 8008870:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f007 f8aa 	bl	800f9e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	603b      	str	r3, [r7, #0]
 8008896:	687e      	ldr	r6, [r7, #4]
 8008898:	466d      	mov	r5, sp
 800889a:	f106 0410 	add.w	r4, r6, #16
 800889e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80088ae:	1d33      	adds	r3, r6, #4
 80088b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088b2:	6838      	ldr	r0, [r7, #0]
 80088b4:	f007 f828 	bl	800f908 <USB_CoreInit>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2202      	movs	r2, #2
 80088c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e0d7      	b.n	8008a7a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2100      	movs	r1, #0
 80088d0:	4618      	mov	r0, r3
 80088d2:	f007 f898 	bl	800fa06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]
 80088da:	e04a      	b.n	8008972 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80088dc:	7bfa      	ldrb	r2, [r7, #15]
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	4613      	mov	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	1a9b      	subs	r3, r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	333d      	adds	r3, #61	; 0x3d
 80088ec:	2201      	movs	r2, #1
 80088ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80088f0:	7bfa      	ldrb	r2, [r7, #15]
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	4613      	mov	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	1a9b      	subs	r3, r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	440b      	add	r3, r1
 80088fe:	333c      	adds	r3, #60	; 0x3c
 8008900:	7bfa      	ldrb	r2, [r7, #15]
 8008902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008904:	7bfa      	ldrb	r2, [r7, #15]
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	b298      	uxth	r0, r3
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4613      	mov	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	1a9b      	subs	r3, r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	440b      	add	r3, r1
 8008916:	3342      	adds	r3, #66	; 0x42
 8008918:	4602      	mov	r2, r0
 800891a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800891c:	7bfa      	ldrb	r2, [r7, #15]
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	4613      	mov	r3, r2
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	333f      	adds	r3, #63	; 0x3f
 800892c:	2200      	movs	r2, #0
 800892e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008930:	7bfa      	ldrb	r2, [r7, #15]
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	3344      	adds	r3, #68	; 0x44
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008944:	7bfa      	ldrb	r2, [r7, #15]
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	4613      	mov	r3, r2
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	440b      	add	r3, r1
 8008952:	3348      	adds	r3, #72	; 0x48
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008958:	7bfa      	ldrb	r2, [r7, #15]
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	4613      	mov	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	1a9b      	subs	r3, r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	3350      	adds	r3, #80	; 0x50
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	3301      	adds	r3, #1
 8008970:	73fb      	strb	r3, [r7, #15]
 8008972:	7bfa      	ldrb	r2, [r7, #15]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	429a      	cmp	r2, r3
 800897a:	d3af      	bcc.n	80088dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]
 8008980:	e044      	b.n	8008a0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008982:	7bfa      	ldrb	r2, [r7, #15]
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	1a9b      	subs	r3, r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008994:	2200      	movs	r2, #0
 8008996:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008998:	7bfa      	ldrb	r2, [r7, #15]
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	4613      	mov	r3, r2
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	440b      	add	r3, r1
 80089a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80089aa:	7bfa      	ldrb	r2, [r7, #15]
 80089ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80089ae:	7bfa      	ldrb	r2, [r7, #15]
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	1a9b      	subs	r3, r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	440b      	add	r3, r1
 80089bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80089c0:	2200      	movs	r2, #0
 80089c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80089c4:	7bfa      	ldrb	r2, [r7, #15]
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	1a9b      	subs	r3, r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80089da:	7bfa      	ldrb	r2, [r7, #15]
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	1a9b      	subs	r3, r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80089f0:	7bfa      	ldrb	r2, [r7, #15]
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	4613      	mov	r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	73fb      	strb	r3, [r7, #15]
 8008a0c:	7bfa      	ldrb	r2, [r7, #15]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d3b5      	bcc.n	8008982 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	603b      	str	r3, [r7, #0]
 8008a1c:	687e      	ldr	r6, [r7, #4]
 8008a1e:	466d      	mov	r5, sp
 8008a20:	f106 0410 	add.w	r4, r6, #16
 8008a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a30:	e885 0003 	stmia.w	r5, {r0, r1}
 8008a34:	1d33      	adds	r3, r6, #4
 8008a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a38:	6838      	ldr	r0, [r7, #0]
 8008a3a:	f007 f831 	bl	800faa0 <USB_DevInit>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e014      	b.n	8008a7a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d102      	bne.n	8008a6e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f80b 	bl	8008a84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f007 f9eb 	bl	800fe4e <USB_DevDisconnect>

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008a84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ab2:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <HAL_PCDEx_ActivateLPM+0x44>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	10000003 	.word	0x10000003

08008acc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008ad4:	4b19      	ldr	r3, [pc, #100]	; (8008b3c <HAL_PWREx_ConfigSupply+0x70>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d00a      	beq.n	8008af6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008ae0:	4b16      	ldr	r3, [pc, #88]	; (8008b3c <HAL_PWREx_ConfigSupply+0x70>)
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0307 	and.w	r3, r3, #7
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d001      	beq.n	8008af2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e01f      	b.n	8008b32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	e01d      	b.n	8008b32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008af6:	4b11      	ldr	r3, [pc, #68]	; (8008b3c <HAL_PWREx_ConfigSupply+0x70>)
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f023 0207 	bic.w	r2, r3, #7
 8008afe:	490f      	ldr	r1, [pc, #60]	; (8008b3c <HAL_PWREx_ConfigSupply+0x70>)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008b06:	f7fb f969 	bl	8003ddc <HAL_GetTick>
 8008b0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b0c:	e009      	b.n	8008b22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008b0e:	f7fb f965 	bl	8003ddc <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b1c:	d901      	bls.n	8008b22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e007      	b.n	8008b32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b22:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <HAL_PWREx_ConfigSupply+0x70>)
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2e:	d1ee      	bne.n	8008b0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	58024800 	.word	0x58024800

08008b40 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	4a04      	ldr	r2, [pc, #16]	; (8008b5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b4e:	60d3      	str	r3, [r2, #12]
}
 8008b50:	bf00      	nop
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	58024800 	.word	0x58024800

08008b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08c      	sub	sp, #48	; 0x30
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d102      	bne.n	8008b74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f000 bc1c 	b.w	80093ac <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 8087 	beq.w	8008c90 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b82:	4b9e      	ldr	r3, [pc, #632]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b8c:	4b9b      	ldr	r3, [pc, #620]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	2b10      	cmp	r3, #16
 8008b96:	d007      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x48>
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	2b18      	cmp	r3, #24
 8008b9c:	d110      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x60>
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d10b      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ba8:	4b94      	ldr	r3, [pc, #592]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d06c      	beq.n	8008c8e <HAL_RCC_OscConfig+0x12e>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d168      	bne.n	8008c8e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e3f5      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d106      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x78>
 8008bca:	4b8c      	ldr	r3, [pc, #560]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a8b      	ldr	r2, [pc, #556]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	e02e      	b.n	8008c36 <HAL_RCC_OscConfig+0xd6>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10c      	bne.n	8008bfa <HAL_RCC_OscConfig+0x9a>
 8008be0:	4b86      	ldr	r3, [pc, #536]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a85      	ldr	r2, [pc, #532]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	4b83      	ldr	r3, [pc, #524]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a82      	ldr	r2, [pc, #520]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	e01d      	b.n	8008c36 <HAL_RCC_OscConfig+0xd6>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c02:	d10c      	bne.n	8008c1e <HAL_RCC_OscConfig+0xbe>
 8008c04:	4b7d      	ldr	r3, [pc, #500]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a7c      	ldr	r2, [pc, #496]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	4b7a      	ldr	r3, [pc, #488]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a79      	ldr	r2, [pc, #484]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	e00b      	b.n	8008c36 <HAL_RCC_OscConfig+0xd6>
 8008c1e:	4b77      	ldr	r3, [pc, #476]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a76      	ldr	r2, [pc, #472]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	4b74      	ldr	r3, [pc, #464]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a73      	ldr	r2, [pc, #460]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d013      	beq.n	8008c66 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3e:	f7fb f8cd 	bl	8003ddc <HAL_GetTick>
 8008c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c44:	e008      	b.n	8008c58 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c46:	f7fb f8c9 	bl	8003ddc <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b64      	cmp	r3, #100	; 0x64
 8008c52:	d901      	bls.n	8008c58 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e3a9      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c58:	4b68      	ldr	r3, [pc, #416]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0f0      	beq.n	8008c46 <HAL_RCC_OscConfig+0xe6>
 8008c64:	e014      	b.n	8008c90 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c66:	f7fb f8b9 	bl	8003ddc <HAL_GetTick>
 8008c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c6c:	e008      	b.n	8008c80 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c6e:	f7fb f8b5 	bl	8003ddc <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	2b64      	cmp	r3, #100	; 0x64
 8008c7a:	d901      	bls.n	8008c80 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e395      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c80:	4b5e      	ldr	r3, [pc, #376]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1f0      	bne.n	8008c6e <HAL_RCC_OscConfig+0x10e>
 8008c8c:	e000      	b.n	8008c90 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 80ca 	beq.w	8008e32 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c9e:	4b57      	ldr	r3, [pc, #348]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ca6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ca8:	4b54      	ldr	r3, [pc, #336]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d007      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x164>
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	2b18      	cmp	r3, #24
 8008cb8:	d156      	bne.n	8008d68 <HAL_RCC_OscConfig+0x208>
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d151      	bne.n	8008d68 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cc4:	4b4d      	ldr	r3, [pc, #308]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <HAL_RCC_OscConfig+0x17c>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e367      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cdc:	4b47      	ldr	r3, [pc, #284]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f023 0219 	bic.w	r2, r3, #25
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4944      	ldr	r1, [pc, #272]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008cee:	f7fb f875 	bl	8003ddc <HAL_GetTick>
 8008cf2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cf4:	e008      	b.n	8008d08 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cf6:	f7fb f871 	bl	8003ddc <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d901      	bls.n	8008d08 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e351      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d08:	4b3c      	ldr	r3, [pc, #240]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0f0      	beq.n	8008cf6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d14:	f7fb f892 	bl	8003e3c <HAL_GetREVID>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d817      	bhi.n	8008d52 <HAL_RCC_OscConfig+0x1f2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	d108      	bne.n	8008d3c <HAL_RCC_OscConfig+0x1dc>
 8008d2a:	4b34      	ldr	r3, [pc, #208]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d32:	4a32      	ldr	r2, [pc, #200]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d38:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d3a:	e07a      	b.n	8008e32 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d3c:	4b2f      	ldr	r3, [pc, #188]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	031b      	lsls	r3, r3, #12
 8008d4a:	492c      	ldr	r1, [pc, #176]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d50:	e06f      	b.n	8008e32 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d52:	4b2a      	ldr	r3, [pc, #168]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	061b      	lsls	r3, r3, #24
 8008d60:	4926      	ldr	r1, [pc, #152]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d66:	e064      	b.n	8008e32 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d047      	beq.n	8008e00 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d70:	4b22      	ldr	r3, [pc, #136]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f023 0219 	bic.w	r2, r3, #25
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	491f      	ldr	r1, [pc, #124]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d82:	f7fb f82b 	bl	8003ddc <HAL_GetTick>
 8008d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d88:	e008      	b.n	8008d9c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d8a:	f7fb f827 	bl	8003ddc <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d901      	bls.n	8008d9c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e307      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d9c:	4b17      	ldr	r3, [pc, #92]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d0f0      	beq.n	8008d8a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008da8:	f7fb f848 	bl	8003e3c <HAL_GetREVID>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f241 0203 	movw	r2, #4099	; 0x1003
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d817      	bhi.n	8008de6 <HAL_RCC_OscConfig+0x286>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	2b40      	cmp	r3, #64	; 0x40
 8008dbc:	d108      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x270>
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008dc6:	4a0d      	ldr	r2, [pc, #52]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dcc:	6053      	str	r3, [r2, #4]
 8008dce:	e030      	b.n	8008e32 <HAL_RCC_OscConfig+0x2d2>
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	031b      	lsls	r3, r3, #12
 8008dde:	4907      	ldr	r1, [pc, #28]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	604b      	str	r3, [r1, #4]
 8008de4:	e025      	b.n	8008e32 <HAL_RCC_OscConfig+0x2d2>
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	061b      	lsls	r3, r3, #24
 8008df4:	4901      	ldr	r1, [pc, #4]	; (8008dfc <HAL_RCC_OscConfig+0x29c>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	604b      	str	r3, [r1, #4]
 8008dfa:	e01a      	b.n	8008e32 <HAL_RCC_OscConfig+0x2d2>
 8008dfc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e00:	4b9e      	ldr	r3, [pc, #632]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a9d      	ldr	r2, [pc, #628]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008e06:	f023 0301 	bic.w	r3, r3, #1
 8008e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e0c:	f7fa ffe6 	bl	8003ddc <HAL_GetTick>
 8008e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e12:	e008      	b.n	8008e26 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e14:	f7fa ffe2 	bl	8003ddc <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d901      	bls.n	8008e26 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e2c2      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e26:	4b95      	ldr	r3, [pc, #596]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0304 	and.w	r3, r3, #4
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f0      	bne.n	8008e14 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0310 	and.w	r3, r3, #16
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f000 80a9 	beq.w	8008f92 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e40:	4b8e      	ldr	r3, [pc, #568]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e4a:	4b8c      	ldr	r3, [pc, #560]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	d007      	beq.n	8008e66 <HAL_RCC_OscConfig+0x306>
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	2b18      	cmp	r3, #24
 8008e5a:	d13a      	bne.n	8008ed2 <HAL_RCC_OscConfig+0x372>
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d135      	bne.n	8008ed2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e66:	4b85      	ldr	r3, [pc, #532]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d005      	beq.n	8008e7e <HAL_RCC_OscConfig+0x31e>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	2b80      	cmp	r3, #128	; 0x80
 8008e78:	d001      	beq.n	8008e7e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e296      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e7e:	f7fa ffdd 	bl	8003e3c <HAL_GetREVID>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d817      	bhi.n	8008ebc <HAL_RCC_OscConfig+0x35c>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a1b      	ldr	r3, [r3, #32]
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d108      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x346>
 8008e94:	4b79      	ldr	r3, [pc, #484]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008e9c:	4a77      	ldr	r2, [pc, #476]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ea2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ea4:	e075      	b.n	8008f92 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ea6:	4b75      	ldr	r3, [pc, #468]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	069b      	lsls	r3, r3, #26
 8008eb4:	4971      	ldr	r1, [pc, #452]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eba:	e06a      	b.n	8008f92 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ebc:	4b6f      	ldr	r3, [pc, #444]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	061b      	lsls	r3, r3, #24
 8008eca:	496c      	ldr	r1, [pc, #432]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ed0:	e05f      	b.n	8008f92 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d042      	beq.n	8008f60 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008eda:	4b68      	ldr	r3, [pc, #416]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a67      	ldr	r2, [pc, #412]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee6:	f7fa ff79 	bl	8003ddc <HAL_GetTick>
 8008eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008eec:	e008      	b.n	8008f00 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008eee:	f7fa ff75 	bl	8003ddc <HAL_GetTick>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d901      	bls.n	8008f00 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e255      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f00:	4b5e      	ldr	r3, [pc, #376]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d0f0      	beq.n	8008eee <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f0c:	f7fa ff96 	bl	8003e3c <HAL_GetREVID>
 8008f10:	4603      	mov	r3, r0
 8008f12:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d817      	bhi.n	8008f4a <HAL_RCC_OscConfig+0x3ea>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	2b20      	cmp	r3, #32
 8008f20:	d108      	bne.n	8008f34 <HAL_RCC_OscConfig+0x3d4>
 8008f22:	4b56      	ldr	r3, [pc, #344]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f2a:	4a54      	ldr	r2, [pc, #336]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f30:	6053      	str	r3, [r2, #4]
 8008f32:	e02e      	b.n	8008f92 <HAL_RCC_OscConfig+0x432>
 8008f34:	4b51      	ldr	r3, [pc, #324]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	069b      	lsls	r3, r3, #26
 8008f42:	494e      	ldr	r1, [pc, #312]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f44:	4313      	orrs	r3, r2
 8008f46:	604b      	str	r3, [r1, #4]
 8008f48:	e023      	b.n	8008f92 <HAL_RCC_OscConfig+0x432>
 8008f4a:	4b4c      	ldr	r3, [pc, #304]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	061b      	lsls	r3, r3, #24
 8008f58:	4948      	ldr	r1, [pc, #288]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60cb      	str	r3, [r1, #12]
 8008f5e:	e018      	b.n	8008f92 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f60:	4b46      	ldr	r3, [pc, #280]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a45      	ldr	r2, [pc, #276]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6c:	f7fa ff36 	bl	8003ddc <HAL_GetTick>
 8008f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008f74:	f7fa ff32 	bl	8003ddc <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e212      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f86:	4b3d      	ldr	r3, [pc, #244]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f0      	bne.n	8008f74 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0308 	and.w	r3, r3, #8
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d036      	beq.n	800900c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d019      	beq.n	8008fda <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fa6:	4b35      	ldr	r3, [pc, #212]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008faa:	4a34      	ldr	r2, [pc, #208]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008fac:	f043 0301 	orr.w	r3, r3, #1
 8008fb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fb2:	f7fa ff13 	bl	8003ddc <HAL_GetTick>
 8008fb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fb8:	e008      	b.n	8008fcc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fba:	f7fa ff0f 	bl	8003ddc <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d901      	bls.n	8008fcc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e1ef      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fcc:	4b2b      	ldr	r3, [pc, #172]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fd0:	f003 0302 	and.w	r3, r3, #2
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0f0      	beq.n	8008fba <HAL_RCC_OscConfig+0x45a>
 8008fd8:	e018      	b.n	800900c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fda:	4b28      	ldr	r3, [pc, #160]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fde:	4a27      	ldr	r2, [pc, #156]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8008fe0:	f023 0301 	bic.w	r3, r3, #1
 8008fe4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe6:	f7fa fef9 	bl	8003ddc <HAL_GetTick>
 8008fea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fec:	e008      	b.n	8009000 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fee:	f7fa fef5 	bl	8003ddc <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d901      	bls.n	8009000 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e1d5      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009000:	4b1e      	ldr	r3, [pc, #120]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8009002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1f0      	bne.n	8008fee <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0320 	and.w	r3, r3, #32
 8009014:	2b00      	cmp	r3, #0
 8009016:	d039      	beq.n	800908c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d019      	beq.n	8009054 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009020:	4b16      	ldr	r3, [pc, #88]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a15      	ldr	r2, [pc, #84]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8009026:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800902a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800902c:	f7fa fed6 	bl	8003ddc <HAL_GetTick>
 8009030:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009034:	f7fa fed2 	bl	8003ddc <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e1b2      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009046:	4b0d      	ldr	r3, [pc, #52]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f0      	beq.n	8009034 <HAL_RCC_OscConfig+0x4d4>
 8009052:	e01b      	b.n	800908c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009054:	4b09      	ldr	r3, [pc, #36]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a08      	ldr	r2, [pc, #32]	; (800907c <HAL_RCC_OscConfig+0x51c>)
 800905a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800905e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009060:	f7fa febc 	bl	8003ddc <HAL_GetTick>
 8009064:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009066:	e00b      	b.n	8009080 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009068:	f7fa feb8 	bl	8003ddc <HAL_GetTick>
 800906c:	4602      	mov	r2, r0
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	2b02      	cmp	r3, #2
 8009074:	d904      	bls.n	8009080 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e198      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
 800907a:	bf00      	nop
 800907c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009080:	4ba3      	ldr	r3, [pc, #652]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1ed      	bne.n	8009068 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8081 	beq.w	800919c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800909a:	4b9e      	ldr	r3, [pc, #632]	; (8009314 <HAL_RCC_OscConfig+0x7b4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a9d      	ldr	r2, [pc, #628]	; (8009314 <HAL_RCC_OscConfig+0x7b4>)
 80090a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090a6:	f7fa fe99 	bl	8003ddc <HAL_GetTick>
 80090aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090ac:	e008      	b.n	80090c0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80090ae:	f7fa fe95 	bl	8003ddc <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	2b64      	cmp	r3, #100	; 0x64
 80090ba:	d901      	bls.n	80090c0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e175      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090c0:	4b94      	ldr	r3, [pc, #592]	; (8009314 <HAL_RCC_OscConfig+0x7b4>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0f0      	beq.n	80090ae <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d106      	bne.n	80090e2 <HAL_RCC_OscConfig+0x582>
 80090d4:	4b8e      	ldr	r3, [pc, #568]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80090d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d8:	4a8d      	ldr	r2, [pc, #564]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80090da:	f043 0301 	orr.w	r3, r3, #1
 80090de:	6713      	str	r3, [r2, #112]	; 0x70
 80090e0:	e02d      	b.n	800913e <HAL_RCC_OscConfig+0x5de>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10c      	bne.n	8009104 <HAL_RCC_OscConfig+0x5a4>
 80090ea:	4b89      	ldr	r3, [pc, #548]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ee:	4a88      	ldr	r2, [pc, #544]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80090f0:	f023 0301 	bic.w	r3, r3, #1
 80090f4:	6713      	str	r3, [r2, #112]	; 0x70
 80090f6:	4b86      	ldr	r3, [pc, #536]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80090f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fa:	4a85      	ldr	r2, [pc, #532]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80090fc:	f023 0304 	bic.w	r3, r3, #4
 8009100:	6713      	str	r3, [r2, #112]	; 0x70
 8009102:	e01c      	b.n	800913e <HAL_RCC_OscConfig+0x5de>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	2b05      	cmp	r3, #5
 800910a:	d10c      	bne.n	8009126 <HAL_RCC_OscConfig+0x5c6>
 800910c:	4b80      	ldr	r3, [pc, #512]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800910e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009110:	4a7f      	ldr	r2, [pc, #508]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009112:	f043 0304 	orr.w	r3, r3, #4
 8009116:	6713      	str	r3, [r2, #112]	; 0x70
 8009118:	4b7d      	ldr	r3, [pc, #500]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800911a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911c:	4a7c      	ldr	r2, [pc, #496]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800911e:	f043 0301 	orr.w	r3, r3, #1
 8009122:	6713      	str	r3, [r2, #112]	; 0x70
 8009124:	e00b      	b.n	800913e <HAL_RCC_OscConfig+0x5de>
 8009126:	4b7a      	ldr	r3, [pc, #488]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	4a79      	ldr	r2, [pc, #484]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800912c:	f023 0301 	bic.w	r3, r3, #1
 8009130:	6713      	str	r3, [r2, #112]	; 0x70
 8009132:	4b77      	ldr	r3, [pc, #476]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009136:	4a76      	ldr	r2, [pc, #472]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009138:	f023 0304 	bic.w	r3, r3, #4
 800913c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d015      	beq.n	8009172 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009146:	f7fa fe49 	bl	8003ddc <HAL_GetTick>
 800914a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800914c:	e00a      	b.n	8009164 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800914e:	f7fa fe45 	bl	8003ddc <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	f241 3288 	movw	r2, #5000	; 0x1388
 800915c:	4293      	cmp	r3, r2
 800915e:	d901      	bls.n	8009164 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e123      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009164:	4b6a      	ldr	r3, [pc, #424]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0ee      	beq.n	800914e <HAL_RCC_OscConfig+0x5ee>
 8009170:	e014      	b.n	800919c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009172:	f7fa fe33 	bl	8003ddc <HAL_GetTick>
 8009176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009178:	e00a      	b.n	8009190 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800917a:	f7fa fe2f 	bl	8003ddc <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	f241 3288 	movw	r2, #5000	; 0x1388
 8009188:	4293      	cmp	r3, r2
 800918a:	d901      	bls.n	8009190 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e10d      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009190:	4b5f      	ldr	r3, [pc, #380]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1ee      	bne.n	800917a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 8102 	beq.w	80093aa <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80091a6:	4b5a      	ldr	r3, [pc, #360]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091ae:	2b18      	cmp	r3, #24
 80091b0:	f000 80bd 	beq.w	800932e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	f040 8095 	bne.w	80092e8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091be:	4b54      	ldr	r3, [pc, #336]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a53      	ldr	r2, [pc, #332]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80091c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ca:	f7fa fe07 	bl	8003ddc <HAL_GetTick>
 80091ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091d0:	e008      	b.n	80091e4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091d2:	f7fa fe03 	bl	8003ddc <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d901      	bls.n	80091e4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e0e3      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091e4:	4b4a      	ldr	r3, [pc, #296]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1f0      	bne.n	80091d2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091f0:	4b47      	ldr	r3, [pc, #284]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80091f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091f4:	4b48      	ldr	r3, [pc, #288]	; (8009318 <HAL_RCC_OscConfig+0x7b8>)
 80091f6:	4013      	ands	r3, r2
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009200:	0112      	lsls	r2, r2, #4
 8009202:	430a      	orrs	r2, r1
 8009204:	4942      	ldr	r1, [pc, #264]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009206:	4313      	orrs	r3, r2
 8009208:	628b      	str	r3, [r1, #40]	; 0x28
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920e:	3b01      	subs	r3, #1
 8009210:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009218:	3b01      	subs	r3, #1
 800921a:	025b      	lsls	r3, r3, #9
 800921c:	b29b      	uxth	r3, r3
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	3b01      	subs	r3, #1
 8009226:	041b      	lsls	r3, r3, #16
 8009228:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009232:	3b01      	subs	r3, #1
 8009234:	061b      	lsls	r3, r3, #24
 8009236:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800923a:	4935      	ldr	r1, [pc, #212]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800923c:	4313      	orrs	r3, r2
 800923e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009240:	4b33      	ldr	r3, [pc, #204]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	4a32      	ldr	r2, [pc, #200]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009246:	f023 0301 	bic.w	r3, r3, #1
 800924a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800924c:	4b30      	ldr	r3, [pc, #192]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800924e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009250:	4b32      	ldr	r3, [pc, #200]	; (800931c <HAL_RCC_OscConfig+0x7bc>)
 8009252:	4013      	ands	r3, r2
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009258:	00d2      	lsls	r2, r2, #3
 800925a:	492d      	ldr	r1, [pc, #180]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800925c:	4313      	orrs	r3, r2
 800925e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009260:	4b2b      	ldr	r3, [pc, #172]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	f023 020c 	bic.w	r2, r3, #12
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926c:	4928      	ldr	r1, [pc, #160]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800926e:	4313      	orrs	r3, r2
 8009270:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009272:	4b27      	ldr	r3, [pc, #156]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	f023 0202 	bic.w	r2, r3, #2
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927e:	4924      	ldr	r1, [pc, #144]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009280:	4313      	orrs	r3, r2
 8009282:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009284:	4b22      	ldr	r3, [pc, #136]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	4a21      	ldr	r2, [pc, #132]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800928a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800928e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009290:	4b1f      	ldr	r3, [pc, #124]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	4a1e      	ldr	r2, [pc, #120]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 8009296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800929a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800929c:	4b1c      	ldr	r3, [pc, #112]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a1b      	ldr	r2, [pc, #108]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80092a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80092a8:	4b19      	ldr	r3, [pc, #100]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	4a18      	ldr	r2, [pc, #96]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092b4:	4b16      	ldr	r3, [pc, #88]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a15      	ldr	r2, [pc, #84]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80092ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c0:	f7fa fd8c 	bl	8003ddc <HAL_GetTick>
 80092c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092c6:	e008      	b.n	80092da <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092c8:	f7fa fd88 	bl	8003ddc <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d901      	bls.n	80092da <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e068      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092da:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0f0      	beq.n	80092c8 <HAL_RCC_OscConfig+0x768>
 80092e6:	e060      	b.n	80093aa <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092e8:	4b09      	ldr	r3, [pc, #36]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a08      	ldr	r2, [pc, #32]	; (8009310 <HAL_RCC_OscConfig+0x7b0>)
 80092ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f4:	f7fa fd72 	bl	8003ddc <HAL_GetTick>
 80092f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092fa:	e011      	b.n	8009320 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092fc:	f7fa fd6e 	bl	8003ddc <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	2b02      	cmp	r3, #2
 8009308:	d90a      	bls.n	8009320 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	e04e      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
 800930e:	bf00      	nop
 8009310:	58024400 	.word	0x58024400
 8009314:	58024800 	.word	0x58024800
 8009318:	fffffc0c 	.word	0xfffffc0c
 800931c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009320:	4b24      	ldr	r3, [pc, #144]	; (80093b4 <HAL_RCC_OscConfig+0x854>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e7      	bne.n	80092fc <HAL_RCC_OscConfig+0x79c>
 800932c:	e03d      	b.n	80093aa <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800932e:	4b21      	ldr	r3, [pc, #132]	; (80093b4 <HAL_RCC_OscConfig+0x854>)
 8009330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009332:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009334:	4b1f      	ldr	r3, [pc, #124]	; (80093b4 <HAL_RCC_OscConfig+0x854>)
 8009336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009338:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	2b01      	cmp	r3, #1
 8009340:	d031      	beq.n	80093a6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f003 0203 	and.w	r2, r3, #3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800934c:	429a      	cmp	r2, r3
 800934e:	d12a      	bne.n	80093a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	091b      	lsrs	r3, r3, #4
 8009354:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800935c:	429a      	cmp	r2, r3
 800935e:	d122      	bne.n	80093a6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800936c:	429a      	cmp	r2, r3
 800936e:	d11a      	bne.n	80093a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	0a5b      	lsrs	r3, r3, #9
 8009374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800937e:	429a      	cmp	r2, r3
 8009380:	d111      	bne.n	80093a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	0c1b      	lsrs	r3, r3, #16
 8009386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009390:	429a      	cmp	r2, r3
 8009392:	d108      	bne.n	80093a6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	0e1b      	lsrs	r3, r3, #24
 8009398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d001      	beq.n	80093aa <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e000      	b.n	80093ac <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3730      	adds	r7, #48	; 0x30
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	58024400 	.word	0x58024400

080093b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e19c      	b.n	8009706 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093cc:	4b8a      	ldr	r3, [pc, #552]	; (80095f8 <HAL_RCC_ClockConfig+0x240>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 030f 	and.w	r3, r3, #15
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d910      	bls.n	80093fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093da:	4b87      	ldr	r3, [pc, #540]	; (80095f8 <HAL_RCC_ClockConfig+0x240>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f023 020f 	bic.w	r2, r3, #15
 80093e2:	4985      	ldr	r1, [pc, #532]	; (80095f8 <HAL_RCC_ClockConfig+0x240>)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093ea:	4b83      	ldr	r3, [pc, #524]	; (80095f8 <HAL_RCC_ClockConfig+0x240>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 030f 	and.w	r3, r3, #15
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d001      	beq.n	80093fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e184      	b.n	8009706 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0304 	and.w	r3, r3, #4
 8009404:	2b00      	cmp	r3, #0
 8009406:	d010      	beq.n	800942a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	691a      	ldr	r2, [r3, #16]
 800940c:	4b7b      	ldr	r3, [pc, #492]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009414:	429a      	cmp	r2, r3
 8009416:	d908      	bls.n	800942a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009418:	4b78      	ldr	r3, [pc, #480]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	4975      	ldr	r1, [pc, #468]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 8009426:	4313      	orrs	r3, r2
 8009428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0308 	and.w	r3, r3, #8
 8009432:	2b00      	cmp	r3, #0
 8009434:	d010      	beq.n	8009458 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	695a      	ldr	r2, [r3, #20]
 800943a:	4b70      	ldr	r3, [pc, #448]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009442:	429a      	cmp	r2, r3
 8009444:	d908      	bls.n	8009458 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009446:	4b6d      	ldr	r3, [pc, #436]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	496a      	ldr	r1, [pc, #424]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 8009454:	4313      	orrs	r3, r2
 8009456:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0310 	and.w	r3, r3, #16
 8009460:	2b00      	cmp	r3, #0
 8009462:	d010      	beq.n	8009486 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	699a      	ldr	r2, [r3, #24]
 8009468:	4b64      	ldr	r3, [pc, #400]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009470:	429a      	cmp	r2, r3
 8009472:	d908      	bls.n	8009486 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009474:	4b61      	ldr	r3, [pc, #388]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	495e      	ldr	r1, [pc, #376]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 8009482:	4313      	orrs	r3, r2
 8009484:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d010      	beq.n	80094b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	69da      	ldr	r2, [r3, #28]
 8009496:	4b59      	ldr	r3, [pc, #356]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800949e:	429a      	cmp	r2, r3
 80094a0:	d908      	bls.n	80094b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80094a2:	4b56      	ldr	r3, [pc, #344]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	4953      	ldr	r1, [pc, #332]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0302 	and.w	r3, r3, #2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d010      	beq.n	80094e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	4b4d      	ldr	r3, [pc, #308]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	f003 030f 	and.w	r3, r3, #15
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d908      	bls.n	80094e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094d0:	4b4a      	ldr	r3, [pc, #296]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	f023 020f 	bic.w	r2, r3, #15
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	4947      	ldr	r1, [pc, #284]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d055      	beq.n	800959a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80094ee:	4b43      	ldr	r3, [pc, #268]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	4940      	ldr	r1, [pc, #256]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d107      	bne.n	8009518 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009508:	4b3c      	ldr	r3, [pc, #240]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d121      	bne.n	8009558 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e0f6      	b.n	8009706 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	2b03      	cmp	r3, #3
 800951e:	d107      	bne.n	8009530 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009520:	4b36      	ldr	r3, [pc, #216]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d115      	bne.n	8009558 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e0ea      	b.n	8009706 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d107      	bne.n	8009548 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009538:	4b30      	ldr	r3, [pc, #192]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009540:	2b00      	cmp	r3, #0
 8009542:	d109      	bne.n	8009558 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e0de      	b.n	8009706 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009548:	4b2c      	ldr	r3, [pc, #176]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e0d6      	b.n	8009706 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009558:	4b28      	ldr	r3, [pc, #160]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f023 0207 	bic.w	r2, r3, #7
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4925      	ldr	r1, [pc, #148]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 8009566:	4313      	orrs	r3, r2
 8009568:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800956a:	f7fa fc37 	bl	8003ddc <HAL_GetTick>
 800956e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009570:	e00a      	b.n	8009588 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009572:	f7fa fc33 	bl	8003ddc <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009580:	4293      	cmp	r3, r2
 8009582:	d901      	bls.n	8009588 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	e0be      	b.n	8009706 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009588:	4b1c      	ldr	r3, [pc, #112]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	429a      	cmp	r2, r3
 8009598:	d1eb      	bne.n	8009572 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d010      	beq.n	80095c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	4b14      	ldr	r3, [pc, #80]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	f003 030f 	and.w	r3, r3, #15
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d208      	bcs.n	80095c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095b6:	4b11      	ldr	r3, [pc, #68]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	f023 020f 	bic.w	r2, r3, #15
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	490e      	ldr	r1, [pc, #56]	; (80095fc <HAL_RCC_ClockConfig+0x244>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095c8:	4b0b      	ldr	r3, [pc, #44]	; (80095f8 <HAL_RCC_ClockConfig+0x240>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d214      	bcs.n	8009600 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095d6:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <HAL_RCC_ClockConfig+0x240>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f023 020f 	bic.w	r2, r3, #15
 80095de:	4906      	ldr	r1, [pc, #24]	; (80095f8 <HAL_RCC_ClockConfig+0x240>)
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095e6:	4b04      	ldr	r3, [pc, #16]	; (80095f8 <HAL_RCC_ClockConfig+0x240>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 030f 	and.w	r3, r3, #15
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d005      	beq.n	8009600 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e086      	b.n	8009706 <HAL_RCC_ClockConfig+0x34e>
 80095f8:	52002000 	.word	0x52002000
 80095fc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d010      	beq.n	800962e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	4b3f      	ldr	r3, [pc, #252]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009618:	429a      	cmp	r2, r3
 800961a:	d208      	bcs.n	800962e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800961c:	4b3c      	ldr	r3, [pc, #240]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	4939      	ldr	r1, [pc, #228]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 800962a:	4313      	orrs	r3, r2
 800962c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0308 	and.w	r3, r3, #8
 8009636:	2b00      	cmp	r3, #0
 8009638:	d010      	beq.n	800965c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	695a      	ldr	r2, [r3, #20]
 800963e:	4b34      	ldr	r3, [pc, #208]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009646:	429a      	cmp	r2, r3
 8009648:	d208      	bcs.n	800965c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800964a:	4b31      	ldr	r3, [pc, #196]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	492e      	ldr	r1, [pc, #184]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 8009658:	4313      	orrs	r3, r2
 800965a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0310 	and.w	r3, r3, #16
 8009664:	2b00      	cmp	r3, #0
 8009666:	d010      	beq.n	800968a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	699a      	ldr	r2, [r3, #24]
 800966c:	4b28      	ldr	r3, [pc, #160]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009674:	429a      	cmp	r2, r3
 8009676:	d208      	bcs.n	800968a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009678:	4b25      	ldr	r3, [pc, #148]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	4922      	ldr	r1, [pc, #136]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 8009686:	4313      	orrs	r3, r2
 8009688:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0320 	and.w	r3, r3, #32
 8009692:	2b00      	cmp	r3, #0
 8009694:	d010      	beq.n	80096b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	69da      	ldr	r2, [r3, #28]
 800969a:	4b1d      	ldr	r3, [pc, #116]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d208      	bcs.n	80096b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80096a6:	4b1a      	ldr	r3, [pc, #104]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	4917      	ldr	r1, [pc, #92]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 80096b4:	4313      	orrs	r3, r2
 80096b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80096b8:	f000 f834 	bl	8009724 <HAL_RCC_GetSysClockFreq>
 80096bc:	4602      	mov	r2, r0
 80096be:	4b14      	ldr	r3, [pc, #80]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	0a1b      	lsrs	r3, r3, #8
 80096c4:	f003 030f 	and.w	r3, r3, #15
 80096c8:	4912      	ldr	r1, [pc, #72]	; (8009714 <HAL_RCC_ClockConfig+0x35c>)
 80096ca:	5ccb      	ldrb	r3, [r1, r3]
 80096cc:	f003 031f 	and.w	r3, r3, #31
 80096d0:	fa22 f303 	lsr.w	r3, r2, r3
 80096d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80096d6:	4b0e      	ldr	r3, [pc, #56]	; (8009710 <HAL_RCC_ClockConfig+0x358>)
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	f003 030f 	and.w	r3, r3, #15
 80096de:	4a0d      	ldr	r2, [pc, #52]	; (8009714 <HAL_RCC_ClockConfig+0x35c>)
 80096e0:	5cd3      	ldrb	r3, [r2, r3]
 80096e2:	f003 031f 	and.w	r3, r3, #31
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	fa22 f303 	lsr.w	r3, r2, r3
 80096ec:	4a0a      	ldr	r2, [pc, #40]	; (8009718 <HAL_RCC_ClockConfig+0x360>)
 80096ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096f0:	4a0a      	ldr	r2, [pc, #40]	; (800971c <HAL_RCC_ClockConfig+0x364>)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80096f6:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <HAL_RCC_ClockConfig+0x368>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fa fb24 	bl	8003d48 <HAL_InitTick>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	58024400 	.word	0x58024400
 8009714:	08010bd0 	.word	0x08010bd0
 8009718:	24000004 	.word	0x24000004
 800971c:	24000000 	.word	0x24000000
 8009720:	24000008 	.word	0x24000008

08009724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009724:	b480      	push	{r7}
 8009726:	b089      	sub	sp, #36	; 0x24
 8009728:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800972a:	4bb3      	ldr	r3, [pc, #716]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009732:	2b18      	cmp	r3, #24
 8009734:	f200 8155 	bhi.w	80099e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009738:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <HAL_RCC_GetSysClockFreq+0x1c>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	080097a5 	.word	0x080097a5
 8009744:	080099e3 	.word	0x080099e3
 8009748:	080099e3 	.word	0x080099e3
 800974c:	080099e3 	.word	0x080099e3
 8009750:	080099e3 	.word	0x080099e3
 8009754:	080099e3 	.word	0x080099e3
 8009758:	080099e3 	.word	0x080099e3
 800975c:	080099e3 	.word	0x080099e3
 8009760:	080097cb 	.word	0x080097cb
 8009764:	080099e3 	.word	0x080099e3
 8009768:	080099e3 	.word	0x080099e3
 800976c:	080099e3 	.word	0x080099e3
 8009770:	080099e3 	.word	0x080099e3
 8009774:	080099e3 	.word	0x080099e3
 8009778:	080099e3 	.word	0x080099e3
 800977c:	080099e3 	.word	0x080099e3
 8009780:	080097d1 	.word	0x080097d1
 8009784:	080099e3 	.word	0x080099e3
 8009788:	080099e3 	.word	0x080099e3
 800978c:	080099e3 	.word	0x080099e3
 8009790:	080099e3 	.word	0x080099e3
 8009794:	080099e3 	.word	0x080099e3
 8009798:	080099e3 	.word	0x080099e3
 800979c:	080099e3 	.word	0x080099e3
 80097a0:	080097d7 	.word	0x080097d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097a4:	4b94      	ldr	r3, [pc, #592]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0320 	and.w	r3, r3, #32
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d009      	beq.n	80097c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097b0:	4b91      	ldr	r3, [pc, #580]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	08db      	lsrs	r3, r3, #3
 80097b6:	f003 0303 	and.w	r3, r3, #3
 80097ba:	4a90      	ldr	r2, [pc, #576]	; (80099fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097bc:	fa22 f303 	lsr.w	r3, r2, r3
 80097c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80097c2:	e111      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80097c4:	4b8d      	ldr	r3, [pc, #564]	; (80099fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097c6:	61bb      	str	r3, [r7, #24]
    break;
 80097c8:	e10e      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80097ca:	4b8d      	ldr	r3, [pc, #564]	; (8009a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80097cc:	61bb      	str	r3, [r7, #24]
    break;
 80097ce:	e10b      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80097d0:	4b8c      	ldr	r3, [pc, #560]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80097d2:	61bb      	str	r3, [r7, #24]
    break;
 80097d4:	e108      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097d6:	4b88      	ldr	r3, [pc, #544]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097da:	f003 0303 	and.w	r3, r3, #3
 80097de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80097e0:	4b85      	ldr	r3, [pc, #532]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e4:	091b      	lsrs	r3, r3, #4
 80097e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80097ec:	4b82      	ldr	r3, [pc, #520]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80097f6:	4b80      	ldr	r3, [pc, #512]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fa:	08db      	lsrs	r3, r3, #3
 80097fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	fb02 f303 	mul.w	r3, r2, r3
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 80e1 	beq.w	80099dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b02      	cmp	r3, #2
 800981e:	f000 8083 	beq.w	8009928 <HAL_RCC_GetSysClockFreq+0x204>
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2b02      	cmp	r3, #2
 8009826:	f200 80a1 	bhi.w	800996c <HAL_RCC_GetSysClockFreq+0x248>
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <HAL_RCC_GetSysClockFreq+0x114>
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d056      	beq.n	80098e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009836:	e099      	b.n	800996c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009838:	4b6f      	ldr	r3, [pc, #444]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 0320 	and.w	r3, r3, #32
 8009840:	2b00      	cmp	r3, #0
 8009842:	d02d      	beq.n	80098a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009844:	4b6c      	ldr	r3, [pc, #432]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	08db      	lsrs	r3, r3, #3
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	4a6b      	ldr	r2, [pc, #428]	; (80099fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009850:	fa22 f303 	lsr.w	r3, r2, r3
 8009854:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800986e:	4b62      	ldr	r3, [pc, #392]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800987e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009882:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800988a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800988e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800989a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800989e:	e087      	b.n	80099b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a0c <HAL_RCC_GetSysClockFreq+0x2e8>
 80098ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b2:	4b51      	ldr	r3, [pc, #324]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80098c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098e2:	e065      	b.n	80099b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80098f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f6:	4b40      	ldr	r3, [pc, #256]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009906:	ed97 6a02 	vldr	s12, [r7, #8]
 800990a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800990e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800991a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009926:	e043      	b.n	80099b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009932:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993a:	4b2f      	ldr	r3, [pc, #188]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800993c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994a:	ed97 6a02 	vldr	s12, [r7, #8]
 800994e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800995e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800996a:	e021      	b.n	80099b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009976:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800997a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997e:	4b1e      	ldr	r3, [pc, #120]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009992:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80099b0:	4b11      	ldr	r3, [pc, #68]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b4:	0a5b      	lsrs	r3, r3, #9
 80099b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ba:	3301      	adds	r3, #1
 80099bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	ee07 3a90 	vmov	s15, r3
 80099c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80099c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80099cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099d4:	ee17 3a90 	vmov	r3, s15
 80099d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80099da:	e005      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	61bb      	str	r3, [r7, #24]
    break;
 80099e0:	e002      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80099e2:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80099e4:	61bb      	str	r3, [r7, #24]
    break;
 80099e6:	bf00      	nop
  }

  return sysclockfreq;
 80099e8:	69bb      	ldr	r3, [r7, #24]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3724      	adds	r7, #36	; 0x24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	58024400 	.word	0x58024400
 80099fc:	03d09000 	.word	0x03d09000
 8009a00:	003d0900 	.word	0x003d0900
 8009a04:	02dc6c00 	.word	0x02dc6c00
 8009a08:	46000000 	.word	0x46000000
 8009a0c:	4c742400 	.word	0x4c742400
 8009a10:	4a742400 	.word	0x4a742400
 8009a14:	4c371b00 	.word	0x4c371b00

08009a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a1e:	f7ff fe81 	bl	8009724 <HAL_RCC_GetSysClockFreq>
 8009a22:	4602      	mov	r2, r0
 8009a24:	4b10      	ldr	r3, [pc, #64]	; (8009a68 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	0a1b      	lsrs	r3, r3, #8
 8009a2a:	f003 030f 	and.w	r3, r3, #15
 8009a2e:	490f      	ldr	r1, [pc, #60]	; (8009a6c <HAL_RCC_GetHCLKFreq+0x54>)
 8009a30:	5ccb      	ldrb	r3, [r1, r3]
 8009a32:	f003 031f 	and.w	r3, r3, #31
 8009a36:	fa22 f303 	lsr.w	r3, r2, r3
 8009a3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	f003 030f 	and.w	r3, r3, #15
 8009a44:	4a09      	ldr	r2, [pc, #36]	; (8009a6c <HAL_RCC_GetHCLKFreq+0x54>)
 8009a46:	5cd3      	ldrb	r3, [r2, r3]
 8009a48:	f003 031f 	and.w	r3, r3, #31
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a52:	4a07      	ldr	r2, [pc, #28]	; (8009a70 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a56:	4a07      	ldr	r2, [pc, #28]	; (8009a74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a5c:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	58024400 	.word	0x58024400
 8009a6c:	08010bd0 	.word	0x08010bd0
 8009a70:	24000004 	.word	0x24000004
 8009a74:	24000000 	.word	0x24000000

08009a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a7c:	f7ff ffcc 	bl	8009a18 <HAL_RCC_GetHCLKFreq>
 8009a80:	4602      	mov	r2, r0
 8009a82:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	091b      	lsrs	r3, r3, #4
 8009a88:	f003 0307 	and.w	r3, r3, #7
 8009a8c:	4904      	ldr	r1, [pc, #16]	; (8009aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a8e:	5ccb      	ldrb	r3, [r1, r3]
 8009a90:	f003 031f 	and.w	r3, r3, #31
 8009a94:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	58024400 	.word	0x58024400
 8009aa0:	08010bd0 	.word	0x08010bd0

08009aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009aa8:	f7ff ffb6 	bl	8009a18 <HAL_RCC_GetHCLKFreq>
 8009aac:	4602      	mov	r2, r0
 8009aae:	4b06      	ldr	r3, [pc, #24]	; (8009ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	0a1b      	lsrs	r3, r3, #8
 8009ab4:	f003 0307 	and.w	r3, r3, #7
 8009ab8:	4904      	ldr	r1, [pc, #16]	; (8009acc <HAL_RCC_GetPCLK2Freq+0x28>)
 8009aba:	5ccb      	ldrb	r3, [r1, r3]
 8009abc:	f003 031f 	and.w	r3, r3, #31
 8009ac0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	58024400 	.word	0x58024400
 8009acc:	08010bd0 	.word	0x08010bd0

08009ad0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ad8:	2300      	movs	r3, #0
 8009ada:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009adc:	2300      	movs	r3, #0
 8009ade:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d03f      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009af0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009af4:	d02a      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009af6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009afa:	d824      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b00:	d018      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b06:	d81e      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b10:	d007      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009b12:	e018      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b14:	4bab      	ldr	r3, [pc, #684]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	4aaa      	ldr	r2, [pc, #680]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b20:	e015      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3304      	adds	r3, #4
 8009b26:	2102      	movs	r1, #2
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f001 fff3 	bl	800bb14 <RCCEx_PLL2_Config>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b32:	e00c      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3324      	adds	r3, #36	; 0x24
 8009b38:	2102      	movs	r1, #2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f002 f89c 	bl	800bc78 <RCCEx_PLL3_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b44:	e003      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	75fb      	strb	r3, [r7, #23]
      break;
 8009b4a:	e000      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d109      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b54:	4b9b      	ldr	r3, [pc, #620]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b60:	4998      	ldr	r1, [pc, #608]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	650b      	str	r3, [r1, #80]	; 0x50
 8009b66:	e001      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
 8009b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d03d      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d826      	bhi.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009b80:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b86:	bf00      	nop
 8009b88:	08009b9d 	.word	0x08009b9d
 8009b8c:	08009bab 	.word	0x08009bab
 8009b90:	08009bbd 	.word	0x08009bbd
 8009b94:	08009bd5 	.word	0x08009bd5
 8009b98:	08009bd5 	.word	0x08009bd5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b9c:	4b89      	ldr	r3, [pc, #548]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	4a88      	ldr	r2, [pc, #544]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ba8:	e015      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3304      	adds	r3, #4
 8009bae:	2100      	movs	r1, #0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 ffaf 	bl	800bb14 <RCCEx_PLL2_Config>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bba:	e00c      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3324      	adds	r3, #36	; 0x24
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 f858 	bl	800bc78 <RCCEx_PLL3_Config>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bcc:	e003      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd2:	e000      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d109      	bne.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bdc:	4b79      	ldr	r3, [pc, #484]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be0:	f023 0207 	bic.w	r2, r3, #7
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be8:	4976      	ldr	r1, [pc, #472]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	650b      	str	r3, [r1, #80]	; 0x50
 8009bee:	e001      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d042      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c08:	d02b      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0e:	d825      	bhi.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009c10:	2bc0      	cmp	r3, #192	; 0xc0
 8009c12:	d028      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009c14:	2bc0      	cmp	r3, #192	; 0xc0
 8009c16:	d821      	bhi.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009c18:	2b80      	cmp	r3, #128	; 0x80
 8009c1a:	d016      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009c1c:	2b80      	cmp	r3, #128	; 0x80
 8009c1e:	d81d      	bhi.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009c24:	2b40      	cmp	r3, #64	; 0x40
 8009c26:	d007      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009c28:	e018      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c2a:	4b66      	ldr	r3, [pc, #408]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2e:	4a65      	ldr	r2, [pc, #404]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009c36:	e017      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f001 ff68 	bl	800bb14 <RCCEx_PLL2_Config>
 8009c44:	4603      	mov	r3, r0
 8009c46:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009c48:	e00e      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	3324      	adds	r3, #36	; 0x24
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f002 f811 	bl	800bc78 <RCCEx_PLL3_Config>
 8009c56:	4603      	mov	r3, r0
 8009c58:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009c5a:	e005      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c60:	e002      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009c62:	bf00      	nop
 8009c64:	e000      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d109      	bne.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009c6e:	4b55      	ldr	r3, [pc, #340]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c72:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7a:	4952      	ldr	r1, [pc, #328]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	650b      	str	r3, [r1, #80]	; 0x50
 8009c80:	e001      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d049      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c9c:	d030      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009c9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ca2:	d82a      	bhi.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009ca4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ca8:	d02c      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009caa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cae:	d824      	bhi.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cb4:	d018      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cba:	d81e      	bhi.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cc4:	d007      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009cc6:	e018      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cc8:	4b3e      	ldr	r3, [pc, #248]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	4a3d      	ldr	r2, [pc, #244]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cd4:	e017      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	2100      	movs	r1, #0
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f001 ff19 	bl	800bb14 <RCCEx_PLL2_Config>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009ce6:	e00e      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3324      	adds	r3, #36	; 0x24
 8009cec:	2100      	movs	r1, #0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f001 ffc2 	bl	800bc78 <RCCEx_PLL3_Config>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cf8:	e005      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfe:	e002      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009d00:	bf00      	nop
 8009d02:	e000      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009d0c:	4b2d      	ldr	r3, [pc, #180]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d10:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d1a:	492a      	ldr	r1, [pc, #168]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	658b      	str	r3, [r1, #88]	; 0x58
 8009d20:	e001      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d04c      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d3c:	d030      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d42:	d82a      	bhi.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009d44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d48:	d02c      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009d4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d4e:	d824      	bhi.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009d50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d54:	d018      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d5a:	d81e      	bhi.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d64:	d007      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009d66:	e018      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d68:	4b16      	ldr	r3, [pc, #88]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6c:	4a15      	ldr	r2, [pc, #84]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d74:	e017      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f001 fec9 	bl	800bb14 <RCCEx_PLL2_Config>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d86:	e00e      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	3324      	adds	r3, #36	; 0x24
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 ff72 	bl	800bc78 <RCCEx_PLL3_Config>
 8009d94:	4603      	mov	r3, r0
 8009d96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d98:	e005      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9e:	e002      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009da0:	bf00      	nop
 8009da2:	e000      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10d      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009dac:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dba:	4902      	ldr	r1, [pc, #8]	; (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	658b      	str	r3, [r1, #88]	; 0x58
 8009dc0:	e004      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009dc2:	bf00      	nop
 8009dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d032      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ddc:	2b30      	cmp	r3, #48	; 0x30
 8009dde:	d01c      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009de0:	2b30      	cmp	r3, #48	; 0x30
 8009de2:	d817      	bhi.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	d00c      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009de8:	2b20      	cmp	r3, #32
 8009dea:	d813      	bhi.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d016      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009df0:	2b10      	cmp	r3, #16
 8009df2:	d10f      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df4:	4baf      	ldr	r3, [pc, #700]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	4aae      	ldr	r2, [pc, #696]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009e00:	e00e      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3304      	adds	r3, #4
 8009e06:	2102      	movs	r1, #2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f001 fe83 	bl	800bb14 <RCCEx_PLL2_Config>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009e12:	e005      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	75fb      	strb	r3, [r7, #23]
      break;
 8009e18:	e002      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009e1a:	bf00      	nop
 8009e1c:	e000      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d109      	bne.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e26:	4ba3      	ldr	r3, [pc, #652]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e32:	49a0      	ldr	r1, [pc, #640]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e38:	e001      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d047      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e52:	d030      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e58:	d82a      	bhi.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009e5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e5e:	d02c      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009e60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e64:	d824      	bhi.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e6a:	d018      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e70:	d81e      	bhi.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e7a:	d007      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009e7c:	e018      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e7e:	4b8d      	ldr	r3, [pc, #564]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e82:	4a8c      	ldr	r2, [pc, #560]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e8a:	e017      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	2100      	movs	r1, #0
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 fe3e 	bl	800bb14 <RCCEx_PLL2_Config>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e9c:	e00e      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	3324      	adds	r3, #36	; 0x24
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 fee7 	bl	800bc78 <RCCEx_PLL3_Config>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009eae:	e005      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb4:	e002      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009eb6:	bf00      	nop
 8009eb8:	e000      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d109      	bne.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ec2:	4b7c      	ldr	r3, [pc, #496]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ece:	4979      	ldr	r1, [pc, #484]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	650b      	str	r3, [r1, #80]	; 0x50
 8009ed4:	e001      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d049      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009eee:	d02e      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ef4:	d828      	bhi.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009ef6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009efa:	d02a      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f00:	d822      	bhi.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009f02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f06:	d026      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009f08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f0c:	d81c      	bhi.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f12:	d010      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f18:	d816      	bhi.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d01d      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f22:	d111      	bne.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	2101      	movs	r1, #1
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 fdf2 	bl	800bb14 <RCCEx_PLL2_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f34:	e012      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3324      	adds	r3, #36	; 0x24
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 fe9b 	bl	800bc78 <RCCEx_PLL3_Config>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f46:	e009      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f4c:	e006      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009f4e:	bf00      	nop
 8009f50:	e004      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009f52:	bf00      	nop
 8009f54:	e002      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009f56:	bf00      	nop
 8009f58:	e000      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d109      	bne.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f62:	4b54      	ldr	r3, [pc, #336]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f66:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f6e:	4951      	ldr	r1, [pc, #324]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	650b      	str	r3, [r1, #80]	; 0x50
 8009f74:	e001      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d04b      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f90:	d02e      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f96:	d828      	bhi.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9c:	d02a      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa2:	d822      	bhi.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009fa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fa8:	d026      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009faa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fae:	d81c      	bhi.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb4:	d010      	beq.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fba:	d816      	bhi.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01d      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fc4:	d111      	bne.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3304      	adds	r3, #4
 8009fca:	2101      	movs	r1, #1
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f001 fda1 	bl	800bb14 <RCCEx_PLL2_Config>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fd6:	e012      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3324      	adds	r3, #36	; 0x24
 8009fdc:	2101      	movs	r1, #1
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 fe4a 	bl	800bc78 <RCCEx_PLL3_Config>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fe8:	e009      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	75fb      	strb	r3, [r7, #23]
      break;
 8009fee:	e006      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009ff0:	bf00      	nop
 8009ff2:	e004      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009ff4:	bf00      	nop
 8009ff6:	e002      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009ff8:	bf00      	nop
 8009ffa:	e000      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10a      	bne.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a004:	4b2b      	ldr	r3, [pc, #172]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a008:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a012:	4928      	ldr	r1, [pc, #160]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a014:	4313      	orrs	r3, r2
 800a016:	658b      	str	r3, [r1, #88]	; 0x58
 800a018:	e001      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a026:	2b00      	cmp	r3, #0
 800a028:	d02f      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a02e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a032:	d00e      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a038:	d814      	bhi.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d015      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a03e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a042:	d10f      	bne.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a044:	4b1b      	ldr	r3, [pc, #108]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	4a1a      	ldr	r2, [pc, #104]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a04a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a04e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a050:	e00c      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	3304      	adds	r3, #4
 800a056:	2101      	movs	r1, #1
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 fd5b 	bl	800bb14 <RCCEx_PLL2_Config>
 800a05e:	4603      	mov	r3, r0
 800a060:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a062:	e003      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	75fb      	strb	r3, [r7, #23]
      break;
 800a068:	e000      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a06a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d109      	bne.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a072:	4b10      	ldr	r3, [pc, #64]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a076:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a07e:	490d      	ldr	r1, [pc, #52]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a080:	4313      	orrs	r3, r2
 800a082:	650b      	str	r3, [r1, #80]	; 0x50
 800a084:	e001      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d033      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d81c      	bhi.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a09e:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a0df 	.word	0x0800a0df
 800a0a8:	0800a0b9 	.word	0x0800a0b9
 800a0ac:	0800a0c7 	.word	0x0800a0c7
 800a0b0:	0800a0df 	.word	0x0800a0df
 800a0b4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0b8:	4bb8      	ldr	r3, [pc, #736]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	4ab7      	ldr	r2, [pc, #732]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0c4:	e00c      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 fd21 	bl	800bb14 <RCCEx_PLL2_Config>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0d6:	e003      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	75fb      	strb	r3, [r7, #23]
      break;
 800a0dc:	e000      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a0de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a0e6:	4bad      	ldr	r3, [pc, #692]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ea:	f023 0203 	bic.w	r2, r3, #3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f2:	49aa      	ldr	r1, [pc, #680]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0f8:	e001      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
 800a0fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 8086 	beq.w	800a218 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a10c:	4ba4      	ldr	r3, [pc, #656]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4aa3      	ldr	r2, [pc, #652]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a118:	f7f9 fe60 	bl	8003ddc <HAL_GetTick>
 800a11c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a11e:	e009      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a120:	f7f9 fe5c 	bl	8003ddc <HAL_GetTick>
 800a124:	4602      	mov	r2, r0
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	2b64      	cmp	r3, #100	; 0x64
 800a12c:	d902      	bls.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	75fb      	strb	r3, [r7, #23]
        break;
 800a132:	e005      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a134:	4b9a      	ldr	r3, [pc, #616]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0ef      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d166      	bne.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a146:	4b95      	ldr	r3, [pc, #596]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a148:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a150:	4053      	eors	r3, r2
 800a152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a156:	2b00      	cmp	r3, #0
 800a158:	d013      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a15a:	4b90      	ldr	r3, [pc, #576]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a162:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a164:	4b8d      	ldr	r3, [pc, #564]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a168:	4a8c      	ldr	r2, [pc, #560]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a16a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a16e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a170:	4b8a      	ldr	r3, [pc, #552]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a174:	4a89      	ldr	r2, [pc, #548]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a17a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a17c:	4a87      	ldr	r2, [pc, #540]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a18c:	d115      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a18e:	f7f9 fe25 	bl	8003ddc <HAL_GetTick>
 800a192:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a194:	e00b      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a196:	f7f9 fe21 	bl	8003ddc <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d902      	bls.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	75fb      	strb	r3, [r7, #23]
            break;
 800a1ac:	e005      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1ae:	4b7b      	ldr	r3, [pc, #492]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b2:	f003 0302 	and.w	r3, r3, #2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0ed      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d126      	bne.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1ce:	d10d      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a1d0:	4b72      	ldr	r3, [pc, #456]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1de:	0919      	lsrs	r1, r3, #4
 800a1e0:	4b70      	ldr	r3, [pc, #448]	; (800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a1e2:	400b      	ands	r3, r1
 800a1e4:	496d      	ldr	r1, [pc, #436]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	610b      	str	r3, [r1, #16]
 800a1ea:	e005      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a1ec:	4b6b      	ldr	r3, [pc, #428]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	4a6a      	ldr	r2, [pc, #424]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1f6:	6113      	str	r3, [r2, #16]
 800a1f8:	4b68      	ldr	r3, [pc, #416]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a1fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a206:	4965      	ldr	r1, [pc, #404]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	670b      	str	r3, [r1, #112]	; 0x70
 800a20c:	e004      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
 800a210:	75bb      	strb	r3, [r7, #22]
 800a212:	e001      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	2b00      	cmp	r3, #0
 800a222:	d07e      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a228:	2b28      	cmp	r3, #40	; 0x28
 800a22a:	d867      	bhi.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a22c:	a201      	add	r2, pc, #4	; (adr r2, 800a234 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a232:	bf00      	nop
 800a234:	0800a303 	.word	0x0800a303
 800a238:	0800a2fd 	.word	0x0800a2fd
 800a23c:	0800a2fd 	.word	0x0800a2fd
 800a240:	0800a2fd 	.word	0x0800a2fd
 800a244:	0800a2fd 	.word	0x0800a2fd
 800a248:	0800a2fd 	.word	0x0800a2fd
 800a24c:	0800a2fd 	.word	0x0800a2fd
 800a250:	0800a2fd 	.word	0x0800a2fd
 800a254:	0800a2d9 	.word	0x0800a2d9
 800a258:	0800a2fd 	.word	0x0800a2fd
 800a25c:	0800a2fd 	.word	0x0800a2fd
 800a260:	0800a2fd 	.word	0x0800a2fd
 800a264:	0800a2fd 	.word	0x0800a2fd
 800a268:	0800a2fd 	.word	0x0800a2fd
 800a26c:	0800a2fd 	.word	0x0800a2fd
 800a270:	0800a2fd 	.word	0x0800a2fd
 800a274:	0800a2eb 	.word	0x0800a2eb
 800a278:	0800a2fd 	.word	0x0800a2fd
 800a27c:	0800a2fd 	.word	0x0800a2fd
 800a280:	0800a2fd 	.word	0x0800a2fd
 800a284:	0800a2fd 	.word	0x0800a2fd
 800a288:	0800a2fd 	.word	0x0800a2fd
 800a28c:	0800a2fd 	.word	0x0800a2fd
 800a290:	0800a2fd 	.word	0x0800a2fd
 800a294:	0800a303 	.word	0x0800a303
 800a298:	0800a2fd 	.word	0x0800a2fd
 800a29c:	0800a2fd 	.word	0x0800a2fd
 800a2a0:	0800a2fd 	.word	0x0800a2fd
 800a2a4:	0800a2fd 	.word	0x0800a2fd
 800a2a8:	0800a2fd 	.word	0x0800a2fd
 800a2ac:	0800a2fd 	.word	0x0800a2fd
 800a2b0:	0800a2fd 	.word	0x0800a2fd
 800a2b4:	0800a303 	.word	0x0800a303
 800a2b8:	0800a2fd 	.word	0x0800a2fd
 800a2bc:	0800a2fd 	.word	0x0800a2fd
 800a2c0:	0800a2fd 	.word	0x0800a2fd
 800a2c4:	0800a2fd 	.word	0x0800a2fd
 800a2c8:	0800a2fd 	.word	0x0800a2fd
 800a2cc:	0800a2fd 	.word	0x0800a2fd
 800a2d0:	0800a2fd 	.word	0x0800a2fd
 800a2d4:	0800a303 	.word	0x0800a303
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	2101      	movs	r1, #1
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f001 fc18 	bl	800bb14 <RCCEx_PLL2_Config>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2e8:	e00c      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3324      	adds	r3, #36	; 0x24
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f001 fcc1 	bl	800bc78 <RCCEx_PLL3_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2fa:	e003      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a300:	e000      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a302:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a304:	7dfb      	ldrb	r3, [r7, #23]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d109      	bne.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a30a:	4b24      	ldr	r3, [pc, #144]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a316:	4921      	ldr	r1, [pc, #132]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	654b      	str	r3, [r1, #84]	; 0x54
 800a31c:	e001      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d03e      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a332:	2b05      	cmp	r3, #5
 800a334:	d820      	bhi.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a336:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a37f 	.word	0x0800a37f
 800a340:	0800a355 	.word	0x0800a355
 800a344:	0800a367 	.word	0x0800a367
 800a348:	0800a37f 	.word	0x0800a37f
 800a34c:	0800a37f 	.word	0x0800a37f
 800a350:	0800a37f 	.word	0x0800a37f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3304      	adds	r3, #4
 800a358:	2101      	movs	r1, #1
 800a35a:	4618      	mov	r0, r3
 800a35c:	f001 fbda 	bl	800bb14 <RCCEx_PLL2_Config>
 800a360:	4603      	mov	r3, r0
 800a362:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a364:	e00c      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	3324      	adds	r3, #36	; 0x24
 800a36a:	2101      	movs	r1, #1
 800a36c:	4618      	mov	r0, r3
 800a36e:	f001 fc83 	bl	800bc78 <RCCEx_PLL3_Config>
 800a372:	4603      	mov	r3, r0
 800a374:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a376:	e003      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	75fb      	strb	r3, [r7, #23]
      break;
 800a37c:	e000      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a37e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a380:	7dfb      	ldrb	r3, [r7, #23]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d110      	bne.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a386:	4b05      	ldr	r3, [pc, #20]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a38a:	f023 0207 	bic.w	r2, r3, #7
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a392:	4902      	ldr	r1, [pc, #8]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a394:	4313      	orrs	r3, r2
 800a396:	654b      	str	r3, [r1, #84]	; 0x54
 800a398:	e008      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a39a:	bf00      	nop
 800a39c:	58024400 	.word	0x58024400
 800a3a0:	58024800 	.word	0x58024800
 800a3a4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 0304 	and.w	r3, r3, #4
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d039      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3be:	2b05      	cmp	r3, #5
 800a3c0:	d820      	bhi.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a3c2:	a201      	add	r2, pc, #4	; (adr r2, 800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a40b 	.word	0x0800a40b
 800a3cc:	0800a3e1 	.word	0x0800a3e1
 800a3d0:	0800a3f3 	.word	0x0800a3f3
 800a3d4:	0800a40b 	.word	0x0800a40b
 800a3d8:	0800a40b 	.word	0x0800a40b
 800a3dc:	0800a40b 	.word	0x0800a40b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 fb94 	bl	800bb14 <RCCEx_PLL2_Config>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a3f0:	e00c      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3324      	adds	r3, #36	; 0x24
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f001 fc3d 	bl	800bc78 <RCCEx_PLL3_Config>
 800a3fe:	4603      	mov	r3, r0
 800a400:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a402:	e003      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	75fb      	strb	r3, [r7, #23]
      break;
 800a408:	e000      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a40a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10a      	bne.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a412:	4bb7      	ldr	r3, [pc, #732]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a416:	f023 0207 	bic.w	r2, r3, #7
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a420:	49b3      	ldr	r1, [pc, #716]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a422:	4313      	orrs	r3, r2
 800a424:	658b      	str	r3, [r1, #88]	; 0x58
 800a426:	e001      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 0320 	and.w	r3, r3, #32
 800a434:	2b00      	cmp	r3, #0
 800a436:	d04b      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a43e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a442:	d02e      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a448:	d828      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44e:	d02a      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a454:	d822      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a45a:	d026      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a45c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a460:	d81c      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a466:	d010      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a46c:	d816      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d01d      	beq.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a476:	d111      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3304      	adds	r3, #4
 800a47c:	2100      	movs	r1, #0
 800a47e:	4618      	mov	r0, r3
 800a480:	f001 fb48 	bl	800bb14 <RCCEx_PLL2_Config>
 800a484:	4603      	mov	r3, r0
 800a486:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a488:	e012      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3324      	adds	r3, #36	; 0x24
 800a48e:	2102      	movs	r1, #2
 800a490:	4618      	mov	r0, r3
 800a492:	f001 fbf1 	bl	800bc78 <RCCEx_PLL3_Config>
 800a496:	4603      	mov	r3, r0
 800a498:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a49a:	e009      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
      break;
 800a4a0:	e006      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a4a2:	bf00      	nop
 800a4a4:	e004      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a4a6:	bf00      	nop
 800a4a8:	e002      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a4aa:	bf00      	nop
 800a4ac:	e000      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a4ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4b0:	7dfb      	ldrb	r3, [r7, #23]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10a      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4b6:	4b8e      	ldr	r3, [pc, #568]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c4:	498a      	ldr	r1, [pc, #552]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	654b      	str	r3, [r1, #84]	; 0x54
 800a4ca:	e001      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d04b      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4e6:	d02e      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a4e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4ec:	d828      	bhi.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f2:	d02a      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a4f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f8:	d822      	bhi.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a4fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4fe:	d026      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a500:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a504:	d81c      	bhi.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a50a:	d010      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a50c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a510:	d816      	bhi.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a512:	2b00      	cmp	r3, #0
 800a514:	d01d      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a51a:	d111      	bne.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3304      	adds	r3, #4
 800a520:	2100      	movs	r1, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f001 faf6 	bl	800bb14 <RCCEx_PLL2_Config>
 800a528:	4603      	mov	r3, r0
 800a52a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a52c:	e012      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3324      	adds	r3, #36	; 0x24
 800a532:	2102      	movs	r1, #2
 800a534:	4618      	mov	r0, r3
 800a536:	f001 fb9f 	bl	800bc78 <RCCEx_PLL3_Config>
 800a53a:	4603      	mov	r3, r0
 800a53c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a53e:	e009      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	75fb      	strb	r3, [r7, #23]
      break;
 800a544:	e006      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a546:	bf00      	nop
 800a548:	e004      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a54a:	bf00      	nop
 800a54c:	e002      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a54e:	bf00      	nop
 800a550:	e000      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a552:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10a      	bne.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a55a:	4b65      	ldr	r3, [pc, #404]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a568:	4961      	ldr	r1, [pc, #388]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	658b      	str	r3, [r1, #88]	; 0x58
 800a56e:	e001      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a570:	7dfb      	ldrb	r3, [r7, #23]
 800a572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d04b      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a586:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a58a:	d02e      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a58c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a590:	d828      	bhi.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a596:	d02a      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a59c:	d822      	bhi.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a59e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5a2:	d026      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a5a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5a8:	d81c      	bhi.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a5aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5ae:	d010      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a5b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5b4:	d816      	bhi.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01d      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a5ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5be:	d111      	bne.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f001 faa4 	bl	800bb14 <RCCEx_PLL2_Config>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5d0:	e012      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	3324      	adds	r3, #36	; 0x24
 800a5d6:	2102      	movs	r1, #2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 fb4d 	bl	800bc78 <RCCEx_PLL3_Config>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5e2:	e009      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5e8:	e006      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a5ea:	bf00      	nop
 800a5ec:	e004      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a5ee:	bf00      	nop
 800a5f0:	e002      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a5f2:	bf00      	nop
 800a5f4:	e000      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a5f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10a      	bne.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a5fe:	4b3c      	ldr	r3, [pc, #240]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a60c:	4938      	ldr	r1, [pc, #224]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	658b      	str	r3, [r1, #88]	; 0x58
 800a612:	e001      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 0308 	and.w	r3, r3, #8
 800a620:	2b00      	cmp	r3, #0
 800a622:	d01a      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62e:	d10a      	bne.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3324      	adds	r3, #36	; 0x24
 800a634:	2102      	movs	r1, #2
 800a636:	4618      	mov	r0, r3
 800a638:	f001 fb1e 	bl	800bc78 <RCCEx_PLL3_Config>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a646:	4b2a      	ldr	r3, [pc, #168]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a654:	4926      	ldr	r1, [pc, #152]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a656:	4313      	orrs	r3, r2
 800a658:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0310 	and.w	r3, r3, #16
 800a662:	2b00      	cmp	r3, #0
 800a664:	d01a      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a66c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a670:	d10a      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3324      	adds	r3, #36	; 0x24
 800a676:	2102      	movs	r1, #2
 800a678:	4618      	mov	r0, r3
 800a67a:	f001 fafd 	bl	800bc78 <RCCEx_PLL3_Config>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a688:	4b19      	ldr	r3, [pc, #100]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a68a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a68c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a696:	4916      	ldr	r1, [pc, #88]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a698:	4313      	orrs	r3, r2
 800a69a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d036      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a6ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6b2:	d01f      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a6b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6b8:	d817      	bhi.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a6be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6c2:	d009      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a6c4:	e011      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 fa21 	bl	800bb14 <RCCEx_PLL2_Config>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6d6:	e00e      	b.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3324      	adds	r3, #36	; 0x24
 800a6dc:	2102      	movs	r1, #2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f001 faca 	bl	800bc78 <RCCEx_PLL3_Config>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6e8:	e005      	b.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ee:	e002      	b.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a6f0:	58024400 	.word	0x58024400
      break;
 800a6f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10a      	bne.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6fc:	4b93      	ldr	r3, [pc, #588]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a6fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a70a:	4990      	ldr	r1, [pc, #576]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a70c:	4313      	orrs	r3, r2
 800a70e:	658b      	str	r3, [r1, #88]	; 0x58
 800a710:	e001      	b.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a712:	7dfb      	ldrb	r3, [r7, #23]
 800a714:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d033      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a728:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a72c:	d01c      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a72e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a732:	d816      	bhi.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a738:	d003      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a73a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a73e:	d007      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a740:	e00f      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a742:	4b82      	ldr	r3, [pc, #520]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	4a81      	ldr	r2, [pc, #516]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a74c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a74e:	e00c      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3324      	adds	r3, #36	; 0x24
 800a754:	2101      	movs	r1, #1
 800a756:	4618      	mov	r0, r3
 800a758:	f001 fa8e 	bl	800bc78 <RCCEx_PLL3_Config>
 800a75c:	4603      	mov	r3, r0
 800a75e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a760:	e003      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	75fb      	strb	r3, [r7, #23]
      break;
 800a766:	e000      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10a      	bne.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a770:	4b76      	ldr	r3, [pc, #472]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a774:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a77e:	4973      	ldr	r1, [pc, #460]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a780:	4313      	orrs	r3, r2
 800a782:	654b      	str	r3, [r1, #84]	; 0x54
 800a784:	e001      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a786:	7dfb      	ldrb	r3, [r7, #23]
 800a788:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d029      	beq.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800a79e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a2:	d007      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800a7a4:	e00f      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7a6:	4b69      	ldr	r3, [pc, #420]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	4a68      	ldr	r2, [pc, #416]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7b2:	e00b      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	2102      	movs	r1, #2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f001 f9aa 	bl	800bb14 <RCCEx_PLL2_Config>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7c4:	e002      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7cc:	7dfb      	ldrb	r3, [r7, #23]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d109      	bne.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7d2:	4b5e      	ldr	r3, [pc, #376]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7de:	495b      	ldr	r1, [pc, #364]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a7e4:	e001      	b.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
 800a7e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00a      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	3324      	adds	r3, #36	; 0x24
 800a7fa:	2102      	movs	r1, #2
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f001 fa3b 	bl	800bc78 <RCCEx_PLL3_Config>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d030      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a81c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a820:	d017      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a826:	d811      	bhi.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a82c:	d013      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a82e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a832:	d80b      	bhi.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a834:	2b00      	cmp	r3, #0
 800a836:	d010      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a83c:	d106      	bne.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a83e:	4b43      	ldr	r3, [pc, #268]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a842:	4a42      	ldr	r2, [pc, #264]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a848:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a84a:	e007      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	75fb      	strb	r3, [r7, #23]
      break;
 800a850:	e004      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a852:	bf00      	nop
 800a854:	e002      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a856:	bf00      	nop
 800a858:	e000      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a85a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a85c:	7dfb      	ldrb	r3, [r7, #23]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d109      	bne.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a862:	4b3a      	ldr	r3, [pc, #232]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a866:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a86e:	4937      	ldr	r1, [pc, #220]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a870:	4313      	orrs	r3, r2
 800a872:	654b      	str	r3, [r1, #84]	; 0x54
 800a874:	e001      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d008      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a886:	4b31      	ldr	r3, [pc, #196]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a88a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a892:	492e      	ldr	r1, [pc, #184]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a894:	4313      	orrs	r3, r2
 800a896:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d009      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a8a4:	4b29      	ldr	r3, [pc, #164]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a8b2:	4926      	ldr	r1, [pc, #152]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d008      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8c4:	4b21      	ldr	r3, [pc, #132]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8d0:	491e      	ldr	r1, [pc, #120]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00d      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8e2:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	4a19      	ldr	r2, [pc, #100]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8ec:	6113      	str	r3, [r2, #16]
 800a8ee:	4b17      	ldr	r3, [pc, #92]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8f0:	691a      	ldr	r2, [r3, #16]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a8f8:	4914      	ldr	r1, [pc, #80]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	da08      	bge.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a906:	4b11      	ldr	r3, [pc, #68]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a90a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a912:	490e      	ldr	r1, [pc, #56]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a914:	4313      	orrs	r3, r2
 800a916:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a920:	2b00      	cmp	r3, #0
 800a922:	d009      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a924:	4b09      	ldr	r3, [pc, #36]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a932:	4906      	ldr	r1, [pc, #24]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a934:	4313      	orrs	r3, r2
 800a936:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a938:	7dbb      	ldrb	r3, [r7, #22]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	e000      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
}
 800a944:	4618      	mov	r0, r3
 800a946:	3718      	adds	r7, #24
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	58024400 	.word	0x58024400

0800a950 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b090      	sub	sp, #64	; 0x40
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a95e:	f040 8095 	bne.w	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a962:	4bae      	ldr	r3, [pc, #696]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	633b      	str	r3, [r7, #48]	; 0x30
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	2b04      	cmp	r3, #4
 800a970:	f200 8088 	bhi.w	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a974:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97a:	bf00      	nop
 800a97c:	0800a991 	.word	0x0800a991
 800a980:	0800a9b9 	.word	0x0800a9b9
 800a984:	0800a9e1 	.word	0x0800a9e1
 800a988:	0800aa7d 	.word	0x0800aa7d
 800a98c:	0800aa09 	.word	0x0800aa09

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a990:	4ba2      	ldr	r3, [pc, #648]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a99c:	d108      	bne.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a99e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 ff64 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9ac:	f000 bc95 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9b4:	f000 bc91 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9b8:	4b98      	ldr	r3, [pc, #608]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9c4:	d108      	bne.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9c6:	f107 0318 	add.w	r3, r7, #24
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fca8 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9d4:	f000 bc81 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9dc:	f000 bc7d 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9e0:	4b8e      	ldr	r3, [pc, #568]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9ec:	d108      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ee:	f107 030c 	add.w	r3, r7, #12
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fde8 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9fc:	f000 bc6d 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa04:	f000 bc69 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa08:	4b84      	ldr	r3, [pc, #528]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa10:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa12:	4b82      	ldr	r3, [pc, #520]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d10c      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d109      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa24:	4b7d      	ldr	r3, [pc, #500]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	08db      	lsrs	r3, r3, #3
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	4a7c      	ldr	r2, [pc, #496]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
 800aa34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa36:	e01f      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa38:	4b78      	ldr	r3, [pc, #480]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa44:	d106      	bne.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa4c:	d102      	bne.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa4e:	4b75      	ldr	r3, [pc, #468]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800aa50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa52:	e011      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa54:	4b71      	ldr	r3, [pc, #452]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa60:	d106      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa68:	d102      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa6a:	4b6f      	ldr	r3, [pc, #444]	; (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800aa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa6e:	e003      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa74:	f000 bc31 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa78:	f000 bc2f 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa7c:	4b6b      	ldr	r3, [pc, #428]	; (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800aa7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa80:	f000 bc2b 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa88:	f000 bc27 	b.w	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa92:	f040 8095 	bne.w	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800aa96:	4b61      	ldr	r3, [pc, #388]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aa98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa9a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800aa9e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa6:	d04d      	beq.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaae:	f200 8084 	bhi.w	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	2bc0      	cmp	r3, #192	; 0xc0
 800aab6:	d07d      	beq.n	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaba:	2bc0      	cmp	r3, #192	; 0xc0
 800aabc:	d87d      	bhi.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	2b80      	cmp	r3, #128	; 0x80
 800aac2:	d02d      	beq.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	2b80      	cmp	r3, #128	; 0x80
 800aac8:	d877      	bhi.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	2b40      	cmp	r3, #64	; 0x40
 800aad4:	d012      	beq.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800aad6:	e070      	b.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aad8:	4b50      	ldr	r3, [pc, #320]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aae4:	d107      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fec0 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaf4:	e3f1      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aafa:	e3ee      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aafc:	4b47      	ldr	r3, [pc, #284]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab08:	d107      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab0a:	f107 0318 	add.w	r3, r7, #24
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 fc06 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab18:	e3df      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab1e:	e3dc      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab20:	4b3e      	ldr	r3, [pc, #248]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab2c:	d107      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab2e:	f107 030c 	add.w	r3, r7, #12
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 fd48 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab3c:	e3cd      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab42:	e3ca      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab44:	4b35      	ldr	r3, [pc, #212]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab4c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab4e:	4b33      	ldr	r3, [pc, #204]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0304 	and.w	r3, r3, #4
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	d10c      	bne.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800ab5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d109      	bne.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab60:	4b2e      	ldr	r3, [pc, #184]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	08db      	lsrs	r3, r3, #3
 800ab66:	f003 0303 	and.w	r3, r3, #3
 800ab6a:	4a2d      	ldr	r2, [pc, #180]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800ab6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab72:	e01e      	b.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab74:	4b29      	ldr	r3, [pc, #164]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab80:	d106      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800ab82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab88:	d102      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab8a:	4b26      	ldr	r3, [pc, #152]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800ab8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8e:	e010      	b.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab90:	4b22      	ldr	r3, [pc, #136]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab9c:	d106      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aba4:	d102      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aba6:	4b20      	ldr	r3, [pc, #128]	; (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800aba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abaa:	e002      	b.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800abb0:	e393      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abb2:	e392      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800abb4:	4b1d      	ldr	r3, [pc, #116]	; (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800abb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abb8:	e38f      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abbe:	e38c      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abc6:	f040 80a7 	bne.w	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800abca:	4b14      	ldr	r3, [pc, #80]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800abcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800abd2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abda:	d05f      	beq.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abe2:	f200 8096 	bhi.w	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abec:	f000 808e 	beq.w	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abf6:	f200 808c 	bhi.w	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac00:	d03a      	beq.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac08:	f200 8083 	bhi.w	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00e      	beq.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac18:	d01c      	beq.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800ac1a:	e07a      	b.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ac1c:	58024400 	.word	0x58024400
 800ac20:	03d09000 	.word	0x03d09000
 800ac24:	003d0900 	.word	0x003d0900
 800ac28:	02dc6c00 	.word	0x02dc6c00
 800ac2c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac30:	4baa      	ldr	r3, [pc, #680]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac3c:	d107      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 fe14 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac4c:	e345      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac52:	e342      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac54:	4ba1      	ldr	r3, [pc, #644]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac60:	d107      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac62:	f107 0318 	add.w	r3, r7, #24
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 fb5a 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac70:	e333      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac76:	e330      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac78:	4b98      	ldr	r3, [pc, #608]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac84:	d107      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac86:	f107 030c 	add.w	r3, r7, #12
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 fc9c 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac94:	e321      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac9a:	e31e      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac9c:	4b8f      	ldr	r3, [pc, #572]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ac9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aca4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aca6:	4b8d      	ldr	r3, [pc, #564]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 0304 	and.w	r3, r3, #4
 800acae:	2b04      	cmp	r3, #4
 800acb0:	d10c      	bne.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800acb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d109      	bne.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acb8:	4b88      	ldr	r3, [pc, #544]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	08db      	lsrs	r3, r3, #3
 800acbe:	f003 0303 	and.w	r3, r3, #3
 800acc2:	4a87      	ldr	r2, [pc, #540]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800acc4:	fa22 f303 	lsr.w	r3, r2, r3
 800acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acca:	e01e      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800accc:	4b83      	ldr	r3, [pc, #524]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acd8:	d106      	bne.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800acda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ace0:	d102      	bne.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ace2:	4b80      	ldr	r3, [pc, #512]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace6:	e010      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ace8:	4b7c      	ldr	r3, [pc, #496]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acf4:	d106      	bne.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800acf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acfc:	d102      	bne.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800acfe:	4b7a      	ldr	r3, [pc, #488]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ad00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad02:	e002      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ad08:	e2e7      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad0a:	e2e6      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ad0c:	4b77      	ldr	r3, [pc, #476]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad10:	e2e3      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad16:	e2e0      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad1e:	f040 809c 	bne.w	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ad22:	4b6e      	ldr	r3, [pc, #440]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ad24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad26:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ad2a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad32:	d054      	beq.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800ad34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad3a:	f200 808b 	bhi.w	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad44:	f000 8083 	beq.w	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad4e:	f200 8081 	bhi.w	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad58:	d02f      	beq.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad60:	d878      	bhi.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d004      	beq.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad6e:	d012      	beq.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800ad70:	e070      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad72:	4b5a      	ldr	r3, [pc, #360]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad7e:	d107      	bne.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 fd73 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad8e:	e2a4      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad94:	e2a1      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad96:	4b51      	ldr	r3, [pc, #324]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ada2:	d107      	bne.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada4:	f107 0318 	add.w	r3, r7, #24
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 fab9 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800adb2:	e292      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adb8:	e28f      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adba:	4b48      	ldr	r3, [pc, #288]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adc6:	d107      	bne.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adc8:	f107 030c 	add.w	r3, r7, #12
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fbfb 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800add6:	e280      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800add8:	2300      	movs	r3, #0
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800addc:	e27d      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800adde:	4b3f      	ldr	r3, [pc, #252]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ade0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ade6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ade8:	4b3c      	ldr	r3, [pc, #240]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0304 	and.w	r3, r3, #4
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	d10c      	bne.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800adf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d109      	bne.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adfa:	4b38      	ldr	r3, [pc, #224]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	08db      	lsrs	r3, r3, #3
 800ae00:	f003 0303 	and.w	r3, r3, #3
 800ae04:	4a36      	ldr	r2, [pc, #216]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ae06:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae0c:	e01e      	b.n	800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae0e:	4b33      	ldr	r3, [pc, #204]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae1a:	d106      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae22:	d102      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae24:	4b2f      	ldr	r3, [pc, #188]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ae26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae28:	e010      	b.n	800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae2a:	4b2c      	ldr	r3, [pc, #176]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae36:	d106      	bne.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800ae38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae3e:	d102      	bne.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ae40:	4b29      	ldr	r3, [pc, #164]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae44:	e002      	b.n	800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ae46:	2300      	movs	r3, #0
 800ae48:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ae4a:	e246      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae4c:	e245      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae4e:	4b27      	ldr	r3, [pc, #156]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae52:	e242      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae58:	e23f      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae60:	f040 80a8 	bne.w	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ae64:	4b1d      	ldr	r3, [pc, #116]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ae66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae68:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ae6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae74:	d060      	beq.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae7c:	f200 8097 	bhi.w	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae86:	f000 808f 	beq.w	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae90:	f200 808d 	bhi.w	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae9a:	d03b      	beq.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800ae9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aea2:	f200 8084 	bhi.w	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d004      	beq.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800aeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeb2:	d01d      	beq.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800aeb4:	e07b      	b.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aeb6:	4b09      	ldr	r3, [pc, #36]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aec2:	d107      	bne.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 fcd1 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aed2:	e202      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aed8:	e1ff      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aeda:	bf00      	nop
 800aedc:	58024400 	.word	0x58024400
 800aee0:	03d09000 	.word	0x03d09000
 800aee4:	003d0900 	.word	0x003d0900
 800aee8:	02dc6c00 	.word	0x02dc6c00
 800aeec:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aef0:	4ba3      	ldr	r3, [pc, #652]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aefc:	d107      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aefe:	f107 0318 	add.w	r3, r7, #24
 800af02:	4618      	mov	r0, r3
 800af04:	f000 fa0c 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af0c:	e1e5      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af12:	e1e2      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af14:	4b9a      	ldr	r3, [pc, #616]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af20:	d107      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af22:	f107 030c 	add.w	r3, r7, #12
 800af26:	4618      	mov	r0, r3
 800af28:	f000 fb4e 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af30:	e1d3      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af36:	e1d0      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af38:	4b91      	ldr	r3, [pc, #580]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af40:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af42:	4b8f      	ldr	r3, [pc, #572]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0304 	and.w	r3, r3, #4
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	d10c      	bne.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800af4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af50:	2b00      	cmp	r3, #0
 800af52:	d109      	bne.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af54:	4b8a      	ldr	r3, [pc, #552]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	08db      	lsrs	r3, r3, #3
 800af5a:	f003 0303 	and.w	r3, r3, #3
 800af5e:	4a89      	ldr	r2, [pc, #548]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800af60:	fa22 f303 	lsr.w	r3, r2, r3
 800af64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af66:	e01e      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af68:	4b85      	ldr	r3, [pc, #532]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af74:	d106      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800af76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af7c:	d102      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af7e:	4b82      	ldr	r3, [pc, #520]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800af80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af82:	e010      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af84:	4b7e      	ldr	r3, [pc, #504]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af90:	d106      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800af92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af98:	d102      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af9a:	4b7c      	ldr	r3, [pc, #496]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af9e:	e002      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800afa4:	e199      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800afa6:	e198      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800afa8:	4b79      	ldr	r3, [pc, #484]	; (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afac:	e195      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afb2:	e192      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800afba:	d173      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800afbc:	4b70      	ldr	r3, [pc, #448]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800afbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800afc4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800afc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afcc:	d02f      	beq.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800afce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afd4:	d863      	bhi.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800afd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d004      	beq.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800afdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afe2:	d012      	beq.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800afe4:	e05b      	b.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afe6:	4b66      	ldr	r3, [pc, #408]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aff2:	d107      	bne.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aff4:	f107 0318 	add.w	r3, r7, #24
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 f991 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b002:	e16a      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b008:	e167      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b00a:	4b5d      	ldr	r3, [pc, #372]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b016:	d107      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b018:	f107 030c 	add.w	r3, r7, #12
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fad3 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b026:	e158      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b02c:	e155      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b02e:	4b54      	ldr	r3, [pc, #336]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b036:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b038:	4b51      	ldr	r3, [pc, #324]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b04      	cmp	r3, #4
 800b042:	d10c      	bne.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b046:	2b00      	cmp	r3, #0
 800b048:	d109      	bne.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b04a:	4b4d      	ldr	r3, [pc, #308]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	08db      	lsrs	r3, r3, #3
 800b050:	f003 0303 	and.w	r3, r3, #3
 800b054:	4a4b      	ldr	r2, [pc, #300]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b056:	fa22 f303 	lsr.w	r3, r2, r3
 800b05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b05c:	e01e      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b05e:	4b48      	ldr	r3, [pc, #288]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b06a:	d106      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b06e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b072:	d102      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b074:	4b44      	ldr	r3, [pc, #272]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b076:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b078:	e010      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b07a:	4b41      	ldr	r3, [pc, #260]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b086:	d106      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b08e:	d102      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b090:	4b3e      	ldr	r3, [pc, #248]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b094:	e002      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b09a:	e11e      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b09c:	e11d      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0a2:	e11a      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0aa:	d133      	bne.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b0ac:	4b34      	ldr	r3, [pc, #208]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b0ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d004      	beq.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c2:	d012      	beq.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b0c4:	e023      	b.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0c6:	4b2e      	ldr	r3, [pc, #184]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0d2:	d107      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f000 fbc9 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b0e2:	e0fa      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0e8:	e0f7      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0ea:	4b25      	ldr	r3, [pc, #148]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0f6:	d107      	bne.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0f8:	f107 0318 	add.w	r3, r7, #24
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 f90f 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b106:	e0e8      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b10c:	e0e5      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b112:	e0e2      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b11a:	f040 808f 	bne.w	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b11e:	4b18      	ldr	r3, [pc, #96]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b122:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b126:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b12e:	d075      	beq.n	800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b136:	d87e      	bhi.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13e:	d060      	beq.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b146:	d876      	bhi.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b14e:	d045      	beq.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b156:	d86e      	bhi.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b15e:	d02b      	beq.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b166:	d866      	bhi.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d004      	beq.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b174:	d00e      	beq.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b176:	e05e      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b178:	f000 f8bc 	bl	800b2f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b17c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b17e:	e0ac      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b180:	58024400 	.word	0x58024400
 800b184:	03d09000 	.word	0x03d09000
 800b188:	003d0900 	.word	0x003d0900
 800b18c:	02dc6c00 	.word	0x02dc6c00
 800b190:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b194:	4b53      	ldr	r3, [pc, #332]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b19c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1a0:	d107      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1a2:	f107 0318 	add.w	r3, r7, #24
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 f8ba 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b1b0:	e093      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1b6:	e090      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1b8:	4b4a      	ldr	r3, [pc, #296]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c4:	d107      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1c6:	f107 030c 	add.w	r3, r7, #12
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 f9fc 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b1d4:	e081      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1da:	e07e      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1dc:	4b41      	ldr	r3, [pc, #260]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	d109      	bne.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1e8:	4b3e      	ldr	r3, [pc, #248]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	08db      	lsrs	r3, r3, #3
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	4a3d      	ldr	r2, [pc, #244]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b1f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b1fa:	e06e      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b200:	e06b      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b202:	4b38      	ldr	r3, [pc, #224]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b20e:	d102      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800b210:	4b36      	ldr	r3, [pc, #216]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b212:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b214:	e061      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b21a:	e05e      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b21c:	4b31      	ldr	r3, [pc, #196]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b228:	d102      	bne.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800b22a:	4b31      	ldr	r3, [pc, #196]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b22e:	e054      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b234:	e051      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b23a:	e04e      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b242:	d148      	bne.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b244:	4b27      	ldr	r3, [pc, #156]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b248:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b24c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b254:	d02a      	beq.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b25c:	d838      	bhi.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	2b00      	cmp	r3, #0
 800b262:	d004      	beq.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b26a:	d00d      	beq.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b26c:	e030      	b.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b26e:	4b1d      	ldr	r3, [pc, #116]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b27a:	d102      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800b27c:	4b1c      	ldr	r3, [pc, #112]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b27e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b280:	e02b      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b286:	e028      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b288:	4b16      	ldr	r3, [pc, #88]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b294:	d107      	bne.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fae8 	bl	800b870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b2a4:	e019      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2aa:	e016      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2ac:	4b0d      	ldr	r3, [pc, #52]	; (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2b8:	d107      	bne.n	800b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2ba:	f107 0318 	add.w	r3, r7, #24
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 f82e 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b2c8:	e007      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2ce:	e004      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2d4:	e001      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3740      	adds	r7, #64	; 0x40
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	58024400 	.word	0x58024400
 800b2e8:	03d09000 	.word	0x03d09000
 800b2ec:	003d0900 	.word	0x003d0900
 800b2f0:	02dc6c00 	.word	0x02dc6c00

0800b2f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b2f8:	f7fe fb8e 	bl	8009a18 <HAL_RCC_GetHCLKFreq>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	4b06      	ldr	r3, [pc, #24]	; (800b318 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b300:	6a1b      	ldr	r3, [r3, #32]
 800b302:	091b      	lsrs	r3, r3, #4
 800b304:	f003 0307 	and.w	r3, r3, #7
 800b308:	4904      	ldr	r1, [pc, #16]	; (800b31c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b30a:	5ccb      	ldrb	r3, [r1, r3]
 800b30c:	f003 031f 	and.w	r3, r3, #31
 800b310:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b314:	4618      	mov	r0, r3
 800b316:	bd80      	pop	{r7, pc}
 800b318:	58024400 	.word	0x58024400
 800b31c:	08010bd0 	.word	0x08010bd0

0800b320 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b320:	b480      	push	{r7}
 800b322:	b089      	sub	sp, #36	; 0x24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b328:	4ba1      	ldr	r3, [pc, #644]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32c:	f003 0303 	and.w	r3, r3, #3
 800b330:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b332:	4b9f      	ldr	r3, [pc, #636]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b336:	0b1b      	lsrs	r3, r3, #12
 800b338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b33c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b33e:	4b9c      	ldr	r3, [pc, #624]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b342:	091b      	lsrs	r3, r3, #4
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b34a:	4b99      	ldr	r3, [pc, #612]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34e:	08db      	lsrs	r3, r3, #3
 800b350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	fb02 f303 	mul.w	r3, r2, r3
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 8111 	beq.w	800b590 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b02      	cmp	r3, #2
 800b372:	f000 8083 	beq.w	800b47c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	f200 80a1 	bhi.w	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d003      	beq.n	800b38c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d056      	beq.n	800b438 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b38a:	e099      	b.n	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b38c:	4b88      	ldr	r3, [pc, #544]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0320 	and.w	r3, r3, #32
 800b394:	2b00      	cmp	r3, #0
 800b396:	d02d      	beq.n	800b3f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b398:	4b85      	ldr	r3, [pc, #532]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	08db      	lsrs	r3, r3, #3
 800b39e:	f003 0303 	and.w	r3, r3, #3
 800b3a2:	4a84      	ldr	r2, [pc, #528]	; (800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	ee07 3a90 	vmov	s15, r3
 800b3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c2:	4b7b      	ldr	r3, [pc, #492]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b3f2:	e087      	b.n	800b504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b5bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b406:	4b6a      	ldr	r3, [pc, #424]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b416:	ed97 6a03 	vldr	s12, [r7, #12]
 800b41a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b436:	e065      	b.n	800b504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	ee07 3a90 	vmov	s15, r3
 800b43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b442:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44a:	4b59      	ldr	r3, [pc, #356]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b45e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b47a:	e043      	b.n	800b504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b486:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48e:	4b48      	ldr	r3, [pc, #288]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b496:	ee07 3a90 	vmov	s15, r3
 800b49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4be:	e021      	b.n	800b504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	ee07 3a90 	vmov	s15, r3
 800b4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4d2:	4b37      	ldr	r3, [pc, #220]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b502:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b504:	4b2a      	ldr	r3, [pc, #168]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b508:	0a5b      	lsrs	r3, r3, #9
 800b50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b51a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b51e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b52a:	ee17 2a90 	vmov	r2, s15
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b532:	4b1f      	ldr	r3, [pc, #124]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b536:	0c1b      	lsrs	r3, r3, #16
 800b538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b54c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b558:	ee17 2a90 	vmov	r2, s15
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b560:	4b13      	ldr	r3, [pc, #76]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b564:	0e1b      	lsrs	r3, r3, #24
 800b566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b57a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b57e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b586:	ee17 2a90 	vmov	r2, s15
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b58e:	e008      	b.n	800b5a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	609a      	str	r2, [r3, #8]
}
 800b5a2:	bf00      	nop
 800b5a4:	3724      	adds	r7, #36	; 0x24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	58024400 	.word	0x58024400
 800b5b4:	03d09000 	.word	0x03d09000
 800b5b8:	46000000 	.word	0x46000000
 800b5bc:	4c742400 	.word	0x4c742400
 800b5c0:	4a742400 	.word	0x4a742400
 800b5c4:	4c371b00 	.word	0x4c371b00

0800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b089      	sub	sp, #36	; 0x24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5d0:	4ba1      	ldr	r3, [pc, #644]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d4:	f003 0303 	and.w	r3, r3, #3
 800b5d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b5da:	4b9f      	ldr	r3, [pc, #636]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5de:	0d1b      	lsrs	r3, r3, #20
 800b5e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b5e6:	4b9c      	ldr	r3, [pc, #624]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ea:	0a1b      	lsrs	r3, r3, #8
 800b5ec:	f003 0301 	and.w	r3, r3, #1
 800b5f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b5f2:	4b99      	ldr	r3, [pc, #612]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f6:	08db      	lsrs	r3, r3, #3
 800b5f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	fb02 f303 	mul.w	r3, r2, r3
 800b602:	ee07 3a90 	vmov	s15, r3
 800b606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b60a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	f000 8111 	beq.w	800b838 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	2b02      	cmp	r3, #2
 800b61a:	f000 8083 	beq.w	800b724 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	2b02      	cmp	r3, #2
 800b622:	f200 80a1 	bhi.w	800b768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d056      	beq.n	800b6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b632:	e099      	b.n	800b768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b634:	4b88      	ldr	r3, [pc, #544]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0320 	and.w	r3, r3, #32
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d02d      	beq.n	800b69c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b640:	4b85      	ldr	r3, [pc, #532]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	08db      	lsrs	r3, r3, #3
 800b646:	f003 0303 	and.w	r3, r3, #3
 800b64a:	4a84      	ldr	r2, [pc, #528]	; (800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b64c:	fa22 f303 	lsr.w	r3, r2, r3
 800b650:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	ee07 3a90 	vmov	s15, r3
 800b662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b66a:	4b7b      	ldr	r3, [pc, #492]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b672:	ee07 3a90 	vmov	s15, r3
 800b676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b67a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b67e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b68a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b68e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b692:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b696:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b69a:	e087      	b.n	800b7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	ee07 3a90 	vmov	s15, r3
 800b6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ae:	4b6a      	ldr	r3, [pc, #424]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6de:	e065      	b.n	800b7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f2:	4b59      	ldr	r3, [pc, #356]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fa:	ee07 3a90 	vmov	s15, r3
 800b6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b702:	ed97 6a03 	vldr	s12, [r7, #12]
 800b706:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b71e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b722:	e043      	b.n	800b7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b86c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b736:	4b48      	ldr	r3, [pc, #288]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b746:	ed97 6a03 	vldr	s12, [r7, #12]
 800b74a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b762:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b766:	e021      	b.n	800b7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	ee07 3a90 	vmov	s15, r3
 800b76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b772:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b77a:	4b37      	ldr	r3, [pc, #220]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b78e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b7ac:	4b2a      	ldr	r3, [pc, #168]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b0:	0a5b      	lsrs	r3, r3, #9
 800b7b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b6:	ee07 3a90 	vmov	s15, r3
 800b7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7d2:	ee17 2a90 	vmov	r2, s15
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b7da:	4b1f      	ldr	r3, [pc, #124]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7de:	0c1b      	lsrs	r3, r3, #16
 800b7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7e4:	ee07 3a90 	vmov	s15, r3
 800b7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b800:	ee17 2a90 	vmov	r2, s15
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b808:	4b13      	ldr	r3, [pc, #76]	; (800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80c:	0e1b      	lsrs	r3, r3, #24
 800b80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b812:	ee07 3a90 	vmov	s15, r3
 800b816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b81e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b822:	edd7 6a07 	vldr	s13, [r7, #28]
 800b826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b82a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b82e:	ee17 2a90 	vmov	r2, s15
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b836:	e008      	b.n	800b84a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	609a      	str	r2, [r3, #8]
}
 800b84a:	bf00      	nop
 800b84c:	3724      	adds	r7, #36	; 0x24
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	58024400 	.word	0x58024400
 800b85c:	03d09000 	.word	0x03d09000
 800b860:	46000000 	.word	0x46000000
 800b864:	4c742400 	.word	0x4c742400
 800b868:	4a742400 	.word	0x4a742400
 800b86c:	4c371b00 	.word	0x4c371b00

0800b870 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b870:	b480      	push	{r7}
 800b872:	b089      	sub	sp, #36	; 0x24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b878:	4ba0      	ldr	r3, [pc, #640]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b882:	4b9e      	ldr	r3, [pc, #632]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b886:	091b      	lsrs	r3, r3, #4
 800b888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b88c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b88e:	4b9b      	ldr	r3, [pc, #620]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b898:	4b98      	ldr	r3, [pc, #608]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89c:	08db      	lsrs	r3, r3, #3
 800b89e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	fb02 f303 	mul.w	r3, r2, r3
 800b8a8:	ee07 3a90 	vmov	s15, r3
 800b8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 8111 	beq.w	800bade <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	f000 8083 	beq.w	800b9ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	f200 80a1 	bhi.w	800ba0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d056      	beq.n	800b986 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b8d8:	e099      	b.n	800ba0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8da:	4b88      	ldr	r3, [pc, #544]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f003 0320 	and.w	r3, r3, #32
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d02d      	beq.n	800b942 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b8e6:	4b85      	ldr	r3, [pc, #532]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	08db      	lsrs	r3, r3, #3
 800b8ec:	f003 0303 	and.w	r3, r3, #3
 800b8f0:	4a83      	ldr	r2, [pc, #524]	; (800bb00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b8f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	ee07 3a90 	vmov	s15, r3
 800b8fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	ee07 3a90 	vmov	s15, r3
 800b908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b910:	4b7a      	ldr	r3, [pc, #488]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b918:	ee07 3a90 	vmov	s15, r3
 800b91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b920:	ed97 6a03 	vldr	s12, [r7, #12]
 800b924:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b92c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b93c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b940:	e087      	b.n	800ba52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	ee07 3a90 	vmov	s15, r3
 800b948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b94c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bb08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b954:	4b69      	ldr	r3, [pc, #420]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b95c:	ee07 3a90 	vmov	s15, r3
 800b960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b964:	ed97 6a03 	vldr	s12, [r7, #12]
 800b968:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b96c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b97c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b980:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b984:	e065      	b.n	800ba52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	ee07 3a90 	vmov	s15, r3
 800b98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b990:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bb0c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b998:	4b58      	ldr	r3, [pc, #352]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a0:	ee07 3a90 	vmov	s15, r3
 800b9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9c8:	e043      	b.n	800ba52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	ee07 3a90 	vmov	s15, r3
 800b9d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bb10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b9d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9dc:	4b47      	ldr	r3, [pc, #284]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e4:	ee07 3a90 	vmov	s15, r3
 800b9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba0c:	e021      	b.n	800ba52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	ee07 3a90 	vmov	s15, r3
 800ba14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba18:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bb08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba20:	4b36      	ldr	r3, [pc, #216]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba28:	ee07 3a90 	vmov	s15, r3
 800ba2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba30:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba34:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bb04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba50:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ba52:	4b2a      	ldr	r3, [pc, #168]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba56:	0a5b      	lsrs	r3, r3, #9
 800ba58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba5c:	ee07 3a90 	vmov	s15, r3
 800ba60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba78:	ee17 2a90 	vmov	r2, s15
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800ba80:	4b1e      	ldr	r3, [pc, #120]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba84:	0c1b      	lsrs	r3, r3, #16
 800ba86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba8a:	ee07 3a90 	vmov	s15, r3
 800ba8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa6:	ee17 2a90 	vmov	r2, s15
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800baae:	4b13      	ldr	r3, [pc, #76]	; (800bafc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab2:	0e1b      	lsrs	r3, r3, #24
 800bab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bab8:	ee07 3a90 	vmov	s15, r3
 800babc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bac8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bacc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad4:	ee17 2a90 	vmov	r2, s15
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800badc:	e008      	b.n	800baf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	609a      	str	r2, [r3, #8]
}
 800baf0:	bf00      	nop
 800baf2:	3724      	adds	r7, #36	; 0x24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr
 800bafc:	58024400 	.word	0x58024400
 800bb00:	03d09000 	.word	0x03d09000
 800bb04:	46000000 	.word	0x46000000
 800bb08:	4c742400 	.word	0x4c742400
 800bb0c:	4a742400 	.word	0x4a742400
 800bb10:	4c371b00 	.word	0x4c371b00

0800bb14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb22:	4b53      	ldr	r3, [pc, #332]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb26:	f003 0303 	and.w	r3, r3, #3
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d101      	bne.n	800bb32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e099      	b.n	800bc66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb32:	4b4f      	ldr	r3, [pc, #316]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a4e      	ldr	r2, [pc, #312]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb3e:	f7f8 f94d 	bl	8003ddc <HAL_GetTick>
 800bb42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb44:	e008      	b.n	800bb58 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bb46:	f7f8 f949 	bl	8003ddc <HAL_GetTick>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d901      	bls.n	800bb58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e086      	b.n	800bc66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb58:	4b45      	ldr	r3, [pc, #276]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1f0      	bne.n	800bb46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb64:	4b42      	ldr	r3, [pc, #264]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	031b      	lsls	r3, r3, #12
 800bb72:	493f      	ldr	r1, [pc, #252]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	628b      	str	r3, [r1, #40]	; 0x28
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	025b      	lsls	r3, r3, #9
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	431a      	orrs	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	3b01      	subs	r3, #1
 800bb94:	041b      	lsls	r3, r3, #16
 800bb96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb9a:	431a      	orrs	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	061b      	lsls	r3, r3, #24
 800bba4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bba8:	4931      	ldr	r1, [pc, #196]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbae:	4b30      	ldr	r3, [pc, #192]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	492d      	ldr	r1, [pc, #180]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bbc0:	4b2b      	ldr	r3, [pc, #172]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc4:	f023 0220 	bic.w	r2, r3, #32
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	4928      	ldr	r1, [pc, #160]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bbd2:	4b27      	ldr	r3, [pc, #156]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd6:	4a26      	ldr	r2, [pc, #152]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbd8:	f023 0310 	bic.w	r3, r3, #16
 800bbdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bbde:	4b24      	ldr	r3, [pc, #144]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbe2:	4b24      	ldr	r3, [pc, #144]	; (800bc74 <RCCEx_PLL2_Config+0x160>)
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	69d2      	ldr	r2, [r2, #28]
 800bbea:	00d2      	lsls	r2, r2, #3
 800bbec:	4920      	ldr	r1, [pc, #128]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bbf2:	4b1f      	ldr	r3, [pc, #124]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	4a1e      	ldr	r2, [pc, #120]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bbf8:	f043 0310 	orr.w	r3, r3, #16
 800bbfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d106      	bne.n	800bc12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc04:	4b1a      	ldr	r3, [pc, #104]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc08:	4a19      	ldr	r2, [pc, #100]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc10:	e00f      	b.n	800bc32 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d106      	bne.n	800bc26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc18:	4b15      	ldr	r3, [pc, #84]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1c:	4a14      	ldr	r2, [pc, #80]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc24:	e005      	b.n	800bc32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc26:	4b12      	ldr	r3, [pc, #72]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	4a11      	ldr	r2, [pc, #68]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc32:	4b0f      	ldr	r3, [pc, #60]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a0e      	ldr	r2, [pc, #56]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc3e:	f7f8 f8cd 	bl	8003ddc <HAL_GetTick>
 800bc42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc44:	e008      	b.n	800bc58 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bc46:	f7f8 f8c9 	bl	8003ddc <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d901      	bls.n	800bc58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e006      	b.n	800bc66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc58:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <RCCEx_PLL2_Config+0x15c>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0f0      	beq.n	800bc46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	58024400 	.word	0x58024400
 800bc74:	ffff0007 	.word	0xffff0007

0800bc78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc86:	4b53      	ldr	r3, [pc, #332]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d101      	bne.n	800bc96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e099      	b.n	800bdca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc96:	4b4f      	ldr	r3, [pc, #316]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a4e      	ldr	r2, [pc, #312]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bc9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bca2:	f7f8 f89b 	bl	8003ddc <HAL_GetTick>
 800bca6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bca8:	e008      	b.n	800bcbc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bcaa:	f7f8 f897 	bl	8003ddc <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d901      	bls.n	800bcbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e086      	b.n	800bdca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcbc:	4b45      	ldr	r3, [pc, #276]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1f0      	bne.n	800bcaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bcc8:	4b42      	ldr	r3, [pc, #264]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bcca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bccc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	051b      	lsls	r3, r3, #20
 800bcd6:	493f      	ldr	r1, [pc, #252]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	628b      	str	r3, [r1, #40]	; 0x28
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	025b      	lsls	r3, r3, #9
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	041b      	lsls	r3, r3, #16
 800bcfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	061b      	lsls	r3, r3, #24
 800bd08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd0c:	4931      	ldr	r1, [pc, #196]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd12:	4b30      	ldr	r3, [pc, #192]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	492d      	ldr	r1, [pc, #180]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd20:	4313      	orrs	r3, r2
 800bd22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd24:	4b2b      	ldr	r3, [pc, #172]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	4928      	ldr	r1, [pc, #160]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd32:	4313      	orrs	r3, r2
 800bd34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd36:	4b27      	ldr	r3, [pc, #156]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3a:	4a26      	ldr	r2, [pc, #152]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd42:	4b24      	ldr	r3, [pc, #144]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd46:	4b24      	ldr	r3, [pc, #144]	; (800bdd8 <RCCEx_PLL3_Config+0x160>)
 800bd48:	4013      	ands	r3, r2
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	69d2      	ldr	r2, [r2, #28]
 800bd4e:	00d2      	lsls	r2, r2, #3
 800bd50:	4920      	ldr	r1, [pc, #128]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd56:	4b1f      	ldr	r3, [pc, #124]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5a:	4a1e      	ldr	r2, [pc, #120]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd68:	4b1a      	ldr	r3, [pc, #104]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6c:	4a19      	ldr	r2, [pc, #100]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bd72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd74:	e00f      	b.n	800bd96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d106      	bne.n	800bd8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd7c:	4b15      	ldr	r3, [pc, #84]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd80:	4a14      	ldr	r2, [pc, #80]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bd86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd88:	e005      	b.n	800bd96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bd8a:	4b12      	ldr	r3, [pc, #72]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8e:	4a11      	ldr	r2, [pc, #68]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bd96:	4b0f      	ldr	r3, [pc, #60]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a0e      	ldr	r2, [pc, #56]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bd9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bda0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bda2:	f7f8 f81b 	bl	8003ddc <HAL_GetTick>
 800bda6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bda8:	e008      	b.n	800bdbc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bdaa:	f7f8 f817 	bl	8003ddc <HAL_GetTick>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d901      	bls.n	800bdbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	e006      	b.n	800bdca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdbc:	4b05      	ldr	r3, [pc, #20]	; (800bdd4 <RCCEx_PLL3_Config+0x15c>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d0f0      	beq.n	800bdaa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	58024400 	.word	0x58024400
 800bdd8:	ffff0007 	.word	0xffff0007

0800bddc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e0f1      	b.n	800bfd2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a78      	ldr	r2, [pc, #480]	; (800bfdc <HAL_SPI_Init+0x200>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d00f      	beq.n	800be1e <HAL_SPI_Init+0x42>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a77      	ldr	r2, [pc, #476]	; (800bfe0 <HAL_SPI_Init+0x204>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d00a      	beq.n	800be1e <HAL_SPI_Init+0x42>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a75      	ldr	r2, [pc, #468]	; (800bfe4 <HAL_SPI_Init+0x208>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d005      	beq.n	800be1e <HAL_SPI_Init+0x42>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	2b0f      	cmp	r3, #15
 800be18:	d901      	bls.n	800be1e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e0d9      	b.n	800bfd2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f8e2 	bl	800bfe8 <SPI_GetPacketSize>
 800be24:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a6c      	ldr	r2, [pc, #432]	; (800bfdc <HAL_SPI_Init+0x200>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d00c      	beq.n	800be4a <HAL_SPI_Init+0x6e>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a6a      	ldr	r2, [pc, #424]	; (800bfe0 <HAL_SPI_Init+0x204>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d007      	beq.n	800be4a <HAL_SPI_Init+0x6e>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a69      	ldr	r2, [pc, #420]	; (800bfe4 <HAL_SPI_Init+0x208>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d002      	beq.n	800be4a <HAL_SPI_Init+0x6e>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b08      	cmp	r3, #8
 800be48:	d811      	bhi.n	800be6e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be4e:	4a63      	ldr	r2, [pc, #396]	; (800bfdc <HAL_SPI_Init+0x200>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d009      	beq.n	800be68 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a61      	ldr	r2, [pc, #388]	; (800bfe0 <HAL_SPI_Init+0x204>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d004      	beq.n	800be68 <HAL_SPI_Init+0x8c>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a60      	ldr	r2, [pc, #384]	; (800bfe4 <HAL_SPI_Init+0x208>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d104      	bne.n	800be72 <HAL_SPI_Init+0x96>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b10      	cmp	r3, #16
 800be6c:	d901      	bls.n	800be72 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	e0af      	b.n	800bfd2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7f7 f938 	bl	80030fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2202      	movs	r2, #2
 800be90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f022 0201 	bic.w	r2, r2, #1
 800bea2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800beae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800beb8:	d119      	bne.n	800beee <HAL_SPI_Init+0x112>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bec2:	d103      	bne.n	800becc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d008      	beq.n	800bede <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10c      	bne.n	800beee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bedc:	d107      	bne.n	800beee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800beec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	69da      	ldr	r2, [r3, #28]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef6:	431a      	orrs	r2, r3
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	431a      	orrs	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf00:	ea42 0103 	orr.w	r1, r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68da      	ldr	r2, [r3, #12]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	430a      	orrs	r2, r1
 800bf0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1e:	431a      	orrs	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	431a      	orrs	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	431a      	orrs	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	431a      	orrs	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf42:	431a      	orrs	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	431a      	orrs	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf4e:	ea42 0103 	orr.w	r1, r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d113      	bne.n	800bf8e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f022 0201 	bic.w	r2, r2, #1
 800bf9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00a      	beq.n	800bfc0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	430a      	orrs	r2, r1
 800bfbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	40013000 	.word	0x40013000
 800bfe0:	40003800 	.word	0x40003800
 800bfe4:	40003c00 	.word	0x40003c00

0800bfe8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bff4:	095b      	lsrs	r3, r3, #5
 800bff6:	3301      	adds	r3, #1
 800bff8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	3301      	adds	r3, #1
 800c000:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	3307      	adds	r3, #7
 800c006:	08db      	lsrs	r3, r3, #3
 800c008:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b082      	sub	sp, #8
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	e049      	b.n	800c0c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c036:	b2db      	uxtb	r3, r3
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d106      	bne.n	800c04a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7f7 f9f5 	bl	8003434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2202      	movs	r2, #2
 800c04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	3304      	adds	r3, #4
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f000 ff3b 	bl	800ced8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d001      	beq.n	800c0e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e054      	b.n	800c18e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2202      	movs	r2, #2
 800c0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68da      	ldr	r2, [r3, #12]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f042 0201 	orr.w	r2, r2, #1
 800c0fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a26      	ldr	r2, [pc, #152]	; (800c19c <HAL_TIM_Base_Start_IT+0xd0>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d022      	beq.n	800c14c <HAL_TIM_Base_Start_IT+0x80>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c10e:	d01d      	beq.n	800c14c <HAL_TIM_Base_Start_IT+0x80>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a22      	ldr	r2, [pc, #136]	; (800c1a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d018      	beq.n	800c14c <HAL_TIM_Base_Start_IT+0x80>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a21      	ldr	r2, [pc, #132]	; (800c1a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d013      	beq.n	800c14c <HAL_TIM_Base_Start_IT+0x80>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a1f      	ldr	r2, [pc, #124]	; (800c1a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d00e      	beq.n	800c14c <HAL_TIM_Base_Start_IT+0x80>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a1e      	ldr	r2, [pc, #120]	; (800c1ac <HAL_TIM_Base_Start_IT+0xe0>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d009      	beq.n	800c14c <HAL_TIM_Base_Start_IT+0x80>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a1c      	ldr	r2, [pc, #112]	; (800c1b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d004      	beq.n	800c14c <HAL_TIM_Base_Start_IT+0x80>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a1b      	ldr	r2, [pc, #108]	; (800c1b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d115      	bne.n	800c178 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689a      	ldr	r2, [r3, #8]
 800c152:	4b19      	ldr	r3, [pc, #100]	; (800c1b8 <HAL_TIM_Base_Start_IT+0xec>)
 800c154:	4013      	ands	r3, r2
 800c156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2b06      	cmp	r3, #6
 800c15c:	d015      	beq.n	800c18a <HAL_TIM_Base_Start_IT+0xbe>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c164:	d011      	beq.n	800c18a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f042 0201 	orr.w	r2, r2, #1
 800c174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c176:	e008      	b.n	800c18a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f042 0201 	orr.w	r2, r2, #1
 800c186:	601a      	str	r2, [r3, #0]
 800c188:	e000      	b.n	800c18c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c18a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	40010000 	.word	0x40010000
 800c1a0:	40000400 	.word	0x40000400
 800c1a4:	40000800 	.word	0x40000800
 800c1a8:	40000c00 	.word	0x40000c00
 800c1ac:	40010400 	.word	0x40010400
 800c1b0:	40001800 	.word	0x40001800
 800c1b4:	40014000 	.word	0x40014000
 800c1b8:	00010007 	.word	0x00010007

0800c1bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e049      	b.n	800c262 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f841 	bl	800c26a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	4610      	mov	r0, r2
 800c1fc:	f000 fe6c 	bl	800ced8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b083      	sub	sp, #12
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c272:	bf00      	nop
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
	...

0800c280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d109      	bne.n	800c2a4 <HAL_TIM_PWM_Start+0x24>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c296:	b2db      	uxtb	r3, r3
 800c298:	2b01      	cmp	r3, #1
 800c29a:	bf14      	ite	ne
 800c29c:	2301      	movne	r3, #1
 800c29e:	2300      	moveq	r3, #0
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	e03c      	b.n	800c31e <HAL_TIM_PWM_Start+0x9e>
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	d109      	bne.n	800c2be <HAL_TIM_PWM_Start+0x3e>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	bf14      	ite	ne
 800c2b6:	2301      	movne	r3, #1
 800c2b8:	2300      	moveq	r3, #0
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	e02f      	b.n	800c31e <HAL_TIM_PWM_Start+0x9e>
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	2b08      	cmp	r3, #8
 800c2c2:	d109      	bne.n	800c2d8 <HAL_TIM_PWM_Start+0x58>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	bf14      	ite	ne
 800c2d0:	2301      	movne	r3, #1
 800c2d2:	2300      	moveq	r3, #0
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	e022      	b.n	800c31e <HAL_TIM_PWM_Start+0x9e>
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	2b0c      	cmp	r3, #12
 800c2dc:	d109      	bne.n	800c2f2 <HAL_TIM_PWM_Start+0x72>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	bf14      	ite	ne
 800c2ea:	2301      	movne	r3, #1
 800c2ec:	2300      	moveq	r3, #0
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	e015      	b.n	800c31e <HAL_TIM_PWM_Start+0x9e>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b10      	cmp	r3, #16
 800c2f6:	d109      	bne.n	800c30c <HAL_TIM_PWM_Start+0x8c>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b01      	cmp	r3, #1
 800c302:	bf14      	ite	ne
 800c304:	2301      	movne	r3, #1
 800c306:	2300      	moveq	r3, #0
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	e008      	b.n	800c31e <HAL_TIM_PWM_Start+0x9e>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c312:	b2db      	uxtb	r3, r3
 800c314:	2b01      	cmp	r3, #1
 800c316:	bf14      	ite	ne
 800c318:	2301      	movne	r3, #1
 800c31a:	2300      	moveq	r3, #0
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e0a1      	b.n	800c46a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d104      	bne.n	800c336 <HAL_TIM_PWM_Start+0xb6>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2202      	movs	r2, #2
 800c330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c334:	e023      	b.n	800c37e <HAL_TIM_PWM_Start+0xfe>
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b04      	cmp	r3, #4
 800c33a:	d104      	bne.n	800c346 <HAL_TIM_PWM_Start+0xc6>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2202      	movs	r2, #2
 800c340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c344:	e01b      	b.n	800c37e <HAL_TIM_PWM_Start+0xfe>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b08      	cmp	r3, #8
 800c34a:	d104      	bne.n	800c356 <HAL_TIM_PWM_Start+0xd6>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2202      	movs	r2, #2
 800c350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c354:	e013      	b.n	800c37e <HAL_TIM_PWM_Start+0xfe>
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b0c      	cmp	r3, #12
 800c35a:	d104      	bne.n	800c366 <HAL_TIM_PWM_Start+0xe6>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2202      	movs	r2, #2
 800c360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c364:	e00b      	b.n	800c37e <HAL_TIM_PWM_Start+0xfe>
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b10      	cmp	r3, #16
 800c36a:	d104      	bne.n	800c376 <HAL_TIM_PWM_Start+0xf6>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c374:	e003      	b.n	800c37e <HAL_TIM_PWM_Start+0xfe>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2202      	movs	r2, #2
 800c37a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2201      	movs	r2, #1
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	4618      	mov	r0, r3
 800c388:	f001 f9b4 	bl	800d6f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a38      	ldr	r2, [pc, #224]	; (800c474 <HAL_TIM_PWM_Start+0x1f4>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d013      	beq.n	800c3be <HAL_TIM_PWM_Start+0x13e>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a37      	ldr	r2, [pc, #220]	; (800c478 <HAL_TIM_PWM_Start+0x1f8>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d00e      	beq.n	800c3be <HAL_TIM_PWM_Start+0x13e>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a35      	ldr	r2, [pc, #212]	; (800c47c <HAL_TIM_PWM_Start+0x1fc>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d009      	beq.n	800c3be <HAL_TIM_PWM_Start+0x13e>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a34      	ldr	r2, [pc, #208]	; (800c480 <HAL_TIM_PWM_Start+0x200>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d004      	beq.n	800c3be <HAL_TIM_PWM_Start+0x13e>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a32      	ldr	r2, [pc, #200]	; (800c484 <HAL_TIM_PWM_Start+0x204>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d101      	bne.n	800c3c2 <HAL_TIM_PWM_Start+0x142>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e000      	b.n	800c3c4 <HAL_TIM_PWM_Start+0x144>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d007      	beq.n	800c3d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c3d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a25      	ldr	r2, [pc, #148]	; (800c474 <HAL_TIM_PWM_Start+0x1f4>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d022      	beq.n	800c428 <HAL_TIM_PWM_Start+0x1a8>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3ea:	d01d      	beq.n	800c428 <HAL_TIM_PWM_Start+0x1a8>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a25      	ldr	r2, [pc, #148]	; (800c488 <HAL_TIM_PWM_Start+0x208>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d018      	beq.n	800c428 <HAL_TIM_PWM_Start+0x1a8>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a24      	ldr	r2, [pc, #144]	; (800c48c <HAL_TIM_PWM_Start+0x20c>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d013      	beq.n	800c428 <HAL_TIM_PWM_Start+0x1a8>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a22      	ldr	r2, [pc, #136]	; (800c490 <HAL_TIM_PWM_Start+0x210>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d00e      	beq.n	800c428 <HAL_TIM_PWM_Start+0x1a8>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a1a      	ldr	r2, [pc, #104]	; (800c478 <HAL_TIM_PWM_Start+0x1f8>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d009      	beq.n	800c428 <HAL_TIM_PWM_Start+0x1a8>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a1e      	ldr	r2, [pc, #120]	; (800c494 <HAL_TIM_PWM_Start+0x214>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d004      	beq.n	800c428 <HAL_TIM_PWM_Start+0x1a8>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a16      	ldr	r2, [pc, #88]	; (800c47c <HAL_TIM_PWM_Start+0x1fc>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d115      	bne.n	800c454 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	689a      	ldr	r2, [r3, #8]
 800c42e:	4b1a      	ldr	r3, [pc, #104]	; (800c498 <HAL_TIM_PWM_Start+0x218>)
 800c430:	4013      	ands	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2b06      	cmp	r3, #6
 800c438:	d015      	beq.n	800c466 <HAL_TIM_PWM_Start+0x1e6>
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c440:	d011      	beq.n	800c466 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f042 0201 	orr.w	r2, r2, #1
 800c450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c452:	e008      	b.n	800c466 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f042 0201 	orr.w	r2, r2, #1
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	e000      	b.n	800c468 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c466:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	40010000 	.word	0x40010000
 800c478:	40010400 	.word	0x40010400
 800c47c:	40014000 	.word	0x40014000
 800c480:	40014400 	.word	0x40014400
 800c484:	40014800 	.word	0x40014800
 800c488:	40000400 	.word	0x40000400
 800c48c:	40000800 	.word	0x40000800
 800c490:	40000c00 	.word	0x40000c00
 800c494:	40001800 	.word	0x40001800
 800c498:	00010007 	.word	0x00010007

0800c49c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f001 f920 	bl	800d6f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a3e      	ldr	r2, [pc, #248]	; (800c5b4 <HAL_TIM_PWM_Stop+0x118>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d013      	beq.n	800c4e6 <HAL_TIM_PWM_Stop+0x4a>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a3d      	ldr	r2, [pc, #244]	; (800c5b8 <HAL_TIM_PWM_Stop+0x11c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d00e      	beq.n	800c4e6 <HAL_TIM_PWM_Stop+0x4a>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a3b      	ldr	r2, [pc, #236]	; (800c5bc <HAL_TIM_PWM_Stop+0x120>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d009      	beq.n	800c4e6 <HAL_TIM_PWM_Stop+0x4a>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a3a      	ldr	r2, [pc, #232]	; (800c5c0 <HAL_TIM_PWM_Stop+0x124>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d004      	beq.n	800c4e6 <HAL_TIM_PWM_Stop+0x4a>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a38      	ldr	r2, [pc, #224]	; (800c5c4 <HAL_TIM_PWM_Stop+0x128>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d101      	bne.n	800c4ea <HAL_TIM_PWM_Stop+0x4e>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e000      	b.n	800c4ec <HAL_TIM_PWM_Stop+0x50>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d017      	beq.n	800c520 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6a1a      	ldr	r2, [r3, #32]
 800c4f6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10f      	bne.n	800c520 <HAL_TIM_PWM_Stop+0x84>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6a1a      	ldr	r2, [r3, #32]
 800c506:	f240 4344 	movw	r3, #1092	; 0x444
 800c50a:	4013      	ands	r3, r2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d107      	bne.n	800c520 <HAL_TIM_PWM_Stop+0x84>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c51e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6a1a      	ldr	r2, [r3, #32]
 800c526:	f241 1311 	movw	r3, #4369	; 0x1111
 800c52a:	4013      	ands	r3, r2
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10f      	bne.n	800c550 <HAL_TIM_PWM_Stop+0xb4>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6a1a      	ldr	r2, [r3, #32]
 800c536:	f240 4344 	movw	r3, #1092	; 0x444
 800c53a:	4013      	ands	r3, r2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d107      	bne.n	800c550 <HAL_TIM_PWM_Stop+0xb4>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f022 0201 	bic.w	r2, r2, #1
 800c54e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d104      	bne.n	800c560 <HAL_TIM_PWM_Stop+0xc4>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c55e:	e023      	b.n	800c5a8 <HAL_TIM_PWM_Stop+0x10c>
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b04      	cmp	r3, #4
 800c564:	d104      	bne.n	800c570 <HAL_TIM_PWM_Stop+0xd4>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c56e:	e01b      	b.n	800c5a8 <HAL_TIM_PWM_Stop+0x10c>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b08      	cmp	r3, #8
 800c574:	d104      	bne.n	800c580 <HAL_TIM_PWM_Stop+0xe4>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c57e:	e013      	b.n	800c5a8 <HAL_TIM_PWM_Stop+0x10c>
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2b0c      	cmp	r3, #12
 800c584:	d104      	bne.n	800c590 <HAL_TIM_PWM_Stop+0xf4>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c58e:	e00b      	b.n	800c5a8 <HAL_TIM_PWM_Stop+0x10c>
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	2b10      	cmp	r3, #16
 800c594:	d104      	bne.n	800c5a0 <HAL_TIM_PWM_Stop+0x104>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c59e:	e003      	b.n	800c5a8 <HAL_TIM_PWM_Stop+0x10c>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	40010000 	.word	0x40010000
 800c5b8:	40010400 	.word	0x40010400
 800c5bc:	40014000 	.word	0x40014000
 800c5c0:	40014400 	.word	0x40014400
 800c5c4:	40014800 	.word	0x40014800

0800c5c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d101      	bne.n	800c5dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e08f      	b.n	800c6fc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d106      	bne.n	800c5f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7f6 fe0f 	bl	8003214 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2202      	movs	r2, #2
 800c5fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6899      	ldr	r1, [r3, #8]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	4b3e      	ldr	r3, [pc, #248]	; (800c704 <HAL_TIM_Encoder_Init+0x13c>)
 800c60a:	400b      	ands	r3, r1
 800c60c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3304      	adds	r3, #4
 800c616:	4619      	mov	r1, r3
 800c618:	4610      	mov	r0, r2
 800c61a:	f000 fc5d 	bl	800ced8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	6a1b      	ldr	r3, [r3, #32]
 800c634:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	4313      	orrs	r3, r2
 800c63e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	4b31      	ldr	r3, [pc, #196]	; (800c708 <HAL_TIM_Encoder_Init+0x140>)
 800c644:	4013      	ands	r3, r2
 800c646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	689a      	ldr	r2, [r3, #8]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	021b      	lsls	r3, r3, #8
 800c652:	4313      	orrs	r3, r2
 800c654:	693a      	ldr	r2, [r7, #16]
 800c656:	4313      	orrs	r3, r2
 800c658:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	4b2b      	ldr	r3, [pc, #172]	; (800c70c <HAL_TIM_Encoder_Init+0x144>)
 800c65e:	4013      	ands	r3, r2
 800c660:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c662:	693a      	ldr	r2, [r7, #16]
 800c664:	4b2a      	ldr	r3, [pc, #168]	; (800c710 <HAL_TIM_Encoder_Init+0x148>)
 800c666:	4013      	ands	r3, r2
 800c668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	68da      	ldr	r2, [r3, #12]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	021b      	lsls	r3, r3, #8
 800c674:	4313      	orrs	r3, r2
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	4313      	orrs	r3, r2
 800c67a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	011a      	lsls	r2, r3, #4
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	031b      	lsls	r3, r3, #12
 800c688:	4313      	orrs	r3, r2
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c696:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c69e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	685a      	ldr	r2, [r3, #4]
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	695b      	ldr	r3, [r3, #20]
 800c6a8:	011b      	lsls	r3, r3, #4
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	693a      	ldr	r2, [r7, #16]
 800c6c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3718      	adds	r7, #24
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	fffebff8 	.word	0xfffebff8
 800c708:	fffffcfc 	.word	0xfffffcfc
 800c70c:	fffff3f3 	.word	0xfffff3f3
 800c710:	ffff0f0f 	.word	0xffff0f0f

0800c714 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c724:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c72c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c734:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c73c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d110      	bne.n	800c766 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d102      	bne.n	800c750 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c74a:	7b7b      	ldrb	r3, [r7, #13]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d001      	beq.n	800c754 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	e069      	b.n	800c828 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2202      	movs	r2, #2
 800c758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2202      	movs	r2, #2
 800c760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c764:	e031      	b.n	800c7ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	2b04      	cmp	r3, #4
 800c76a:	d110      	bne.n	800c78e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c76c:	7bbb      	ldrb	r3, [r7, #14]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d102      	bne.n	800c778 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c772:	7b3b      	ldrb	r3, [r7, #12]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d001      	beq.n	800c77c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c778:	2301      	movs	r3, #1
 800c77a:	e055      	b.n	800c828 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2202      	movs	r2, #2
 800c780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2202      	movs	r2, #2
 800c788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c78c:	e01d      	b.n	800c7ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c78e:	7bfb      	ldrb	r3, [r7, #15]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d108      	bne.n	800c7a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c794:	7bbb      	ldrb	r3, [r7, #14]
 800c796:	2b01      	cmp	r3, #1
 800c798:	d105      	bne.n	800c7a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c79a:	7b7b      	ldrb	r3, [r7, #13]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d102      	bne.n	800c7a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c7a0:	7b3b      	ldrb	r3, [r7, #12]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d001      	beq.n	800c7aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e03e      	b.n	800c828 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2202      	movs	r2, #2
 800c7b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2202      	movs	r2, #2
 800c7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2202      	movs	r2, #2
 800c7c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d003      	beq.n	800c7d8 <HAL_TIM_Encoder_Start+0xc4>
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	d008      	beq.n	800c7e8 <HAL_TIM_Encoder_Start+0xd4>
 800c7d6:	e00f      	b.n	800c7f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	2100      	movs	r1, #0
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f000 ff87 	bl	800d6f4 <TIM_CCxChannelCmd>
      break;
 800c7e6:	e016      	b.n	800c816 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	2104      	movs	r1, #4
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f000 ff7f 	bl	800d6f4 <TIM_CCxChannelCmd>
      break;
 800c7f6:	e00e      	b.n	800c816 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	2100      	movs	r1, #0
 800c800:	4618      	mov	r0, r3
 800c802:	f000 ff77 	bl	800d6f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2201      	movs	r2, #1
 800c80c:	2104      	movs	r1, #4
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 ff70 	bl	800d6f4 <TIM_CCxChannelCmd>
      break;
 800c814:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f042 0201 	orr.w	r2, r2, #1
 800c824:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	f003 0302 	and.w	r3, r3, #2
 800c842:	2b02      	cmp	r3, #2
 800c844:	d122      	bne.n	800c88c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b02      	cmp	r3, #2
 800c852:	d11b      	bne.n	800c88c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f06f 0202 	mvn.w	r2, #2
 800c85c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	f003 0303 	and.w	r3, r3, #3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d003      	beq.n	800c87a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fb12 	bl	800ce9c <HAL_TIM_IC_CaptureCallback>
 800c878:	e005      	b.n	800c886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fb04 	bl	800ce88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 fb15 	bl	800ceb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	f003 0304 	and.w	r3, r3, #4
 800c896:	2b04      	cmp	r3, #4
 800c898:	d122      	bne.n	800c8e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	d11b      	bne.n	800c8e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f06f 0204 	mvn.w	r2, #4
 800c8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2202      	movs	r2, #2
 800c8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d003      	beq.n	800c8ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fae8 	bl	800ce9c <HAL_TIM_IC_CaptureCallback>
 800c8cc:	e005      	b.n	800c8da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fada 	bl	800ce88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 faeb 	bl	800ceb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	f003 0308 	and.w	r3, r3, #8
 800c8ea:	2b08      	cmp	r3, #8
 800c8ec:	d122      	bne.n	800c934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	f003 0308 	and.w	r3, r3, #8
 800c8f8:	2b08      	cmp	r3, #8
 800c8fa:	d11b      	bne.n	800c934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f06f 0208 	mvn.w	r2, #8
 800c904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2204      	movs	r2, #4
 800c90a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	69db      	ldr	r3, [r3, #28]
 800c912:	f003 0303 	and.w	r3, r3, #3
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fabe 	bl	800ce9c <HAL_TIM_IC_CaptureCallback>
 800c920:	e005      	b.n	800c92e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fab0 	bl	800ce88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 fac1 	bl	800ceb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	f003 0310 	and.w	r3, r3, #16
 800c93e:	2b10      	cmp	r3, #16
 800c940:	d122      	bne.n	800c988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	f003 0310 	and.w	r3, r3, #16
 800c94c:	2b10      	cmp	r3, #16
 800c94e:	d11b      	bne.n	800c988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f06f 0210 	mvn.w	r2, #16
 800c958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2208      	movs	r2, #8
 800c95e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	69db      	ldr	r3, [r3, #28]
 800c966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fa94 	bl	800ce9c <HAL_TIM_IC_CaptureCallback>
 800c974:	e005      	b.n	800c982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fa86 	bl	800ce88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fa97 	bl	800ceb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	f003 0301 	and.w	r3, r3, #1
 800c992:	2b01      	cmp	r3, #1
 800c994:	d10e      	bne.n	800c9b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	f003 0301 	and.w	r3, r3, #1
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d107      	bne.n	800c9b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f06f 0201 	mvn.w	r2, #1
 800c9ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7f6 f9c2 	bl	8002d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	691b      	ldr	r3, [r3, #16]
 800c9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9be:	2b80      	cmp	r3, #128	; 0x80
 800c9c0:	d10e      	bne.n	800c9e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9cc:	2b80      	cmp	r3, #128	; 0x80
 800c9ce:	d107      	bne.n	800c9e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 ffc6 	bl	800d96c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ee:	d10e      	bne.n	800ca0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9fa:	2b80      	cmp	r3, #128	; 0x80
 800c9fc:	d107      	bne.n	800ca0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ca06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 ffb9 	bl	800d980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca18:	2b40      	cmp	r3, #64	; 0x40
 800ca1a:	d10e      	bne.n	800ca3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca26:	2b40      	cmp	r3, #64	; 0x40
 800ca28:	d107      	bne.n	800ca3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fa45 	bl	800cec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	f003 0320 	and.w	r3, r3, #32
 800ca44:	2b20      	cmp	r3, #32
 800ca46:	d10e      	bne.n	800ca66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	f003 0320 	and.w	r3, r3, #32
 800ca52:	2b20      	cmp	r3, #32
 800ca54:	d107      	bne.n	800ca66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f06f 0220 	mvn.w	r2, #32
 800ca5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 ff79 	bl	800d958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca66:	bf00      	nop
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
	...

0800ca70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	60b9      	str	r1, [r7, #8]
 800ca7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d101      	bne.n	800ca8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca8a:	2302      	movs	r3, #2
 800ca8c:	e0ff      	b.n	800cc8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2b14      	cmp	r3, #20
 800ca9a:	f200 80f0 	bhi.w	800cc7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca9e:	a201      	add	r2, pc, #4	; (adr r2, 800caa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800caa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa4:	0800caf9 	.word	0x0800caf9
 800caa8:	0800cc7f 	.word	0x0800cc7f
 800caac:	0800cc7f 	.word	0x0800cc7f
 800cab0:	0800cc7f 	.word	0x0800cc7f
 800cab4:	0800cb39 	.word	0x0800cb39
 800cab8:	0800cc7f 	.word	0x0800cc7f
 800cabc:	0800cc7f 	.word	0x0800cc7f
 800cac0:	0800cc7f 	.word	0x0800cc7f
 800cac4:	0800cb7b 	.word	0x0800cb7b
 800cac8:	0800cc7f 	.word	0x0800cc7f
 800cacc:	0800cc7f 	.word	0x0800cc7f
 800cad0:	0800cc7f 	.word	0x0800cc7f
 800cad4:	0800cbbb 	.word	0x0800cbbb
 800cad8:	0800cc7f 	.word	0x0800cc7f
 800cadc:	0800cc7f 	.word	0x0800cc7f
 800cae0:	0800cc7f 	.word	0x0800cc7f
 800cae4:	0800cbfd 	.word	0x0800cbfd
 800cae8:	0800cc7f 	.word	0x0800cc7f
 800caec:	0800cc7f 	.word	0x0800cc7f
 800caf0:	0800cc7f 	.word	0x0800cc7f
 800caf4:	0800cc3d 	.word	0x0800cc3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68b9      	ldr	r1, [r7, #8]
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 fa84 	bl	800d00c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	699a      	ldr	r2, [r3, #24]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f042 0208 	orr.w	r2, r2, #8
 800cb12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	699a      	ldr	r2, [r3, #24]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f022 0204 	bic.w	r2, r2, #4
 800cb22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	6999      	ldr	r1, [r3, #24]
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	691a      	ldr	r2, [r3, #16]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	430a      	orrs	r2, r1
 800cb34:	619a      	str	r2, [r3, #24]
      break;
 800cb36:	e0a5      	b.n	800cc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	68b9      	ldr	r1, [r7, #8]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f000 faf4 	bl	800d12c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	699a      	ldr	r2, [r3, #24]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	699a      	ldr	r2, [r3, #24]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6999      	ldr	r1, [r3, #24]
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	021a      	lsls	r2, r3, #8
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	430a      	orrs	r2, r1
 800cb76:	619a      	str	r2, [r3, #24]
      break;
 800cb78:	e084      	b.n	800cc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68b9      	ldr	r1, [r7, #8]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 fb5d 	bl	800d240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	69da      	ldr	r2, [r3, #28]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f042 0208 	orr.w	r2, r2, #8
 800cb94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	69da      	ldr	r2, [r3, #28]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f022 0204 	bic.w	r2, r2, #4
 800cba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	69d9      	ldr	r1, [r3, #28]
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	691a      	ldr	r2, [r3, #16]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	61da      	str	r2, [r3, #28]
      break;
 800cbb8:	e064      	b.n	800cc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68b9      	ldr	r1, [r7, #8]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fbc5 	bl	800d350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	69da      	ldr	r2, [r3, #28]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	69da      	ldr	r2, [r3, #28]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	69d9      	ldr	r1, [r3, #28]
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	021a      	lsls	r2, r3, #8
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	61da      	str	r2, [r3, #28]
      break;
 800cbfa:	e043      	b.n	800cc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68b9      	ldr	r1, [r7, #8]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 fc0e 	bl	800d424 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f042 0208 	orr.w	r2, r2, #8
 800cc16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f022 0204 	bic.w	r2, r2, #4
 800cc26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	691a      	ldr	r2, [r3, #16]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	430a      	orrs	r2, r1
 800cc38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc3a:	e023      	b.n	800cc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68b9      	ldr	r1, [r7, #8]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 fc52 	bl	800d4ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	021a      	lsls	r2, r3, #8
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	430a      	orrs	r2, r1
 800cc7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc7c:	e002      	b.n	800cc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	75fb      	strb	r3, [r7, #23]
      break;
 800cc82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3718      	adds	r7, #24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop

0800cc98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cca2:	2300      	movs	r3, #0
 800cca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d101      	bne.n	800ccb4 <HAL_TIM_ConfigClockSource+0x1c>
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	e0dc      	b.n	800ce6e <HAL_TIM_ConfigClockSource+0x1d6>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2202      	movs	r2, #2
 800ccc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	4b6a      	ldr	r3, [pc, #424]	; (800ce78 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ccd0:	4013      	ands	r3, r2
 800ccd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68ba      	ldr	r2, [r7, #8]
 800cce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a64      	ldr	r2, [pc, #400]	; (800ce7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	f000 80a9 	beq.w	800ce42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccf0:	4a62      	ldr	r2, [pc, #392]	; (800ce7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	f200 80ae 	bhi.w	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccf8:	4a61      	ldr	r2, [pc, #388]	; (800ce80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	f000 80a1 	beq.w	800ce42 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd00:	4a5f      	ldr	r2, [pc, #380]	; (800ce80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	f200 80a6 	bhi.w	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd08:	4a5e      	ldr	r2, [pc, #376]	; (800ce84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	f000 8099 	beq.w	800ce42 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd10:	4a5c      	ldr	r2, [pc, #368]	; (800ce84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	f200 809e 	bhi.w	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cd1c:	f000 8091 	beq.w	800ce42 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cd24:	f200 8096 	bhi.w	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd2c:	f000 8089 	beq.w	800ce42 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd34:	f200 808e 	bhi.w	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd3c:	d03e      	beq.n	800cdbc <HAL_TIM_ConfigClockSource+0x124>
 800cd3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd42:	f200 8087 	bhi.w	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd4a:	f000 8086 	beq.w	800ce5a <HAL_TIM_ConfigClockSource+0x1c2>
 800cd4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd52:	d87f      	bhi.n	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd54:	2b70      	cmp	r3, #112	; 0x70
 800cd56:	d01a      	beq.n	800cd8e <HAL_TIM_ConfigClockSource+0xf6>
 800cd58:	2b70      	cmp	r3, #112	; 0x70
 800cd5a:	d87b      	bhi.n	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd5c:	2b60      	cmp	r3, #96	; 0x60
 800cd5e:	d050      	beq.n	800ce02 <HAL_TIM_ConfigClockSource+0x16a>
 800cd60:	2b60      	cmp	r3, #96	; 0x60
 800cd62:	d877      	bhi.n	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd64:	2b50      	cmp	r3, #80	; 0x50
 800cd66:	d03c      	beq.n	800cde2 <HAL_TIM_ConfigClockSource+0x14a>
 800cd68:	2b50      	cmp	r3, #80	; 0x50
 800cd6a:	d873      	bhi.n	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd6c:	2b40      	cmp	r3, #64	; 0x40
 800cd6e:	d058      	beq.n	800ce22 <HAL_TIM_ConfigClockSource+0x18a>
 800cd70:	2b40      	cmp	r3, #64	; 0x40
 800cd72:	d86f      	bhi.n	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd74:	2b30      	cmp	r3, #48	; 0x30
 800cd76:	d064      	beq.n	800ce42 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd78:	2b30      	cmp	r3, #48	; 0x30
 800cd7a:	d86b      	bhi.n	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd7c:	2b20      	cmp	r3, #32
 800cd7e:	d060      	beq.n	800ce42 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd80:	2b20      	cmp	r3, #32
 800cd82:	d867      	bhi.n	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d05c      	beq.n	800ce42 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd88:	2b10      	cmp	r3, #16
 800cd8a:	d05a      	beq.n	800ce42 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd8c:	e062      	b.n	800ce54 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6818      	ldr	r0, [r3, #0]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	6899      	ldr	r1, [r3, #8]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	f000 fc89 	bl	800d6b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cdb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68ba      	ldr	r2, [r7, #8]
 800cdb8:	609a      	str	r2, [r3, #8]
      break;
 800cdba:	e04f      	b.n	800ce5c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6818      	ldr	r0, [r3, #0]
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	6899      	ldr	r1, [r3, #8]
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	685a      	ldr	r2, [r3, #4]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	f000 fc72 	bl	800d6b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	689a      	ldr	r2, [r3, #8]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cdde:	609a      	str	r2, [r3, #8]
      break;
 800cde0:	e03c      	b.n	800ce5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6818      	ldr	r0, [r3, #0]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	6859      	ldr	r1, [r3, #4]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	461a      	mov	r2, r3
 800cdf0:	f000 fbe2 	bl	800d5b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2150      	movs	r1, #80	; 0x50
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f000 fc3c 	bl	800d678 <TIM_ITRx_SetConfig>
      break;
 800ce00:	e02c      	b.n	800ce5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6818      	ldr	r0, [r3, #0]
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	6859      	ldr	r1, [r3, #4]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	461a      	mov	r2, r3
 800ce10:	f000 fc01 	bl	800d616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2160      	movs	r1, #96	; 0x60
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 fc2c 	bl	800d678 <TIM_ITRx_SetConfig>
      break;
 800ce20:	e01c      	b.n	800ce5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6818      	ldr	r0, [r3, #0]
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	6859      	ldr	r1, [r3, #4]
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f000 fbc2 	bl	800d5b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2140      	movs	r1, #64	; 0x40
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 fc1c 	bl	800d678 <TIM_ITRx_SetConfig>
      break;
 800ce40:	e00c      	b.n	800ce5c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	f000 fc13 	bl	800d678 <TIM_ITRx_SetConfig>
      break;
 800ce52:	e003      	b.n	800ce5c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ce54:	2301      	movs	r3, #1
 800ce56:	73fb      	strb	r3, [r7, #15]
      break;
 800ce58:	e000      	b.n	800ce5c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ce5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	ffceff88 	.word	0xffceff88
 800ce7c:	00100040 	.word	0x00100040
 800ce80:	00100030 	.word	0x00100030
 800ce84:	00100020 	.word	0x00100020

0800ce88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce90:	bf00      	nop
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cea4:	bf00      	nop
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ceb8:	bf00      	nop
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cecc:	bf00      	nop
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4a40      	ldr	r2, [pc, #256]	; (800cfec <TIM_Base_SetConfig+0x114>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d013      	beq.n	800cf18 <TIM_Base_SetConfig+0x40>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cef6:	d00f      	beq.n	800cf18 <TIM_Base_SetConfig+0x40>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4a3d      	ldr	r2, [pc, #244]	; (800cff0 <TIM_Base_SetConfig+0x118>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d00b      	beq.n	800cf18 <TIM_Base_SetConfig+0x40>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a3c      	ldr	r2, [pc, #240]	; (800cff4 <TIM_Base_SetConfig+0x11c>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d007      	beq.n	800cf18 <TIM_Base_SetConfig+0x40>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a3b      	ldr	r2, [pc, #236]	; (800cff8 <TIM_Base_SetConfig+0x120>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d003      	beq.n	800cf18 <TIM_Base_SetConfig+0x40>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a3a      	ldr	r2, [pc, #232]	; (800cffc <TIM_Base_SetConfig+0x124>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d108      	bne.n	800cf2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4a2f      	ldr	r2, [pc, #188]	; (800cfec <TIM_Base_SetConfig+0x114>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d01f      	beq.n	800cf72 <TIM_Base_SetConfig+0x9a>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf38:	d01b      	beq.n	800cf72 <TIM_Base_SetConfig+0x9a>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a2c      	ldr	r2, [pc, #176]	; (800cff0 <TIM_Base_SetConfig+0x118>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d017      	beq.n	800cf72 <TIM_Base_SetConfig+0x9a>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a2b      	ldr	r2, [pc, #172]	; (800cff4 <TIM_Base_SetConfig+0x11c>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d013      	beq.n	800cf72 <TIM_Base_SetConfig+0x9a>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a2a      	ldr	r2, [pc, #168]	; (800cff8 <TIM_Base_SetConfig+0x120>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d00f      	beq.n	800cf72 <TIM_Base_SetConfig+0x9a>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a29      	ldr	r2, [pc, #164]	; (800cffc <TIM_Base_SetConfig+0x124>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d00b      	beq.n	800cf72 <TIM_Base_SetConfig+0x9a>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a28      	ldr	r2, [pc, #160]	; (800d000 <TIM_Base_SetConfig+0x128>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d007      	beq.n	800cf72 <TIM_Base_SetConfig+0x9a>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a27      	ldr	r2, [pc, #156]	; (800d004 <TIM_Base_SetConfig+0x12c>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d003      	beq.n	800cf72 <TIM_Base_SetConfig+0x9a>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a26      	ldr	r2, [pc, #152]	; (800d008 <TIM_Base_SetConfig+0x130>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d108      	bne.n	800cf84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	689a      	ldr	r2, [r3, #8]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4a10      	ldr	r2, [pc, #64]	; (800cfec <TIM_Base_SetConfig+0x114>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d00f      	beq.n	800cfd0 <TIM_Base_SetConfig+0xf8>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a12      	ldr	r2, [pc, #72]	; (800cffc <TIM_Base_SetConfig+0x124>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d00b      	beq.n	800cfd0 <TIM_Base_SetConfig+0xf8>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4a11      	ldr	r2, [pc, #68]	; (800d000 <TIM_Base_SetConfig+0x128>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d007      	beq.n	800cfd0 <TIM_Base_SetConfig+0xf8>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a10      	ldr	r2, [pc, #64]	; (800d004 <TIM_Base_SetConfig+0x12c>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d003      	beq.n	800cfd0 <TIM_Base_SetConfig+0xf8>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a0f      	ldr	r2, [pc, #60]	; (800d008 <TIM_Base_SetConfig+0x130>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d103      	bne.n	800cfd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	691a      	ldr	r2, [r3, #16]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	615a      	str	r2, [r3, #20]
}
 800cfde:	bf00      	nop
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	40010000 	.word	0x40010000
 800cff0:	40000400 	.word	0x40000400
 800cff4:	40000800 	.word	0x40000800
 800cff8:	40000c00 	.word	0x40000c00
 800cffc:	40010400 	.word	0x40010400
 800d000:	40014000 	.word	0x40014000
 800d004:	40014400 	.word	0x40014400
 800d008:	40014800 	.word	0x40014800

0800d00c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b087      	sub	sp, #28
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	f023 0201 	bic.w	r2, r3, #1
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a1b      	ldr	r3, [r3, #32]
 800d026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	4b37      	ldr	r3, [pc, #220]	; (800d114 <TIM_OC1_SetConfig+0x108>)
 800d038:	4013      	ands	r3, r2
 800d03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f023 0303 	bic.w	r3, r3, #3
 800d042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f023 0302 	bic.w	r3, r3, #2
 800d054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	697a      	ldr	r2, [r7, #20]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a2d      	ldr	r2, [pc, #180]	; (800d118 <TIM_OC1_SetConfig+0x10c>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d00f      	beq.n	800d088 <TIM_OC1_SetConfig+0x7c>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a2c      	ldr	r2, [pc, #176]	; (800d11c <TIM_OC1_SetConfig+0x110>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d00b      	beq.n	800d088 <TIM_OC1_SetConfig+0x7c>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a2b      	ldr	r2, [pc, #172]	; (800d120 <TIM_OC1_SetConfig+0x114>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d007      	beq.n	800d088 <TIM_OC1_SetConfig+0x7c>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a2a      	ldr	r2, [pc, #168]	; (800d124 <TIM_OC1_SetConfig+0x118>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d003      	beq.n	800d088 <TIM_OC1_SetConfig+0x7c>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a29      	ldr	r2, [pc, #164]	; (800d128 <TIM_OC1_SetConfig+0x11c>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d10c      	bne.n	800d0a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	f023 0308 	bic.w	r3, r3, #8
 800d08e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	4313      	orrs	r3, r2
 800d098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f023 0304 	bic.w	r3, r3, #4
 800d0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a1c      	ldr	r2, [pc, #112]	; (800d118 <TIM_OC1_SetConfig+0x10c>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00f      	beq.n	800d0ca <TIM_OC1_SetConfig+0xbe>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a1b      	ldr	r2, [pc, #108]	; (800d11c <TIM_OC1_SetConfig+0x110>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d00b      	beq.n	800d0ca <TIM_OC1_SetConfig+0xbe>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a1a      	ldr	r2, [pc, #104]	; (800d120 <TIM_OC1_SetConfig+0x114>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d007      	beq.n	800d0ca <TIM_OC1_SetConfig+0xbe>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a19      	ldr	r2, [pc, #100]	; (800d124 <TIM_OC1_SetConfig+0x118>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d003      	beq.n	800d0ca <TIM_OC1_SetConfig+0xbe>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a18      	ldr	r2, [pc, #96]	; (800d128 <TIM_OC1_SetConfig+0x11c>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d111      	bne.n	800d0ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	693a      	ldr	r2, [r7, #16]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	685a      	ldr	r2, [r3, #4]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	621a      	str	r2, [r3, #32]
}
 800d108:	bf00      	nop
 800d10a:	371c      	adds	r7, #28
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	fffeff8f 	.word	0xfffeff8f
 800d118:	40010000 	.word	0x40010000
 800d11c:	40010400 	.word	0x40010400
 800d120:	40014000 	.word	0x40014000
 800d124:	40014400 	.word	0x40014400
 800d128:	40014800 	.word	0x40014800

0800d12c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	f023 0210 	bic.w	r2, r3, #16
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	699b      	ldr	r3, [r3, #24]
 800d152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	4b34      	ldr	r3, [pc, #208]	; (800d228 <TIM_OC2_SetConfig+0xfc>)
 800d158:	4013      	ands	r3, r2
 800d15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	021b      	lsls	r3, r3, #8
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	4313      	orrs	r3, r2
 800d16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	f023 0320 	bic.w	r3, r3, #32
 800d176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	011b      	lsls	r3, r3, #4
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	4313      	orrs	r3, r2
 800d182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a29      	ldr	r2, [pc, #164]	; (800d22c <TIM_OC2_SetConfig+0x100>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d003      	beq.n	800d194 <TIM_OC2_SetConfig+0x68>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	4a28      	ldr	r2, [pc, #160]	; (800d230 <TIM_OC2_SetConfig+0x104>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d10d      	bne.n	800d1b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	011b      	lsls	r3, r3, #4
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a1e      	ldr	r2, [pc, #120]	; (800d22c <TIM_OC2_SetConfig+0x100>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d00f      	beq.n	800d1d8 <TIM_OC2_SetConfig+0xac>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4a1d      	ldr	r2, [pc, #116]	; (800d230 <TIM_OC2_SetConfig+0x104>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d00b      	beq.n	800d1d8 <TIM_OC2_SetConfig+0xac>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4a1c      	ldr	r2, [pc, #112]	; (800d234 <TIM_OC2_SetConfig+0x108>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d007      	beq.n	800d1d8 <TIM_OC2_SetConfig+0xac>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	4a1b      	ldr	r2, [pc, #108]	; (800d238 <TIM_OC2_SetConfig+0x10c>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d003      	beq.n	800d1d8 <TIM_OC2_SetConfig+0xac>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4a1a      	ldr	r2, [pc, #104]	; (800d23c <TIM_OC2_SetConfig+0x110>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d113      	bne.n	800d200 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	695b      	ldr	r3, [r3, #20]
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	699b      	ldr	r3, [r3, #24]
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	693a      	ldr	r2, [r7, #16]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	685a      	ldr	r2, [r3, #4]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	621a      	str	r2, [r3, #32]
}
 800d21a:	bf00      	nop
 800d21c:	371c      	adds	r7, #28
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	feff8fff 	.word	0xfeff8fff
 800d22c:	40010000 	.word	0x40010000
 800d230:	40010400 	.word	0x40010400
 800d234:	40014000 	.word	0x40014000
 800d238:	40014400 	.word	0x40014400
 800d23c:	40014800 	.word	0x40014800

0800d240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d240:	b480      	push	{r7}
 800d242:	b087      	sub	sp, #28
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	4b33      	ldr	r3, [pc, #204]	; (800d338 <TIM_OC3_SetConfig+0xf8>)
 800d26c:	4013      	ands	r3, r2
 800d26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f023 0303 	bic.w	r3, r3, #3
 800d276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4313      	orrs	r3, r2
 800d280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	021b      	lsls	r3, r3, #8
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	4313      	orrs	r3, r2
 800d294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a28      	ldr	r2, [pc, #160]	; (800d33c <TIM_OC3_SetConfig+0xfc>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d003      	beq.n	800d2a6 <TIM_OC3_SetConfig+0x66>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a27      	ldr	r2, [pc, #156]	; (800d340 <TIM_OC3_SetConfig+0x100>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d10d      	bne.n	800d2c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	021b      	lsls	r3, r3, #8
 800d2b4:	697a      	ldr	r2, [r7, #20]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a1d      	ldr	r2, [pc, #116]	; (800d33c <TIM_OC3_SetConfig+0xfc>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d00f      	beq.n	800d2ea <TIM_OC3_SetConfig+0xaa>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4a1c      	ldr	r2, [pc, #112]	; (800d340 <TIM_OC3_SetConfig+0x100>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d00b      	beq.n	800d2ea <TIM_OC3_SetConfig+0xaa>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a1b      	ldr	r2, [pc, #108]	; (800d344 <TIM_OC3_SetConfig+0x104>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d007      	beq.n	800d2ea <TIM_OC3_SetConfig+0xaa>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a1a      	ldr	r2, [pc, #104]	; (800d348 <TIM_OC3_SetConfig+0x108>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d003      	beq.n	800d2ea <TIM_OC3_SetConfig+0xaa>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a19      	ldr	r2, [pc, #100]	; (800d34c <TIM_OC3_SetConfig+0x10c>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d113      	bne.n	800d312 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	695b      	ldr	r3, [r3, #20]
 800d2fe:	011b      	lsls	r3, r3, #4
 800d300:	693a      	ldr	r2, [r7, #16]
 800d302:	4313      	orrs	r3, r2
 800d304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	011b      	lsls	r3, r3, #4
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	4313      	orrs	r3, r2
 800d310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	693a      	ldr	r2, [r7, #16]
 800d316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	685a      	ldr	r2, [r3, #4]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	621a      	str	r2, [r3, #32]
}
 800d32c:	bf00      	nop
 800d32e:	371c      	adds	r7, #28
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	fffeff8f 	.word	0xfffeff8f
 800d33c:	40010000 	.word	0x40010000
 800d340:	40010400 	.word	0x40010400
 800d344:	40014000 	.word	0x40014000
 800d348:	40014400 	.word	0x40014400
 800d34c:	40014800 	.word	0x40014800

0800d350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d350:	b480      	push	{r7}
 800d352:	b087      	sub	sp, #28
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a1b      	ldr	r3, [r3, #32]
 800d35e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a1b      	ldr	r3, [r3, #32]
 800d36a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	69db      	ldr	r3, [r3, #28]
 800d376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	4b24      	ldr	r3, [pc, #144]	; (800d40c <TIM_OC4_SetConfig+0xbc>)
 800d37c:	4013      	ands	r3, r2
 800d37e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	021b      	lsls	r3, r3, #8
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	4313      	orrs	r3, r2
 800d392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d39a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	031b      	lsls	r3, r3, #12
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a19      	ldr	r2, [pc, #100]	; (800d410 <TIM_OC4_SetConfig+0xc0>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d00f      	beq.n	800d3d0 <TIM_OC4_SetConfig+0x80>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a18      	ldr	r2, [pc, #96]	; (800d414 <TIM_OC4_SetConfig+0xc4>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d00b      	beq.n	800d3d0 <TIM_OC4_SetConfig+0x80>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4a17      	ldr	r2, [pc, #92]	; (800d418 <TIM_OC4_SetConfig+0xc8>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d007      	beq.n	800d3d0 <TIM_OC4_SetConfig+0x80>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a16      	ldr	r2, [pc, #88]	; (800d41c <TIM_OC4_SetConfig+0xcc>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d003      	beq.n	800d3d0 <TIM_OC4_SetConfig+0x80>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a15      	ldr	r2, [pc, #84]	; (800d420 <TIM_OC4_SetConfig+0xd0>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d109      	bne.n	800d3e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	695b      	ldr	r3, [r3, #20]
 800d3dc:	019b      	lsls	r3, r3, #6
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	685a      	ldr	r2, [r3, #4]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	621a      	str	r2, [r3, #32]
}
 800d3fe:	bf00      	nop
 800d400:	371c      	adds	r7, #28
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	feff8fff 	.word	0xfeff8fff
 800d410:	40010000 	.word	0x40010000
 800d414:	40010400 	.word	0x40010400
 800d418:	40014000 	.word	0x40014000
 800d41c:	40014400 	.word	0x40014400
 800d420:	40014800 	.word	0x40014800

0800d424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a1b      	ldr	r3, [r3, #32]
 800d432:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	4b21      	ldr	r3, [pc, #132]	; (800d4d4 <TIM_OC5_SetConfig+0xb0>)
 800d450:	4013      	ands	r3, r2
 800d452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d464:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	041b      	lsls	r3, r3, #16
 800d46c:	693a      	ldr	r2, [r7, #16]
 800d46e:	4313      	orrs	r3, r2
 800d470:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a18      	ldr	r2, [pc, #96]	; (800d4d8 <TIM_OC5_SetConfig+0xb4>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d00f      	beq.n	800d49a <TIM_OC5_SetConfig+0x76>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a17      	ldr	r2, [pc, #92]	; (800d4dc <TIM_OC5_SetConfig+0xb8>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d00b      	beq.n	800d49a <TIM_OC5_SetConfig+0x76>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a16      	ldr	r2, [pc, #88]	; (800d4e0 <TIM_OC5_SetConfig+0xbc>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d007      	beq.n	800d49a <TIM_OC5_SetConfig+0x76>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a15      	ldr	r2, [pc, #84]	; (800d4e4 <TIM_OC5_SetConfig+0xc0>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d003      	beq.n	800d49a <TIM_OC5_SetConfig+0x76>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4a14      	ldr	r2, [pc, #80]	; (800d4e8 <TIM_OC5_SetConfig+0xc4>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d109      	bne.n	800d4ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	695b      	ldr	r3, [r3, #20]
 800d4a6:	021b      	lsls	r3, r3, #8
 800d4a8:	697a      	ldr	r2, [r7, #20]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	68fa      	ldr	r2, [r7, #12]
 800d4b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	621a      	str	r2, [r3, #32]
}
 800d4c8:	bf00      	nop
 800d4ca:	371c      	adds	r7, #28
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr
 800d4d4:	fffeff8f 	.word	0xfffeff8f
 800d4d8:	40010000 	.word	0x40010000
 800d4dc:	40010400 	.word	0x40010400
 800d4e0:	40014000 	.word	0x40014000
 800d4e4:	40014400 	.word	0x40014400
 800d4e8:	40014800 	.word	0x40014800

0800d4ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b087      	sub	sp, #28
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	4b22      	ldr	r3, [pc, #136]	; (800d5a0 <TIM_OC6_SetConfig+0xb4>)
 800d518:	4013      	ands	r3, r2
 800d51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	021b      	lsls	r3, r3, #8
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	4313      	orrs	r3, r2
 800d526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d52e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	051b      	lsls	r3, r3, #20
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	4313      	orrs	r3, r2
 800d53a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4a19      	ldr	r2, [pc, #100]	; (800d5a4 <TIM_OC6_SetConfig+0xb8>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d00f      	beq.n	800d564 <TIM_OC6_SetConfig+0x78>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4a18      	ldr	r2, [pc, #96]	; (800d5a8 <TIM_OC6_SetConfig+0xbc>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d00b      	beq.n	800d564 <TIM_OC6_SetConfig+0x78>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	4a17      	ldr	r2, [pc, #92]	; (800d5ac <TIM_OC6_SetConfig+0xc0>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d007      	beq.n	800d564 <TIM_OC6_SetConfig+0x78>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	4a16      	ldr	r2, [pc, #88]	; (800d5b0 <TIM_OC6_SetConfig+0xc4>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d003      	beq.n	800d564 <TIM_OC6_SetConfig+0x78>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a15      	ldr	r2, [pc, #84]	; (800d5b4 <TIM_OC6_SetConfig+0xc8>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d109      	bne.n	800d578 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d56a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	695b      	ldr	r3, [r3, #20]
 800d570:	029b      	lsls	r3, r3, #10
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	4313      	orrs	r3, r2
 800d576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	685a      	ldr	r2, [r3, #4]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	693a      	ldr	r2, [r7, #16]
 800d590:	621a      	str	r2, [r3, #32]
}
 800d592:	bf00      	nop
 800d594:	371c      	adds	r7, #28
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	feff8fff 	.word	0xfeff8fff
 800d5a4:	40010000 	.word	0x40010000
 800d5a8:	40010400 	.word	0x40010400
 800d5ac:	40014000 	.word	0x40014000
 800d5b0:	40014400 	.word	0x40014400
 800d5b4:	40014800 	.word	0x40014800

0800d5b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b087      	sub	sp, #28
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	f023 0201 	bic.w	r2, r3, #1
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	699b      	ldr	r3, [r3, #24]
 800d5da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d5e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	011b      	lsls	r3, r3, #4
 800d5e8:	693a      	ldr	r2, [r7, #16]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	f023 030a 	bic.w	r3, r3, #10
 800d5f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	693a      	ldr	r2, [r7, #16]
 800d602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	697a      	ldr	r2, [r7, #20]
 800d608:	621a      	str	r2, [r3, #32]
}
 800d60a:	bf00      	nop
 800d60c:	371c      	adds	r7, #28
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d616:	b480      	push	{r7}
 800d618:	b087      	sub	sp, #28
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	60f8      	str	r0, [r7, #12]
 800d61e:	60b9      	str	r1, [r7, #8]
 800d620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	f023 0210 	bic.w	r2, r3, #16
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	699b      	ldr	r3, [r3, #24]
 800d632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	6a1b      	ldr	r3, [r3, #32]
 800d638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	031b      	lsls	r3, r3, #12
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	4313      	orrs	r3, r2
 800d64a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	011b      	lsls	r3, r3, #4
 800d658:	693a      	ldr	r2, [r7, #16]
 800d65a:	4313      	orrs	r3, r2
 800d65c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	697a      	ldr	r2, [r7, #20]
 800d662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	693a      	ldr	r2, [r7, #16]
 800d668:	621a      	str	r2, [r3, #32]
}
 800d66a:	bf00      	nop
 800d66c:	371c      	adds	r7, #28
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
	...

0800d678 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	4b09      	ldr	r3, [pc, #36]	; (800d6b0 <TIM_ITRx_SetConfig+0x38>)
 800d68c:	4013      	ands	r3, r2
 800d68e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d690:	683a      	ldr	r2, [r7, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	4313      	orrs	r3, r2
 800d696:	f043 0307 	orr.w	r3, r3, #7
 800d69a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	609a      	str	r2, [r3, #8]
}
 800d6a2:	bf00      	nop
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	ffcfff8f 	.word	0xffcfff8f

0800d6b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
 800d6c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d6ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	021a      	lsls	r2, r3, #8
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	431a      	orrs	r2, r3
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	697a      	ldr	r2, [r7, #20]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	609a      	str	r2, [r3, #8]
}
 800d6e8:	bf00      	nop
 800d6ea:	371c      	adds	r7, #28
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b087      	sub	sp, #28
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	f003 031f 	and.w	r3, r3, #31
 800d706:	2201      	movs	r2, #1
 800d708:	fa02 f303 	lsl.w	r3, r2, r3
 800d70c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6a1a      	ldr	r2, [r3, #32]
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	43db      	mvns	r3, r3
 800d716:	401a      	ands	r2, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6a1a      	ldr	r2, [r3, #32]
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	f003 031f 	and.w	r3, r3, #31
 800d726:	6879      	ldr	r1, [r7, #4]
 800d728:	fa01 f303 	lsl.w	r3, r1, r3
 800d72c:	431a      	orrs	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	621a      	str	r2, [r3, #32]
}
 800d732:	bf00      	nop
 800d734:	371c      	adds	r7, #28
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
	...

0800d740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d750:	2b01      	cmp	r3, #1
 800d752:	d101      	bne.n	800d758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d754:	2302      	movs	r3, #2
 800d756:	e06d      	b.n	800d834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2202      	movs	r2, #2
 800d764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a30      	ldr	r2, [pc, #192]	; (800d840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d004      	beq.n	800d78c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4a2f      	ldr	r2, [pc, #188]	; (800d844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d108      	bne.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a20      	ldr	r2, [pc, #128]	; (800d840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d022      	beq.n	800d808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7ca:	d01d      	beq.n	800d808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a1d      	ldr	r2, [pc, #116]	; (800d848 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d018      	beq.n	800d808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a1c      	ldr	r2, [pc, #112]	; (800d84c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d013      	beq.n	800d808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a1a      	ldr	r2, [pc, #104]	; (800d850 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d00e      	beq.n	800d808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a15      	ldr	r2, [pc, #84]	; (800d844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d009      	beq.n	800d808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a16      	ldr	r2, [pc, #88]	; (800d854 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d004      	beq.n	800d808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a15      	ldr	r2, [pc, #84]	; (800d858 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d10c      	bne.n	800d822 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d80e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	4313      	orrs	r3, r2
 800d818:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2201      	movs	r2, #1
 800d826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3714      	adds	r7, #20
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr
 800d840:	40010000 	.word	0x40010000
 800d844:	40010400 	.word	0x40010400
 800d848:	40000400 	.word	0x40000400
 800d84c:	40000800 	.word	0x40000800
 800d850:	40000c00 	.word	0x40000c00
 800d854:	40001800 	.word	0x40001800
 800d858:	40014000 	.word	0x40014000

0800d85c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d866:	2300      	movs	r3, #0
 800d868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d870:	2b01      	cmp	r3, #1
 800d872:	d101      	bne.n	800d878 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d874:	2302      	movs	r3, #2
 800d876:	e065      	b.n	800d944 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	4313      	orrs	r3, r2
 800d89a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	041b      	lsls	r3, r3, #16
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a16      	ldr	r2, [pc, #88]	; (800d950 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d004      	beq.n	800d906 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a14      	ldr	r2, [pc, #80]	; (800d954 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d115      	bne.n	800d932 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d910:	051b      	lsls	r3, r3, #20
 800d912:	4313      	orrs	r3, r2
 800d914:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	69db      	ldr	r3, [r3, #28]
 800d920:	4313      	orrs	r3, r2
 800d922:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	6a1b      	ldr	r3, [r3, #32]
 800d92e:	4313      	orrs	r3, r2
 800d930:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68fa      	ldr	r2, [r7, #12]
 800d938:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr
 800d950:	40010000 	.word	0x40010000
 800d954:	40010400 	.word	0x40010400

0800d958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d974:	bf00      	nop
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d988:	bf00      	nop
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d101      	bne.n	800d9a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e042      	b.n	800da2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d106      	bne.n	800d9be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7f5 fe93 	bl	80036e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2224      	movs	r2, #36	; 0x24
 800d9c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f022 0201 	bic.w	r2, r2, #1
 800d9d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 fce0 	bl	800e39c <UART_SetConfig>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d101      	bne.n	800d9e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e022      	b.n	800da2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d002      	beq.n	800d9f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f001 fa34 	bl	800ee5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	689a      	ldr	r2, [r3, #8]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f042 0201 	orr.w	r2, r2, #1
 800da22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f001 fabb 	bl	800efa0 <UART_CheckIdleState>
 800da2a:	4603      	mov	r3, r0
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b08a      	sub	sp, #40	; 0x28
 800da38:	af02      	add	r7, sp, #8
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	603b      	str	r3, [r7, #0]
 800da40:	4613      	mov	r3, r2
 800da42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da4a:	2b20      	cmp	r3, #32
 800da4c:	f040 8083 	bne.w	800db56 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <HAL_UART_Transmit+0x28>
 800da56:	88fb      	ldrh	r3, [r7, #6]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d101      	bne.n	800da60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800da5c:	2301      	movs	r3, #1
 800da5e:	e07b      	b.n	800db58 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da66:	2b01      	cmp	r3, #1
 800da68:	d101      	bne.n	800da6e <HAL_UART_Transmit+0x3a>
 800da6a:	2302      	movs	r3, #2
 800da6c:	e074      	b.n	800db58 <HAL_UART_Transmit+0x124>
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2201      	movs	r2, #1
 800da72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2200      	movs	r2, #0
 800da7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2221      	movs	r2, #33	; 0x21
 800da82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800da86:	f7f6 f9a9 	bl	8003ddc <HAL_GetTick>
 800da8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	88fa      	ldrh	r2, [r7, #6]
 800da90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	88fa      	ldrh	r2, [r7, #6]
 800da98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daa4:	d108      	bne.n	800dab8 <HAL_UART_Transmit+0x84>
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	691b      	ldr	r3, [r3, #16]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d104      	bne.n	800dab8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800daae:	2300      	movs	r3, #0
 800dab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	61bb      	str	r3, [r7, #24]
 800dab6:	e003      	b.n	800dac0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dabc:	2300      	movs	r3, #0
 800dabe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800dac8:	e02c      	b.n	800db24 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	2200      	movs	r2, #0
 800dad2:	2180      	movs	r1, #128	; 0x80
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f001 faae 	bl	800f036 <UART_WaitOnFlagUntilTimeout>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800dae0:	2303      	movs	r3, #3
 800dae2:	e039      	b.n	800db58 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10b      	bne.n	800db02 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800daf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	3302      	adds	r3, #2
 800dafe:	61bb      	str	r3, [r7, #24]
 800db00:	e007      	b.n	800db12 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	781a      	ldrb	r2, [r3, #0]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	3301      	adds	r3, #1
 800db10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db18:	b29b      	uxth	r3, r3
 800db1a:	3b01      	subs	r3, #1
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1cc      	bne.n	800daca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	2200      	movs	r2, #0
 800db38:	2140      	movs	r1, #64	; 0x40
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f001 fa7b 	bl	800f036 <UART_WaitOnFlagUntilTimeout>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800db46:	2303      	movs	r3, #3
 800db48:	e006      	b.n	800db58 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2220      	movs	r2, #32
 800db4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800db52:	2300      	movs	r3, #0
 800db54:	e000      	b.n	800db58 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800db56:	2302      	movs	r3, #2
  }
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3720      	adds	r7, #32
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b08a      	sub	sp, #40	; 0x28
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	4613      	mov	r3, r2
 800db6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db74:	2b20      	cmp	r3, #32
 800db76:	d142      	bne.n	800dbfe <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <HAL_UART_Receive_DMA+0x24>
 800db7e:	88fb      	ldrh	r3, [r7, #6]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d101      	bne.n	800db88 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800db84:	2301      	movs	r3, #1
 800db86:	e03b      	b.n	800dc00 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d101      	bne.n	800db96 <HAL_UART_Receive_DMA+0x36>
 800db92:	2302      	movs	r3, #2
 800db94:	e034      	b.n	800dc00 <HAL_UART_Receive_DMA+0xa0>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a17      	ldr	r2, [pc, #92]	; (800dc08 <HAL_UART_Receive_DMA+0xa8>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d01f      	beq.n	800dbee <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d018      	beq.n	800dbee <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	e853 3f00 	ldrex	r3, [r3]
 800dbc8:	613b      	str	r3, [r7, #16]
   return(result);
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dbd0:	627b      	str	r3, [r7, #36]	; 0x24
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	623b      	str	r3, [r7, #32]
 800dbdc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbde:	69f9      	ldr	r1, [r7, #28]
 800dbe0:	6a3a      	ldr	r2, [r7, #32]
 800dbe2:	e841 2300 	strex	r3, r2, [r1]
 800dbe6:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d1e6      	bne.n	800dbbc <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dbee:	88fb      	ldrh	r3, [r7, #6]
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	68b9      	ldr	r1, [r7, #8]
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f001 fae7 	bl	800f1c8 <UART_Start_Receive_DMA>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	e000      	b.n	800dc00 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dbfe:	2302      	movs	r3, #2
  }
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3728      	adds	r7, #40	; 0x28
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	58000c00 	.word	0x58000c00

0800dc0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b0ba      	sub	sp, #232	; 0xe8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	69db      	ldr	r3, [r3, #28]
 800dc1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dc32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dc36:	f640 030f 	movw	r3, #2063	; 0x80f
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dc40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d11b      	bne.n	800dc80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dc48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc4c:	f003 0320 	and.w	r3, r3, #32
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d015      	beq.n	800dc80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dc54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc58:	f003 0320 	and.w	r3, r3, #32
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d105      	bne.n	800dc6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d009      	beq.n	800dc80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f000 835a 	beq.w	800e32a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	4798      	blx	r3
      }
      return;
 800dc7e:	e354      	b.n	800e32a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dc80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f000 811f 	beq.w	800dec8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dc8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dc8e:	4b8b      	ldr	r3, [pc, #556]	; (800debc <HAL_UART_IRQHandler+0x2b0>)
 800dc90:	4013      	ands	r3, r2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d106      	bne.n	800dca4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dc96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dc9a:	4b89      	ldr	r3, [pc, #548]	; (800dec0 <HAL_UART_IRQHandler+0x2b4>)
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f000 8112 	beq.w	800dec8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dca8:	f003 0301 	and.w	r3, r3, #1
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d011      	beq.n	800dcd4 <HAL_UART_IRQHandler+0xc8>
 800dcb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00b      	beq.n	800dcd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcca:	f043 0201 	orr.w	r2, r3, #1
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcd8:	f003 0302 	and.w	r3, r3, #2
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d011      	beq.n	800dd04 <HAL_UART_IRQHandler+0xf8>
 800dce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dce4:	f003 0301 	and.w	r3, r3, #1
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00b      	beq.n	800dd04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2202      	movs	r2, #2
 800dcf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcfa:	f043 0204 	orr.w	r2, r3, #4
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd08:	f003 0304 	and.w	r3, r3, #4
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d011      	beq.n	800dd34 <HAL_UART_IRQHandler+0x128>
 800dd10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd14:	f003 0301 	and.w	r3, r3, #1
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d00b      	beq.n	800dd34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2204      	movs	r2, #4
 800dd22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd2a:	f043 0202 	orr.w	r2, r3, #2
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dd34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd38:	f003 0308 	and.w	r3, r3, #8
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d017      	beq.n	800dd70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dd40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd44:	f003 0320 	and.w	r3, r3, #32
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d105      	bne.n	800dd58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dd4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dd50:	4b5a      	ldr	r3, [pc, #360]	; (800debc <HAL_UART_IRQHandler+0x2b0>)
 800dd52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d00b      	beq.n	800dd70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2208      	movs	r2, #8
 800dd5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd66:	f043 0208 	orr.w	r2, r3, #8
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dd70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d012      	beq.n	800dda2 <HAL_UART_IRQHandler+0x196>
 800dd7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00c      	beq.n	800dda2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd98:	f043 0220 	orr.w	r2, r3, #32
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f000 82c0 	beq.w	800e32e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ddae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddb2:	f003 0320 	and.w	r3, r3, #32
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d013      	beq.n	800dde2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ddba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddbe:	f003 0320 	and.w	r3, r3, #32
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d105      	bne.n	800ddd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ddc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d007      	beq.n	800dde2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d003      	beq.n	800dde2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dde8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddf6:	2b40      	cmp	r3, #64	; 0x40
 800ddf8:	d005      	beq.n	800de06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ddfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800de02:	2b00      	cmp	r3, #0
 800de04:	d04f      	beq.n	800dea6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f001 fac8 	bl	800f39c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de16:	2b40      	cmp	r3, #64	; 0x40
 800de18:	d141      	bne.n	800de9e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3308      	adds	r3, #8
 800de20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de28:	e853 3f00 	ldrex	r3, [r3]
 800de2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800de30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3308      	adds	r3, #8
 800de42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800de46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800de4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800de52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800de56:	e841 2300 	strex	r3, r2, [r1]
 800de5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800de5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1d9      	bne.n	800de1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d013      	beq.n	800de96 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de72:	4a14      	ldr	r2, [pc, #80]	; (800dec4 <HAL_UART_IRQHandler+0x2b8>)
 800de74:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7f8 f98e 	bl	800619c <HAL_DMA_Abort_IT>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d017      	beq.n	800deb6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800de90:	4610      	mov	r0, r2
 800de92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de94:	e00f      	b.n	800deb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 fa6a 	bl	800e370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de9c:	e00b      	b.n	800deb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 fa66 	bl	800e370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dea4:	e007      	b.n	800deb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 fa62 	bl	800e370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800deb4:	e23b      	b.n	800e32e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800deb6:	bf00      	nop
    return;
 800deb8:	e239      	b.n	800e32e <HAL_UART_IRQHandler+0x722>
 800deba:	bf00      	nop
 800debc:	10000001 	.word	0x10000001
 800dec0:	04000120 	.word	0x04000120
 800dec4:	0800f643 	.word	0x0800f643

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800decc:	2b01      	cmp	r3, #1
 800dece:	f040 81ce 	bne.w	800e26e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ded2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ded6:	f003 0310 	and.w	r3, r3, #16
 800deda:	2b00      	cmp	r3, #0
 800dedc:	f000 81c7 	beq.w	800e26e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dee4:	f003 0310 	and.w	r3, r3, #16
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f000 81c0 	beq.w	800e26e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2210      	movs	r2, #16
 800def4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df00:	2b40      	cmp	r3, #64	; 0x40
 800df02:	f040 813b 	bne.w	800e17c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a8b      	ldr	r2, [pc, #556]	; (800e13c <HAL_UART_IRQHandler+0x530>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d059      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a89      	ldr	r2, [pc, #548]	; (800e140 <HAL_UART_IRQHandler+0x534>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d053      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a87      	ldr	r2, [pc, #540]	; (800e144 <HAL_UART_IRQHandler+0x538>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d04d      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a85      	ldr	r2, [pc, #532]	; (800e148 <HAL_UART_IRQHandler+0x53c>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d047      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a83      	ldr	r2, [pc, #524]	; (800e14c <HAL_UART_IRQHandler+0x540>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d041      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a81      	ldr	r2, [pc, #516]	; (800e150 <HAL_UART_IRQHandler+0x544>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d03b      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a7f      	ldr	r2, [pc, #508]	; (800e154 <HAL_UART_IRQHandler+0x548>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d035      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a7d      	ldr	r2, [pc, #500]	; (800e158 <HAL_UART_IRQHandler+0x54c>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d02f      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a7b      	ldr	r2, [pc, #492]	; (800e15c <HAL_UART_IRQHandler+0x550>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d029      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a79      	ldr	r2, [pc, #484]	; (800e160 <HAL_UART_IRQHandler+0x554>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d023      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a77      	ldr	r2, [pc, #476]	; (800e164 <HAL_UART_IRQHandler+0x558>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d01d      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a75      	ldr	r2, [pc, #468]	; (800e168 <HAL_UART_IRQHandler+0x55c>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d017      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a73      	ldr	r2, [pc, #460]	; (800e16c <HAL_UART_IRQHandler+0x560>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d011      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4a71      	ldr	r2, [pc, #452]	; (800e170 <HAL_UART_IRQHandler+0x564>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d00b      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a6f      	ldr	r2, [pc, #444]	; (800e174 <HAL_UART_IRQHandler+0x568>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d005      	beq.n	800dfc6 <HAL_UART_IRQHandler+0x3ba>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a6d      	ldr	r2, [pc, #436]	; (800e178 <HAL_UART_IRQHandler+0x56c>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d105      	bne.n	800dfd2 <HAL_UART_IRQHandler+0x3c6>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	e004      	b.n	800dfdc <HAL_UART_IRQHandler+0x3d0>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dfe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 81a4 	beq.w	800e332 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dff0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dff4:	429a      	cmp	r2, r3
 800dff6:	f080 819c 	bcs.w	800e332 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e008:	69db      	ldr	r3, [r3, #28]
 800e00a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e00e:	f000 8086 	beq.w	800e11e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e01e:	e853 3f00 	ldrex	r3, [r3]
 800e022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e02a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e02e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	461a      	mov	r2, r3
 800e038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e03c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e040:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e044:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e048:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e04c:	e841 2300 	strex	r3, r2, [r1]
 800e050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1da      	bne.n	800e012 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3308      	adds	r3, #8
 800e062:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e066:	e853 3f00 	ldrex	r3, [r3]
 800e06a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e06c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e06e:	f023 0301 	bic.w	r3, r3, #1
 800e072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	3308      	adds	r3, #8
 800e07c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e080:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e084:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e086:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e088:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e08c:	e841 2300 	strex	r3, r2, [r1]
 800e090:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1e1      	bne.n	800e05c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3308      	adds	r3, #8
 800e09e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0a2:	e853 3f00 	ldrex	r3, [r3]
 800e0a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e0a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	3308      	adds	r3, #8
 800e0b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e0bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e0be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e0c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e0c4:	e841 2300 	strex	r3, r2, [r1]
 800e0c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e0ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1e3      	bne.n	800e098 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2220      	movs	r2, #32
 800e0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e6:	e853 3f00 	ldrex	r3, [r3]
 800e0ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0ee:	f023 0310 	bic.w	r3, r3, #16
 800e0f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e100:	65bb      	str	r3, [r7, #88]	; 0x58
 800e102:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e108:	e841 2300 	strex	r3, r2, [r1]
 800e10c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1e4      	bne.n	800e0de <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e118:	4618      	mov	r0, r3
 800e11a:	f7f7 fd21 	bl	8005b60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	1ad3      	subs	r3, r2, r3
 800e12e:	b29b      	uxth	r3, r3
 800e130:	4619      	mov	r1, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f926 	bl	800e384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e138:	e0fb      	b.n	800e332 <HAL_UART_IRQHandler+0x726>
 800e13a:	bf00      	nop
 800e13c:	40020010 	.word	0x40020010
 800e140:	40020028 	.word	0x40020028
 800e144:	40020040 	.word	0x40020040
 800e148:	40020058 	.word	0x40020058
 800e14c:	40020070 	.word	0x40020070
 800e150:	40020088 	.word	0x40020088
 800e154:	400200a0 	.word	0x400200a0
 800e158:	400200b8 	.word	0x400200b8
 800e15c:	40020410 	.word	0x40020410
 800e160:	40020428 	.word	0x40020428
 800e164:	40020440 	.word	0x40020440
 800e168:	40020458 	.word	0x40020458
 800e16c:	40020470 	.word	0x40020470
 800e170:	40020488 	.word	0x40020488
 800e174:	400204a0 	.word	0x400204a0
 800e178:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e188:	b29b      	uxth	r3, r3
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e196:	b29b      	uxth	r3, r3
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f000 80cc 	beq.w	800e336 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e19e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f000 80c7 	beq.w	800e336 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b0:	e853 3f00 	ldrex	r3, [r3]
 800e1b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1ca:	647b      	str	r3, [r7, #68]	; 0x44
 800e1cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1d2:	e841 2300 	strex	r3, r2, [r1]
 800e1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d1e4      	bne.n	800e1a8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e8:	e853 3f00 	ldrex	r3, [r3]
 800e1ec:	623b      	str	r3, [r7, #32]
   return(result);
 800e1ee:	6a3a      	ldr	r2, [r7, #32]
 800e1f0:	4b54      	ldr	r3, [pc, #336]	; (800e344 <HAL_UART_IRQHandler+0x738>)
 800e1f2:	4013      	ands	r3, r2
 800e1f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3308      	adds	r3, #8
 800e1fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e202:	633a      	str	r2, [r7, #48]	; 0x30
 800e204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e20a:	e841 2300 	strex	r3, r2, [r1]
 800e20e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1e3      	bne.n	800e1de <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2220      	movs	r2, #32
 800e21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2200      	movs	r2, #0
 800e228:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	e853 3f00 	ldrex	r3, [r3]
 800e236:	60fb      	str	r3, [r7, #12]
   return(result);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f023 0310 	bic.w	r3, r3, #16
 800e23e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	461a      	mov	r2, r3
 800e248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e24c:	61fb      	str	r3, [r7, #28]
 800e24e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e250:	69b9      	ldr	r1, [r7, #24]
 800e252:	69fa      	ldr	r2, [r7, #28]
 800e254:	e841 2300 	strex	r3, r2, [r1]
 800e258:	617b      	str	r3, [r7, #20]
   return(result);
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d1e4      	bne.n	800e22a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e264:	4619      	mov	r1, r3
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 f88c 	bl	800e384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e26c:	e063      	b.n	800e336 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00e      	beq.n	800e298 <HAL_UART_IRQHandler+0x68c>
 800e27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e27e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e282:	2b00      	cmp	r3, #0
 800e284:	d008      	beq.n	800e298 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e28e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f001 fa17 	bl	800f6c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e296:	e051      	b.n	800e33c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e29c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d014      	beq.n	800e2ce <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d105      	bne.n	800e2bc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e2b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d008      	beq.n	800e2ce <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d03a      	beq.n	800e33a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	4798      	blx	r3
    }
    return;
 800e2cc:	e035      	b.n	800e33a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d009      	beq.n	800e2ee <HAL_UART_IRQHandler+0x6e2>
 800e2da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d003      	beq.n	800e2ee <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f001 f9c1 	bl	800f66e <UART_EndTransmit_IT>
    return;
 800e2ec:	e026      	b.n	800e33c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d009      	beq.n	800e30e <HAL_UART_IRQHandler+0x702>
 800e2fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f001 f9f0 	bl	800f6ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e30c:	e016      	b.n	800e33c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e316:	2b00      	cmp	r3, #0
 800e318:	d010      	beq.n	800e33c <HAL_UART_IRQHandler+0x730>
 800e31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	da0c      	bge.n	800e33c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f001 f9d8 	bl	800f6d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e328:	e008      	b.n	800e33c <HAL_UART_IRQHandler+0x730>
      return;
 800e32a:	bf00      	nop
 800e32c:	e006      	b.n	800e33c <HAL_UART_IRQHandler+0x730>
    return;
 800e32e:	bf00      	nop
 800e330:	e004      	b.n	800e33c <HAL_UART_IRQHandler+0x730>
      return;
 800e332:	bf00      	nop
 800e334:	e002      	b.n	800e33c <HAL_UART_IRQHandler+0x730>
      return;
 800e336:	bf00      	nop
 800e338:	e000      	b.n	800e33c <HAL_UART_IRQHandler+0x730>
    return;
 800e33a:	bf00      	nop
  }
}
 800e33c:	37e8      	adds	r7, #232	; 0xe8
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	effffffe 	.word	0xeffffffe

0800e348 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e350:	bf00      	nop
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e364:	bf00      	nop
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	460b      	mov	r3, r1
 800e38e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e39c:	b5b0      	push	{r4, r5, r7, lr}
 800e39e:	b08e      	sub	sp, #56	; 0x38
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	689a      	ldr	r2, [r3, #8]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	691b      	ldr	r3, [r3, #16]
 800e3b2:	431a      	orrs	r2, r3
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	695b      	ldr	r3, [r3, #20]
 800e3b8:	431a      	orrs	r2, r3
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	69db      	ldr	r3, [r3, #28]
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	4bbf      	ldr	r3, [pc, #764]	; (800e6c8 <UART_SetConfig+0x32c>)
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	6812      	ldr	r2, [r2, #0]
 800e3d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3d2:	430b      	orrs	r3, r1
 800e3d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68da      	ldr	r2, [r3, #12]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	430a      	orrs	r2, r1
 800e3ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	699b      	ldr	r3, [r3, #24]
 800e3f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4ab5      	ldr	r2, [pc, #724]	; (800e6cc <UART_SetConfig+0x330>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d004      	beq.n	800e406 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6a1b      	ldr	r3, [r3, #32]
 800e400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e402:	4313      	orrs	r3, r2
 800e404:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	689a      	ldr	r2, [r3, #8]
 800e40c:	4bb0      	ldr	r3, [pc, #704]	; (800e6d0 <UART_SetConfig+0x334>)
 800e40e:	4013      	ands	r3, r2
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	6812      	ldr	r2, [r2, #0]
 800e414:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e416:	430b      	orrs	r3, r1
 800e418:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e420:	f023 010f 	bic.w	r1, r3, #15
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	430a      	orrs	r2, r1
 800e42e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4aa7      	ldr	r2, [pc, #668]	; (800e6d4 <UART_SetConfig+0x338>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d176      	bne.n	800e528 <UART_SetConfig+0x18c>
 800e43a:	4ba7      	ldr	r3, [pc, #668]	; (800e6d8 <UART_SetConfig+0x33c>)
 800e43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e43e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e442:	2b28      	cmp	r3, #40	; 0x28
 800e444:	d86c      	bhi.n	800e520 <UART_SetConfig+0x184>
 800e446:	a201      	add	r2, pc, #4	; (adr r2, 800e44c <UART_SetConfig+0xb0>)
 800e448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e44c:	0800e4f1 	.word	0x0800e4f1
 800e450:	0800e521 	.word	0x0800e521
 800e454:	0800e521 	.word	0x0800e521
 800e458:	0800e521 	.word	0x0800e521
 800e45c:	0800e521 	.word	0x0800e521
 800e460:	0800e521 	.word	0x0800e521
 800e464:	0800e521 	.word	0x0800e521
 800e468:	0800e521 	.word	0x0800e521
 800e46c:	0800e4f9 	.word	0x0800e4f9
 800e470:	0800e521 	.word	0x0800e521
 800e474:	0800e521 	.word	0x0800e521
 800e478:	0800e521 	.word	0x0800e521
 800e47c:	0800e521 	.word	0x0800e521
 800e480:	0800e521 	.word	0x0800e521
 800e484:	0800e521 	.word	0x0800e521
 800e488:	0800e521 	.word	0x0800e521
 800e48c:	0800e501 	.word	0x0800e501
 800e490:	0800e521 	.word	0x0800e521
 800e494:	0800e521 	.word	0x0800e521
 800e498:	0800e521 	.word	0x0800e521
 800e49c:	0800e521 	.word	0x0800e521
 800e4a0:	0800e521 	.word	0x0800e521
 800e4a4:	0800e521 	.word	0x0800e521
 800e4a8:	0800e521 	.word	0x0800e521
 800e4ac:	0800e509 	.word	0x0800e509
 800e4b0:	0800e521 	.word	0x0800e521
 800e4b4:	0800e521 	.word	0x0800e521
 800e4b8:	0800e521 	.word	0x0800e521
 800e4bc:	0800e521 	.word	0x0800e521
 800e4c0:	0800e521 	.word	0x0800e521
 800e4c4:	0800e521 	.word	0x0800e521
 800e4c8:	0800e521 	.word	0x0800e521
 800e4cc:	0800e511 	.word	0x0800e511
 800e4d0:	0800e521 	.word	0x0800e521
 800e4d4:	0800e521 	.word	0x0800e521
 800e4d8:	0800e521 	.word	0x0800e521
 800e4dc:	0800e521 	.word	0x0800e521
 800e4e0:	0800e521 	.word	0x0800e521
 800e4e4:	0800e521 	.word	0x0800e521
 800e4e8:	0800e521 	.word	0x0800e521
 800e4ec:	0800e519 	.word	0x0800e519
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4f6:	e222      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e4f8:	2304      	movs	r3, #4
 800e4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4fe:	e21e      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e500:	2308      	movs	r3, #8
 800e502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e506:	e21a      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e508:	2310      	movs	r3, #16
 800e50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e50e:	e216      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e510:	2320      	movs	r3, #32
 800e512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e516:	e212      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e518:	2340      	movs	r3, #64	; 0x40
 800e51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e51e:	e20e      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e520:	2380      	movs	r3, #128	; 0x80
 800e522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e526:	e20a      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a6b      	ldr	r2, [pc, #428]	; (800e6dc <UART_SetConfig+0x340>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d130      	bne.n	800e594 <UART_SetConfig+0x1f8>
 800e532:	4b69      	ldr	r3, [pc, #420]	; (800e6d8 <UART_SetConfig+0x33c>)
 800e534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e536:	f003 0307 	and.w	r3, r3, #7
 800e53a:	2b05      	cmp	r3, #5
 800e53c:	d826      	bhi.n	800e58c <UART_SetConfig+0x1f0>
 800e53e:	a201      	add	r2, pc, #4	; (adr r2, 800e544 <UART_SetConfig+0x1a8>)
 800e540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e544:	0800e55d 	.word	0x0800e55d
 800e548:	0800e565 	.word	0x0800e565
 800e54c:	0800e56d 	.word	0x0800e56d
 800e550:	0800e575 	.word	0x0800e575
 800e554:	0800e57d 	.word	0x0800e57d
 800e558:	0800e585 	.word	0x0800e585
 800e55c:	2300      	movs	r3, #0
 800e55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e562:	e1ec      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e564:	2304      	movs	r3, #4
 800e566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e56a:	e1e8      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e56c:	2308      	movs	r3, #8
 800e56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e572:	e1e4      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e574:	2310      	movs	r3, #16
 800e576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e57a:	e1e0      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e57c:	2320      	movs	r3, #32
 800e57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e582:	e1dc      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e584:	2340      	movs	r3, #64	; 0x40
 800e586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e58a:	e1d8      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e58c:	2380      	movs	r3, #128	; 0x80
 800e58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e592:	e1d4      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a51      	ldr	r2, [pc, #324]	; (800e6e0 <UART_SetConfig+0x344>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d130      	bne.n	800e600 <UART_SetConfig+0x264>
 800e59e:	4b4e      	ldr	r3, [pc, #312]	; (800e6d8 <UART_SetConfig+0x33c>)
 800e5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5a2:	f003 0307 	and.w	r3, r3, #7
 800e5a6:	2b05      	cmp	r3, #5
 800e5a8:	d826      	bhi.n	800e5f8 <UART_SetConfig+0x25c>
 800e5aa:	a201      	add	r2, pc, #4	; (adr r2, 800e5b0 <UART_SetConfig+0x214>)
 800e5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b0:	0800e5c9 	.word	0x0800e5c9
 800e5b4:	0800e5d1 	.word	0x0800e5d1
 800e5b8:	0800e5d9 	.word	0x0800e5d9
 800e5bc:	0800e5e1 	.word	0x0800e5e1
 800e5c0:	0800e5e9 	.word	0x0800e5e9
 800e5c4:	0800e5f1 	.word	0x0800e5f1
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5ce:	e1b6      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e5d0:	2304      	movs	r3, #4
 800e5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5d6:	e1b2      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e5d8:	2308      	movs	r3, #8
 800e5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5de:	e1ae      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e5e0:	2310      	movs	r3, #16
 800e5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5e6:	e1aa      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e5e8:	2320      	movs	r3, #32
 800e5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5ee:	e1a6      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e5f0:	2340      	movs	r3, #64	; 0x40
 800e5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5f6:	e1a2      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e5f8:	2380      	movs	r3, #128	; 0x80
 800e5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5fe:	e19e      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a37      	ldr	r2, [pc, #220]	; (800e6e4 <UART_SetConfig+0x348>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d130      	bne.n	800e66c <UART_SetConfig+0x2d0>
 800e60a:	4b33      	ldr	r3, [pc, #204]	; (800e6d8 <UART_SetConfig+0x33c>)
 800e60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e60e:	f003 0307 	and.w	r3, r3, #7
 800e612:	2b05      	cmp	r3, #5
 800e614:	d826      	bhi.n	800e664 <UART_SetConfig+0x2c8>
 800e616:	a201      	add	r2, pc, #4	; (adr r2, 800e61c <UART_SetConfig+0x280>)
 800e618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61c:	0800e635 	.word	0x0800e635
 800e620:	0800e63d 	.word	0x0800e63d
 800e624:	0800e645 	.word	0x0800e645
 800e628:	0800e64d 	.word	0x0800e64d
 800e62c:	0800e655 	.word	0x0800e655
 800e630:	0800e65d 	.word	0x0800e65d
 800e634:	2300      	movs	r3, #0
 800e636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e63a:	e180      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e63c:	2304      	movs	r3, #4
 800e63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e642:	e17c      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e644:	2308      	movs	r3, #8
 800e646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e64a:	e178      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e64c:	2310      	movs	r3, #16
 800e64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e652:	e174      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e654:	2320      	movs	r3, #32
 800e656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e65a:	e170      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e65c:	2340      	movs	r3, #64	; 0x40
 800e65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e662:	e16c      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e664:	2380      	movs	r3, #128	; 0x80
 800e666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e66a:	e168      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4a1d      	ldr	r2, [pc, #116]	; (800e6e8 <UART_SetConfig+0x34c>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d142      	bne.n	800e6fc <UART_SetConfig+0x360>
 800e676:	4b18      	ldr	r3, [pc, #96]	; (800e6d8 <UART_SetConfig+0x33c>)
 800e678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e67a:	f003 0307 	and.w	r3, r3, #7
 800e67e:	2b05      	cmp	r3, #5
 800e680:	d838      	bhi.n	800e6f4 <UART_SetConfig+0x358>
 800e682:	a201      	add	r2, pc, #4	; (adr r2, 800e688 <UART_SetConfig+0x2ec>)
 800e684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e688:	0800e6a1 	.word	0x0800e6a1
 800e68c:	0800e6a9 	.word	0x0800e6a9
 800e690:	0800e6b1 	.word	0x0800e6b1
 800e694:	0800e6b9 	.word	0x0800e6b9
 800e698:	0800e6c1 	.word	0x0800e6c1
 800e69c:	0800e6ed 	.word	0x0800e6ed
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6a6:	e14a      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e6a8:	2304      	movs	r3, #4
 800e6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6ae:	e146      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e6b0:	2308      	movs	r3, #8
 800e6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6b6:	e142      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e6b8:	2310      	movs	r3, #16
 800e6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6be:	e13e      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e6c0:	2320      	movs	r3, #32
 800e6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6c6:	e13a      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e6c8:	cfff69f3 	.word	0xcfff69f3
 800e6cc:	58000c00 	.word	0x58000c00
 800e6d0:	11fff4ff 	.word	0x11fff4ff
 800e6d4:	40011000 	.word	0x40011000
 800e6d8:	58024400 	.word	0x58024400
 800e6dc:	40004400 	.word	0x40004400
 800e6e0:	40004800 	.word	0x40004800
 800e6e4:	40004c00 	.word	0x40004c00
 800e6e8:	40005000 	.word	0x40005000
 800e6ec:	2340      	movs	r3, #64	; 0x40
 800e6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6f2:	e124      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e6f4:	2380      	movs	r3, #128	; 0x80
 800e6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6fa:	e120      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4acc      	ldr	r2, [pc, #816]	; (800ea34 <UART_SetConfig+0x698>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d176      	bne.n	800e7f4 <UART_SetConfig+0x458>
 800e706:	4bcc      	ldr	r3, [pc, #816]	; (800ea38 <UART_SetConfig+0x69c>)
 800e708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e70a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e70e:	2b28      	cmp	r3, #40	; 0x28
 800e710:	d86c      	bhi.n	800e7ec <UART_SetConfig+0x450>
 800e712:	a201      	add	r2, pc, #4	; (adr r2, 800e718 <UART_SetConfig+0x37c>)
 800e714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e718:	0800e7bd 	.word	0x0800e7bd
 800e71c:	0800e7ed 	.word	0x0800e7ed
 800e720:	0800e7ed 	.word	0x0800e7ed
 800e724:	0800e7ed 	.word	0x0800e7ed
 800e728:	0800e7ed 	.word	0x0800e7ed
 800e72c:	0800e7ed 	.word	0x0800e7ed
 800e730:	0800e7ed 	.word	0x0800e7ed
 800e734:	0800e7ed 	.word	0x0800e7ed
 800e738:	0800e7c5 	.word	0x0800e7c5
 800e73c:	0800e7ed 	.word	0x0800e7ed
 800e740:	0800e7ed 	.word	0x0800e7ed
 800e744:	0800e7ed 	.word	0x0800e7ed
 800e748:	0800e7ed 	.word	0x0800e7ed
 800e74c:	0800e7ed 	.word	0x0800e7ed
 800e750:	0800e7ed 	.word	0x0800e7ed
 800e754:	0800e7ed 	.word	0x0800e7ed
 800e758:	0800e7cd 	.word	0x0800e7cd
 800e75c:	0800e7ed 	.word	0x0800e7ed
 800e760:	0800e7ed 	.word	0x0800e7ed
 800e764:	0800e7ed 	.word	0x0800e7ed
 800e768:	0800e7ed 	.word	0x0800e7ed
 800e76c:	0800e7ed 	.word	0x0800e7ed
 800e770:	0800e7ed 	.word	0x0800e7ed
 800e774:	0800e7ed 	.word	0x0800e7ed
 800e778:	0800e7d5 	.word	0x0800e7d5
 800e77c:	0800e7ed 	.word	0x0800e7ed
 800e780:	0800e7ed 	.word	0x0800e7ed
 800e784:	0800e7ed 	.word	0x0800e7ed
 800e788:	0800e7ed 	.word	0x0800e7ed
 800e78c:	0800e7ed 	.word	0x0800e7ed
 800e790:	0800e7ed 	.word	0x0800e7ed
 800e794:	0800e7ed 	.word	0x0800e7ed
 800e798:	0800e7dd 	.word	0x0800e7dd
 800e79c:	0800e7ed 	.word	0x0800e7ed
 800e7a0:	0800e7ed 	.word	0x0800e7ed
 800e7a4:	0800e7ed 	.word	0x0800e7ed
 800e7a8:	0800e7ed 	.word	0x0800e7ed
 800e7ac:	0800e7ed 	.word	0x0800e7ed
 800e7b0:	0800e7ed 	.word	0x0800e7ed
 800e7b4:	0800e7ed 	.word	0x0800e7ed
 800e7b8:	0800e7e5 	.word	0x0800e7e5
 800e7bc:	2301      	movs	r3, #1
 800e7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7c2:	e0bc      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e7c4:	2304      	movs	r3, #4
 800e7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ca:	e0b8      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e7cc:	2308      	movs	r3, #8
 800e7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7d2:	e0b4      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e7d4:	2310      	movs	r3, #16
 800e7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7da:	e0b0      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e7dc:	2320      	movs	r3, #32
 800e7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7e2:	e0ac      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e7e4:	2340      	movs	r3, #64	; 0x40
 800e7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ea:	e0a8      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e7ec:	2380      	movs	r3, #128	; 0x80
 800e7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7f2:	e0a4      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a90      	ldr	r2, [pc, #576]	; (800ea3c <UART_SetConfig+0x6a0>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d130      	bne.n	800e860 <UART_SetConfig+0x4c4>
 800e7fe:	4b8e      	ldr	r3, [pc, #568]	; (800ea38 <UART_SetConfig+0x69c>)
 800e800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e802:	f003 0307 	and.w	r3, r3, #7
 800e806:	2b05      	cmp	r3, #5
 800e808:	d826      	bhi.n	800e858 <UART_SetConfig+0x4bc>
 800e80a:	a201      	add	r2, pc, #4	; (adr r2, 800e810 <UART_SetConfig+0x474>)
 800e80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e810:	0800e829 	.word	0x0800e829
 800e814:	0800e831 	.word	0x0800e831
 800e818:	0800e839 	.word	0x0800e839
 800e81c:	0800e841 	.word	0x0800e841
 800e820:	0800e849 	.word	0x0800e849
 800e824:	0800e851 	.word	0x0800e851
 800e828:	2300      	movs	r3, #0
 800e82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e82e:	e086      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e830:	2304      	movs	r3, #4
 800e832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e836:	e082      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e838:	2308      	movs	r3, #8
 800e83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e83e:	e07e      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e840:	2310      	movs	r3, #16
 800e842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e846:	e07a      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e848:	2320      	movs	r3, #32
 800e84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e84e:	e076      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e850:	2340      	movs	r3, #64	; 0x40
 800e852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e856:	e072      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e858:	2380      	movs	r3, #128	; 0x80
 800e85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e85e:	e06e      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a76      	ldr	r2, [pc, #472]	; (800ea40 <UART_SetConfig+0x6a4>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d130      	bne.n	800e8cc <UART_SetConfig+0x530>
 800e86a:	4b73      	ldr	r3, [pc, #460]	; (800ea38 <UART_SetConfig+0x69c>)
 800e86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e86e:	f003 0307 	and.w	r3, r3, #7
 800e872:	2b05      	cmp	r3, #5
 800e874:	d826      	bhi.n	800e8c4 <UART_SetConfig+0x528>
 800e876:	a201      	add	r2, pc, #4	; (adr r2, 800e87c <UART_SetConfig+0x4e0>)
 800e878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e87c:	0800e895 	.word	0x0800e895
 800e880:	0800e89d 	.word	0x0800e89d
 800e884:	0800e8a5 	.word	0x0800e8a5
 800e888:	0800e8ad 	.word	0x0800e8ad
 800e88c:	0800e8b5 	.word	0x0800e8b5
 800e890:	0800e8bd 	.word	0x0800e8bd
 800e894:	2300      	movs	r3, #0
 800e896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e89a:	e050      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e89c:	2304      	movs	r3, #4
 800e89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8a2:	e04c      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e8a4:	2308      	movs	r3, #8
 800e8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8aa:	e048      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e8ac:	2310      	movs	r3, #16
 800e8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8b2:	e044      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e8b4:	2320      	movs	r3, #32
 800e8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ba:	e040      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e8bc:	2340      	movs	r3, #64	; 0x40
 800e8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8c2:	e03c      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e8c4:	2380      	movs	r3, #128	; 0x80
 800e8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ca:	e038      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a5c      	ldr	r2, [pc, #368]	; (800ea44 <UART_SetConfig+0x6a8>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d130      	bne.n	800e938 <UART_SetConfig+0x59c>
 800e8d6:	4b58      	ldr	r3, [pc, #352]	; (800ea38 <UART_SetConfig+0x69c>)
 800e8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8da:	f003 0307 	and.w	r3, r3, #7
 800e8de:	2b05      	cmp	r3, #5
 800e8e0:	d826      	bhi.n	800e930 <UART_SetConfig+0x594>
 800e8e2:	a201      	add	r2, pc, #4	; (adr r2, 800e8e8 <UART_SetConfig+0x54c>)
 800e8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e8:	0800e901 	.word	0x0800e901
 800e8ec:	0800e909 	.word	0x0800e909
 800e8f0:	0800e911 	.word	0x0800e911
 800e8f4:	0800e919 	.word	0x0800e919
 800e8f8:	0800e921 	.word	0x0800e921
 800e8fc:	0800e929 	.word	0x0800e929
 800e900:	2302      	movs	r3, #2
 800e902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e906:	e01a      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e908:	2304      	movs	r3, #4
 800e90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e90e:	e016      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e910:	2308      	movs	r3, #8
 800e912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e916:	e012      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e918:	2310      	movs	r3, #16
 800e91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e91e:	e00e      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e920:	2320      	movs	r3, #32
 800e922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e926:	e00a      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e928:	2340      	movs	r3, #64	; 0x40
 800e92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e92e:	e006      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e930:	2380      	movs	r3, #128	; 0x80
 800e932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e936:	e002      	b.n	800e93e <UART_SetConfig+0x5a2>
 800e938:	2380      	movs	r3, #128	; 0x80
 800e93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4a40      	ldr	r2, [pc, #256]	; (800ea44 <UART_SetConfig+0x6a8>)
 800e944:	4293      	cmp	r3, r2
 800e946:	f040 80ef 	bne.w	800eb28 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e94a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e94e:	2b20      	cmp	r3, #32
 800e950:	dc46      	bgt.n	800e9e0 <UART_SetConfig+0x644>
 800e952:	2b02      	cmp	r3, #2
 800e954:	f2c0 8081 	blt.w	800ea5a <UART_SetConfig+0x6be>
 800e958:	3b02      	subs	r3, #2
 800e95a:	2b1e      	cmp	r3, #30
 800e95c:	d87d      	bhi.n	800ea5a <UART_SetConfig+0x6be>
 800e95e:	a201      	add	r2, pc, #4	; (adr r2, 800e964 <UART_SetConfig+0x5c8>)
 800e960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e964:	0800e9e7 	.word	0x0800e9e7
 800e968:	0800ea5b 	.word	0x0800ea5b
 800e96c:	0800e9ef 	.word	0x0800e9ef
 800e970:	0800ea5b 	.word	0x0800ea5b
 800e974:	0800ea5b 	.word	0x0800ea5b
 800e978:	0800ea5b 	.word	0x0800ea5b
 800e97c:	0800e9ff 	.word	0x0800e9ff
 800e980:	0800ea5b 	.word	0x0800ea5b
 800e984:	0800ea5b 	.word	0x0800ea5b
 800e988:	0800ea5b 	.word	0x0800ea5b
 800e98c:	0800ea5b 	.word	0x0800ea5b
 800e990:	0800ea5b 	.word	0x0800ea5b
 800e994:	0800ea5b 	.word	0x0800ea5b
 800e998:	0800ea5b 	.word	0x0800ea5b
 800e99c:	0800ea0f 	.word	0x0800ea0f
 800e9a0:	0800ea5b 	.word	0x0800ea5b
 800e9a4:	0800ea5b 	.word	0x0800ea5b
 800e9a8:	0800ea5b 	.word	0x0800ea5b
 800e9ac:	0800ea5b 	.word	0x0800ea5b
 800e9b0:	0800ea5b 	.word	0x0800ea5b
 800e9b4:	0800ea5b 	.word	0x0800ea5b
 800e9b8:	0800ea5b 	.word	0x0800ea5b
 800e9bc:	0800ea5b 	.word	0x0800ea5b
 800e9c0:	0800ea5b 	.word	0x0800ea5b
 800e9c4:	0800ea5b 	.word	0x0800ea5b
 800e9c8:	0800ea5b 	.word	0x0800ea5b
 800e9cc:	0800ea5b 	.word	0x0800ea5b
 800e9d0:	0800ea5b 	.word	0x0800ea5b
 800e9d4:	0800ea5b 	.word	0x0800ea5b
 800e9d8:	0800ea5b 	.word	0x0800ea5b
 800e9dc:	0800ea4d 	.word	0x0800ea4d
 800e9e0:	2b40      	cmp	r3, #64	; 0x40
 800e9e2:	d036      	beq.n	800ea52 <UART_SetConfig+0x6b6>
 800e9e4:	e039      	b.n	800ea5a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e9e6:	f7fc fc85 	bl	800b2f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e9ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e9ec:	e03b      	b.n	800ea66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9ee:	f107 0314 	add.w	r3, r7, #20
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fc fc94 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e9fc:	e033      	b.n	800ea66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9fe:	f107 0308 	add.w	r3, r7, #8
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fc fde0 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea0c:	e02b      	b.n	800ea66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea0e:	4b0a      	ldr	r3, [pc, #40]	; (800ea38 <UART_SetConfig+0x69c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f003 0320 	and.w	r3, r3, #32
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d009      	beq.n	800ea2e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea1a:	4b07      	ldr	r3, [pc, #28]	; (800ea38 <UART_SetConfig+0x69c>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	08db      	lsrs	r3, r3, #3
 800ea20:	f003 0303 	and.w	r3, r3, #3
 800ea24:	4a08      	ldr	r2, [pc, #32]	; (800ea48 <UART_SetConfig+0x6ac>)
 800ea26:	fa22 f303 	lsr.w	r3, r2, r3
 800ea2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea2c:	e01b      	b.n	800ea66 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ea2e:	4b06      	ldr	r3, [pc, #24]	; (800ea48 <UART_SetConfig+0x6ac>)
 800ea30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea32:	e018      	b.n	800ea66 <UART_SetConfig+0x6ca>
 800ea34:	40011400 	.word	0x40011400
 800ea38:	58024400 	.word	0x58024400
 800ea3c:	40007800 	.word	0x40007800
 800ea40:	40007c00 	.word	0x40007c00
 800ea44:	58000c00 	.word	0x58000c00
 800ea48:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea4c:	4bc4      	ldr	r3, [pc, #784]	; (800ed60 <UART_SetConfig+0x9c4>)
 800ea4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea50:	e009      	b.n	800ea66 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea58:	e005      	b.n	800ea66 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ea64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ea66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f000 81da 	beq.w	800ee22 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea72:	4abc      	ldr	r2, [pc, #752]	; (800ed64 <UART_SetConfig+0x9c8>)
 800ea74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea80:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	685a      	ldr	r2, [r3, #4]
 800ea86:	4613      	mov	r3, r2
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	4413      	add	r3, r2
 800ea8c:	6a3a      	ldr	r2, [r7, #32]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d305      	bcc.n	800ea9e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea98:	6a3a      	ldr	r2, [r7, #32]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d903      	bls.n	800eaa6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eaa4:	e1bd      	b.n	800ee22 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f04f 0100 	mov.w	r1, #0
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab2:	4aac      	ldr	r2, [pc, #688]	; (800ed64 <UART_SetConfig+0x9c8>)
 800eab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eab8:	b29a      	uxth	r2, r3
 800eaba:	f04f 0300 	mov.w	r3, #0
 800eabe:	f7f1 fc0b 	bl	80002d8 <__aeabi_uldivmod>
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	4610      	mov	r0, r2
 800eac8:	4619      	mov	r1, r3
 800eaca:	f04f 0200 	mov.w	r2, #0
 800eace:	f04f 0300 	mov.w	r3, #0
 800ead2:	020b      	lsls	r3, r1, #8
 800ead4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ead8:	0202      	lsls	r2, r0, #8
 800eada:	6879      	ldr	r1, [r7, #4]
 800eadc:	6849      	ldr	r1, [r1, #4]
 800eade:	0849      	lsrs	r1, r1, #1
 800eae0:	4608      	mov	r0, r1
 800eae2:	f04f 0100 	mov.w	r1, #0
 800eae6:	1814      	adds	r4, r2, r0
 800eae8:	eb43 0501 	adc.w	r5, r3, r1
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	f04f 0300 	mov.w	r3, #0
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	4629      	mov	r1, r5
 800eafa:	f7f1 fbed 	bl	80002d8 <__aeabi_uldivmod>
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	4613      	mov	r3, r2
 800eb04:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb0c:	d308      	bcc.n	800eb20 <UART_SetConfig+0x784>
 800eb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb14:	d204      	bcs.n	800eb20 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb1c:	60da      	str	r2, [r3, #12]
 800eb1e:	e180      	b.n	800ee22 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800eb20:	2301      	movs	r3, #1
 800eb22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eb26:	e17c      	b.n	800ee22 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	69db      	ldr	r3, [r3, #28]
 800eb2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb30:	f040 80be 	bne.w	800ecb0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800eb34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eb38:	2b20      	cmp	r3, #32
 800eb3a:	dc49      	bgt.n	800ebd0 <UART_SetConfig+0x834>
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	db7c      	blt.n	800ec3a <UART_SetConfig+0x89e>
 800eb40:	2b20      	cmp	r3, #32
 800eb42:	d87a      	bhi.n	800ec3a <UART_SetConfig+0x89e>
 800eb44:	a201      	add	r2, pc, #4	; (adr r2, 800eb4c <UART_SetConfig+0x7b0>)
 800eb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb4a:	bf00      	nop
 800eb4c:	0800ebd7 	.word	0x0800ebd7
 800eb50:	0800ebdf 	.word	0x0800ebdf
 800eb54:	0800ec3b 	.word	0x0800ec3b
 800eb58:	0800ec3b 	.word	0x0800ec3b
 800eb5c:	0800ebe7 	.word	0x0800ebe7
 800eb60:	0800ec3b 	.word	0x0800ec3b
 800eb64:	0800ec3b 	.word	0x0800ec3b
 800eb68:	0800ec3b 	.word	0x0800ec3b
 800eb6c:	0800ebf7 	.word	0x0800ebf7
 800eb70:	0800ec3b 	.word	0x0800ec3b
 800eb74:	0800ec3b 	.word	0x0800ec3b
 800eb78:	0800ec3b 	.word	0x0800ec3b
 800eb7c:	0800ec3b 	.word	0x0800ec3b
 800eb80:	0800ec3b 	.word	0x0800ec3b
 800eb84:	0800ec3b 	.word	0x0800ec3b
 800eb88:	0800ec3b 	.word	0x0800ec3b
 800eb8c:	0800ec07 	.word	0x0800ec07
 800eb90:	0800ec3b 	.word	0x0800ec3b
 800eb94:	0800ec3b 	.word	0x0800ec3b
 800eb98:	0800ec3b 	.word	0x0800ec3b
 800eb9c:	0800ec3b 	.word	0x0800ec3b
 800eba0:	0800ec3b 	.word	0x0800ec3b
 800eba4:	0800ec3b 	.word	0x0800ec3b
 800eba8:	0800ec3b 	.word	0x0800ec3b
 800ebac:	0800ec3b 	.word	0x0800ec3b
 800ebb0:	0800ec3b 	.word	0x0800ec3b
 800ebb4:	0800ec3b 	.word	0x0800ec3b
 800ebb8:	0800ec3b 	.word	0x0800ec3b
 800ebbc:	0800ec3b 	.word	0x0800ec3b
 800ebc0:	0800ec3b 	.word	0x0800ec3b
 800ebc4:	0800ec3b 	.word	0x0800ec3b
 800ebc8:	0800ec3b 	.word	0x0800ec3b
 800ebcc:	0800ec2d 	.word	0x0800ec2d
 800ebd0:	2b40      	cmp	r3, #64	; 0x40
 800ebd2:	d02e      	beq.n	800ec32 <UART_SetConfig+0x896>
 800ebd4:	e031      	b.n	800ec3a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebd6:	f7fa ff4f 	bl	8009a78 <HAL_RCC_GetPCLK1Freq>
 800ebda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ebdc:	e033      	b.n	800ec46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebde:	f7fa ff61 	bl	8009aa4 <HAL_RCC_GetPCLK2Freq>
 800ebe2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ebe4:	e02f      	b.n	800ec46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebe6:	f107 0314 	add.w	r3, r7, #20
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fc fb98 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebf4:	e027      	b.n	800ec46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebf6:	f107 0308 	add.w	r3, r7, #8
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fc fce4 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec04:	e01f      	b.n	800ec46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec06:	4b58      	ldr	r3, [pc, #352]	; (800ed68 <UART_SetConfig+0x9cc>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f003 0320 	and.w	r3, r3, #32
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d009      	beq.n	800ec26 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec12:	4b55      	ldr	r3, [pc, #340]	; (800ed68 <UART_SetConfig+0x9cc>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	08db      	lsrs	r3, r3, #3
 800ec18:	f003 0303 	and.w	r3, r3, #3
 800ec1c:	4a53      	ldr	r2, [pc, #332]	; (800ed6c <UART_SetConfig+0x9d0>)
 800ec1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ec22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec24:	e00f      	b.n	800ec46 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ec26:	4b51      	ldr	r3, [pc, #324]	; (800ed6c <UART_SetConfig+0x9d0>)
 800ec28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec2a:	e00c      	b.n	800ec46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec2c:	4b4c      	ldr	r3, [pc, #304]	; (800ed60 <UART_SetConfig+0x9c4>)
 800ec2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec30:	e009      	b.n	800ec46 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec38:	e005      	b.n	800ec46 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ec44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f000 80ea 	beq.w	800ee22 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec52:	4a44      	ldr	r2, [pc, #272]	; (800ed64 <UART_SetConfig+0x9c8>)
 800ec54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec58:	461a      	mov	r2, r3
 800ec5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec60:	005a      	lsls	r2, r3, #1
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	085b      	lsrs	r3, r3, #1
 800ec68:	441a      	add	r2, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	2b0f      	cmp	r3, #15
 800ec78:	d916      	bls.n	800eca8 <UART_SetConfig+0x90c>
 800ec7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec80:	d212      	bcs.n	800eca8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	f023 030f 	bic.w	r3, r3, #15
 800ec8a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8e:	085b      	lsrs	r3, r3, #1
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	f003 0307 	and.w	r3, r3, #7
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eca4:	60da      	str	r2, [r3, #12]
 800eca6:	e0bc      	b.n	800ee22 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ecae:	e0b8      	b.n	800ee22 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ecb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecb4:	2b20      	cmp	r3, #32
 800ecb6:	dc4b      	bgt.n	800ed50 <UART_SetConfig+0x9b4>
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f2c0 8087 	blt.w	800edcc <UART_SetConfig+0xa30>
 800ecbe:	2b20      	cmp	r3, #32
 800ecc0:	f200 8084 	bhi.w	800edcc <UART_SetConfig+0xa30>
 800ecc4:	a201      	add	r2, pc, #4	; (adr r2, 800eccc <UART_SetConfig+0x930>)
 800ecc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecca:	bf00      	nop
 800eccc:	0800ed57 	.word	0x0800ed57
 800ecd0:	0800ed71 	.word	0x0800ed71
 800ecd4:	0800edcd 	.word	0x0800edcd
 800ecd8:	0800edcd 	.word	0x0800edcd
 800ecdc:	0800ed79 	.word	0x0800ed79
 800ece0:	0800edcd 	.word	0x0800edcd
 800ece4:	0800edcd 	.word	0x0800edcd
 800ece8:	0800edcd 	.word	0x0800edcd
 800ecec:	0800ed89 	.word	0x0800ed89
 800ecf0:	0800edcd 	.word	0x0800edcd
 800ecf4:	0800edcd 	.word	0x0800edcd
 800ecf8:	0800edcd 	.word	0x0800edcd
 800ecfc:	0800edcd 	.word	0x0800edcd
 800ed00:	0800edcd 	.word	0x0800edcd
 800ed04:	0800edcd 	.word	0x0800edcd
 800ed08:	0800edcd 	.word	0x0800edcd
 800ed0c:	0800ed99 	.word	0x0800ed99
 800ed10:	0800edcd 	.word	0x0800edcd
 800ed14:	0800edcd 	.word	0x0800edcd
 800ed18:	0800edcd 	.word	0x0800edcd
 800ed1c:	0800edcd 	.word	0x0800edcd
 800ed20:	0800edcd 	.word	0x0800edcd
 800ed24:	0800edcd 	.word	0x0800edcd
 800ed28:	0800edcd 	.word	0x0800edcd
 800ed2c:	0800edcd 	.word	0x0800edcd
 800ed30:	0800edcd 	.word	0x0800edcd
 800ed34:	0800edcd 	.word	0x0800edcd
 800ed38:	0800edcd 	.word	0x0800edcd
 800ed3c:	0800edcd 	.word	0x0800edcd
 800ed40:	0800edcd 	.word	0x0800edcd
 800ed44:	0800edcd 	.word	0x0800edcd
 800ed48:	0800edcd 	.word	0x0800edcd
 800ed4c:	0800edbf 	.word	0x0800edbf
 800ed50:	2b40      	cmp	r3, #64	; 0x40
 800ed52:	d037      	beq.n	800edc4 <UART_SetConfig+0xa28>
 800ed54:	e03a      	b.n	800edcc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed56:	f7fa fe8f 	bl	8009a78 <HAL_RCC_GetPCLK1Freq>
 800ed5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ed5c:	e03c      	b.n	800edd8 <UART_SetConfig+0xa3c>
 800ed5e:	bf00      	nop
 800ed60:	003d0900 	.word	0x003d0900
 800ed64:	08010be8 	.word	0x08010be8
 800ed68:	58024400 	.word	0x58024400
 800ed6c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed70:	f7fa fe98 	bl	8009aa4 <HAL_RCC_GetPCLK2Freq>
 800ed74:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ed76:	e02f      	b.n	800edd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed78:	f107 0314 	add.w	r3, r7, #20
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fc facf 	bl	800b320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed86:	e027      	b.n	800edd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed88:	f107 0308 	add.w	r3, r7, #8
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fc fc1b 	bl	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed96:	e01f      	b.n	800edd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed98:	4b2c      	ldr	r3, [pc, #176]	; (800ee4c <UART_SetConfig+0xab0>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f003 0320 	and.w	r3, r3, #32
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d009      	beq.n	800edb8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eda4:	4b29      	ldr	r3, [pc, #164]	; (800ee4c <UART_SetConfig+0xab0>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	08db      	lsrs	r3, r3, #3
 800edaa:	f003 0303 	and.w	r3, r3, #3
 800edae:	4a28      	ldr	r2, [pc, #160]	; (800ee50 <UART_SetConfig+0xab4>)
 800edb0:	fa22 f303 	lsr.w	r3, r2, r3
 800edb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edb6:	e00f      	b.n	800edd8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800edb8:	4b25      	ldr	r3, [pc, #148]	; (800ee50 <UART_SetConfig+0xab4>)
 800edba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edbc:	e00c      	b.n	800edd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edbe:	4b25      	ldr	r3, [pc, #148]	; (800ee54 <UART_SetConfig+0xab8>)
 800edc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edc2:	e009      	b.n	800edd8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edca:	e005      	b.n	800edd8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800edcc:	2300      	movs	r3, #0
 800edce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800edd6:	bf00      	nop
    }

    if (pclk != 0U)
 800edd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d021      	beq.n	800ee22 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede2:	4a1d      	ldr	r2, [pc, #116]	; (800ee58 <UART_SetConfig+0xabc>)
 800ede4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ede8:	461a      	mov	r2, r3
 800edea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edec:	fbb3 f2f2 	udiv	r2, r3, r2
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	085b      	lsrs	r3, r3, #1
 800edf6:	441a      	add	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee00:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee04:	2b0f      	cmp	r3, #15
 800ee06:	d909      	bls.n	800ee1c <UART_SetConfig+0xa80>
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee0e:	d205      	bcs.n	800ee1c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	60da      	str	r2, [r3, #12]
 800ee1a:	e002      	b.n	800ee22 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2201      	movs	r2, #1
 800ee26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ee3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3738      	adds	r7, #56	; 0x38
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bdb0      	pop	{r4, r5, r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	58024400 	.word	0x58024400
 800ee50:	03d09000 	.word	0x03d09000
 800ee54:	003d0900 	.word	0x003d0900
 800ee58:	08010be8 	.word	0x08010be8

0800ee5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee68:	f003 0301 	and.w	r3, r3, #1
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00a      	beq.n	800ee86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	430a      	orrs	r2, r1
 800ee84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee8a:	f003 0302 	and.w	r3, r3, #2
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d00a      	beq.n	800eea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	430a      	orrs	r2, r1
 800eea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeac:	f003 0304 	and.w	r3, r3, #4
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00a      	beq.n	800eeca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	430a      	orrs	r2, r1
 800eec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eece:	f003 0308 	and.w	r3, r3, #8
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00a      	beq.n	800eeec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	430a      	orrs	r2, r1
 800eeea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eef0:	f003 0310 	and.w	r3, r3, #16
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00a      	beq.n	800ef0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	430a      	orrs	r2, r1
 800ef0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef12:	f003 0320 	and.w	r3, r3, #32
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00a      	beq.n	800ef30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	430a      	orrs	r2, r1
 800ef2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d01a      	beq.n	800ef72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	430a      	orrs	r2, r1
 800ef50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef5a:	d10a      	bne.n	800ef72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	430a      	orrs	r2, r1
 800ef70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d00a      	beq.n	800ef94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	430a      	orrs	r2, r1
 800ef92:	605a      	str	r2, [r3, #4]
  }
}
 800ef94:	bf00      	nop
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b086      	sub	sp, #24
 800efa4:	af02      	add	r7, sp, #8
 800efa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800efb0:	f7f4 ff14 	bl	8003ddc <HAL_GetTick>
 800efb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f003 0308 	and.w	r3, r3, #8
 800efc0:	2b08      	cmp	r3, #8
 800efc2:	d10e      	bne.n	800efe2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2200      	movs	r2, #0
 800efce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 f82f 	bl	800f036 <UART_WaitOnFlagUntilTimeout>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800efde:	2303      	movs	r3, #3
 800efe0:	e025      	b.n	800f02e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f003 0304 	and.w	r3, r3, #4
 800efec:	2b04      	cmp	r3, #4
 800efee:	d10e      	bne.n	800f00e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2200      	movs	r2, #0
 800effa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 f819 	bl	800f036 <UART_WaitOnFlagUntilTimeout>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d001      	beq.n	800f00e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f00a:	2303      	movs	r3, #3
 800f00c:	e00f      	b.n	800f02e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2220      	movs	r2, #32
 800f012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2220      	movs	r2, #32
 800f01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2200      	movs	r2, #0
 800f028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f02c:	2300      	movs	r3, #0
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f036:	b580      	push	{r7, lr}
 800f038:	b09c      	sub	sp, #112	; 0x70
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	60f8      	str	r0, [r7, #12]
 800f03e:	60b9      	str	r1, [r7, #8]
 800f040:	603b      	str	r3, [r7, #0]
 800f042:	4613      	mov	r3, r2
 800f044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f046:	e0a9      	b.n	800f19c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f04e:	f000 80a5 	beq.w	800f19c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f052:	f7f4 fec3 	bl	8003ddc <HAL_GetTick>
 800f056:	4602      	mov	r2, r0
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	1ad3      	subs	r3, r2, r3
 800f05c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f05e:	429a      	cmp	r2, r3
 800f060:	d302      	bcc.n	800f068 <UART_WaitOnFlagUntilTimeout+0x32>
 800f062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f064:	2b00      	cmp	r3, #0
 800f066:	d140      	bne.n	800f0ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f070:	e853 3f00 	ldrex	r3, [r3]
 800f074:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f078:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f07c:	667b      	str	r3, [r7, #100]	; 0x64
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	461a      	mov	r2, r3
 800f084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f086:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f088:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f08c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f08e:	e841 2300 	strex	r3, r2, [r1]
 800f092:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1e6      	bne.n	800f068 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	3308      	adds	r3, #8
 800f0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0a4:	e853 3f00 	ldrex	r3, [r3]
 800f0a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ac:	f023 0301 	bic.w	r3, r3, #1
 800f0b0:	663b      	str	r3, [r7, #96]	; 0x60
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	3308      	adds	r3, #8
 800f0b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0ba:	64ba      	str	r2, [r7, #72]	; 0x48
 800f0bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0c2:	e841 2300 	strex	r3, r2, [r1]
 800f0c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1e5      	bne.n	800f09a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2220      	movs	r2, #32
 800f0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2220      	movs	r2, #32
 800f0da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e069      	b.n	800f1be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f003 0304 	and.w	r3, r3, #4
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d051      	beq.n	800f19c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	69db      	ldr	r3, [r3, #28]
 800f0fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f106:	d149      	bne.n	800f19c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f110:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11a:	e853 3f00 	ldrex	r3, [r3]
 800f11e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f126:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	461a      	mov	r2, r3
 800f12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f130:	637b      	str	r3, [r7, #52]	; 0x34
 800f132:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f138:	e841 2300 	strex	r3, r2, [r1]
 800f13c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f140:	2b00      	cmp	r3, #0
 800f142:	d1e6      	bne.n	800f112 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	3308      	adds	r3, #8
 800f14a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	e853 3f00 	ldrex	r3, [r3]
 800f152:	613b      	str	r3, [r7, #16]
   return(result);
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	f023 0301 	bic.w	r3, r3, #1
 800f15a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	3308      	adds	r3, #8
 800f162:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f164:	623a      	str	r2, [r7, #32]
 800f166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f168:	69f9      	ldr	r1, [r7, #28]
 800f16a:	6a3a      	ldr	r2, [r7, #32]
 800f16c:	e841 2300 	strex	r3, r2, [r1]
 800f170:	61bb      	str	r3, [r7, #24]
   return(result);
 800f172:	69bb      	ldr	r3, [r7, #24]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1e5      	bne.n	800f144 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2220      	movs	r2, #32
 800f17c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2220      	movs	r2, #32
 800f184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2220      	movs	r2, #32
 800f18c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2200      	movs	r2, #0
 800f194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f198:	2303      	movs	r3, #3
 800f19a:	e010      	b.n	800f1be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	69da      	ldr	r2, [r3, #28]
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	68ba      	ldr	r2, [r7, #8]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	bf0c      	ite	eq
 800f1ac:	2301      	moveq	r3, #1
 800f1ae:	2300      	movne	r3, #0
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	79fb      	ldrb	r3, [r7, #7]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	f43f af46 	beq.w	800f048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f1bc:	2300      	movs	r3, #0
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3770      	adds	r7, #112	; 0x70
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
	...

0800f1c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b096      	sub	sp, #88	; 0x58
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	4613      	mov	r3, r2
 800f1d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	88fa      	ldrh	r2, [r7, #6]
 800f1e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2222      	movs	r2, #34	; 0x22
 800f1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d02c      	beq.n	800f256 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f200:	4a42      	ldr	r2, [pc, #264]	; (800f30c <UART_Start_Receive_DMA+0x144>)
 800f202:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f208:	4a41      	ldr	r2, [pc, #260]	; (800f310 <UART_Start_Receive_DMA+0x148>)
 800f20a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f210:	4a40      	ldr	r2, [pc, #256]	; (800f314 <UART_Start_Receive_DMA+0x14c>)
 800f212:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f218:	2200      	movs	r2, #0
 800f21a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	3324      	adds	r3, #36	; 0x24
 800f226:	4619      	mov	r1, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f22c:	461a      	mov	r2, r3
 800f22e:	88fb      	ldrh	r3, [r7, #6]
 800f230:	f7f6 fa2c 	bl	800568c <HAL_DMA_Start_IT>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00d      	beq.n	800f256 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2210      	movs	r2, #16
 800f23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2200      	movs	r2, #0
 800f246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2220      	movs	r2, #32
 800f24e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	e055      	b.n	800f302 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	691b      	ldr	r3, [r3, #16]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d018      	beq.n	800f298 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f26e:	e853 3f00 	ldrex	r3, [r3]
 800f272:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f27a:	657b      	str	r3, [r7, #84]	; 0x54
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	461a      	mov	r2, r3
 800f282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f284:	64bb      	str	r3, [r7, #72]	; 0x48
 800f286:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f288:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f28c:	e841 2300 	strex	r3, r2, [r1]
 800f290:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1e6      	bne.n	800f266 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	3308      	adds	r3, #8
 800f29e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	e853 3f00 	ldrex	r3, [r3]
 800f2a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2aa:	f043 0301 	orr.w	r3, r3, #1
 800f2ae:	653b      	str	r3, [r7, #80]	; 0x50
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	3308      	adds	r3, #8
 800f2b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2b8:	637a      	str	r2, [r7, #52]	; 0x34
 800f2ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f2be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2c0:	e841 2300 	strex	r3, r2, [r1]
 800f2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1e5      	bne.n	800f298 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	3308      	adds	r3, #8
 800f2d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	e853 3f00 	ldrex	r3, [r3]
 800f2da:	613b      	str	r3, [r7, #16]
   return(result);
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	3308      	adds	r3, #8
 800f2ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f2ec:	623a      	str	r2, [r7, #32]
 800f2ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f0:	69f9      	ldr	r1, [r7, #28]
 800f2f2:	6a3a      	ldr	r2, [r7, #32]
 800f2f4:	e841 2300 	strex	r3, r2, [r1]
 800f2f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1e5      	bne.n	800f2cc <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f300:	2300      	movs	r3, #0
}
 800f302:	4618      	mov	r0, r3
 800f304:	3758      	adds	r7, #88	; 0x58
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	0800f469 	.word	0x0800f469
 800f310:	0800f58b 	.word	0x0800f58b
 800f314:	0800f5c3 	.word	0x0800f5c3

0800f318 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f318:	b480      	push	{r7}
 800f31a:	b08f      	sub	sp, #60	; 0x3c
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f326:	6a3b      	ldr	r3, [r7, #32]
 800f328:	e853 3f00 	ldrex	r3, [r3]
 800f32c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f334:	637b      	str	r3, [r7, #52]	; 0x34
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f33e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f340:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f346:	e841 2300 	strex	r3, r2, [r1]
 800f34a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1e6      	bne.n	800f320 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	3308      	adds	r3, #8
 800f358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	e853 3f00 	ldrex	r3, [r3]
 800f360:	60bb      	str	r3, [r7, #8]
   return(result);
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f368:	633b      	str	r3, [r7, #48]	; 0x30
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	3308      	adds	r3, #8
 800f370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f372:	61ba      	str	r2, [r7, #24]
 800f374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f376:	6979      	ldr	r1, [r7, #20]
 800f378:	69ba      	ldr	r2, [r7, #24]
 800f37a:	e841 2300 	strex	r3, r2, [r1]
 800f37e:	613b      	str	r3, [r7, #16]
   return(result);
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1e5      	bne.n	800f352 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2220      	movs	r2, #32
 800f38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f38e:	bf00      	nop
 800f390:	373c      	adds	r7, #60	; 0x3c
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
	...

0800f39c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b095      	sub	sp, #84	; 0x54
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ac:	e853 3f00 	ldrex	r3, [r3]
 800f3b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3c2:	643b      	str	r3, [r7, #64]	; 0x40
 800f3c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f3ca:	e841 2300 	strex	r3, r2, [r1]
 800f3ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1e6      	bne.n	800f3a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	3308      	adds	r3, #8
 800f3dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3de:	6a3b      	ldr	r3, [r7, #32]
 800f3e0:	e853 3f00 	ldrex	r3, [r3]
 800f3e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3e6:	69fa      	ldr	r2, [r7, #28]
 800f3e8:	4b1e      	ldr	r3, [pc, #120]	; (800f464 <UART_EndRxTransfer+0xc8>)
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	3308      	adds	r3, #8
 800f3f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f3f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3fe:	e841 2300 	strex	r3, r2, [r1]
 800f402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1e5      	bne.n	800f3d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d118      	bne.n	800f444 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	e853 3f00 	ldrex	r3, [r3]
 800f41e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	f023 0310 	bic.w	r3, r3, #16
 800f426:	647b      	str	r3, [r7, #68]	; 0x44
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	461a      	mov	r2, r3
 800f42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f430:	61bb      	str	r3, [r7, #24]
 800f432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f434:	6979      	ldr	r1, [r7, #20]
 800f436:	69ba      	ldr	r2, [r7, #24]
 800f438:	e841 2300 	strex	r3, r2, [r1]
 800f43c:	613b      	str	r3, [r7, #16]
   return(result);
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d1e6      	bne.n	800f412 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2220      	movs	r2, #32
 800f448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f458:	bf00      	nop
 800f45a:	3754      	adds	r7, #84	; 0x54
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	effffffe 	.word	0xeffffffe

0800f468 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b09c      	sub	sp, #112	; 0x70
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f474:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	69db      	ldr	r3, [r3, #28]
 800f47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f47e:	d071      	beq.n	800f564 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f482:	2200      	movs	r2, #0
 800f484:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f490:	e853 3f00 	ldrex	r3, [r3]
 800f494:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f49c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f49e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f4a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4ae:	e841 2300 	strex	r3, r2, [r1]
 800f4b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1e6      	bne.n	800f488 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	3308      	adds	r3, #8
 800f4c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c4:	e853 3f00 	ldrex	r3, [r3]
 800f4c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4cc:	f023 0301 	bic.w	r3, r3, #1
 800f4d0:	667b      	str	r3, [r7, #100]	; 0x64
 800f4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	3308      	adds	r3, #8
 800f4d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f4da:	647a      	str	r2, [r7, #68]	; 0x44
 800f4dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4e2:	e841 2300 	strex	r3, r2, [r1]
 800f4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1e5      	bne.n	800f4ba <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	3308      	adds	r3, #8
 800f4f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f8:	e853 3f00 	ldrex	r3, [r3]
 800f4fc:	623b      	str	r3, [r7, #32]
   return(result);
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f504:	663b      	str	r3, [r7, #96]	; 0x60
 800f506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3308      	adds	r3, #8
 800f50c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f50e:	633a      	str	r2, [r7, #48]	; 0x30
 800f510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f516:	e841 2300 	strex	r3, r2, [r1]
 800f51a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1e5      	bne.n	800f4ee <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f524:	2220      	movs	r2, #32
 800f526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f52a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f52c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d118      	bne.n	800f564 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	e853 3f00 	ldrex	r3, [r3]
 800f53e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f023 0310 	bic.w	r3, r3, #16
 800f546:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	461a      	mov	r2, r3
 800f54e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f550:	61fb      	str	r3, [r7, #28]
 800f552:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f554:	69b9      	ldr	r1, [r7, #24]
 800f556:	69fa      	ldr	r2, [r7, #28]
 800f558:	e841 2300 	strex	r3, r2, [r1]
 800f55c:	617b      	str	r3, [r7, #20]
   return(result);
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d1e6      	bne.n	800f532 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d107      	bne.n	800f57c <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f56e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f572:	4619      	mov	r1, r3
 800f574:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f576:	f7fe ff05 	bl	800e384 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f57a:	e002      	b.n	800f582 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f57c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f57e:	f7f3 fbc1 	bl	8002d04 <HAL_UART_RxCpltCallback>
}
 800f582:	bf00      	nop
 800f584:	3770      	adds	r7, #112	; 0x70
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b084      	sub	sp, #16
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f596:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d109      	bne.n	800f5b4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5a6:	085b      	lsrs	r3, r3, #1
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f7fe fee9 	bl	800e384 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f5b2:	e002      	b.n	800f5ba <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f7fe fed1 	bl	800e35c <HAL_UART_RxHalfCpltCallback>
}
 800f5ba:	bf00      	nop
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b086      	sub	sp, #24
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5ea:	2b80      	cmp	r3, #128	; 0x80
 800f5ec:	d109      	bne.n	800f602 <UART_DMAError+0x40>
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	2b21      	cmp	r3, #33	; 0x21
 800f5f2:	d106      	bne.n	800f602 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f5fc:	6978      	ldr	r0, [r7, #20]
 800f5fe:	f7ff fe8b 	bl	800f318 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	689b      	ldr	r3, [r3, #8]
 800f608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f60c:	2b40      	cmp	r3, #64	; 0x40
 800f60e:	d109      	bne.n	800f624 <UART_DMAError+0x62>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2b22      	cmp	r3, #34	; 0x22
 800f614:	d106      	bne.n	800f624 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	2200      	movs	r2, #0
 800f61a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f61e:	6978      	ldr	r0, [r7, #20]
 800f620:	f7ff febc 	bl	800f39c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f62a:	f043 0210 	orr.w	r2, r3, #16
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f634:	6978      	ldr	r0, [r7, #20]
 800f636:	f7fe fe9b 	bl	800e370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f63a:	bf00      	nop
 800f63c:	3718      	adds	r7, #24
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b084      	sub	sp, #16
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f64e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2200      	movs	r2, #0
 800f654:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2200      	movs	r2, #0
 800f65c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f7fe fe85 	bl	800e370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f666:	bf00      	nop
 800f668:	3710      	adds	r7, #16
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b088      	sub	sp, #32
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	e853 3f00 	ldrex	r3, [r3]
 800f682:	60bb      	str	r3, [r7, #8]
   return(result);
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f68a:	61fb      	str	r3, [r7, #28]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	461a      	mov	r2, r3
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	61bb      	str	r3, [r7, #24]
 800f696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f698:	6979      	ldr	r1, [r7, #20]
 800f69a:	69ba      	ldr	r2, [r7, #24]
 800f69c:	e841 2300 	strex	r3, r2, [r1]
 800f6a0:	613b      	str	r3, [r7, #16]
   return(result);
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1e6      	bne.n	800f676 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2220      	movs	r2, #32
 800f6ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7fe fe46 	bl	800e348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f6bc:	bf00      	nop
 800f6be:	3720      	adds	r7, #32
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f6cc:	bf00      	nop
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f6f4:	bf00      	nop
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f700:	b480      	push	{r7}
 800f702:	b085      	sub	sp, #20
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d101      	bne.n	800f716 <HAL_UARTEx_DisableFifoMode+0x16>
 800f712:	2302      	movs	r3, #2
 800f714:	e027      	b.n	800f766 <HAL_UARTEx_DisableFifoMode+0x66>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2201      	movs	r2, #1
 800f71a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2224      	movs	r2, #36	; 0x24
 800f722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f022 0201 	bic.w	r2, r2, #1
 800f73c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f744:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2200      	movs	r2, #0
 800f74a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2220      	movs	r2, #32
 800f758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f764:	2300      	movs	r3, #0
}
 800f766:	4618      	mov	r0, r3
 800f768:	3714      	adds	r7, #20
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr

0800f772 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b084      	sub	sp, #16
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
 800f77a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f782:	2b01      	cmp	r3, #1
 800f784:	d101      	bne.n	800f78a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f786:	2302      	movs	r3, #2
 800f788:	e02d      	b.n	800f7e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2201      	movs	r2, #1
 800f78e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2224      	movs	r2, #36	; 0x24
 800f796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f022 0201 	bic.w	r2, r2, #1
 800f7b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	683a      	ldr	r2, [r7, #0]
 800f7c2:	430a      	orrs	r2, r1
 800f7c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 f850 	bl	800f86c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2220      	movs	r2, #32
 800f7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f7e4:	2300      	movs	r3, #0
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b084      	sub	sp, #16
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d101      	bne.n	800f806 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f802:	2302      	movs	r3, #2
 800f804:	e02d      	b.n	800f862 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2201      	movs	r2, #1
 800f80a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2224      	movs	r2, #36	; 0x24
 800f812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f022 0201 	bic.w	r2, r2, #1
 800f82c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	683a      	ldr	r2, [r7, #0]
 800f83e:	430a      	orrs	r2, r1
 800f840:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f812 	bl	800f86c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2220      	movs	r2, #32
 800f854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
	...

0800f86c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b085      	sub	sp, #20
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d108      	bne.n	800f88e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2201      	movs	r2, #1
 800f880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f88c:	e031      	b.n	800f8f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f88e:	2310      	movs	r3, #16
 800f890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f892:	2310      	movs	r3, #16
 800f894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	0e5b      	lsrs	r3, r3, #25
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	f003 0307 	and.w	r3, r3, #7
 800f8a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	689b      	ldr	r3, [r3, #8]
 800f8ac:	0f5b      	lsrs	r3, r3, #29
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	f003 0307 	and.w	r3, r3, #7
 800f8b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8b6:	7bbb      	ldrb	r3, [r7, #14]
 800f8b8:	7b3a      	ldrb	r2, [r7, #12]
 800f8ba:	4911      	ldr	r1, [pc, #68]	; (800f900 <UARTEx_SetNbDataToProcess+0x94>)
 800f8bc:	5c8a      	ldrb	r2, [r1, r2]
 800f8be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8c2:	7b3a      	ldrb	r2, [r7, #12]
 800f8c4:	490f      	ldr	r1, [pc, #60]	; (800f904 <UARTEx_SetNbDataToProcess+0x98>)
 800f8c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
 800f8d6:	7b7a      	ldrb	r2, [r7, #13]
 800f8d8:	4909      	ldr	r1, [pc, #36]	; (800f900 <UARTEx_SetNbDataToProcess+0x94>)
 800f8da:	5c8a      	ldrb	r2, [r1, r2]
 800f8dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8e0:	7b7a      	ldrb	r2, [r7, #13]
 800f8e2:	4908      	ldr	r1, [pc, #32]	; (800f904 <UARTEx_SetNbDataToProcess+0x98>)
 800f8e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8ea:	b29a      	uxth	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f8f2:	bf00      	nop
 800f8f4:	3714      	adds	r7, #20
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	08010c00 	.word	0x08010c00
 800f904:	08010c08 	.word	0x08010c08

0800f908 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f908:	b084      	sub	sp, #16
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b084      	sub	sp, #16
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
 800f912:	f107 001c 	add.w	r0, r7, #28
 800f916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d120      	bne.n	800f962 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	68da      	ldr	r2, [r3, #12]
 800f930:	4b2a      	ldr	r3, [pc, #168]	; (800f9dc <USB_CoreInit+0xd4>)
 800f932:	4013      	ands	r3, r2
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f946:	2b01      	cmp	r3, #1
 800f948:	d105      	bne.n	800f956 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 faa8 	bl	800feac <USB_CoreReset>
 800f95c:	4603      	mov	r3, r0
 800f95e:	73fb      	strb	r3, [r7, #15]
 800f960:	e01a      	b.n	800f998 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 fa9c 	bl	800feac <USB_CoreReset>
 800f974:	4603      	mov	r3, r0
 800f976:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d106      	bne.n	800f98c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f982:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	639a      	str	r2, [r3, #56]	; 0x38
 800f98a:	e005      	b.n	800f998 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f990:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d116      	bne.n	800f9cc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f9ac:	4b0c      	ldr	r3, [pc, #48]	; (800f9e0 <USB_CoreInit+0xd8>)
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	f043 0206 	orr.w	r2, r3, #6
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	689b      	ldr	r3, [r3, #8]
 800f9c4:	f043 0220 	orr.w	r2, r3, #32
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9d8:	b004      	add	sp, #16
 800f9da:	4770      	bx	lr
 800f9dc:	ffbdffbf 	.word	0xffbdffbf
 800f9e0:	03ee0000 	.word	0x03ee0000

0800f9e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	f023 0201 	bic.w	r2, r3, #1
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	370c      	adds	r7, #12
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr

0800fa06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b084      	sub	sp, #16
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
 800fa0e:	460b      	mov	r3, r1
 800fa10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fa12:	2300      	movs	r3, #0
 800fa14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fa22:	78fb      	ldrb	r3, [r7, #3]
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d115      	bne.n	800fa54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fa34:	2001      	movs	r0, #1
 800fa36:	f7f4 f9dd 	bl	8003df4 <HAL_Delay>
      ms++;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 fa25 	bl	800fe90 <USB_GetMode>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d01e      	beq.n	800fa8a <USB_SetCurrentMode+0x84>
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2b31      	cmp	r3, #49	; 0x31
 800fa50:	d9f0      	bls.n	800fa34 <USB_SetCurrentMode+0x2e>
 800fa52:	e01a      	b.n	800fa8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fa54:	78fb      	ldrb	r3, [r7, #3]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d115      	bne.n	800fa86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fa66:	2001      	movs	r0, #1
 800fa68:	f7f4 f9c4 	bl	8003df4 <HAL_Delay>
      ms++;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	3301      	adds	r3, #1
 800fa70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 fa0c 	bl	800fe90 <USB_GetMode>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d005      	beq.n	800fa8a <USB_SetCurrentMode+0x84>
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2b31      	cmp	r3, #49	; 0x31
 800fa82:	d9f0      	bls.n	800fa66 <USB_SetCurrentMode+0x60>
 800fa84:	e001      	b.n	800fa8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fa86:	2301      	movs	r3, #1
 800fa88:	e005      	b.n	800fa96 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2b32      	cmp	r3, #50	; 0x32
 800fa8e:	d101      	bne.n	800fa94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fa90:	2301      	movs	r3, #1
 800fa92:	e000      	b.n	800fa96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fa94:	2300      	movs	r3, #0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3710      	adds	r7, #16
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
	...

0800faa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800faa0:	b084      	sub	sp, #16
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b086      	sub	sp, #24
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800faae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fab2:	2300      	movs	r3, #0
 800fab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800faba:	2300      	movs	r3, #0
 800fabc:	613b      	str	r3, [r7, #16]
 800fabe:	e009      	b.n	800fad4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	3340      	adds	r3, #64	; 0x40
 800fac6:	009b      	lsls	r3, r3, #2
 800fac8:	4413      	add	r3, r2
 800faca:	2200      	movs	r2, #0
 800facc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	3301      	adds	r3, #1
 800fad2:	613b      	str	r3, [r7, #16]
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	2b0e      	cmp	r3, #14
 800fad8:	d9f2      	bls.n	800fac0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d11c      	bne.n	800fb1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800faee:	f043 0302 	orr.w	r3, r3, #2
 800faf2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faf8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	601a      	str	r2, [r3, #0]
 800fb18:	e005      	b.n	800fb26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	2300      	movs	r3, #0
 800fb30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb38:	4619      	mov	r1, r3
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb40:	461a      	mov	r2, r3
 800fb42:	680b      	ldr	r3, [r1, #0]
 800fb44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d10c      	bne.n	800fb66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d104      	bne.n	800fb5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fb52:	2100      	movs	r1, #0
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f961 	bl	800fe1c <USB_SetDevSpeed>
 800fb5a:	e008      	b.n	800fb6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fb5c:	2101      	movs	r1, #1
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f95c 	bl	800fe1c <USB_SetDevSpeed>
 800fb64:	e003      	b.n	800fb6e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fb66:	2103      	movs	r1, #3
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 f957 	bl	800fe1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fb6e:	2110      	movs	r1, #16
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 f8f3 	bl	800fd5c <USB_FlushTxFifo>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d001      	beq.n	800fb80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f000 f91d 	bl	800fdc0 <USB_FlushRxFifo>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d001      	beq.n	800fb90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb96:	461a      	mov	r2, r3
 800fb98:	2300      	movs	r3, #0
 800fb9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fba2:	461a      	mov	r2, r3
 800fba4:	2300      	movs	r3, #0
 800fba6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbae:	461a      	mov	r2, r3
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	613b      	str	r3, [r7, #16]
 800fbb8:	e043      	b.n	800fc42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	015a      	lsls	r2, r3, #5
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbd0:	d118      	bne.n	800fc04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d10a      	bne.n	800fbee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	015a      	lsls	r2, r3, #5
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	4413      	add	r3, r2
 800fbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fbea:	6013      	str	r3, [r2, #0]
 800fbec:	e013      	b.n	800fc16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	015a      	lsls	r2, r3, #5
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fc00:	6013      	str	r3, [r2, #0]
 800fc02:	e008      	b.n	800fc16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	015a      	lsls	r2, r3, #5
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	4413      	add	r3, r2
 800fc0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc10:	461a      	mov	r2, r3
 800fc12:	2300      	movs	r3, #0
 800fc14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	015a      	lsls	r2, r3, #5
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc22:	461a      	mov	r2, r3
 800fc24:	2300      	movs	r3, #0
 800fc26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	015a      	lsls	r2, r3, #5
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	4413      	add	r3, r2
 800fc30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc34:	461a      	mov	r2, r3
 800fc36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	613b      	str	r3, [r7, #16]
 800fc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d3b7      	bcc.n	800fbba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	613b      	str	r3, [r7, #16]
 800fc4e:	e043      	b.n	800fcd8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	015a      	lsls	r2, r3, #5
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	4413      	add	r3, r2
 800fc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc66:	d118      	bne.n	800fc9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d10a      	bne.n	800fc84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	015a      	lsls	r2, r3, #5
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	4413      	add	r3, r2
 800fc76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fc80:	6013      	str	r3, [r2, #0]
 800fc82:	e013      	b.n	800fcac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	015a      	lsls	r2, r3, #5
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc90:	461a      	mov	r2, r3
 800fc92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fc96:	6013      	str	r3, [r2, #0]
 800fc98:	e008      	b.n	800fcac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	015a      	lsls	r2, r3, #5
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	4413      	add	r3, r2
 800fca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fca6:	461a      	mov	r2, r3
 800fca8:	2300      	movs	r3, #0
 800fcaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	015a      	lsls	r2, r3, #5
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcb8:	461a      	mov	r2, r3
 800fcba:	2300      	movs	r3, #0
 800fcbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	015a      	lsls	r2, r3, #5
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcca:	461a      	mov	r2, r3
 800fccc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fcd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	613b      	str	r3, [r7, #16]
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcda:	693a      	ldr	r2, [r7, #16]
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d3b7      	bcc.n	800fc50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fce6:	691b      	ldr	r3, [r3, #16]
 800fce8:	68fa      	ldr	r2, [r7, #12]
 800fcea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fd00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d105      	bne.n	800fd14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	699b      	ldr	r3, [r3, #24]
 800fd0c:	f043 0210 	orr.w	r2, r3, #16
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	699a      	ldr	r2, [r3, #24]
 800fd18:	4b0e      	ldr	r3, [pc, #56]	; (800fd54 <USB_DevInit+0x2b4>)
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fd20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d005      	beq.n	800fd32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	699b      	ldr	r3, [r3, #24]
 800fd2a:	f043 0208 	orr.w	r2, r3, #8
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d105      	bne.n	800fd44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	699a      	ldr	r2, [r3, #24]
 800fd3c:	4b06      	ldr	r3, [pc, #24]	; (800fd58 <USB_DevInit+0x2b8>)
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3718      	adds	r7, #24
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd50:	b004      	add	sp, #16
 800fd52:	4770      	bx	lr
 800fd54:	803c3800 	.word	0x803c3800
 800fd58:	40000004 	.word	0x40000004

0800fd5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fd66:	2300      	movs	r3, #0
 800fd68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	60fb      	str	r3, [r7, #12]
 800fd70:	4a12      	ldr	r2, [pc, #72]	; (800fdbc <USB_FlushTxFifo+0x60>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d901      	bls.n	800fd7a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fd76:	2303      	movs	r3, #3
 800fd78:	e01a      	b.n	800fdb0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	691b      	ldr	r3, [r3, #16]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	daf3      	bge.n	800fd6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fd82:	2300      	movs	r3, #0
 800fd84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	019b      	lsls	r3, r3, #6
 800fd8a:	f043 0220 	orr.w	r2, r3, #32
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	3301      	adds	r3, #1
 800fd96:	60fb      	str	r3, [r7, #12]
 800fd98:	4a08      	ldr	r2, [pc, #32]	; (800fdbc <USB_FlushTxFifo+0x60>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d901      	bls.n	800fda2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800fd9e:	2303      	movs	r3, #3
 800fda0:	e006      	b.n	800fdb0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	f003 0320 	and.w	r3, r3, #32
 800fdaa:	2b20      	cmp	r3, #32
 800fdac:	d0f1      	beq.n	800fd92 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800fdae:	2300      	movs	r3, #0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3714      	adds	r7, #20
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr
 800fdbc:	00030d40 	.word	0x00030d40

0800fdc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	3301      	adds	r3, #1
 800fdd0:	60fb      	str	r3, [r7, #12]
 800fdd2:	4a11      	ldr	r2, [pc, #68]	; (800fe18 <USB_FlushRxFifo+0x58>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d901      	bls.n	800fddc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800fdd8:	2303      	movs	r3, #3
 800fdda:	e017      	b.n	800fe0c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	691b      	ldr	r3, [r3, #16]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	daf3      	bge.n	800fdcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fde4:	2300      	movs	r3, #0
 800fde6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2210      	movs	r2, #16
 800fdec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	60fb      	str	r3, [r7, #12]
 800fdf4:	4a08      	ldr	r2, [pc, #32]	; (800fe18 <USB_FlushRxFifo+0x58>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d901      	bls.n	800fdfe <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800fdfa:	2303      	movs	r3, #3
 800fdfc:	e006      	b.n	800fe0c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	691b      	ldr	r3, [r3, #16]
 800fe02:	f003 0310 	and.w	r3, r3, #16
 800fe06:	2b10      	cmp	r3, #16
 800fe08:	d0f1      	beq.n	800fdee <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800fe0a:	2300      	movs	r3, #0
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3714      	adds	r7, #20
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr
 800fe18:	00030d40 	.word	0x00030d40

0800fe1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b085      	sub	sp, #20
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	460b      	mov	r3, r1
 800fe26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	78fb      	ldrb	r3, [r7, #3]
 800fe36:	68f9      	ldr	r1, [r7, #12]
 800fe38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fe40:	2300      	movs	r3, #0
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3714      	adds	r7, #20
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr

0800fe4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fe4e:	b480      	push	{r7}
 800fe50:	b085      	sub	sp, #20
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe68:	f023 0303 	bic.w	r3, r3, #3
 800fe6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe7c:	f043 0302 	orr.w	r3, r3, #2
 800fe80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fe82:	2300      	movs	r3, #0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3714      	adds	r7, #20
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	695b      	ldr	r3, [r3, #20]
 800fe9c:	f003 0301 	and.w	r3, r3, #1
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800feac:	b480      	push	{r7}
 800feae:	b085      	sub	sp, #20
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800feb4:	2300      	movs	r3, #0
 800feb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	3301      	adds	r3, #1
 800febc:	60fb      	str	r3, [r7, #12]
 800febe:	4a13      	ldr	r2, [pc, #76]	; (800ff0c <USB_CoreReset+0x60>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d901      	bls.n	800fec8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800fec4:	2303      	movs	r3, #3
 800fec6:	e01a      	b.n	800fefe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	691b      	ldr	r3, [r3, #16]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	daf3      	bge.n	800feb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fed0:	2300      	movs	r3, #0
 800fed2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	691b      	ldr	r3, [r3, #16]
 800fed8:	f043 0201 	orr.w	r2, r3, #1
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	3301      	adds	r3, #1
 800fee4:	60fb      	str	r3, [r7, #12]
 800fee6:	4a09      	ldr	r2, [pc, #36]	; (800ff0c <USB_CoreReset+0x60>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d901      	bls.n	800fef0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800feec:	2303      	movs	r3, #3
 800feee:	e006      	b.n	800fefe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	f003 0301 	and.w	r3, r3, #1
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d0f1      	beq.n	800fee0 <USB_CoreReset+0x34>

  return HAL_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3714      	adds	r7, #20
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop
 800ff0c:	00030d40 	.word	0x00030d40

0800ff10 <__libc_init_array>:
 800ff10:	b570      	push	{r4, r5, r6, lr}
 800ff12:	4d0d      	ldr	r5, [pc, #52]	; (800ff48 <__libc_init_array+0x38>)
 800ff14:	4c0d      	ldr	r4, [pc, #52]	; (800ff4c <__libc_init_array+0x3c>)
 800ff16:	1b64      	subs	r4, r4, r5
 800ff18:	10a4      	asrs	r4, r4, #2
 800ff1a:	2600      	movs	r6, #0
 800ff1c:	42a6      	cmp	r6, r4
 800ff1e:	d109      	bne.n	800ff34 <__libc_init_array+0x24>
 800ff20:	4d0b      	ldr	r5, [pc, #44]	; (800ff50 <__libc_init_array+0x40>)
 800ff22:	4c0c      	ldr	r4, [pc, #48]	; (800ff54 <__libc_init_array+0x44>)
 800ff24:	f000 fe46 	bl	8010bb4 <_init>
 800ff28:	1b64      	subs	r4, r4, r5
 800ff2a:	10a4      	asrs	r4, r4, #2
 800ff2c:	2600      	movs	r6, #0
 800ff2e:	42a6      	cmp	r6, r4
 800ff30:	d105      	bne.n	800ff3e <__libc_init_array+0x2e>
 800ff32:	bd70      	pop	{r4, r5, r6, pc}
 800ff34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff38:	4798      	blx	r3
 800ff3a:	3601      	adds	r6, #1
 800ff3c:	e7ee      	b.n	800ff1c <__libc_init_array+0xc>
 800ff3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff42:	4798      	blx	r3
 800ff44:	3601      	adds	r6, #1
 800ff46:	e7f2      	b.n	800ff2e <__libc_init_array+0x1e>
 800ff48:	08010df0 	.word	0x08010df0
 800ff4c:	08010df0 	.word	0x08010df0
 800ff50:	08010df0 	.word	0x08010df0
 800ff54:	08010df4 	.word	0x08010df4

0800ff58 <memset>:
 800ff58:	4402      	add	r2, r0
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d100      	bne.n	800ff62 <memset+0xa>
 800ff60:	4770      	bx	lr
 800ff62:	f803 1b01 	strb.w	r1, [r3], #1
 800ff66:	e7f9      	b.n	800ff5c <memset+0x4>

0800ff68 <cos>:
 800ff68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff6a:	eeb0 7b40 	vmov.f64	d7, d0
 800ff6e:	ee17 3a90 	vmov	r3, s15
 800ff72:	4a1f      	ldr	r2, [pc, #124]	; (800fff0 <cos+0x88>)
 800ff74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	dc04      	bgt.n	800ff86 <cos+0x1e>
 800ff7c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800ffe8 <cos+0x80>
 800ff80:	f000 f9c2 	bl	8010308 <__kernel_cos>
 800ff84:	e004      	b.n	800ff90 <cos+0x28>
 800ff86:	4a1b      	ldr	r2, [pc, #108]	; (800fff4 <cos+0x8c>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	dd04      	ble.n	800ff96 <cos+0x2e>
 800ff8c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ff90:	b005      	add	sp, #20
 800ff92:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff96:	4668      	mov	r0, sp
 800ff98:	f000 f876 	bl	8010088 <__ieee754_rem_pio2>
 800ff9c:	f000 0003 	and.w	r0, r0, #3
 800ffa0:	2801      	cmp	r0, #1
 800ffa2:	d007      	beq.n	800ffb4 <cos+0x4c>
 800ffa4:	2802      	cmp	r0, #2
 800ffa6:	d00e      	beq.n	800ffc6 <cos+0x5e>
 800ffa8:	b9a0      	cbnz	r0, 800ffd4 <cos+0x6c>
 800ffaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffae:	ed9d 0b00 	vldr	d0, [sp]
 800ffb2:	e7e5      	b.n	800ff80 <cos+0x18>
 800ffb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffb8:	ed9d 0b00 	vldr	d0, [sp]
 800ffbc:	f000 fc90 	bl	80108e0 <__kernel_sin>
 800ffc0:	eeb1 0b40 	vneg.f64	d0, d0
 800ffc4:	e7e4      	b.n	800ff90 <cos+0x28>
 800ffc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffca:	ed9d 0b00 	vldr	d0, [sp]
 800ffce:	f000 f99b 	bl	8010308 <__kernel_cos>
 800ffd2:	e7f5      	b.n	800ffc0 <cos+0x58>
 800ffd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffd8:	ed9d 0b00 	vldr	d0, [sp]
 800ffdc:	2001      	movs	r0, #1
 800ffde:	f000 fc7f 	bl	80108e0 <__kernel_sin>
 800ffe2:	e7d5      	b.n	800ff90 <cos+0x28>
 800ffe4:	f3af 8000 	nop.w
	...
 800fff0:	3fe921fb 	.word	0x3fe921fb
 800fff4:	7fefffff 	.word	0x7fefffff

0800fff8 <sin>:
 800fff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fffa:	eeb0 7b40 	vmov.f64	d7, d0
 800fffe:	ee17 3a90 	vmov	r3, s15
 8010002:	4a1f      	ldr	r2, [pc, #124]	; (8010080 <sin+0x88>)
 8010004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010008:	4293      	cmp	r3, r2
 801000a:	dc05      	bgt.n	8010018 <sin+0x20>
 801000c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010078 <sin+0x80>
 8010010:	2000      	movs	r0, #0
 8010012:	f000 fc65 	bl	80108e0 <__kernel_sin>
 8010016:	e004      	b.n	8010022 <sin+0x2a>
 8010018:	4a1a      	ldr	r2, [pc, #104]	; (8010084 <sin+0x8c>)
 801001a:	4293      	cmp	r3, r2
 801001c:	dd04      	ble.n	8010028 <sin+0x30>
 801001e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010022:	b005      	add	sp, #20
 8010024:	f85d fb04 	ldr.w	pc, [sp], #4
 8010028:	4668      	mov	r0, sp
 801002a:	f000 f82d 	bl	8010088 <__ieee754_rem_pio2>
 801002e:	f000 0003 	and.w	r0, r0, #3
 8010032:	2801      	cmp	r0, #1
 8010034:	d008      	beq.n	8010048 <sin+0x50>
 8010036:	2802      	cmp	r0, #2
 8010038:	d00d      	beq.n	8010056 <sin+0x5e>
 801003a:	b9b0      	cbnz	r0, 801006a <sin+0x72>
 801003c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010040:	ed9d 0b00 	vldr	d0, [sp]
 8010044:	2001      	movs	r0, #1
 8010046:	e7e4      	b.n	8010012 <sin+0x1a>
 8010048:	ed9d 1b02 	vldr	d1, [sp, #8]
 801004c:	ed9d 0b00 	vldr	d0, [sp]
 8010050:	f000 f95a 	bl	8010308 <__kernel_cos>
 8010054:	e7e5      	b.n	8010022 <sin+0x2a>
 8010056:	ed9d 1b02 	vldr	d1, [sp, #8]
 801005a:	ed9d 0b00 	vldr	d0, [sp]
 801005e:	2001      	movs	r0, #1
 8010060:	f000 fc3e 	bl	80108e0 <__kernel_sin>
 8010064:	eeb1 0b40 	vneg.f64	d0, d0
 8010068:	e7db      	b.n	8010022 <sin+0x2a>
 801006a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801006e:	ed9d 0b00 	vldr	d0, [sp]
 8010072:	f000 f949 	bl	8010308 <__kernel_cos>
 8010076:	e7f5      	b.n	8010064 <sin+0x6c>
	...
 8010080:	3fe921fb 	.word	0x3fe921fb
 8010084:	7fefffff 	.word	0x7fefffff

08010088 <__ieee754_rem_pio2>:
 8010088:	b570      	push	{r4, r5, r6, lr}
 801008a:	eeb0 7b40 	vmov.f64	d7, d0
 801008e:	ee17 5a90 	vmov	r5, s15
 8010092:	4b97      	ldr	r3, [pc, #604]	; (80102f0 <__ieee754_rem_pio2+0x268>)
 8010094:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010098:	429e      	cmp	r6, r3
 801009a:	b088      	sub	sp, #32
 801009c:	4604      	mov	r4, r0
 801009e:	dc07      	bgt.n	80100b0 <__ieee754_rem_pio2+0x28>
 80100a0:	2200      	movs	r2, #0
 80100a2:	2300      	movs	r3, #0
 80100a4:	ed84 0b00 	vstr	d0, [r4]
 80100a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80100ac:	2000      	movs	r0, #0
 80100ae:	e01b      	b.n	80100e8 <__ieee754_rem_pio2+0x60>
 80100b0:	4b90      	ldr	r3, [pc, #576]	; (80102f4 <__ieee754_rem_pio2+0x26c>)
 80100b2:	429e      	cmp	r6, r3
 80100b4:	dc3b      	bgt.n	801012e <__ieee754_rem_pio2+0xa6>
 80100b6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80100ba:	2d00      	cmp	r5, #0
 80100bc:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80102b0 <__ieee754_rem_pio2+0x228>
 80100c0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80100c4:	dd19      	ble.n	80100fa <__ieee754_rem_pio2+0x72>
 80100c6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80100ca:	429e      	cmp	r6, r3
 80100cc:	d00e      	beq.n	80100ec <__ieee754_rem_pio2+0x64>
 80100ce:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80102b8 <__ieee754_rem_pio2+0x230>
 80100d2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80100d6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80100da:	ed84 5b00 	vstr	d5, [r4]
 80100de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80100e2:	ed84 7b02 	vstr	d7, [r4, #8]
 80100e6:	2001      	movs	r0, #1
 80100e8:	b008      	add	sp, #32
 80100ea:	bd70      	pop	{r4, r5, r6, pc}
 80100ec:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80102c0 <__ieee754_rem_pio2+0x238>
 80100f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80100f4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80102c8 <__ieee754_rem_pio2+0x240>
 80100f8:	e7eb      	b.n	80100d2 <__ieee754_rem_pio2+0x4a>
 80100fa:	429e      	cmp	r6, r3
 80100fc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010100:	d00e      	beq.n	8010120 <__ieee754_rem_pio2+0x98>
 8010102:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80102b8 <__ieee754_rem_pio2+0x230>
 8010106:	ee37 5b06 	vadd.f64	d5, d7, d6
 801010a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801010e:	ed84 5b00 	vstr	d5, [r4]
 8010112:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010116:	f04f 30ff 	mov.w	r0, #4294967295
 801011a:	ed84 7b02 	vstr	d7, [r4, #8]
 801011e:	e7e3      	b.n	80100e8 <__ieee754_rem_pio2+0x60>
 8010120:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80102c0 <__ieee754_rem_pio2+0x238>
 8010124:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010128:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80102c8 <__ieee754_rem_pio2+0x240>
 801012c:	e7eb      	b.n	8010106 <__ieee754_rem_pio2+0x7e>
 801012e:	4b72      	ldr	r3, [pc, #456]	; (80102f8 <__ieee754_rem_pio2+0x270>)
 8010130:	429e      	cmp	r6, r3
 8010132:	dc6e      	bgt.n	8010212 <__ieee754_rem_pio2+0x18a>
 8010134:	f000 fc2c 	bl	8010990 <fabs>
 8010138:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801013c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80102d0 <__ieee754_rem_pio2+0x248>
 8010140:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010144:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010148:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801014c:	ee17 0a90 	vmov	r0, s15
 8010150:	eeb1 4b45 	vneg.f64	d4, d5
 8010154:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80102b0 <__ieee754_rem_pio2+0x228>
 8010158:	eea5 0b47 	vfms.f64	d0, d5, d7
 801015c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80102b8 <__ieee754_rem_pio2+0x230>
 8010160:	281f      	cmp	r0, #31
 8010162:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010166:	ee30 6b47 	vsub.f64	d6, d0, d7
 801016a:	dc08      	bgt.n	801017e <__ieee754_rem_pio2+0xf6>
 801016c:	4b63      	ldr	r3, [pc, #396]	; (80102fc <__ieee754_rem_pio2+0x274>)
 801016e:	1e42      	subs	r2, r0, #1
 8010170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010174:	42b3      	cmp	r3, r6
 8010176:	d002      	beq.n	801017e <__ieee754_rem_pio2+0xf6>
 8010178:	ed84 6b00 	vstr	d6, [r4]
 801017c:	e024      	b.n	80101c8 <__ieee754_rem_pio2+0x140>
 801017e:	ee16 3a90 	vmov	r3, s13
 8010182:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010186:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801018a:	2b10      	cmp	r3, #16
 801018c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010190:	ddf2      	ble.n	8010178 <__ieee754_rem_pio2+0xf0>
 8010192:	eeb0 6b40 	vmov.f64	d6, d0
 8010196:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80102c0 <__ieee754_rem_pio2+0x238>
 801019a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801019e:	ee30 7b46 	vsub.f64	d7, d0, d6
 80101a2:	eea4 7b03 	vfma.f64	d7, d4, d3
 80101a6:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80102c8 <__ieee754_rem_pio2+0x240>
 80101aa:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80101ae:	ee36 3b47 	vsub.f64	d3, d6, d7
 80101b2:	ee13 3a90 	vmov	r3, s7
 80101b6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80101ba:	1ad3      	subs	r3, r2, r3
 80101bc:	2b31      	cmp	r3, #49	; 0x31
 80101be:	dc17      	bgt.n	80101f0 <__ieee754_rem_pio2+0x168>
 80101c0:	eeb0 0b46 	vmov.f64	d0, d6
 80101c4:	ed84 3b00 	vstr	d3, [r4]
 80101c8:	ed94 6b00 	vldr	d6, [r4]
 80101cc:	2d00      	cmp	r5, #0
 80101ce:	ee30 0b46 	vsub.f64	d0, d0, d6
 80101d2:	ee30 7b47 	vsub.f64	d7, d0, d7
 80101d6:	ed84 7b02 	vstr	d7, [r4, #8]
 80101da:	da85      	bge.n	80100e8 <__ieee754_rem_pio2+0x60>
 80101dc:	eeb1 6b46 	vneg.f64	d6, d6
 80101e0:	ed84 6b00 	vstr	d6, [r4]
 80101e4:	eeb1 7b47 	vneg.f64	d7, d7
 80101e8:	4240      	negs	r0, r0
 80101ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80101ee:	e77b      	b.n	80100e8 <__ieee754_rem_pio2+0x60>
 80101f0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80102d8 <__ieee754_rem_pio2+0x250>
 80101f4:	eeb0 0b46 	vmov.f64	d0, d6
 80101f8:	eea4 0b03 	vfma.f64	d0, d4, d3
 80101fc:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010200:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80102e0 <__ieee754_rem_pio2+0x258>
 8010204:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010208:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801020c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010210:	e7b2      	b.n	8010178 <__ieee754_rem_pio2+0xf0>
 8010212:	4b3b      	ldr	r3, [pc, #236]	; (8010300 <__ieee754_rem_pio2+0x278>)
 8010214:	429e      	cmp	r6, r3
 8010216:	dd06      	ble.n	8010226 <__ieee754_rem_pio2+0x19e>
 8010218:	ee30 7b40 	vsub.f64	d7, d0, d0
 801021c:	ed80 7b02 	vstr	d7, [r0, #8]
 8010220:	ed80 7b00 	vstr	d7, [r0]
 8010224:	e742      	b.n	80100ac <__ieee754_rem_pio2+0x24>
 8010226:	1532      	asrs	r2, r6, #20
 8010228:	ee10 0a10 	vmov	r0, s0
 801022c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010230:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010234:	ec41 0b17 	vmov	d7, r0, r1
 8010238:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801023c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80102e8 <__ieee754_rem_pio2+0x260>
 8010240:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010244:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010248:	ed8d 6b02 	vstr	d6, [sp, #8]
 801024c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010250:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010254:	a902      	add	r1, sp, #8
 8010256:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801025a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801025e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010262:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010266:	ed8d 7b06 	vstr	d7, [sp, #24]
 801026a:	2603      	movs	r6, #3
 801026c:	4608      	mov	r0, r1
 801026e:	ed91 7b04 	vldr	d7, [r1, #16]
 8010272:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027a:	4633      	mov	r3, r6
 801027c:	f1a1 0108 	sub.w	r1, r1, #8
 8010280:	f106 36ff 	add.w	r6, r6, #4294967295
 8010284:	d0f3      	beq.n	801026e <__ieee754_rem_pio2+0x1e6>
 8010286:	491f      	ldr	r1, [pc, #124]	; (8010304 <__ieee754_rem_pio2+0x27c>)
 8010288:	9101      	str	r1, [sp, #4]
 801028a:	2102      	movs	r1, #2
 801028c:	9100      	str	r1, [sp, #0]
 801028e:	4621      	mov	r1, r4
 8010290:	f000 f8a6 	bl	80103e0 <__kernel_rem_pio2>
 8010294:	2d00      	cmp	r5, #0
 8010296:	f6bf af27 	bge.w	80100e8 <__ieee754_rem_pio2+0x60>
 801029a:	ed94 7b00 	vldr	d7, [r4]
 801029e:	eeb1 7b47 	vneg.f64	d7, d7
 80102a2:	ed84 7b00 	vstr	d7, [r4]
 80102a6:	ed94 7b02 	vldr	d7, [r4, #8]
 80102aa:	e79b      	b.n	80101e4 <__ieee754_rem_pio2+0x15c>
 80102ac:	f3af 8000 	nop.w
 80102b0:	54400000 	.word	0x54400000
 80102b4:	3ff921fb 	.word	0x3ff921fb
 80102b8:	1a626331 	.word	0x1a626331
 80102bc:	3dd0b461 	.word	0x3dd0b461
 80102c0:	1a600000 	.word	0x1a600000
 80102c4:	3dd0b461 	.word	0x3dd0b461
 80102c8:	2e037073 	.word	0x2e037073
 80102cc:	3ba3198a 	.word	0x3ba3198a
 80102d0:	6dc9c883 	.word	0x6dc9c883
 80102d4:	3fe45f30 	.word	0x3fe45f30
 80102d8:	2e000000 	.word	0x2e000000
 80102dc:	3ba3198a 	.word	0x3ba3198a
 80102e0:	252049c1 	.word	0x252049c1
 80102e4:	397b839a 	.word	0x397b839a
 80102e8:	00000000 	.word	0x00000000
 80102ec:	41700000 	.word	0x41700000
 80102f0:	3fe921fb 	.word	0x3fe921fb
 80102f4:	4002d97b 	.word	0x4002d97b
 80102f8:	413921fb 	.word	0x413921fb
 80102fc:	08010c10 	.word	0x08010c10
 8010300:	7fefffff 	.word	0x7fefffff
 8010304:	08010c90 	.word	0x08010c90

08010308 <__kernel_cos>:
 8010308:	ee10 1a90 	vmov	r1, s1
 801030c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010310:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010314:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010318:	da05      	bge.n	8010326 <__kernel_cos+0x1e>
 801031a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801031e:	ee17 3a90 	vmov	r3, s15
 8010322:	2b00      	cmp	r3, #0
 8010324:	d03d      	beq.n	80103a2 <__kernel_cos+0x9a>
 8010326:	ee20 3b00 	vmul.f64	d3, d0, d0
 801032a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80103a8 <__kernel_cos+0xa0>
 801032e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80103b0 <__kernel_cos+0xa8>
 8010332:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010336:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80103b8 <__kernel_cos+0xb0>
 801033a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801033e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80103c0 <__kernel_cos+0xb8>
 8010342:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010346:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80103c8 <__kernel_cos+0xc0>
 801034a:	4b23      	ldr	r3, [pc, #140]	; (80103d8 <__kernel_cos+0xd0>)
 801034c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010350:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80103d0 <__kernel_cos+0xc8>
 8010354:	4299      	cmp	r1, r3
 8010356:	eea7 6b03 	vfma.f64	d6, d7, d3
 801035a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801035e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010362:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010366:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801036a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801036e:	dc04      	bgt.n	801037a <__kernel_cos+0x72>
 8010370:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010374:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010378:	4770      	bx	lr
 801037a:	4b18      	ldr	r3, [pc, #96]	; (80103dc <__kernel_cos+0xd4>)
 801037c:	4299      	cmp	r1, r3
 801037e:	dc0d      	bgt.n	801039c <__kernel_cos+0x94>
 8010380:	2200      	movs	r2, #0
 8010382:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010386:	ec43 2b15 	vmov	d5, r2, r3
 801038a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801038e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010392:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010396:	ee30 0b47 	vsub.f64	d0, d0, d7
 801039a:	4770      	bx	lr
 801039c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80103a0:	e7f3      	b.n	801038a <__kernel_cos+0x82>
 80103a2:	eeb0 0b44 	vmov.f64	d0, d4
 80103a6:	4770      	bx	lr
 80103a8:	be8838d4 	.word	0xbe8838d4
 80103ac:	bda8fae9 	.word	0xbda8fae9
 80103b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80103b4:	3e21ee9e 	.word	0x3e21ee9e
 80103b8:	809c52ad 	.word	0x809c52ad
 80103bc:	be927e4f 	.word	0xbe927e4f
 80103c0:	19cb1590 	.word	0x19cb1590
 80103c4:	3efa01a0 	.word	0x3efa01a0
 80103c8:	16c15177 	.word	0x16c15177
 80103cc:	bf56c16c 	.word	0xbf56c16c
 80103d0:	5555554c 	.word	0x5555554c
 80103d4:	3fa55555 	.word	0x3fa55555
 80103d8:	3fd33332 	.word	0x3fd33332
 80103dc:	3fe90000 	.word	0x3fe90000

080103e0 <__kernel_rem_pio2>:
 80103e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e4:	ed2d 8b06 	vpush	{d8-d10}
 80103e8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80103ec:	469b      	mov	fp, r3
 80103ee:	460f      	mov	r7, r1
 80103f0:	4bcf      	ldr	r3, [pc, #828]	; (8010730 <__kernel_rem_pio2+0x350>)
 80103f2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80103f4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80103f8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80103fc:	9000      	str	r0, [sp, #0]
 80103fe:	f112 0f14 	cmn.w	r2, #20
 8010402:	bfa8      	it	ge
 8010404:	2318      	movge	r3, #24
 8010406:	f10b 31ff 	add.w	r1, fp, #4294967295
 801040a:	bfb8      	it	lt
 801040c:	2300      	movlt	r3, #0
 801040e:	f06f 0417 	mvn.w	r4, #23
 8010412:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010718 <__kernel_rem_pio2+0x338>
 8010416:	bfa4      	itt	ge
 8010418:	f1a2 0a03 	subge.w	sl, r2, #3
 801041c:	fb9a f3f3 	sdivge	r3, sl, r3
 8010420:	fb03 4404 	mla	r4, r3, r4, r4
 8010424:	1a5d      	subs	r5, r3, r1
 8010426:	4414      	add	r4, r2
 8010428:	eb09 0601 	add.w	r6, r9, r1
 801042c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8010430:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8010434:	2200      	movs	r2, #0
 8010436:	42b2      	cmp	r2, r6
 8010438:	dd12      	ble.n	8010460 <__kernel_rem_pio2+0x80>
 801043a:	aa18      	add	r2, sp, #96	; 0x60
 801043c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010440:	460e      	mov	r6, r1
 8010442:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8010446:	f1cb 0a01 	rsb	sl, fp, #1
 801044a:	eb0a 0006 	add.w	r0, sl, r6
 801044e:	4581      	cmp	r9, r0
 8010450:	db25      	blt.n	801049e <__kernel_rem_pio2+0xbe>
 8010452:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010718 <__kernel_rem_pio2+0x338>
 8010456:	f8dd e000 	ldr.w	lr, [sp]
 801045a:	4615      	mov	r5, r2
 801045c:	2000      	movs	r0, #0
 801045e:	e015      	b.n	801048c <__kernel_rem_pio2+0xac>
 8010460:	42d5      	cmn	r5, r2
 8010462:	d409      	bmi.n	8010478 <__kernel_rem_pio2+0x98>
 8010464:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010468:	ee07 0a90 	vmov	s15, r0
 801046c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010470:	eca8 7b02 	vstmia	r8!, {d7}
 8010474:	3201      	adds	r2, #1
 8010476:	e7de      	b.n	8010436 <__kernel_rem_pio2+0x56>
 8010478:	eeb0 7b46 	vmov.f64	d7, d6
 801047c:	e7f8      	b.n	8010470 <__kernel_rem_pio2+0x90>
 801047e:	ecbe 5b02 	vldmia	lr!, {d5}
 8010482:	ed95 6b00 	vldr	d6, [r5]
 8010486:	3001      	adds	r0, #1
 8010488:	eea5 7b06 	vfma.f64	d7, d5, d6
 801048c:	4288      	cmp	r0, r1
 801048e:	f1a5 0508 	sub.w	r5, r5, #8
 8010492:	ddf4      	ble.n	801047e <__kernel_rem_pio2+0x9e>
 8010494:	eca8 7b02 	vstmia	r8!, {d7}
 8010498:	3208      	adds	r2, #8
 801049a:	3601      	adds	r6, #1
 801049c:	e7d5      	b.n	801044a <__kernel_rem_pio2+0x6a>
 801049e:	aa04      	add	r2, sp, #16
 80104a0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010720 <__kernel_rem_pio2+0x340>
 80104a4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010728 <__kernel_rem_pio2+0x348>
 80104a8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80104ac:	9201      	str	r2, [sp, #4]
 80104ae:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80104b2:	464e      	mov	r6, r9
 80104b4:	ab90      	add	r3, sp, #576	; 0x240
 80104b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80104ba:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80104be:	ab04      	add	r3, sp, #16
 80104c0:	4618      	mov	r0, r3
 80104c2:	4632      	mov	r2, r6
 80104c4:	2a00      	cmp	r2, #0
 80104c6:	dc4e      	bgt.n	8010566 <__kernel_rem_pio2+0x186>
 80104c8:	4620      	mov	r0, r4
 80104ca:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80104ce:	f000 fadf 	bl	8010a90 <scalbn>
 80104d2:	eeb0 8b40 	vmov.f64	d8, d0
 80104d6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80104da:	ee28 0b00 	vmul.f64	d0, d8, d0
 80104de:	f000 fa63 	bl	80109a8 <floor>
 80104e2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80104e6:	eea0 8b47 	vfms.f64	d8, d0, d7
 80104ea:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80104ee:	2c00      	cmp	r4, #0
 80104f0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80104f4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80104f8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80104fc:	ee17 8a90 	vmov	r8, s15
 8010500:	dd46      	ble.n	8010590 <__kernel_rem_pio2+0x1b0>
 8010502:	1e70      	subs	r0, r6, #1
 8010504:	aa04      	add	r2, sp, #16
 8010506:	f1c4 0c18 	rsb	ip, r4, #24
 801050a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 801050e:	fa45 f20c 	asr.w	r2, r5, ip
 8010512:	4490      	add	r8, r2
 8010514:	fa02 f20c 	lsl.w	r2, r2, ip
 8010518:	1aad      	subs	r5, r5, r2
 801051a:	aa04      	add	r2, sp, #16
 801051c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010520:	f1c4 0217 	rsb	r2, r4, #23
 8010524:	4115      	asrs	r5, r2
 8010526:	2d00      	cmp	r5, #0
 8010528:	dd41      	ble.n	80105ae <__kernel_rem_pio2+0x1ce>
 801052a:	f04f 0c00 	mov.w	ip, #0
 801052e:	f108 0801 	add.w	r8, r8, #1
 8010532:	4660      	mov	r0, ip
 8010534:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010538:	4566      	cmp	r6, ip
 801053a:	dc69      	bgt.n	8010610 <__kernel_rem_pio2+0x230>
 801053c:	2c00      	cmp	r4, #0
 801053e:	dd03      	ble.n	8010548 <__kernel_rem_pio2+0x168>
 8010540:	2c01      	cmp	r4, #1
 8010542:	d076      	beq.n	8010632 <__kernel_rem_pio2+0x252>
 8010544:	2c02      	cmp	r4, #2
 8010546:	d07f      	beq.n	8010648 <__kernel_rem_pio2+0x268>
 8010548:	2d02      	cmp	r5, #2
 801054a:	d130      	bne.n	80105ae <__kernel_rem_pio2+0x1ce>
 801054c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010550:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010554:	b358      	cbz	r0, 80105ae <__kernel_rem_pio2+0x1ce>
 8010556:	4620      	mov	r0, r4
 8010558:	9102      	str	r1, [sp, #8]
 801055a:	f000 fa99 	bl	8010a90 <scalbn>
 801055e:	9902      	ldr	r1, [sp, #8]
 8010560:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010564:	e023      	b.n	80105ae <__kernel_rem_pio2+0x1ce>
 8010566:	ee20 7b09 	vmul.f64	d7, d0, d9
 801056a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801056e:	3a01      	subs	r2, #1
 8010570:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010574:	ad68      	add	r5, sp, #416	; 0x1a0
 8010576:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801057a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801057e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010582:	eca0 0a01 	vstmia	r0!, {s0}
 8010586:	ed95 0b00 	vldr	d0, [r5]
 801058a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801058e:	e799      	b.n	80104c4 <__kernel_rem_pio2+0xe4>
 8010590:	d105      	bne.n	801059e <__kernel_rem_pio2+0x1be>
 8010592:	1e72      	subs	r2, r6, #1
 8010594:	a804      	add	r0, sp, #16
 8010596:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 801059a:	15ed      	asrs	r5, r5, #23
 801059c:	e7c3      	b.n	8010526 <__kernel_rem_pio2+0x146>
 801059e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80105a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80105a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105aa:	da2f      	bge.n	801060c <__kernel_rem_pio2+0x22c>
 80105ac:	2500      	movs	r5, #0
 80105ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80105b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b6:	f040 8087 	bne.w	80106c8 <__kernel_rem_pio2+0x2e8>
 80105ba:	1e73      	subs	r3, r6, #1
 80105bc:	4618      	mov	r0, r3
 80105be:	f04f 0c00 	mov.w	ip, #0
 80105c2:	4548      	cmp	r0, r9
 80105c4:	da47      	bge.n	8010656 <__kernel_rem_pio2+0x276>
 80105c6:	f1bc 0f00 	cmp.w	ip, #0
 80105ca:	d070      	beq.n	80106ae <__kernel_rem_pio2+0x2ce>
 80105cc:	aa04      	add	r2, sp, #16
 80105ce:	3c18      	subs	r4, #24
 80105d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80105d4:	2a00      	cmp	r2, #0
 80105d6:	d075      	beq.n	80106c4 <__kernel_rem_pio2+0x2e4>
 80105d8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80105dc:	4620      	mov	r0, r4
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	f000 fa56 	bl	8010a90 <scalbn>
 80105e4:	9b00      	ldr	r3, [sp, #0]
 80105e6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010720 <__kernel_rem_pio2+0x340>
 80105ea:	461a      	mov	r2, r3
 80105ec:	2a00      	cmp	r2, #0
 80105ee:	f280 80ac 	bge.w	801074a <__kernel_rem_pio2+0x36a>
 80105f2:	4619      	mov	r1, r3
 80105f4:	2000      	movs	r0, #0
 80105f6:	2900      	cmp	r1, #0
 80105f8:	f2c0 80cd 	blt.w	8010796 <__kernel_rem_pio2+0x3b6>
 80105fc:	aa68      	add	r2, sp, #416	; 0x1a0
 80105fe:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010602:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010718 <__kernel_rem_pio2+0x338>
 8010606:	4e4b      	ldr	r6, [pc, #300]	; (8010734 <__kernel_rem_pio2+0x354>)
 8010608:	2200      	movs	r2, #0
 801060a:	e0b8      	b.n	801077e <__kernel_rem_pio2+0x39e>
 801060c:	2502      	movs	r5, #2
 801060e:	e78c      	b.n	801052a <__kernel_rem_pio2+0x14a>
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	b948      	cbnz	r0, 8010628 <__kernel_rem_pio2+0x248>
 8010614:	b11a      	cbz	r2, 801061e <__kernel_rem_pio2+0x23e>
 8010616:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801061a:	601a      	str	r2, [r3, #0]
 801061c:	2201      	movs	r2, #1
 801061e:	f10c 0c01 	add.w	ip, ip, #1
 8010622:	3304      	adds	r3, #4
 8010624:	4610      	mov	r0, r2
 8010626:	e787      	b.n	8010538 <__kernel_rem_pio2+0x158>
 8010628:	ebae 0202 	sub.w	r2, lr, r2
 801062c:	601a      	str	r2, [r3, #0]
 801062e:	4602      	mov	r2, r0
 8010630:	e7f5      	b.n	801061e <__kernel_rem_pio2+0x23e>
 8010632:	1e72      	subs	r2, r6, #1
 8010634:	ab04      	add	r3, sp, #16
 8010636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801063a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801063e:	f10d 0c10 	add.w	ip, sp, #16
 8010642:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010646:	e77f      	b.n	8010548 <__kernel_rem_pio2+0x168>
 8010648:	1e72      	subs	r2, r6, #1
 801064a:	ab04      	add	r3, sp, #16
 801064c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010650:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010654:	e7f3      	b.n	801063e <__kernel_rem_pio2+0x25e>
 8010656:	aa04      	add	r2, sp, #16
 8010658:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801065c:	3801      	subs	r0, #1
 801065e:	ea4c 0c02 	orr.w	ip, ip, r2
 8010662:	e7ae      	b.n	80105c2 <__kernel_rem_pio2+0x1e2>
 8010664:	3001      	adds	r0, #1
 8010666:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801066a:	2a00      	cmp	r2, #0
 801066c:	d0fa      	beq.n	8010664 <__kernel_rem_pio2+0x284>
 801066e:	eb06 020b 	add.w	r2, r6, fp
 8010672:	ad18      	add	r5, sp, #96	; 0x60
 8010674:	1c73      	adds	r3, r6, #1
 8010676:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801067a:	4406      	add	r6, r0
 801067c:	429e      	cmp	r6, r3
 801067e:	f6ff af19 	blt.w	80104b4 <__kernel_rem_pio2+0xd4>
 8010682:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010686:	9d00      	ldr	r5, [sp, #0]
 8010688:	ee07 0a90 	vmov	s15, r0
 801068c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010690:	2000      	movs	r0, #0
 8010692:	eca2 7b02 	vstmia	r2!, {d7}
 8010696:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010718 <__kernel_rem_pio2+0x338>
 801069a:	4694      	mov	ip, r2
 801069c:	4288      	cmp	r0, r1
 801069e:	dd09      	ble.n	80106b4 <__kernel_rem_pio2+0x2d4>
 80106a0:	a868      	add	r0, sp, #416	; 0x1a0
 80106a2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80106a6:	ed80 7b00 	vstr	d7, [r0]
 80106aa:	3301      	adds	r3, #1
 80106ac:	e7e6      	b.n	801067c <__kernel_rem_pio2+0x29c>
 80106ae:	9b01      	ldr	r3, [sp, #4]
 80106b0:	2001      	movs	r0, #1
 80106b2:	e7d8      	b.n	8010666 <__kernel_rem_pio2+0x286>
 80106b4:	ecb5 5b02 	vldmia	r5!, {d5}
 80106b8:	ed3c 6b02 	vldmdb	ip!, {d6}
 80106bc:	3001      	adds	r0, #1
 80106be:	eea5 7b06 	vfma.f64	d7, d5, d6
 80106c2:	e7eb      	b.n	801069c <__kernel_rem_pio2+0x2bc>
 80106c4:	3b01      	subs	r3, #1
 80106c6:	e781      	b.n	80105cc <__kernel_rem_pio2+0x1ec>
 80106c8:	4260      	negs	r0, r4
 80106ca:	eeb0 0b48 	vmov.f64	d0, d8
 80106ce:	f000 f9df 	bl	8010a90 <scalbn>
 80106d2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010728 <__kernel_rem_pio2+0x348>
 80106d6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80106da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106de:	db2b      	blt.n	8010738 <__kernel_rem_pio2+0x358>
 80106e0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010720 <__kernel_rem_pio2+0x340>
 80106e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80106e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80106ec:	aa04      	add	r2, sp, #16
 80106ee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80106f2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80106f6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80106fa:	a904      	add	r1, sp, #16
 80106fc:	ee10 3a10 	vmov	r3, s0
 8010700:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010704:	ee17 2a10 	vmov	r2, s14
 8010708:	1c73      	adds	r3, r6, #1
 801070a:	3418      	adds	r4, #24
 801070c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010710:	e762      	b.n	80105d8 <__kernel_rem_pio2+0x1f8>
 8010712:	bf00      	nop
 8010714:	f3af 8000 	nop.w
	...
 8010724:	3e700000 	.word	0x3e700000
 8010728:	00000000 	.word	0x00000000
 801072c:	41700000 	.word	0x41700000
 8010730:	08010dd8 	.word	0x08010dd8
 8010734:	08010d98 	.word	0x08010d98
 8010738:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801073c:	aa04      	add	r2, sp, #16
 801073e:	ee10 3a10 	vmov	r3, s0
 8010742:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010746:	4633      	mov	r3, r6
 8010748:	e746      	b.n	80105d8 <__kernel_rem_pio2+0x1f8>
 801074a:	a804      	add	r0, sp, #16
 801074c:	a968      	add	r1, sp, #416	; 0x1a0
 801074e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010752:	9000      	str	r0, [sp, #0]
 8010754:	ee07 0a90 	vmov	s15, r0
 8010758:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801075c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010760:	3a01      	subs	r2, #1
 8010762:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010766:	ee20 0b06 	vmul.f64	d0, d0, d6
 801076a:	ed81 7b00 	vstr	d7, [r1]
 801076e:	e73d      	b.n	80105ec <__kernel_rem_pio2+0x20c>
 8010770:	ecb6 5b02 	vldmia	r6!, {d5}
 8010774:	ecb4 6b02 	vldmia	r4!, {d6}
 8010778:	3201      	adds	r2, #1
 801077a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801077e:	454a      	cmp	r2, r9
 8010780:	dc01      	bgt.n	8010786 <__kernel_rem_pio2+0x3a6>
 8010782:	4290      	cmp	r0, r2
 8010784:	daf4      	bge.n	8010770 <__kernel_rem_pio2+0x390>
 8010786:	aa40      	add	r2, sp, #256	; 0x100
 8010788:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801078c:	ed82 7b00 	vstr	d7, [r2]
 8010790:	3901      	subs	r1, #1
 8010792:	3001      	adds	r0, #1
 8010794:	e72f      	b.n	80105f6 <__kernel_rem_pio2+0x216>
 8010796:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010798:	2a02      	cmp	r2, #2
 801079a:	dc0a      	bgt.n	80107b2 <__kernel_rem_pio2+0x3d2>
 801079c:	2a00      	cmp	r2, #0
 801079e:	dc5a      	bgt.n	8010856 <__kernel_rem_pio2+0x476>
 80107a0:	d039      	beq.n	8010816 <__kernel_rem_pio2+0x436>
 80107a2:	f008 0007 	and.w	r0, r8, #7
 80107a6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80107aa:	ecbd 8b06 	vpop	{d8-d10}
 80107ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80107b4:	2a03      	cmp	r2, #3
 80107b6:	d1f4      	bne.n	80107a2 <__kernel_rem_pio2+0x3c2>
 80107b8:	aa40      	add	r2, sp, #256	; 0x100
 80107ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80107be:	4611      	mov	r1, r2
 80107c0:	4618      	mov	r0, r3
 80107c2:	2800      	cmp	r0, #0
 80107c4:	f1a1 0108 	sub.w	r1, r1, #8
 80107c8:	dc52      	bgt.n	8010870 <__kernel_rem_pio2+0x490>
 80107ca:	4619      	mov	r1, r3
 80107cc:	2901      	cmp	r1, #1
 80107ce:	f1a2 0208 	sub.w	r2, r2, #8
 80107d2:	dc5d      	bgt.n	8010890 <__kernel_rem_pio2+0x4b0>
 80107d4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80108d8 <__kernel_rem_pio2+0x4f8>
 80107d8:	2b01      	cmp	r3, #1
 80107da:	dc69      	bgt.n	80108b0 <__kernel_rem_pio2+0x4d0>
 80107dc:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80107e0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80107e4:	2d00      	cmp	r5, #0
 80107e6:	d16c      	bne.n	80108c2 <__kernel_rem_pio2+0x4e2>
 80107e8:	ed87 5b00 	vstr	d5, [r7]
 80107ec:	ed87 6b02 	vstr	d6, [r7, #8]
 80107f0:	ed87 7b04 	vstr	d7, [r7, #16]
 80107f4:	e7d5      	b.n	80107a2 <__kernel_rem_pio2+0x3c2>
 80107f6:	aa40      	add	r2, sp, #256	; 0x100
 80107f8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80107fc:	ed92 6b00 	vldr	d6, [r2]
 8010800:	3b01      	subs	r3, #1
 8010802:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010806:	2b00      	cmp	r3, #0
 8010808:	daf5      	bge.n	80107f6 <__kernel_rem_pio2+0x416>
 801080a:	b10d      	cbz	r5, 8010810 <__kernel_rem_pio2+0x430>
 801080c:	eeb1 7b47 	vneg.f64	d7, d7
 8010810:	ed87 7b00 	vstr	d7, [r7]
 8010814:	e7c5      	b.n	80107a2 <__kernel_rem_pio2+0x3c2>
 8010816:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80108d8 <__kernel_rem_pio2+0x4f8>
 801081a:	e7f4      	b.n	8010806 <__kernel_rem_pio2+0x426>
 801081c:	a940      	add	r1, sp, #256	; 0x100
 801081e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010822:	ed91 7b00 	vldr	d7, [r1]
 8010826:	3a01      	subs	r2, #1
 8010828:	ee36 6b07 	vadd.f64	d6, d6, d7
 801082c:	2a00      	cmp	r2, #0
 801082e:	daf5      	bge.n	801081c <__kernel_rem_pio2+0x43c>
 8010830:	b1ad      	cbz	r5, 801085e <__kernel_rem_pio2+0x47e>
 8010832:	eeb1 7b46 	vneg.f64	d7, d6
 8010836:	ed87 7b00 	vstr	d7, [r7]
 801083a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 801083e:	a942      	add	r1, sp, #264	; 0x108
 8010840:	2201      	movs	r2, #1
 8010842:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010846:	4293      	cmp	r3, r2
 8010848:	da0c      	bge.n	8010864 <__kernel_rem_pio2+0x484>
 801084a:	b10d      	cbz	r5, 8010850 <__kernel_rem_pio2+0x470>
 801084c:	eeb1 7b47 	vneg.f64	d7, d7
 8010850:	ed87 7b02 	vstr	d7, [r7, #8]
 8010854:	e7a5      	b.n	80107a2 <__kernel_rem_pio2+0x3c2>
 8010856:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80108d8 <__kernel_rem_pio2+0x4f8>
 801085a:	461a      	mov	r2, r3
 801085c:	e7e6      	b.n	801082c <__kernel_rem_pio2+0x44c>
 801085e:	eeb0 7b46 	vmov.f64	d7, d6
 8010862:	e7e8      	b.n	8010836 <__kernel_rem_pio2+0x456>
 8010864:	ecb1 6b02 	vldmia	r1!, {d6}
 8010868:	3201      	adds	r2, #1
 801086a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801086e:	e7ea      	b.n	8010846 <__kernel_rem_pio2+0x466>
 8010870:	ed91 7b00 	vldr	d7, [r1]
 8010874:	ed91 5b02 	vldr	d5, [r1, #8]
 8010878:	3801      	subs	r0, #1
 801087a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801087e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010882:	ed81 6b00 	vstr	d6, [r1]
 8010886:	ee37 7b05 	vadd.f64	d7, d7, d5
 801088a:	ed81 7b02 	vstr	d7, [r1, #8]
 801088e:	e798      	b.n	80107c2 <__kernel_rem_pio2+0x3e2>
 8010890:	ed92 7b00 	vldr	d7, [r2]
 8010894:	ed92 5b02 	vldr	d5, [r2, #8]
 8010898:	3901      	subs	r1, #1
 801089a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801089e:	ee37 7b46 	vsub.f64	d7, d7, d6
 80108a2:	ed82 6b00 	vstr	d6, [r2]
 80108a6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80108aa:	ed82 7b02 	vstr	d7, [r2, #8]
 80108ae:	e78d      	b.n	80107cc <__kernel_rem_pio2+0x3ec>
 80108b0:	aa40      	add	r2, sp, #256	; 0x100
 80108b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80108b6:	ed92 6b00 	vldr	d6, [r2]
 80108ba:	3b01      	subs	r3, #1
 80108bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80108c0:	e78a      	b.n	80107d8 <__kernel_rem_pio2+0x3f8>
 80108c2:	eeb1 5b45 	vneg.f64	d5, d5
 80108c6:	eeb1 6b46 	vneg.f64	d6, d6
 80108ca:	ed87 5b00 	vstr	d5, [r7]
 80108ce:	eeb1 7b47 	vneg.f64	d7, d7
 80108d2:	ed87 6b02 	vstr	d6, [r7, #8]
 80108d6:	e78b      	b.n	80107f0 <__kernel_rem_pio2+0x410>
	...

080108e0 <__kernel_sin>:
 80108e0:	ee10 3a90 	vmov	r3, s1
 80108e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80108e8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80108ec:	da04      	bge.n	80108f8 <__kernel_sin+0x18>
 80108ee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80108f2:	ee17 3a90 	vmov	r3, s15
 80108f6:	b35b      	cbz	r3, 8010950 <__kernel_sin+0x70>
 80108f8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80108fc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010900:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010958 <__kernel_sin+0x78>
 8010904:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010960 <__kernel_sin+0x80>
 8010908:	eea6 4b07 	vfma.f64	d4, d6, d7
 801090c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010968 <__kernel_sin+0x88>
 8010910:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010914:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010970 <__kernel_sin+0x90>
 8010918:	eea7 4b06 	vfma.f64	d4, d7, d6
 801091c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010978 <__kernel_sin+0x98>
 8010920:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010924:	b930      	cbnz	r0, 8010934 <__kernel_sin+0x54>
 8010926:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010980 <__kernel_sin+0xa0>
 801092a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801092e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010932:	4770      	bx	lr
 8010934:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010938:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801093c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010940:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010944:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010988 <__kernel_sin+0xa8>
 8010948:	eea5 1b07 	vfma.f64	d1, d5, d7
 801094c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	f3af 8000 	nop.w
 8010958:	5acfd57c 	.word	0x5acfd57c
 801095c:	3de5d93a 	.word	0x3de5d93a
 8010960:	8a2b9ceb 	.word	0x8a2b9ceb
 8010964:	be5ae5e6 	.word	0xbe5ae5e6
 8010968:	57b1fe7d 	.word	0x57b1fe7d
 801096c:	3ec71de3 	.word	0x3ec71de3
 8010970:	19c161d5 	.word	0x19c161d5
 8010974:	bf2a01a0 	.word	0xbf2a01a0
 8010978:	1110f8a6 	.word	0x1110f8a6
 801097c:	3f811111 	.word	0x3f811111
 8010980:	55555549 	.word	0x55555549
 8010984:	bfc55555 	.word	0xbfc55555
 8010988:	55555549 	.word	0x55555549
 801098c:	3fc55555 	.word	0x3fc55555

08010990 <fabs>:
 8010990:	ec51 0b10 	vmov	r0, r1, d0
 8010994:	ee10 2a10 	vmov	r2, s0
 8010998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801099c:	ec43 2b10 	vmov	d0, r2, r3
 80109a0:	4770      	bx	lr
 80109a2:	0000      	movs	r0, r0
 80109a4:	0000      	movs	r0, r0
	...

080109a8 <floor>:
 80109a8:	ee10 1a90 	vmov	r1, s1
 80109ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80109b0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80109b4:	2b13      	cmp	r3, #19
 80109b6:	b530      	push	{r4, r5, lr}
 80109b8:	ee10 0a10 	vmov	r0, s0
 80109bc:	ee10 5a10 	vmov	r5, s0
 80109c0:	dc31      	bgt.n	8010a26 <floor+0x7e>
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	da15      	bge.n	80109f2 <floor+0x4a>
 80109c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010a80 <floor+0xd8>
 80109ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80109ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80109d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d6:	dd07      	ble.n	80109e8 <floor+0x40>
 80109d8:	2900      	cmp	r1, #0
 80109da:	da4e      	bge.n	8010a7a <floor+0xd2>
 80109dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80109e0:	4318      	orrs	r0, r3
 80109e2:	d001      	beq.n	80109e8 <floor+0x40>
 80109e4:	4928      	ldr	r1, [pc, #160]	; (8010a88 <floor+0xe0>)
 80109e6:	2000      	movs	r0, #0
 80109e8:	460b      	mov	r3, r1
 80109ea:	4602      	mov	r2, r0
 80109ec:	ec43 2b10 	vmov	d0, r2, r3
 80109f0:	e020      	b.n	8010a34 <floor+0x8c>
 80109f2:	4a26      	ldr	r2, [pc, #152]	; (8010a8c <floor+0xe4>)
 80109f4:	411a      	asrs	r2, r3
 80109f6:	ea01 0402 	and.w	r4, r1, r2
 80109fa:	4304      	orrs	r4, r0
 80109fc:	d01a      	beq.n	8010a34 <floor+0x8c>
 80109fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010a80 <floor+0xd8>
 8010a02:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010a06:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a0e:	ddeb      	ble.n	80109e8 <floor+0x40>
 8010a10:	2900      	cmp	r1, #0
 8010a12:	bfbe      	ittt	lt
 8010a14:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8010a18:	fa40 f303 	asrlt.w	r3, r0, r3
 8010a1c:	18c9      	addlt	r1, r1, r3
 8010a1e:	ea21 0102 	bic.w	r1, r1, r2
 8010a22:	2000      	movs	r0, #0
 8010a24:	e7e0      	b.n	80109e8 <floor+0x40>
 8010a26:	2b33      	cmp	r3, #51	; 0x33
 8010a28:	dd05      	ble.n	8010a36 <floor+0x8e>
 8010a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a2e:	d101      	bne.n	8010a34 <floor+0x8c>
 8010a30:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010a34:	bd30      	pop	{r4, r5, pc}
 8010a36:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8010a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a3e:	40e2      	lsrs	r2, r4
 8010a40:	4202      	tst	r2, r0
 8010a42:	d0f7      	beq.n	8010a34 <floor+0x8c>
 8010a44:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010a80 <floor+0xd8>
 8010a48:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010a4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a54:	ddc8      	ble.n	80109e8 <floor+0x40>
 8010a56:	2900      	cmp	r1, #0
 8010a58:	da02      	bge.n	8010a60 <floor+0xb8>
 8010a5a:	2b14      	cmp	r3, #20
 8010a5c:	d103      	bne.n	8010a66 <floor+0xbe>
 8010a5e:	3101      	adds	r1, #1
 8010a60:	ea20 0002 	bic.w	r0, r0, r2
 8010a64:	e7c0      	b.n	80109e8 <floor+0x40>
 8010a66:	2401      	movs	r4, #1
 8010a68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010a6c:	fa04 f303 	lsl.w	r3, r4, r3
 8010a70:	4418      	add	r0, r3
 8010a72:	42a8      	cmp	r0, r5
 8010a74:	bf38      	it	cc
 8010a76:	1909      	addcc	r1, r1, r4
 8010a78:	e7f2      	b.n	8010a60 <floor+0xb8>
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	4601      	mov	r1, r0
 8010a7e:	e7b3      	b.n	80109e8 <floor+0x40>
 8010a80:	8800759c 	.word	0x8800759c
 8010a84:	7e37e43c 	.word	0x7e37e43c
 8010a88:	bff00000 	.word	0xbff00000
 8010a8c:	000fffff 	.word	0x000fffff

08010a90 <scalbn>:
 8010a90:	b082      	sub	sp, #8
 8010a92:	ed8d 0b00 	vstr	d0, [sp]
 8010a96:	9b01      	ldr	r3, [sp, #4]
 8010a98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010a9c:	b9a2      	cbnz	r2, 8010ac8 <scalbn+0x38>
 8010a9e:	9a00      	ldr	r2, [sp, #0]
 8010aa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	d03a      	beq.n	8010b1e <scalbn+0x8e>
 8010aa8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8010b80 <scalbn+0xf0>
 8010aac:	4b40      	ldr	r3, [pc, #256]	; (8010bb0 <scalbn+0x120>)
 8010aae:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010ab2:	4298      	cmp	r0, r3
 8010ab4:	ed8d 7b00 	vstr	d7, [sp]
 8010ab8:	da11      	bge.n	8010ade <scalbn+0x4e>
 8010aba:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8010b88 <scalbn+0xf8>
 8010abe:	ed9d 6b00 	vldr	d6, [sp]
 8010ac2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ac6:	e007      	b.n	8010ad8 <scalbn+0x48>
 8010ac8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010acc:	428a      	cmp	r2, r1
 8010ace:	d10a      	bne.n	8010ae6 <scalbn+0x56>
 8010ad0:	ed9d 7b00 	vldr	d7, [sp]
 8010ad4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010ad8:	ed8d 7b00 	vstr	d7, [sp]
 8010adc:	e01f      	b.n	8010b1e <scalbn+0x8e>
 8010ade:	9b01      	ldr	r3, [sp, #4]
 8010ae0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010ae4:	3a36      	subs	r2, #54	; 0x36
 8010ae6:	4402      	add	r2, r0
 8010ae8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010aec:	428a      	cmp	r2, r1
 8010aee:	dd0a      	ble.n	8010b06 <scalbn+0x76>
 8010af0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8010b90 <scalbn+0x100>
 8010af4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8010b98 <scalbn+0x108>
 8010af8:	eeb0 6b47 	vmov.f64	d6, d7
 8010afc:	9b01      	ldr	r3, [sp, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	fe27 7b05 	vselge.f64	d7, d7, d5
 8010b04:	e7dd      	b.n	8010ac2 <scalbn+0x32>
 8010b06:	2a00      	cmp	r2, #0
 8010b08:	dd0d      	ble.n	8010b26 <scalbn+0x96>
 8010b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010b12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010b16:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8010b1e:	ed9d 0b00 	vldr	d0, [sp]
 8010b22:	b002      	add	sp, #8
 8010b24:	4770      	bx	lr
 8010b26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010b2a:	da18      	bge.n	8010b5e <scalbn+0xce>
 8010b2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010b30:	4298      	cmp	r0, r3
 8010b32:	9b01      	ldr	r3, [sp, #4]
 8010b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010b38:	dd09      	ble.n	8010b4e <scalbn+0xbe>
 8010b3a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010b90 <scalbn+0x100>
 8010b3e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8010b98 <scalbn+0x108>
 8010b42:	eeb0 6b47 	vmov.f64	d6, d7
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8010b4c:	e7b9      	b.n	8010ac2 <scalbn+0x32>
 8010b4e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010b88 <scalbn+0xf8>
 8010b52:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8010ba0 <scalbn+0x110>
 8010b56:	eeb0 6b47 	vmov.f64	d6, d7
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	e7f4      	b.n	8010b48 <scalbn+0xb8>
 8010b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010b66:	3236      	adds	r2, #54	; 0x36
 8010b68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010b6c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010b70:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8010ba8 <scalbn+0x118>
 8010b74:	ec41 0b17 	vmov	d7, r0, r1
 8010b78:	e7a3      	b.n	8010ac2 <scalbn+0x32>
 8010b7a:	bf00      	nop
 8010b7c:	f3af 8000 	nop.w
 8010b80:	00000000 	.word	0x00000000
 8010b84:	43500000 	.word	0x43500000
 8010b88:	c2f8f359 	.word	0xc2f8f359
 8010b8c:	01a56e1f 	.word	0x01a56e1f
 8010b90:	8800759c 	.word	0x8800759c
 8010b94:	7e37e43c 	.word	0x7e37e43c
 8010b98:	8800759c 	.word	0x8800759c
 8010b9c:	fe37e43c 	.word	0xfe37e43c
 8010ba0:	c2f8f359 	.word	0xc2f8f359
 8010ba4:	81a56e1f 	.word	0x81a56e1f
 8010ba8:	00000000 	.word	0x00000000
 8010bac:	3c900000 	.word	0x3c900000
 8010bb0:	ffff3cb0 	.word	0xffff3cb0

08010bb4 <_init>:
 8010bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bb6:	bf00      	nop
 8010bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bba:	bc08      	pop	{r3}
 8010bbc:	469e      	mov	lr, r3
 8010bbe:	4770      	bx	lr

08010bc0 <_fini>:
 8010bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc2:	bf00      	nop
 8010bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bc6:	bc08      	pop	{r3}
 8010bc8:	469e      	mov	lr, r3
 8010bca:	4770      	bx	lr
